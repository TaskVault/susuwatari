/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export type BaggageSlotStruct = {
  susuTokenId: PromiseOrValue<BigNumberish>;
  dropCooldownTime: PromiseOrValue<BigNumberish>;
  ownerAddress: PromiseOrValue<string>;
};

export type BaggageSlotStructOutput = [BigNumber, BigNumber, string] & {
  susuTokenId: BigNumber;
  dropCooldownTime: BigNumber;
  ownerAddress: string;
};

export type UserStateStruct = {
  ownedTokens: PromiseOrValue<BigNumberish>[];
  slot: BaggageSlotStruct;
};

export type UserStateStructOutput = [BigNumber[], BaggageSlotStructOutput] & {
  ownedTokens: BigNumber[];
  slot: BaggageSlotStructOutput;
};

export interface SusuwatariFacetInterface extends utils.Interface {
  functions: {
    "aimInitialSusu(uint256,string,string,string)": FunctionFragment;
    "dropSusu(uint256,string)": FunctionFragment;
    "getCurrentState()": FunctionFragment;
    "giveSusuwatari()": FunctionFragment;
    "registerMe()": FunctionFragment;
    "tryPickupSusu(uint256,string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "aimInitialSusu"
      | "dropSusu"
      | "getCurrentState"
      | "giveSusuwatari"
      | "registerMe"
      | "tryPickupSusu"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "aimInitialSusu",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "dropSusu",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "giveSusuwatari",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerMe",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tryPickupSusu",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "aimInitialSusu",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dropSusu", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "giveSusuwatari",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registerMe", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tryPickupSusu",
    data: BytesLike
  ): Result;

  events: {};
}

export interface SusuwatariFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SusuwatariFacetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    aimInitialSusu(
      tokenId: PromiseOrValue<BigNumberish>,
      location: PromiseOrValue<string>,
      destination: PromiseOrValue<string>,
      message: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    dropSusu(
      tokenId: PromiseOrValue<BigNumberish>,
      location: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getCurrentState(
      overrides?: CallOverrides
    ): Promise<[UserStateStructOutput]>;

    giveSusuwatari(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerMe(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tryPickupSusu(
      tokenId: PromiseOrValue<BigNumberish>,
      location: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  aimInitialSusu(
    tokenId: PromiseOrValue<BigNumberish>,
    location: PromiseOrValue<string>,
    destination: PromiseOrValue<string>,
    message: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  dropSusu(
    tokenId: PromiseOrValue<BigNumberish>,
    location: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getCurrentState(overrides?: CallOverrides): Promise<UserStateStructOutput>;

  giveSusuwatari(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerMe(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tryPickupSusu(
    tokenId: PromiseOrValue<BigNumberish>,
    location: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    aimInitialSusu(
      tokenId: PromiseOrValue<BigNumberish>,
      location: PromiseOrValue<string>,
      destination: PromiseOrValue<string>,
      message: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string, string, string]>;

    dropSusu(
      tokenId: PromiseOrValue<BigNumberish>,
      location: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string]>;

    getCurrentState(overrides?: CallOverrides): Promise<UserStateStructOutput>;

    giveSusuwatari(overrides?: CallOverrides): Promise<void>;

    registerMe(overrides?: CallOverrides): Promise<void>;

    tryPickupSusu(
      tokenId: PromiseOrValue<BigNumberish>,
      location: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string]>;
  };

  filters: {};

  estimateGas: {
    aimInitialSusu(
      tokenId: PromiseOrValue<BigNumberish>,
      location: PromiseOrValue<string>,
      destination: PromiseOrValue<string>,
      message: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    dropSusu(
      tokenId: PromiseOrValue<BigNumberish>,
      location: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getCurrentState(overrides?: CallOverrides): Promise<BigNumber>;

    giveSusuwatari(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerMe(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tryPickupSusu(
      tokenId: PromiseOrValue<BigNumberish>,
      location: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    aimInitialSusu(
      tokenId: PromiseOrValue<BigNumberish>,
      location: PromiseOrValue<string>,
      destination: PromiseOrValue<string>,
      message: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    dropSusu(
      tokenId: PromiseOrValue<BigNumberish>,
      location: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getCurrentState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    giveSusuwatari(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerMe(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tryPickupSusu(
      tokenId: PromiseOrValue<BigNumberish>,
      location: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
