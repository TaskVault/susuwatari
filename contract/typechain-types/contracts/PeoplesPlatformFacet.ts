/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace SusuwatariFacet {
  export type DonationBucketsStruct = {
    startMonth: PromiseOrValue<BigNumberish>;
    startYear: PromiseOrValue<BigNumberish>;
    donationBuckets: PromiseOrValue<BigNumberish>[];
  };

  export type DonationBucketsStructOutput = [number, number, number[]] & {
    startMonth: number;
    startYear: number;
    donationBuckets: number[];
  };
}

export interface SusuwatariFacetInterface extends utils.Interface {
  functions: {
    "donate(uint16,string)": FunctionFragment;
    "donationBuckets()": FunctionFragment;
    "myFame()": FunctionFragment;
    "setDonatingActive()": FunctionFragment;
    "setDonatingInactive()": FunctionFragment;
    "totalFame()": FunctionFragment;
    "transfer(address,uint16,uint16)": FunctionFragment;
    "vote(string,bool,address,string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "donate"
      | "donationBuckets"
      | "myFame"
      | "setDonatingActive"
      | "setDonatingInactive"
      | "totalFame"
      | "transfer"
      | "vote"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "donate",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "donationBuckets",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "myFame", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setDonatingActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDonatingInactive",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "totalFame", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "donate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "donationBuckets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "myFame", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDonatingActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDonatingInactive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalFame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;

  events: {
    "Donated(uint64,string,uint16,uint16,uint16)": EventFragment;
    "RemovedFromDonationBucket(uint32,uint32,uint16,uint16,uint16)": EventFragment;
    "TransferedFairShare(uint256,address,uint16,uint16)": EventFragment;
    "Voted(string,bool,string,address,address,uint8,uint16)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Donated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemovedFromDonationBucket"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferedFairShare"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Voted"): EventFragment;
}

export interface DonatedEventObject {
  donatedFinney: BigNumber;
  name: string;
  months: number;
  currentMonth: number;
  currentYear: number;
}
export type DonatedEvent = TypedEvent<
  [BigNumber, string, number, number, number],
  DonatedEventObject
>;

export type DonatedEventFilter = TypedEventFilter<DonatedEvent>;

export interface RemovedFromDonationBucketEventObject {
  shareFinney: number;
  transferDateId: number;
  transferFromDonationBucketPos: number;
  month: number;
  year: number;
}
export type RemovedFromDonationBucketEvent = TypedEvent<
  [number, number, number, number, number],
  RemovedFromDonationBucketEventObject
>;

export type RemovedFromDonationBucketEventFilter =
  TypedEventFilter<RemovedFromDonationBucketEvent>;

export interface TransferedFairShareEventObject {
  amount: BigNumber;
  to: string;
  month: number;
  year: number;
}
export type TransferedFairShareEvent = TypedEvent<
  [BigNumber, string, number, number],
  TransferedFairShareEventObject
>;

export type TransferedFairShareEventFilter =
  TypedEventFilter<TransferedFairShareEvent>;

export interface VotedEventObject {
  url: string;
  up: boolean;
  title: string;
  receiver: string;
  sender: string;
  month: number;
  year: number;
}
export type VotedEvent = TypedEvent<
  [string, boolean, string, string, string, number, number],
  VotedEventObject
>;

export type VotedEventFilter = TypedEventFilter<VotedEvent>;

export interface SusuwatariFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SusuwatariFacetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    donate(
      months: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    donationBuckets(
      overrides?: CallOverrides
    ): Promise<[SusuwatariFacet.DonationBucketsStructOutput]>;

    myFame(overrides?: CallOverrides): Promise<[BigNumber]>;

    setDonatingActive(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDonatingInactive(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalFame(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: PromiseOrValue<string>,
      month: PromiseOrValue<BigNumberish>,
      year: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    vote(
      url: PromiseOrValue<string>,
      up: PromiseOrValue<boolean>,
      receiver: PromiseOrValue<string>,
      title: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  donate(
    months: PromiseOrValue<BigNumberish>,
    name: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  donationBuckets(
    overrides?: CallOverrides
  ): Promise<SusuwatariFacet.DonationBucketsStructOutput>;

  myFame(overrides?: CallOverrides): Promise<BigNumber>;

  setDonatingActive(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDonatingInactive(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalFame(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: PromiseOrValue<string>,
    month: PromiseOrValue<BigNumberish>,
    year: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  vote(
    url: PromiseOrValue<string>,
    up: PromiseOrValue<boolean>,
    receiver: PromiseOrValue<string>,
    title: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    donate(
      months: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    donationBuckets(
      overrides?: CallOverrides
    ): Promise<SusuwatariFacet.DonationBucketsStructOutput>;

    myFame(overrides?: CallOverrides): Promise<BigNumber>;

    setDonatingActive(overrides?: CallOverrides): Promise<void>;

    setDonatingInactive(overrides?: CallOverrides): Promise<void>;

    totalFame(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      month: PromiseOrValue<BigNumberish>,
      year: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    vote(
      url: PromiseOrValue<string>,
      up: PromiseOrValue<boolean>,
      receiver: PromiseOrValue<string>,
      title: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Donated(uint64,string,uint16,uint16,uint16)"(
      donatedFinney?: null,
      name?: null,
      months?: null,
      currentMonth?: null,
      currentYear?: null
    ): DonatedEventFilter;
    Donated(
      donatedFinney?: null,
      name?: null,
      months?: null,
      currentMonth?: null,
      currentYear?: null
    ): DonatedEventFilter;

    "RemovedFromDonationBucket(uint32,uint32,uint16,uint16,uint16)"(
      shareFinney?: null,
      transferDateId?: null,
      transferFromDonationBucketPos?: null,
      month?: null,
      year?: null
    ): RemovedFromDonationBucketEventFilter;
    RemovedFromDonationBucket(
      shareFinney?: null,
      transferDateId?: null,
      transferFromDonationBucketPos?: null,
      month?: null,
      year?: null
    ): RemovedFromDonationBucketEventFilter;

    "TransferedFairShare(uint256,address,uint16,uint16)"(
      amount?: null,
      to?: null,
      month?: null,
      year?: null
    ): TransferedFairShareEventFilter;
    TransferedFairShare(
      amount?: null,
      to?: null,
      month?: null,
      year?: null
    ): TransferedFairShareEventFilter;

    "Voted(string,bool,string,address,address,uint8,uint16)"(
      url?: null,
      up?: null,
      title?: null,
      receiver?: null,
      sender?: null,
      month?: null,
      year?: null
    ): VotedEventFilter;
    Voted(
      url?: null,
      up?: null,
      title?: null,
      receiver?: null,
      sender?: null,
      month?: null,
      year?: null
    ): VotedEventFilter;
  };

  estimateGas: {
    donate(
      months: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    donationBuckets(overrides?: CallOverrides): Promise<BigNumber>;

    myFame(overrides?: CallOverrides): Promise<BigNumber>;

    setDonatingActive(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDonatingInactive(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalFame(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      month: PromiseOrValue<BigNumberish>,
      year: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    vote(
      url: PromiseOrValue<string>,
      up: PromiseOrValue<boolean>,
      receiver: PromiseOrValue<string>,
      title: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    donate(
      months: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    donationBuckets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    myFame(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setDonatingActive(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDonatingInactive(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalFame(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: PromiseOrValue<string>,
      month: PromiseOrValue<BigNumberish>,
      year: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    vote(
      url: PromiseOrValue<string>,
      up: PromiseOrValue<boolean>,
      receiver: PromiseOrValue<string>,
      title: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
