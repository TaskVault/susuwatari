{"id":"0cef7ec90c30d8f21460255131666978","_format":"hh-sol-build-info-1","solcVersion":"0.8.10","solcLongVersion":"0.8.10+commit.fc410830","input":{"language":"Solidity","sources":{"@openzeppelin/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/math/Math.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Strings.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"},"contracts/InitFacet.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.10;\r\n\r\nimport {IDiamondLoupe} from \"hardhat-deploy/solc_0.8/diamond/interfaces/IDiamondLoupe.sol\";\r\nimport {UsingDiamondOwner, IDiamondCut} from \"hardhat-deploy/solc_0.8/diamond/UsingDiamondOwner.sol\";\r\nimport \"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\";\r\nimport {SusuwatariStorage, StorageHandler} from \"./SusuwatariStorage.sol\";\r\n\r\ncontract InitFacet is UsingDiamondOwner, StorageHandler {\r\n  \r\n  constructor(){\r\n        LibDiamond.setContractOwner(msg.sender);\r\n        \r\n    }\r\n    \r\n    function init(uint16 currentMonth,uint16 currentYear,bool isTesting) external onlyOwner {\r\n\r\n        SusuwatariStorage storage pp = susu();\r\n\r\n        uint16 currentMonth0Based = currentMonth -1;\r\n\r\n        susu._startDateId = currentYear * 12 + currentMonth0Based;\r\n\r\n        susu._isTesting = isTesting;\r\n\r\n        if(susu._donationBuckets.length == 0) susu._donationBuckets = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];\r\n\r\n        if (susu.isInitialized) return;\r\n\r\n        susu._isDonatingActive=true;\r\n\r\n        ds().supportedInterfaces[type(IDiamondCut).interfaceId] = true;\r\n        ds().supportedInterfaces[type(IDiamondLoupe).interfaceId] = true;\r\n        \r\n        susu.isInitialized = true;\r\n    }\r\n}"},"contracts/LibSusuwatari.sol":{"content":"//SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.10;\r\n\r\n\r\nimport {SusuwatariStorage,StorageHandler} from \"./SusuwatariStorage.sol\";\r\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\r\nimport \"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\";\r\n\r\n\r\nlibrary LibSusuwatari{\r\n    using Strings for uint256;\r\n\r\n    struct _DateTime {\r\n                uint16 year;\r\n                uint8 month;\r\n        }\r\n\r\nuint constant DAY_IN_SECONDS = 86400;\r\n        uint constant YEAR_IN_SECONDS = 31536000;\r\n        uint constant LEAP_YEAR_IN_SECONDS = 31622400;\r\n\r\n        uint constant HOUR_IN_SECONDS = 3600;\r\n        uint constant MINUTE_IN_SECONDS = 60;\r\n\r\n        uint16 constant ORIGIN_YEAR = 1970;\r\n    // A simple absolute value function for int16\r\n    function abs(int64 x) internal pure returns (uint64) {\r\n        if (x < 0) {\r\n            return uint64(-x);\r\n        }\r\n        return uint64(x);\r\n    }\r\n\r\n    function toAsciiString(address x) internal pure returns (string memory) {\r\n        bytes memory s = new bytes(40);\r\n        for (uint i = 0; i < 20; i++) {\r\n            bytes1 b = bytes1(uint8(uint(uint160(x)) / (2**(8*(19 - i)))));\r\n            bytes1 hi = bytes1(uint8(b) / 16);\r\n            bytes1 lo = bytes1(uint8(b) - 16 * uint8(hi));\r\n            s[2*i] = char(hi);\r\n            s[2*i+1] = char(lo);            \r\n        }\r\n        return string(s);\r\n    }\r\n\r\n    function char(bytes1 b) internal pure returns (bytes1 c) {\r\n        if (uint8(b) < 10) return bytes1(uint8(b) + 0x30);\r\n        else return bytes1(uint8(b) + 0x57);\r\n    }\r\n\r\n    function isLeapYear(uint16 year) public pure returns (bool) {\r\n                if (year % 4 != 0) {\r\n                        return false;\r\n                }\r\n                if (year % 100 != 0) {\r\n                        return true;\r\n                }\r\n                if (year % 400 != 0) {\r\n                        return false;\r\n                }\r\n                return true;\r\n        }\r\n\r\n        function leapYearsBefore(uint year) public pure returns (uint) {\r\n                year -= 1;\r\n                return year / 4 - year / 100 + year / 400;\r\n        }\r\n\r\n    function parseTimestamp(uint timestamp) internal pure returns (_DateTime memory dt) {\r\n                uint secondsAccountedFor = 0;\r\n                uint buf;\r\n                uint8 i;\r\n\r\n                // Year\r\n                dt.year = getYear(timestamp);\r\n                buf = leapYearsBefore(dt.year) - leapYearsBefore(ORIGIN_YEAR);\r\n\r\n                secondsAccountedFor += LEAP_YEAR_IN_SECONDS * buf;\r\n                secondsAccountedFor += YEAR_IN_SECONDS * (dt.year - ORIGIN_YEAR - buf);\r\n\r\n                // Month\r\n                uint secondsInMonth;\r\n                for (i = 1; i <= 12; i++) {\r\n                        secondsInMonth = DAY_IN_SECONDS * getDaysInMonth(i, dt.year);\r\n                        if (secondsInMonth + secondsAccountedFor > timestamp) {\r\n                                dt.month = i;\r\n                                break;\r\n                        }\r\n                        secondsAccountedFor += secondsInMonth;\r\n                }\r\n\r\n        }\r\n\r\n    function getYear(uint timestamp) public pure returns (uint16) {\r\n                uint secondsAccountedFor = 0;\r\n                uint16 year;\r\n                uint numLeapYears;\r\n\r\n                // Year\r\n                year = uint16(ORIGIN_YEAR + timestamp / YEAR_IN_SECONDS);\r\n                numLeapYears = leapYearsBefore(year) - leapYearsBefore(ORIGIN_YEAR);\r\n\r\n                secondsAccountedFor += LEAP_YEAR_IN_SECONDS * numLeapYears;\r\n                secondsAccountedFor += YEAR_IN_SECONDS * (year - ORIGIN_YEAR - numLeapYears);\r\n\r\n                while (secondsAccountedFor > timestamp) {\r\n                        if (isLeapYear(uint16(year - 1))) {\r\n                                secondsAccountedFor -= LEAP_YEAR_IN_SECONDS;\r\n                        }\r\n                        else {\r\n                                secondsAccountedFor -= YEAR_IN_SECONDS;\r\n                        }\r\n                        year -= 1;\r\n                }\r\n                return year;\r\n        }\r\n\r\n        function getMonth(uint timestamp) public pure returns (uint8) {\r\n                return parseTimestamp(timestamp).month;\r\n        }\r\n\r\n        function getDaysInMonth(uint8 month, uint16 year) public pure returns (uint8) {\r\n                if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\r\n                        return 31;\r\n                }\r\n                else if (month == 4 || month == 6 || month == 9 || month == 11) {\r\n                        return 30;\r\n                }\r\n                else if (isLeapYear(year)) {\r\n                        return 29;\r\n                }\r\n                else {\r\n                        return 28;\r\n                }\r\n        }\r\n}"},"contracts/SusuwatariFacet.sol":{"content":"//SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.10;\r\nimport \"@openzeppelin/contracts/utils/Address.sol\";\r\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\r\n//import \"hardhat/console.sol\";\r\n\r\n\r\nimport {SusuwatariStorage,StorageHandler} from \"./SusuwatariStorage.sol\";\r\nimport {LibSusuwatari} from \"./LibSusuwatari.sol\";\r\nimport {UsingDiamondOwner} from \"hardhat-deploy/solc_0.8/diamond/UsingDiamondOwner.sol\";\r\n\r\n\r\n/**\r\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\r\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\r\n * {ERC721Enumerable}.\r\n */\r\ncontract SusuwatariFacet is StorageHandler, UsingDiamondOwner {\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    \r\n    event Voted(string url,bool up,string title,address receiver,address sender,uint8 month, uint16 year);\r\n    event Donated(uint64 donatedFinney, string name ,uint16 months,uint16 currentMonth,uint16 currentYear);\r\n    event TransferedFairShare(uint256 amount,address to,uint16 month,uint16 year);\r\n    event RemovedFromDonationBucket(uint32 shareFinney,uint32 transferDateId,uint16 transferFromDonationBucketPos, uint16 month, uint16 year);\r\n\r\n    struct DonationBuckets{\r\n        uint16 startMonth;\r\n        uint16 startYear;\r\n        uint32[48] donationBuckets;\r\n    }\r\n\r\n\r\n    function setDonatingActive() public onlyOwner {\r\n        SusuwatariStorage storage pp = susu();\r\n        susu._isDonatingActive = true;\r\n    }\r\n\r\n    function setDonatingInactive() public onlyOwner {\r\n        SusuwatariStorage storage pp = susu();\r\n        susu._isDonatingActive = false;\r\n    }\r\n\r\n    function donate(uint16 months, string memory name) public payable {\r\n        LibSusuwatari._DateTime memory date = LibSusuwatari.parseTimestamp(block.timestamp);\r\n        uint16 currentMonth0Based = date.month-1;\r\n        require(months < 25, \"Only upto 24 months is supported\");\r\n        require(msg.value % months == 0, \"Payed amount must be devidable by the distributed months\");\r\n        require(msg.value % 1_000_000_000_000_000  == 0, \"Less than 1 finney(1/1000 ETH) fractions are not supported\");\r\n\r\n        uint256 donatedValueInFinney = msg.value / 1_000_000_000_000_000;\r\n        require(donatedValueInFinney  <= 1_000_000_000 , \"Donations larger than 1_000_000_000 finney are not supported\");\r\n        uint32 perMonthValue = uint32(donatedValueInFinney / months);\r\n\r\n        SusuwatariStorage storage pp = susu();\r\n\r\n        uint32 testSubMonths = susu._isTesting?5:0;\r\n\r\n        uint32 donationRelativeDateId = (date.year*12+currentMonth0Based)-susu._startDateId - testSubMonths;\r\n\r\n        //require(false,Strings.toString(donationRelativeDateId));\r\n        for (uint32 i = donationRelativeDateId; i < donationRelativeDateId + months; i++) {\r\n         \r\n            uint32 donationBucketPos = i % 48;\r\n            susu._donationBuckets[donationBucketPos]=susu._donationBuckets[donationBucketPos]+perMonthValue;\r\n\r\n        }\r\n\r\n        susu._fameHoldings[msg.sender] += uint64( donatedValueInFinney / 10);\r\n        susu._totalFame += donatedValueInFinney / 10;\r\n\r\n        emit Donated(uint64(donatedValueInFinney),name, months, date.month, date.year);\r\n\r\n    }\r\n\r\n    function vote(string memory url, bool up,address receiver,string memory title) public{\r\n        LibSusuwatari._DateTime memory date = LibSusuwatari.parseTimestamp(block.timestamp);\r\n        uint16 currentMonth0Based = date.month-1;\r\n        uint160 uintAddress = uint160(receiver);\r\n        SusuwatariStorage storage pp = susu();\r\n        if(uintAddress & uint160(0x1111000000000000000000000000000000000000) != uint160(0x1111000000000000000000000000000000000000))\r\n        {\r\n            \r\n\r\n            uint32 testSubMonths = susu._isTesting?5:0;\r\n            uint32 voteDateId = date.year * 12 + currentMonth0Based - testSubMonths;\r\n            uint256 dateAddressId = (uint256(uintAddress) << 20) +voteDateId;\r\n            \r\n            if(!susu._dateAddressIdHasVotes[dateAddressId]){\r\n                susu._dateAddressIdHasVotes[dateAddressId]=true;\r\n                susu._dateAddressIdVoteValues[dateAddressId]=0;\r\n                susu._dateIdAddresses[voteDateId].push(receiver);\r\n            }\r\n\r\n            if(up){\r\n                susu._dateAddressIdVoteValues[dateAddressId]++;\r\n            }else{\r\n                susu._dateAddressIdVoteValues[dateAddressId]--;\r\n            }\r\n        }\r\n        susu._fameHoldings[msg.sender] += 1;\r\n        susu._totalFame += 1;\r\n\r\n        emit Voted(url, up,title,receiver,msg.sender,date.month,date.year);\r\n    }\r\n\r\n    function transfer(address payable to, uint16 month, uint16 year) public {\r\n        LibSusuwatari._DateTime memory date = LibSusuwatari.parseTimestamp(block.timestamp);\r\n        uint16 currentMonth0Based = date.month-1;\r\n        uint32 curDateId = date.year * 12 + currentMonth0Based;\r\n        //require(false,Strings.toString( curDateId));\r\n        uint32 transferDateId = year * 12 + month -1;\r\n        SusuwatariStorage storage pp = susu();\r\n        require(transferDateId < curDateId,\"Your can only transfer your share for month before the current one\");\r\n        require(transferDateId >= susu._startDateId,\"Your can only transfer your share for months after donation started\");\r\n        require(curDateId - transferDateId < 24,\"Your can't transfer shares more than 24 months ago.\");\r\n        uint256 monthSenderAddressId = (uint256(uint160(msg.sender)) << 20) +transferDateId;\r\n        \r\n        require(susu._monthAddressHasTransfered[monthSenderAddressId]==false,\"Share already transfered\");\r\n        require(susu._dateAddressIdVoteValues[monthSenderAddressId]>0,\"You have not enough upvotes to be eligible\");\r\n        \r\n        uint64 voteSum = 0;\r\n        for (uint i=0; i<susu._dateIdAddresses[transferDateId].length; i++) {\r\n            uint256 monthAddressId=(uint256( uint160(susu._dateIdAddresses[transferDateId][i])) << 20) +transferDateId;\r\n            if(susu._dateAddressIdVoteValues[monthAddressId]>0){\r\n                voteSum = voteSum + uint32(susu._dateAddressIdVoteValues[monthAddressId]);\r\n            }\r\n            \r\n        }\r\n        \r\n        uint16 transferFromDonationBucketPos = uint16(transferDateId - susu._startDateId) % 48;\r\n     \r\n        uint32 shareFinney =uint32( (susu._donationBuckets[transferFromDonationBucketPos] *  uint32(susu._dateAddressIdVoteValues[monthSenderAddressId])) / (voteSum ));\r\n        \r\n        require(susu._donationBuckets[transferFromDonationBucketPos] >= shareFinney,\"Not enough donations for that months available.\");\r\n        susu._donationBuckets[transferFromDonationBucketPos] -= shareFinney;\r\n        susu._monthAddressHasTransfered[monthSenderAddressId]=true;\r\n        to.transfer(shareFinney*1_000_000_000_000_000);\r\n        susu._fameHoldings[msg.sender] += shareFinney / 10;\r\n        susu._totalFame += shareFinney / 10;\r\n        emit TransferedFairShare(shareFinney*1_000_000_000_000_000, to,month, year);\r\n        emit RemovedFromDonationBucket(shareFinney,transferDateId,transferFromDonationBucketPos, month, year);\r\n    }\r\n\r\n    function donationBuckets() public view returns(DonationBuckets memory) {\r\n        SusuwatariStorage storage pp = susu();\r\n        return DonationBuckets(susu._startDateId % 12 + 1,susu._startDateId / 12,susu._donationBuckets);  \r\n    }\r\n\r\n    function totalFame() public view returns(uint256) {\r\n        SusuwatariStorage storage pp = susu();\r\n        return susu._totalFame;  \r\n    }\r\n\r\n    function myFame() public view returns(uint64) {\r\n        SusuwatariStorage storage pp = susu();\r\n        return susu._fameHoldings[msg.sender];  \r\n    }\r\n}\r\n"},"contracts/SusuwatariStorage.sol":{"content":"//SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.10;\r\n\r\nimport {LibDiamond} from \"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\";\r\n\r\nbytes32 constant SUSUWATARI_STORAGE_POSITION = keccak256(\"susuwatari.contract.storage\");\r\nbytes32 constant LEAFWALLET_STORAGE_POSITION = keccak256(\"leafwallet.contract.storage\");\r\n\r\nstruct OwnableStorage {\r\n\r\n    address _owner;\r\n}\r\n\r\nstruct SusuwatariStorage {\r\n    \r\n\r\n    bool isInitialized;\r\n    bool _isDonatingActive;\r\n    \r\n    uint16 _startDateId;\r\n\r\n    uint32[48] _donationBuckets ; \r\n    mapping(uint32 => address[]) _dateIdAddresses;\r\n    mapping(uint256 => int32) _dateAddressIdVoteValues;\r\n    mapping(uint256 => bool) _dateAddressIdHasVotes;\r\n    mapping(uint256 => bool) _monthAddressHasTransfered;\r\n\r\n    bool _isTesting;\r\n\r\n    mapping (address => uint64) _fameHoldings;\r\n    address[] _fameHolders;\r\n    uint256 _totalFame;\r\n}\r\n\r\ncontract StorageHandler {\r\n    function susu() internal pure returns (SusuwatariStorage storage cs) {\r\n        bytes32 position = SUSUWATARI_STORAGE_POSITION;\r\n        assembly {\r\n           cs.slot := position\r\n        }\r\n    }\r\n\r\n    function os() internal pure returns (OwnableStorage storage cs) {\r\n        bytes32 position = keccak256(\"ownable.contract.storage\");\r\n        assembly {\r\n           cs.slot := position\r\n        }\r\n    }\r\n    \r\n    function ds() internal pure returns (LibDiamond.DiamondStorage storage) {\r\n        return LibDiamond.diamondStorage();\r\n    }\r\n}"},"hardhat-deploy/solc_0.8/diamond/interfaces/IDiamondCut.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/******************************************************************************\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\n/******************************************************************************/\n\ninterface IDiamondCut {\n    enum FacetCutAction {Add, Replace, Remove}\n    // Add=0, Replace=1, Remove=2\n\n    struct FacetCut {\n        address facetAddress;\n        FacetCutAction action;\n        bytes4[] functionSelectors;\n    }\n\n    /// @notice Add/replace/remove any number of functions and optionally execute\n    ///         a function with delegatecall\n    /// @param _diamondCut Contains the facet addresses and function selectors\n    /// @param _init The address of the contract or facet to execute _calldata\n    /// @param _calldata A function call, including function selector and arguments\n    ///                  _calldata is executed with delegatecall on _init\n    function diamondCut(\n        FacetCut[] calldata _diamondCut,\n        address _init,\n        bytes calldata _calldata\n    ) external;\n\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\n}\n"},"hardhat-deploy/solc_0.8/diamond/interfaces/IDiamondLoupe.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/******************************************************************************\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\n/******************************************************************************/\n\n// A loupe is a small magnifying glass used to look at diamonds.\n// These functions look at diamonds\ninterface IDiamondLoupe {\n    /// These functions are expected to be called frequently\n    /// by tools.\n\n    struct Facet {\n        address facetAddress;\n        bytes4[] functionSelectors;\n    }\n\n    /// @notice Gets all facet addresses and their four byte function selectors.\n    /// @return facets_ Facet\n    function facets() external view returns (Facet[] memory facets_);\n\n    /// @notice Gets all the function selectors supported by a specific facet.\n    /// @param _facet The facet address.\n    /// @return facetFunctionSelectors_\n    function facetFunctionSelectors(address _facet) external view returns (bytes4[] memory facetFunctionSelectors_);\n\n    /// @notice Get all the facet addresses used by a diamond.\n    /// @return facetAddresses_\n    function facetAddresses() external view returns (address[] memory facetAddresses_);\n\n    /// @notice Gets the facet that supports the given selector.\n    /// @dev If facet is not found return address(0).\n    /// @param _functionSelector The function selector.\n    /// @return facetAddress_ The facet address.\n    function facetAddress(bytes4 _functionSelector) external view returns (address facetAddress_);\n}\n"},"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/******************************************************************************\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\n/******************************************************************************/\nimport { IDiamondCut } from \"../interfaces/IDiamondCut.sol\";\n\nlibrary LibDiamond {\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\"diamond.standard.diamond.storage\");\n\n    struct FacetAddressAndPosition {\n        address facetAddress;\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\n    }\n\n    struct FacetFunctionSelectors {\n        bytes4[] functionSelectors;\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\n    }\n\n    struct DiamondStorage {\n        // maps function selector to the facet address and\n        // the position of the selector in the facetFunctionSelectors.selectors array\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\n        // maps facet addresses to function selectors\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\n        // facet addresses\n        address[] facetAddresses;\n        // Used to query if a contract implements an interface.\n        // Used to implement ERC-165.\n        mapping(bytes4 => bool) supportedInterfaces;\n        // owner of the contract\n        address contractOwner;\n    }\n\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\n        bytes32 position = DIAMOND_STORAGE_POSITION;\n        assembly {\n            ds.slot := position\n        }\n    }\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    function setContractOwner(address _newOwner) internal {\n        DiamondStorage storage ds = diamondStorage();\n        address previousOwner = ds.contractOwner;\n        ds.contractOwner = _newOwner;\n        emit OwnershipTransferred(previousOwner, _newOwner);\n    }\n\n    function contractOwner() internal view returns (address contractOwner_) {\n        contractOwner_ = diamondStorage().contractOwner;\n    }\n\n    function enforceIsContractOwner() internal view {\n        require(msg.sender == diamondStorage().contractOwner, \"LibDiamond: Must be contract owner\");\n    }\n\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\n\n    // Internal function version of diamondCut\n    function diamondCut(\n        IDiamondCut.FacetCut[] memory _diamondCut,\n        address _init,\n        bytes memory _calldata\n    ) internal {\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\n            if (action == IDiamondCut.FacetCutAction.Add) {\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\n            } else {\n                revert(\"LibDiamondCut: Incorrect FacetCutAction\");\n            }\n        }\n        emit DiamondCut(_diamondCut, _init, _calldata);\n        initializeDiamondCut(_init, _calldata);\n    }\n\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\n        require(_functionSelectors.length > 0, \"LibDiamondCut: No selectors in facet to cut\");\n        DiamondStorage storage ds = diamondStorage();        \n        require(_facetAddress != address(0), \"LibDiamondCut: Add facet can't be address(0)\");\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\n        // add new facet address if it does not exist\n        if (selectorPosition == 0) {\n            addFacet(ds, _facetAddress);            \n        }\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\n            bytes4 selector = _functionSelectors[selectorIndex];\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\n            require(oldFacetAddress == address(0), \"LibDiamondCut: Can't add function that already exists\");\n            addFunction(ds, selector, selectorPosition, _facetAddress);\n            selectorPosition++;\n        }\n    }\n\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\n        require(_functionSelectors.length > 0, \"LibDiamondCut: No selectors in facet to cut\");\n        DiamondStorage storage ds = diamondStorage();\n        require(_facetAddress != address(0), \"LibDiamondCut: Add facet can't be address(0)\");\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\n        // add new facet address if it does not exist\n        if (selectorPosition == 0) {\n            addFacet(ds, _facetAddress);\n        }\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\n            bytes4 selector = _functionSelectors[selectorIndex];\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\n            require(oldFacetAddress != _facetAddress, \"LibDiamondCut: Can't replace function with same function\");\n            removeFunction(ds, oldFacetAddress, selector);\n            addFunction(ds, selector, selectorPosition, _facetAddress);\n            selectorPosition++;\n        }\n    }\n\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\n        require(_functionSelectors.length > 0, \"LibDiamondCut: No selectors in facet to cut\");\n        DiamondStorage storage ds = diamondStorage();\n        // if function does not exist then do nothing and return\n        require(_facetAddress == address(0), \"LibDiamondCut: Remove facet address must be address(0)\");\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\n            bytes4 selector = _functionSelectors[selectorIndex];\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\n            removeFunction(ds, oldFacetAddress, selector);\n        }\n    }\n\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\n        enforceHasContractCode(_facetAddress, \"LibDiamondCut: New facet has no code\");\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\n        ds.facetAddresses.push(_facetAddress);\n    }    \n\n\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\n    }\n\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {        \n        require(_facetAddress != address(0), \"LibDiamondCut: Can't remove function that doesn't exist\");\n        // an immutable function is a function defined directly in a diamond\n        require(_facetAddress != address(this), \"LibDiamondCut: Can't remove immutable function\");\n        // replace selector with last selector, then delete last selector\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\n        // if not the same then replace _selector with lastSelector\n        if (selectorPosition != lastSelectorPosition) {\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\n        }\n        // delete the last selector\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\n        delete ds.selectorToFacetAndPosition[_selector];\n\n        // if no more selectors for facet address then delete the facet address\n        if (lastSelectorPosition == 0) {\n            // replace facet address with last facet address and delete last facet address\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\n            if (facetAddressPosition != lastFacetAddressPosition) {\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\n            }\n            ds.facetAddresses.pop();\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\n        }\n    }\n\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\n        if (_init == address(0)) {\n            require(_calldata.length == 0, \"LibDiamondCut: _init is address(0) but_calldata is not empty\");\n        } else {\n            require(_calldata.length > 0, \"LibDiamondCut: _calldata is empty but _init is not address(0)\");\n            if (_init != address(this)) {\n                enforceHasContractCode(_init, \"LibDiamondCut: _init address has no code\");\n            }\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\n            if (!success) {\n                if (error.length > 0) {\n                    // bubble up the error\n                    revert(string(error));\n                } else {\n                    revert(\"LibDiamondCut: _init function reverted\");\n                }\n            }\n        }\n    }\n\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\n        uint256 contractSize;\n        assembly {\n            contractSize := extcodesize(_contract)\n        }\n        require(contractSize > 0, _errorMessage);\n    }\n}\n"},"hardhat-deploy/solc_0.8/diamond/UsingDiamondOwner.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./libraries/LibDiamond.sol\";\n\ncontract UsingDiamondOwner {\n    modifier onlyOwner() {\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\n        require(msg.sender == ds.contractOwner, \"Only owner is allowed to perform this action\");\n        _;\n    }\n}\n"}},"settings":{"optimizer":{"enabled":true,"runs":200},"viaIR":true,"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@openzeppelin/contracts/utils/Address.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","exportedSymbols":{"Address":[329]},"id":330,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".1"],"nodeType":"PragmaDirective","src":"101:23:0"},{"abstract":false,"baseContracts":[],"canonicalName":"Address","contractDependencies":[],"contractKind":"library","documentation":{"id":2,"nodeType":"StructuredDocumentation","src":"126:67:0","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":329,"linearizedBaseContracts":[329],"name":"Address","nameLocation":"202:7:0","nodeType":"ContractDefinition","nodes":[{"body":{"id":16,"nodeType":"Block","src":"1478:254:0","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":14,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":10,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5,"src":"1702:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":11,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"code","nodeType":"MemberAccess","src":"1702:12:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":12,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"1702:19:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":13,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1724:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1702:23:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":9,"id":15,"nodeType":"Return","src":"1695:30:0"}]},"documentation":{"id":3,"nodeType":"StructuredDocumentation","src":"216:1191:0","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n Furthermore, `isContract` will also return true if the target contract within\n the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n which only has an effect at the end of a transaction.\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"id":17,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"1421:10:0","nodeType":"FunctionDefinition","parameters":{"id":6,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5,"mutability":"mutable","name":"account","nameLocation":"1440:7:0","nodeType":"VariableDeclaration","scope":17,"src":"1432:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4,"name":"address","nodeType":"ElementaryTypeName","src":"1432:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1431:17:0"},"returnParameters":{"id":9,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":17,"src":"1472:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":7,"name":"bool","nodeType":"ElementaryTypeName","src":"1472:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1471:6:0"},"scope":329,"src":"1412:320:0","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":50,"nodeType":"Block","src":"2718:241:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":32,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":28,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2744:4:0","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$329","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$329","typeString":"library Address"}],"id":27,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2736:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":26,"name":"address","nodeType":"ElementaryTypeName","src":"2736:7:0","typeDescriptions":{}}},"id":29,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2736:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":30,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","src":"2736:21:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":31,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":22,"src":"2761:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2736:31:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":33,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2769:31:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":25,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2728:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":34,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2728:73:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":35,"nodeType":"ExpressionStatement","src":"2728:73:0"},{"assignments":[37,null],"declarations":[{"constant":false,"id":37,"mutability":"mutable","name":"success","nameLocation":"2818:7:0","nodeType":"VariableDeclaration","scope":50,"src":"2813:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":36,"name":"bool","nodeType":"ElementaryTypeName","src":"2813:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":44,"initialValue":{"arguments":[{"hexValue":"","id":42,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2861:2:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":38,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":20,"src":"2831:9:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":39,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"call","nodeType":"MemberAccess","src":"2831:14:0","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":41,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":40,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":22,"src":"2853:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2831:29:0","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":43,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2831:33:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2812:52:0"},{"expression":{"arguments":[{"id":46,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":37,"src":"2882:7:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":47,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2891:60:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":45,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2874:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":48,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2874:78:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":49,"nodeType":"ExpressionStatement","src":"2874:78:0"}]},"documentation":{"id":18,"nodeType":"StructuredDocumentation","src":"1738:904:0","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":51,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2656:9:0","nodeType":"FunctionDefinition","parameters":{"id":23,"nodeType":"ParameterList","parameters":[{"constant":false,"id":20,"mutability":"mutable","name":"recipient","nameLocation":"2682:9:0","nodeType":"VariableDeclaration","scope":51,"src":"2666:25:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":19,"name":"address","nodeType":"ElementaryTypeName","src":"2666:15:0","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":22,"mutability":"mutable","name":"amount","nameLocation":"2701:6:0","nodeType":"VariableDeclaration","scope":51,"src":"2693:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":21,"name":"uint256","nodeType":"ElementaryTypeName","src":"2693:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2665:43:0"},"returnParameters":{"id":24,"nodeType":"ParameterList","parameters":[],"src":"2718:0:0"},"scope":329,"src":"2647:312:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":68,"nodeType":"Block","src":"3790:96:0","statements":[{"expression":{"arguments":[{"id":62,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":54,"src":"3829:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":63,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":56,"src":"3837:4:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":64,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3843:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":65,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3846:32:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":61,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[109,153],"referencedDeclaration":153,"src":"3807:21:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":66,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3807:72:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":60,"id":67,"nodeType":"Return","src":"3800:79:0"}]},"documentation":{"id":52,"nodeType":"StructuredDocumentation","src":"2965:731:0","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":69,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3710:12:0","nodeType":"FunctionDefinition","parameters":{"id":57,"nodeType":"ParameterList","parameters":[{"constant":false,"id":54,"mutability":"mutable","name":"target","nameLocation":"3731:6:0","nodeType":"VariableDeclaration","scope":69,"src":"3723:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":53,"name":"address","nodeType":"ElementaryTypeName","src":"3723:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":56,"mutability":"mutable","name":"data","nameLocation":"3752:4:0","nodeType":"VariableDeclaration","scope":69,"src":"3739:17:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":55,"name":"bytes","nodeType":"ElementaryTypeName","src":"3739:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3722:35:0"},"returnParameters":{"id":60,"nodeType":"ParameterList","parameters":[{"constant":false,"id":59,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":69,"src":"3776:12:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":58,"name":"bytes","nodeType":"ElementaryTypeName","src":"3776:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3775:14:0"},"scope":329,"src":"3701:185:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":88,"nodeType":"Block","src":"4255:76:0","statements":[{"expression":{"arguments":[{"id":82,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":72,"src":"4294:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":83,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":74,"src":"4302:4:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":84,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4308:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":85,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":76,"src":"4311:12:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":81,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[109,153],"referencedDeclaration":153,"src":"4272:21:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":86,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4272:52:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":80,"id":87,"nodeType":"Return","src":"4265:59:0"}]},"documentation":{"id":70,"nodeType":"StructuredDocumentation","src":"3892:211:0","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":89,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"4117:12:0","nodeType":"FunctionDefinition","parameters":{"id":77,"nodeType":"ParameterList","parameters":[{"constant":false,"id":72,"mutability":"mutable","name":"target","nameLocation":"4147:6:0","nodeType":"VariableDeclaration","scope":89,"src":"4139:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":71,"name":"address","nodeType":"ElementaryTypeName","src":"4139:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":74,"mutability":"mutable","name":"data","nameLocation":"4176:4:0","nodeType":"VariableDeclaration","scope":89,"src":"4163:17:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":73,"name":"bytes","nodeType":"ElementaryTypeName","src":"4163:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":76,"mutability":"mutable","name":"errorMessage","nameLocation":"4204:12:0","nodeType":"VariableDeclaration","scope":89,"src":"4190:26:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":75,"name":"string","nodeType":"ElementaryTypeName","src":"4190:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4129:93:0"},"returnParameters":{"id":80,"nodeType":"ParameterList","parameters":[{"constant":false,"id":79,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":89,"src":"4241:12:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":78,"name":"bytes","nodeType":"ElementaryTypeName","src":"4241:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4240:14:0"},"scope":329,"src":"4108:223:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":108,"nodeType":"Block","src":"4806:111:0","statements":[{"expression":{"arguments":[{"id":102,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":92,"src":"4845:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":103,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"4853:4:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":104,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":96,"src":"4859:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":105,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4866:43:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":101,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[109,153],"referencedDeclaration":153,"src":"4823:21:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":106,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4823:87:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":100,"id":107,"nodeType":"Return","src":"4816:94:0"}]},"documentation":{"id":90,"nodeType":"StructuredDocumentation","src":"4337:351:0","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":109,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4702:21:0","nodeType":"FunctionDefinition","parameters":{"id":97,"nodeType":"ParameterList","parameters":[{"constant":false,"id":92,"mutability":"mutable","name":"target","nameLocation":"4732:6:0","nodeType":"VariableDeclaration","scope":109,"src":"4724:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":91,"name":"address","nodeType":"ElementaryTypeName","src":"4724:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":94,"mutability":"mutable","name":"data","nameLocation":"4753:4:0","nodeType":"VariableDeclaration","scope":109,"src":"4740:17:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":93,"name":"bytes","nodeType":"ElementaryTypeName","src":"4740:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":96,"mutability":"mutable","name":"value","nameLocation":"4767:5:0","nodeType":"VariableDeclaration","scope":109,"src":"4759:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":95,"name":"uint256","nodeType":"ElementaryTypeName","src":"4759:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4723:50:0"},"returnParameters":{"id":100,"nodeType":"ParameterList","parameters":[{"constant":false,"id":99,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":109,"src":"4792:12:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":98,"name":"bytes","nodeType":"ElementaryTypeName","src":"4792:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4791:14:0"},"scope":329,"src":"4693:224:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":152,"nodeType":"Block","src":"5344:267:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":130,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":126,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5370:4:0","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$329","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$329","typeString":"library Address"}],"id":125,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5362:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":124,"name":"address","nodeType":"ElementaryTypeName","src":"5362:7:0","typeDescriptions":{}}},"id":127,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5362:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":128,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","src":"5362:21:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":129,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":116,"src":"5387:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5362:30:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":131,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5394:40:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":123,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5354:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":132,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5354:81:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":133,"nodeType":"ExpressionStatement","src":"5354:81:0"},{"assignments":[135,137],"declarations":[{"constant":false,"id":135,"mutability":"mutable","name":"success","nameLocation":"5451:7:0","nodeType":"VariableDeclaration","scope":152,"src":"5446:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":134,"name":"bool","nodeType":"ElementaryTypeName","src":"5446:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":137,"mutability":"mutable","name":"returndata","nameLocation":"5473:10:0","nodeType":"VariableDeclaration","scope":152,"src":"5460:23:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":136,"name":"bytes","nodeType":"ElementaryTypeName","src":"5460:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":144,"initialValue":{"arguments":[{"id":142,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":114,"src":"5513:4:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":138,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112,"src":"5487:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":139,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"call","nodeType":"MemberAccess","src":"5487:11:0","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":141,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":140,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":116,"src":"5506:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5487:25:0","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":143,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5487:31:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5445:73:0"},{"expression":{"arguments":[{"id":146,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112,"src":"5562:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":147,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":135,"src":"5570:7:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":148,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":137,"src":"5579:10:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":149,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":118,"src":"5591:12:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":145,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":284,"src":"5535:26:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":150,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5535:69:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":122,"id":151,"nodeType":"Return","src":"5528:76:0"}]},"documentation":{"id":110,"nodeType":"StructuredDocumentation","src":"4923:237:0","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":153,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"5174:21:0","nodeType":"FunctionDefinition","parameters":{"id":119,"nodeType":"ParameterList","parameters":[{"constant":false,"id":112,"mutability":"mutable","name":"target","nameLocation":"5213:6:0","nodeType":"VariableDeclaration","scope":153,"src":"5205:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":111,"name":"address","nodeType":"ElementaryTypeName","src":"5205:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":114,"mutability":"mutable","name":"data","nameLocation":"5242:4:0","nodeType":"VariableDeclaration","scope":153,"src":"5229:17:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":113,"name":"bytes","nodeType":"ElementaryTypeName","src":"5229:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":116,"mutability":"mutable","name":"value","nameLocation":"5264:5:0","nodeType":"VariableDeclaration","scope":153,"src":"5256:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":115,"name":"uint256","nodeType":"ElementaryTypeName","src":"5256:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":118,"mutability":"mutable","name":"errorMessage","nameLocation":"5293:12:0","nodeType":"VariableDeclaration","scope":153,"src":"5279:26:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":117,"name":"string","nodeType":"ElementaryTypeName","src":"5279:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5195:116:0"},"returnParameters":{"id":122,"nodeType":"ParameterList","parameters":[{"constant":false,"id":121,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":153,"src":"5330:12:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":120,"name":"bytes","nodeType":"ElementaryTypeName","src":"5330:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5329:14:0"},"scope":329,"src":"5165:446:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":169,"nodeType":"Block","src":"5888:97:0","statements":[{"expression":{"arguments":[{"id":164,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":156,"src":"5924:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":165,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":158,"src":"5932:4:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":166,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5938:39:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":163,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[170,199],"referencedDeclaration":199,"src":"5905:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":167,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5905:73:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":162,"id":168,"nodeType":"Return","src":"5898:80:0"}]},"documentation":{"id":154,"nodeType":"StructuredDocumentation","src":"5617:166:0","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":170,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5797:18:0","nodeType":"FunctionDefinition","parameters":{"id":159,"nodeType":"ParameterList","parameters":[{"constant":false,"id":156,"mutability":"mutable","name":"target","nameLocation":"5824:6:0","nodeType":"VariableDeclaration","scope":170,"src":"5816:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":155,"name":"address","nodeType":"ElementaryTypeName","src":"5816:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":158,"mutability":"mutable","name":"data","nameLocation":"5845:4:0","nodeType":"VariableDeclaration","scope":170,"src":"5832:17:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":157,"name":"bytes","nodeType":"ElementaryTypeName","src":"5832:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5815:35:0"},"returnParameters":{"id":162,"nodeType":"ParameterList","parameters":[{"constant":false,"id":161,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":170,"src":"5874:12:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":160,"name":"bytes","nodeType":"ElementaryTypeName","src":"5874:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5873:14:0"},"scope":329,"src":"5788:197:0","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":198,"nodeType":"Block","src":"6327:168:0","statements":[{"assignments":[183,185],"declarations":[{"constant":false,"id":183,"mutability":"mutable","name":"success","nameLocation":"6343:7:0","nodeType":"VariableDeclaration","scope":198,"src":"6338:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":182,"name":"bool","nodeType":"ElementaryTypeName","src":"6338:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":185,"mutability":"mutable","name":"returndata","nameLocation":"6365:10:0","nodeType":"VariableDeclaration","scope":198,"src":"6352:23:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":184,"name":"bytes","nodeType":"ElementaryTypeName","src":"6352:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":190,"initialValue":{"arguments":[{"id":188,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":175,"src":"6397:4:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":186,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":173,"src":"6379:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":187,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"staticcall","nodeType":"MemberAccess","src":"6379:17:0","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":189,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6379:23:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6337:65:0"},{"expression":{"arguments":[{"id":192,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":173,"src":"6446:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":193,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":183,"src":"6454:7:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":194,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":185,"src":"6463:10:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":195,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":177,"src":"6475:12:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":191,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":284,"src":"6419:26:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":196,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6419:69:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":181,"id":197,"nodeType":"Return","src":"6412:76:0"}]},"documentation":{"id":171,"nodeType":"StructuredDocumentation","src":"5991:173:0","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":199,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"6178:18:0","nodeType":"FunctionDefinition","parameters":{"id":178,"nodeType":"ParameterList","parameters":[{"constant":false,"id":173,"mutability":"mutable","name":"target","nameLocation":"6214:6:0","nodeType":"VariableDeclaration","scope":199,"src":"6206:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":172,"name":"address","nodeType":"ElementaryTypeName","src":"6206:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":175,"mutability":"mutable","name":"data","nameLocation":"6243:4:0","nodeType":"VariableDeclaration","scope":199,"src":"6230:17:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":174,"name":"bytes","nodeType":"ElementaryTypeName","src":"6230:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":177,"mutability":"mutable","name":"errorMessage","nameLocation":"6271:12:0","nodeType":"VariableDeclaration","scope":199,"src":"6257:26:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":176,"name":"string","nodeType":"ElementaryTypeName","src":"6257:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6196:93:0"},"returnParameters":{"id":181,"nodeType":"ParameterList","parameters":[{"constant":false,"id":180,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":199,"src":"6313:12:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":179,"name":"bytes","nodeType":"ElementaryTypeName","src":"6313:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6312:14:0"},"scope":329,"src":"6169:326:0","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":215,"nodeType":"Block","src":"6771:101:0","statements":[{"expression":{"arguments":[{"id":210,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":202,"src":"6809:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":211,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":204,"src":"6817:4:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564","id":212,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6823:41:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""},"value":"Address: low-level delegate call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""}],"id":209,"name":"functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[216,245],"referencedDeclaration":245,"src":"6788:20:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":213,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6788:77:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":208,"id":214,"nodeType":"Return","src":"6781:84:0"}]},"documentation":{"id":200,"nodeType":"StructuredDocumentation","src":"6501:168:0","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":216,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6683:20:0","nodeType":"FunctionDefinition","parameters":{"id":205,"nodeType":"ParameterList","parameters":[{"constant":false,"id":202,"mutability":"mutable","name":"target","nameLocation":"6712:6:0","nodeType":"VariableDeclaration","scope":216,"src":"6704:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":201,"name":"address","nodeType":"ElementaryTypeName","src":"6704:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":204,"mutability":"mutable","name":"data","nameLocation":"6733:4:0","nodeType":"VariableDeclaration","scope":216,"src":"6720:17:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":203,"name":"bytes","nodeType":"ElementaryTypeName","src":"6720:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6703:35:0"},"returnParameters":{"id":208,"nodeType":"ParameterList","parameters":[{"constant":false,"id":207,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":216,"src":"6757:12:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":206,"name":"bytes","nodeType":"ElementaryTypeName","src":"6757:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6756:14:0"},"scope":329,"src":"6674:198:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":244,"nodeType":"Block","src":"7213:170:0","statements":[{"assignments":[229,231],"declarations":[{"constant":false,"id":229,"mutability":"mutable","name":"success","nameLocation":"7229:7:0","nodeType":"VariableDeclaration","scope":244,"src":"7224:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":228,"name":"bool","nodeType":"ElementaryTypeName","src":"7224:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":231,"mutability":"mutable","name":"returndata","nameLocation":"7251:10:0","nodeType":"VariableDeclaration","scope":244,"src":"7238:23:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":230,"name":"bytes","nodeType":"ElementaryTypeName","src":"7238:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":236,"initialValue":{"arguments":[{"id":234,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":221,"src":"7285:4:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":232,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":219,"src":"7265:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":233,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"delegatecall","nodeType":"MemberAccess","src":"7265:19:0","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":235,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7265:25:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"7223:67:0"},{"expression":{"arguments":[{"id":238,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":219,"src":"7334:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":239,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":229,"src":"7342:7:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":240,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":231,"src":"7351:10:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":241,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":223,"src":"7363:12:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":237,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":284,"src":"7307:26:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":242,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7307:69:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":227,"id":243,"nodeType":"Return","src":"7300:76:0"}]},"documentation":{"id":217,"nodeType":"StructuredDocumentation","src":"6878:175:0","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":245,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"7067:20:0","nodeType":"FunctionDefinition","parameters":{"id":224,"nodeType":"ParameterList","parameters":[{"constant":false,"id":219,"mutability":"mutable","name":"target","nameLocation":"7105:6:0","nodeType":"VariableDeclaration","scope":245,"src":"7097:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":218,"name":"address","nodeType":"ElementaryTypeName","src":"7097:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":221,"mutability":"mutable","name":"data","nameLocation":"7134:4:0","nodeType":"VariableDeclaration","scope":245,"src":"7121:17:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":220,"name":"bytes","nodeType":"ElementaryTypeName","src":"7121:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":223,"mutability":"mutable","name":"errorMessage","nameLocation":"7162:12:0","nodeType":"VariableDeclaration","scope":245,"src":"7148:26:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":222,"name":"string","nodeType":"ElementaryTypeName","src":"7148:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7087:93:0"},"returnParameters":{"id":227,"nodeType":"ParameterList","parameters":[{"constant":false,"id":226,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":245,"src":"7199:12:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":225,"name":"bytes","nodeType":"ElementaryTypeName","src":"7199:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7198:14:0"},"scope":329,"src":"7058:325:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":283,"nodeType":"Block","src":"7865:434:0","statements":[{"condition":{"id":259,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":250,"src":"7879:7:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":281,"nodeType":"Block","src":"8235:58:0","statements":[{"expression":{"arguments":[{"id":277,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":252,"src":"8257:10:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":278,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":254,"src":"8269:12:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":276,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":328,"src":"8249:7:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":279,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8249:33:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":280,"nodeType":"ExpressionStatement","src":"8249:33:0"}]},"id":282,"nodeType":"IfStatement","src":"7875:418:0","trueBody":{"id":275,"nodeType":"Block","src":"7888:341:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":263,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":260,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":252,"src":"7906:10:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":261,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"7906:17:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":262,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7927:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7906:22:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":272,"nodeType":"IfStatement","src":"7902:286:0","trueBody":{"id":271,"nodeType":"Block","src":"7930:258:0","statements":[{"expression":{"arguments":[{"arguments":[{"id":266,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":248,"src":"8132:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":265,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":17,"src":"8121:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":267,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8121:18:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":268,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8141:31:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":264,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8113:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":269,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8113:60:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":270,"nodeType":"ExpressionStatement","src":"8113:60:0"}]}},{"expression":{"id":273,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":252,"src":"8208:10:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":258,"id":274,"nodeType":"Return","src":"8201:17:0"}]}}]},"documentation":{"id":246,"nodeType":"StructuredDocumentation","src":"7389:277:0","text":" @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"},"id":284,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"7680:26:0","nodeType":"FunctionDefinition","parameters":{"id":255,"nodeType":"ParameterList","parameters":[{"constant":false,"id":248,"mutability":"mutable","name":"target","nameLocation":"7724:6:0","nodeType":"VariableDeclaration","scope":284,"src":"7716:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":247,"name":"address","nodeType":"ElementaryTypeName","src":"7716:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":250,"mutability":"mutable","name":"success","nameLocation":"7745:7:0","nodeType":"VariableDeclaration","scope":284,"src":"7740:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":249,"name":"bool","nodeType":"ElementaryTypeName","src":"7740:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":252,"mutability":"mutable","name":"returndata","nameLocation":"7775:10:0","nodeType":"VariableDeclaration","scope":284,"src":"7762:23:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":251,"name":"bytes","nodeType":"ElementaryTypeName","src":"7762:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":254,"mutability":"mutable","name":"errorMessage","nameLocation":"7809:12:0","nodeType":"VariableDeclaration","scope":284,"src":"7795:26:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":253,"name":"string","nodeType":"ElementaryTypeName","src":"7795:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7706:121:0"},"returnParameters":{"id":258,"nodeType":"ParameterList","parameters":[{"constant":false,"id":257,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":284,"src":"7851:12:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":256,"name":"bytes","nodeType":"ElementaryTypeName","src":"7851:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7850:14:0"},"scope":329,"src":"7671:628:0","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":307,"nodeType":"Block","src":"8680:135:0","statements":[{"condition":{"id":296,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":287,"src":"8694:7:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":305,"nodeType":"Block","src":"8751:58:0","statements":[{"expression":{"arguments":[{"id":301,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":289,"src":"8773:10:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":302,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":291,"src":"8785:12:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":300,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":328,"src":"8765:7:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":303,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8765:33:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":304,"nodeType":"ExpressionStatement","src":"8765:33:0"}]},"id":306,"nodeType":"IfStatement","src":"8690:119:0","trueBody":{"id":299,"nodeType":"Block","src":"8703:42:0","statements":[{"expression":{"id":297,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":289,"src":"8724:10:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":295,"id":298,"nodeType":"Return","src":"8717:17:0"}]}}]},"documentation":{"id":285,"nodeType":"StructuredDocumentation","src":"8305:210:0","text":" @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"},"id":308,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"8529:16:0","nodeType":"FunctionDefinition","parameters":{"id":292,"nodeType":"ParameterList","parameters":[{"constant":false,"id":287,"mutability":"mutable","name":"success","nameLocation":"8560:7:0","nodeType":"VariableDeclaration","scope":308,"src":"8555:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":286,"name":"bool","nodeType":"ElementaryTypeName","src":"8555:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":289,"mutability":"mutable","name":"returndata","nameLocation":"8590:10:0","nodeType":"VariableDeclaration","scope":308,"src":"8577:23:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":288,"name":"bytes","nodeType":"ElementaryTypeName","src":"8577:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":291,"mutability":"mutable","name":"errorMessage","nameLocation":"8624:12:0","nodeType":"VariableDeclaration","scope":308,"src":"8610:26:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":290,"name":"string","nodeType":"ElementaryTypeName","src":"8610:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8545:97:0"},"returnParameters":{"id":295,"nodeType":"ParameterList","parameters":[{"constant":false,"id":294,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":308,"src":"8666:12:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":293,"name":"bytes","nodeType":"ElementaryTypeName","src":"8666:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8665:14:0"},"scope":329,"src":"8520:295:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":327,"nodeType":"Block","src":"8904:457:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":318,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":315,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":310,"src":"8980:10:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":316,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"8980:17:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":317,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9000:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8980:21:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":325,"nodeType":"Block","src":"9310:45:0","statements":[{"expression":{"arguments":[{"id":322,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":312,"src":"9331:12:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":321,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"9324:6:0","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":323,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9324:20:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":324,"nodeType":"ExpressionStatement","src":"9324:20:0"}]},"id":326,"nodeType":"IfStatement","src":"8976:379:0","trueBody":{"id":320,"nodeType":"Block","src":"9003:301:0","statements":[{"AST":{"nodeType":"YulBlock","src":"9161:133:0","statements":[{"nodeType":"YulVariableDeclaration","src":"9179:40:0","value":{"arguments":[{"name":"returndata","nodeType":"YulIdentifier","src":"9208:10:0"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9202:5:0"},"nodeType":"YulFunctionCall","src":"9202:17:0"},"variables":[{"name":"returndata_size","nodeType":"YulTypedName","src":"9183:15:0","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9247:2:0","type":"","value":"32"},{"name":"returndata","nodeType":"YulIdentifier","src":"9251:10:0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9243:3:0"},"nodeType":"YulFunctionCall","src":"9243:19:0"},{"name":"returndata_size","nodeType":"YulIdentifier","src":"9264:15:0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9236:6:0"},"nodeType":"YulFunctionCall","src":"9236:44:0"},"nodeType":"YulExpressionStatement","src":"9236:44:0"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":310,"isOffset":false,"isSlot":false,"src":"9208:10:0","valueSize":1},{"declaration":310,"isOffset":false,"isSlot":false,"src":"9251:10:0","valueSize":1}],"id":319,"nodeType":"InlineAssembly","src":"9152:142:0"}]}}]},"id":328,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"8830:7:0","nodeType":"FunctionDefinition","parameters":{"id":313,"nodeType":"ParameterList","parameters":[{"constant":false,"id":310,"mutability":"mutable","name":"returndata","nameLocation":"8851:10:0","nodeType":"VariableDeclaration","scope":328,"src":"8838:23:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":309,"name":"bytes","nodeType":"ElementaryTypeName","src":"8838:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":312,"mutability":"mutable","name":"errorMessage","nameLocation":"8877:12:0","nodeType":"VariableDeclaration","scope":328,"src":"8863:26:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":311,"name":"string","nodeType":"ElementaryTypeName","src":"8863:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8837:53:0"},"returnParameters":{"id":314,"nodeType":"ParameterList","parameters":[],"src":"8904:0:0"},"scope":329,"src":"8821:540:0","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":330,"src":"194:9169:0","usedErrors":[]}],"src":"101:9263:0"},"id":0},"@openzeppelin/contracts/utils/Strings.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","exportedSymbols":{"Math":[1424],"SignedMath":[1529],"Strings":[558]},"id":559,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":331,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"101:23:1"},{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","file":"./math/Math.sol","id":332,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":559,"sourceUnit":1425,"src":"126:25:1","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/math/SignedMath.sol","file":"./math/SignedMath.sol","id":333,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":559,"sourceUnit":1530,"src":"152:31:1","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"Strings","contractDependencies":[],"contractKind":"library","documentation":{"id":334,"nodeType":"StructuredDocumentation","src":"185:34:1","text":" @dev String operations."},"fullyImplemented":true,"id":558,"linearizedBaseContracts":[558],"name":"Strings","nameLocation":"228:7:1","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":337,"mutability":"constant","name":"_SYMBOLS","nameLocation":"267:8:1","nodeType":"VariableDeclaration","scope":558,"src":"242:54:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"},"typeName":{"id":335,"name":"bytes16","nodeType":"ElementaryTypeName","src":"242:7:1","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"value":{"hexValue":"30313233343536373839616263646566","id":336,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"278:18:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f","typeString":"literal_string \"0123456789abcdef\""},"value":"0123456789abcdef"},"visibility":"private"},{"constant":true,"id":340,"mutability":"constant","name":"_ADDRESS_LENGTH","nameLocation":"325:15:1","nodeType":"VariableDeclaration","scope":558,"src":"302:43:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":338,"name":"uint8","nodeType":"ElementaryTypeName","src":"302:5:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3230","id":339,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"343:2:1","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"visibility":"private"},{"body":{"id":387,"nodeType":"Block","src":"518:625:1","statements":[{"id":386,"nodeType":"UncheckedBlock","src":"528:609:1","statements":[{"assignments":[349],"declarations":[{"constant":false,"id":349,"mutability":"mutable","name":"length","nameLocation":"560:6:1","nodeType":"VariableDeclaration","scope":386,"src":"552:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":348,"name":"uint256","nodeType":"ElementaryTypeName","src":"552:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":356,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":355,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":352,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":343,"src":"580:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":350,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1424,"src":"569:4:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$1424_$","typeString":"type(library Math)"}},"id":351,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"log10","nodeType":"MemberAccess","referencedDeclaration":1261,"src":"569:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":353,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"569:17:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":354,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"589:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"569:21:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"552:38:1"},{"assignments":[358],"declarations":[{"constant":false,"id":358,"mutability":"mutable","name":"buffer","nameLocation":"618:6:1","nodeType":"VariableDeclaration","scope":386,"src":"604:20:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":357,"name":"string","nodeType":"ElementaryTypeName","src":"604:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":363,"initialValue":{"arguments":[{"id":361,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":349,"src":"638:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":360,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"627:10:1","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":359,"name":"string","nodeType":"ElementaryTypeName","src":"631:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":362,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"627:18:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"604:41:1"},{"assignments":[365],"declarations":[{"constant":false,"id":365,"mutability":"mutable","name":"ptr","nameLocation":"667:3:1","nodeType":"VariableDeclaration","scope":386,"src":"659:11:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":364,"name":"uint256","nodeType":"ElementaryTypeName","src":"659:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":366,"nodeType":"VariableDeclarationStatement","src":"659:11:1"},{"AST":{"nodeType":"YulBlock","src":"740:67:1","statements":[{"nodeType":"YulAssignment","src":"758:35:1","value":{"arguments":[{"name":"buffer","nodeType":"YulIdentifier","src":"769:6:1"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"781:2:1","type":"","value":"32"},{"name":"length","nodeType":"YulIdentifier","src":"785:6:1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"777:3:1"},"nodeType":"YulFunctionCall","src":"777:15:1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"765:3:1"},"nodeType":"YulFunctionCall","src":"765:28:1"},"variableNames":[{"name":"ptr","nodeType":"YulIdentifier","src":"758:3:1"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":358,"isOffset":false,"isSlot":false,"src":"769:6:1","valueSize":1},{"declaration":349,"isOffset":false,"isSlot":false,"src":"785:6:1","valueSize":1},{"declaration":365,"isOffset":false,"isSlot":false,"src":"758:3:1","valueSize":1}],"id":367,"nodeType":"InlineAssembly","src":"731:76:1"},{"body":{"id":382,"nodeType":"Block","src":"833:267:1","statements":[{"expression":{"id":370,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"851:5:1","subExpression":{"id":369,"name":"ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":365,"src":"851:3:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":371,"nodeType":"ExpressionStatement","src":"851:5:1"},{"AST":{"nodeType":"YulBlock","src":"934:84:1","statements":[{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"964:3:1"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"978:5:1"},{"kind":"number","nodeType":"YulLiteral","src":"985:2:1","type":"","value":"10"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"974:3:1"},"nodeType":"YulFunctionCall","src":"974:14:1"},{"name":"_SYMBOLS","nodeType":"YulIdentifier","src":"990:8:1"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"969:4:1"},"nodeType":"YulFunctionCall","src":"969:30:1"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"956:7:1"},"nodeType":"YulFunctionCall","src":"956:44:1"},"nodeType":"YulExpressionStatement","src":"956:44:1"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":337,"isOffset":false,"isSlot":false,"src":"990:8:1","valueSize":1},{"declaration":365,"isOffset":false,"isSlot":false,"src":"964:3:1","valueSize":1},{"declaration":343,"isOffset":false,"isSlot":false,"src":"978:5:1","valueSize":1}],"id":372,"nodeType":"InlineAssembly","src":"925:93:1"},{"expression":{"id":375,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":373,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":343,"src":"1035:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":374,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1044:2:1","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"1035:11:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":376,"nodeType":"ExpressionStatement","src":"1035:11:1"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":379,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":377,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":343,"src":"1068:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":378,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1077:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1068:10:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":381,"nodeType":"IfStatement","src":"1064:21:1","trueBody":{"id":380,"nodeType":"Break","src":"1080:5:1"}}]},"condition":{"hexValue":"74727565","id":368,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"827:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"id":383,"nodeType":"WhileStatement","src":"820:280:1"},{"expression":{"id":384,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":358,"src":"1120:6:1","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":347,"id":385,"nodeType":"Return","src":"1113:13:1"}]}]},"documentation":{"id":341,"nodeType":"StructuredDocumentation","src":"352:90:1","text":" @dev Converts a `uint256` to its ASCII `string` decimal representation."},"id":388,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"456:8:1","nodeType":"FunctionDefinition","parameters":{"id":344,"nodeType":"ParameterList","parameters":[{"constant":false,"id":343,"mutability":"mutable","name":"value","nameLocation":"473:5:1","nodeType":"VariableDeclaration","scope":388,"src":"465:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":342,"name":"uint256","nodeType":"ElementaryTypeName","src":"465:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"464:15:1"},"returnParameters":{"id":347,"nodeType":"ParameterList","parameters":[{"constant":false,"id":346,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":388,"src":"503:13:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":345,"name":"string","nodeType":"ElementaryTypeName","src":"503:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"502:15:1"},"scope":558,"src":"447:696:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":415,"nodeType":"Block","src":"1313:103:1","statements":[{"expression":{"arguments":[{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":402,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":400,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":391,"src":"1354:5:1","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30","id":401,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1362:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1354:9:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"","id":404,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1372:2:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"id":405,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1354:20:1","trueExpression":{"hexValue":"2d","id":403,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1366:3:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_d3b8281179950f98149eefdb158d0e1acb56f56e8e343aa9fefafa7e36959561","typeString":"literal_string \"-\""},"value":"-"},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[{"arguments":[{"id":409,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":391,"src":"1400:5:1","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"expression":{"id":407,"name":"SignedMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1529,"src":"1385:10:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SignedMath_$1529_$","typeString":"type(library SignedMath)"}},"id":408,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"abs","nodeType":"MemberAccess","referencedDeclaration":1528,"src":"1385:14:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$returns$_t_uint256_$","typeString":"function (int256) pure returns (uint256)"}},"id":410,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1385:21:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":406,"name":"toString","nodeType":"Identifier","overloadedDeclarations":[388,416],"referencedDeclaration":388,"src":"1376:8:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":411,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1376:31:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":398,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1337:3:1","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":399,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","src":"1337:16:1","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":412,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1337:71:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":397,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1330:6:1","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":396,"name":"string","nodeType":"ElementaryTypeName","src":"1330:6:1","typeDescriptions":{}}},"id":413,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1330:79:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":395,"id":414,"nodeType":"Return","src":"1323:86:1"}]},"documentation":{"id":389,"nodeType":"StructuredDocumentation","src":"1149:89:1","text":" @dev Converts a `int256` to its ASCII `string` decimal representation."},"id":416,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"1252:8:1","nodeType":"FunctionDefinition","parameters":{"id":392,"nodeType":"ParameterList","parameters":[{"constant":false,"id":391,"mutability":"mutable","name":"value","nameLocation":"1268:5:1","nodeType":"VariableDeclaration","scope":416,"src":"1261:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":390,"name":"int256","nodeType":"ElementaryTypeName","src":"1261:6:1","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1260:14:1"},"returnParameters":{"id":395,"nodeType":"ParameterList","parameters":[{"constant":false,"id":394,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":416,"src":"1298:13:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":393,"name":"string","nodeType":"ElementaryTypeName","src":"1298:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1297:15:1"},"scope":558,"src":"1243:173:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":435,"nodeType":"Block","src":"1595:100:1","statements":[{"id":434,"nodeType":"UncheckedBlock","src":"1605:84:1","statements":[{"expression":{"arguments":[{"id":425,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":419,"src":"1648:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":431,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":428,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":419,"src":"1667:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":426,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1424,"src":"1655:4:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$1424_$","typeString":"type(library Math)"}},"id":427,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"log256","nodeType":"MemberAccess","referencedDeclaration":1384,"src":"1655:11:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":429,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1655:18:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":430,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1676:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1655:22:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":424,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[436,512,532],"referencedDeclaration":512,"src":"1636:11:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":432,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1636:42:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":423,"id":433,"nodeType":"Return","src":"1629:49:1"}]}]},"documentation":{"id":417,"nodeType":"StructuredDocumentation","src":"1422:94:1","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."},"id":436,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1530:11:1","nodeType":"FunctionDefinition","parameters":{"id":420,"nodeType":"ParameterList","parameters":[{"constant":false,"id":419,"mutability":"mutable","name":"value","nameLocation":"1550:5:1","nodeType":"VariableDeclaration","scope":436,"src":"1542:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":418,"name":"uint256","nodeType":"ElementaryTypeName","src":"1542:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1541:15:1"},"returnParameters":{"id":423,"nodeType":"ParameterList","parameters":[{"constant":false,"id":422,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":436,"src":"1580:13:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":421,"name":"string","nodeType":"ElementaryTypeName","src":"1580:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1579:15:1"},"scope":558,"src":"1521:174:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":511,"nodeType":"Block","src":"1908:347:1","statements":[{"assignments":[447],"declarations":[{"constant":false,"id":447,"mutability":"mutable","name":"buffer","nameLocation":"1931:6:1","nodeType":"VariableDeclaration","scope":511,"src":"1918:19:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":446,"name":"bytes","nodeType":"ElementaryTypeName","src":"1918:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":456,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":454,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":452,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":450,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1950:1:1","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":451,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":441,"src":"1954:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1950:10:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":453,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1963:1:1","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"1950:14:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":449,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1940:9:1","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":448,"name":"bytes","nodeType":"ElementaryTypeName","src":"1944:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":455,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1940:25:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1918:47:1"},{"expression":{"id":461,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":457,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":447,"src":"1975:6:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":459,"indexExpression":{"hexValue":"30","id":458,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1982:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1975:9:1","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":460,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1987:3:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"src":"1975:15:1","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":462,"nodeType":"ExpressionStatement","src":"1975:15:1"},{"expression":{"id":467,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":463,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":447,"src":"2000:6:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":465,"indexExpression":{"hexValue":"31","id":464,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2007:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2000:9:1","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"78","id":466,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2012:3:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83","typeString":"literal_string \"x\""},"value":"x"},"src":"2000:15:1","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":468,"nodeType":"ExpressionStatement","src":"2000:15:1"},{"body":{"id":497,"nodeType":"Block","src":"2070:83:1","statements":[{"expression":{"id":491,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":483,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":447,"src":"2084:6:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":485,"indexExpression":{"id":484,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":470,"src":"2091:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2084:9:1","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":486,"name":"_SYMBOLS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":337,"src":"2096:8:1","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"id":490,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":489,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":487,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":439,"src":"2105:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":488,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2113:3:1","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"2105:11:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2096:21:1","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"2084:33:1","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":492,"nodeType":"ExpressionStatement","src":"2084:33:1"},{"expression":{"id":495,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":493,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":439,"src":"2131:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":494,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2141:1:1","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"2131:11:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":496,"nodeType":"ExpressionStatement","src":"2131:11:1"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":479,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":477,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":470,"src":"2058:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":478,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2062:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2058:5:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":498,"initializationExpression":{"assignments":[470],"declarations":[{"constant":false,"id":470,"mutability":"mutable","name":"i","nameLocation":"2038:1:1","nodeType":"VariableDeclaration","scope":498,"src":"2030:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":469,"name":"uint256","nodeType":"ElementaryTypeName","src":"2030:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":476,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":475,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":473,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":471,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2042:1:1","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":472,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":441,"src":"2046:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2042:10:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":474,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2055:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2042:14:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2030:26:1"},"loopExpression":{"expression":{"id":481,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"2065:3:1","subExpression":{"id":480,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":470,"src":"2067:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":482,"nodeType":"ExpressionStatement","src":"2065:3:1"},"nodeType":"ForStatement","src":"2025:128:1"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":502,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":500,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":439,"src":"2170:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":501,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2179:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2170:10:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","id":503,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2182:34:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""},"value":"Strings: hex length insufficient"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""}],"id":499,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2162:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":504,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2162:55:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":505,"nodeType":"ExpressionStatement","src":"2162:55:1"},{"expression":{"arguments":[{"id":508,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":447,"src":"2241:6:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":507,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2234:6:1","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":506,"name":"string","nodeType":"ElementaryTypeName","src":"2234:6:1","typeDescriptions":{}}},"id":509,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2234:14:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":445,"id":510,"nodeType":"Return","src":"2227:21:1"}]},"documentation":{"id":437,"nodeType":"StructuredDocumentation","src":"1701:112:1","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."},"id":512,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1827:11:1","nodeType":"FunctionDefinition","parameters":{"id":442,"nodeType":"ParameterList","parameters":[{"constant":false,"id":439,"mutability":"mutable","name":"value","nameLocation":"1847:5:1","nodeType":"VariableDeclaration","scope":512,"src":"1839:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":438,"name":"uint256","nodeType":"ElementaryTypeName","src":"1839:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":441,"mutability":"mutable","name":"length","nameLocation":"1862:6:1","nodeType":"VariableDeclaration","scope":512,"src":"1854:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":440,"name":"uint256","nodeType":"ElementaryTypeName","src":"1854:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1838:31:1"},"returnParameters":{"id":445,"nodeType":"ParameterList","parameters":[{"constant":false,"id":444,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":512,"src":"1893:13:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":443,"name":"string","nodeType":"ElementaryTypeName","src":"1893:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1892:15:1"},"scope":558,"src":"1818:437:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":531,"nodeType":"Block","src":"2480:76:1","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":525,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":515,"src":"2525:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":524,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2517:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":523,"name":"uint160","nodeType":"ElementaryTypeName","src":"2517:7:1","typeDescriptions":{}}},"id":526,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2517:13:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":522,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2509:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":521,"name":"uint256","nodeType":"ElementaryTypeName","src":"2509:7:1","typeDescriptions":{}}},"id":527,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2509:22:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":528,"name":"_ADDRESS_LENGTH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":340,"src":"2533:15:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":520,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[436,512,532],"referencedDeclaration":512,"src":"2497:11:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":529,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2497:52:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":519,"id":530,"nodeType":"Return","src":"2490:59:1"}]},"documentation":{"id":513,"nodeType":"StructuredDocumentation","src":"2261:141:1","text":" @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation."},"id":532,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2416:11:1","nodeType":"FunctionDefinition","parameters":{"id":516,"nodeType":"ParameterList","parameters":[{"constant":false,"id":515,"mutability":"mutable","name":"addr","nameLocation":"2436:4:1","nodeType":"VariableDeclaration","scope":532,"src":"2428:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":514,"name":"address","nodeType":"ElementaryTypeName","src":"2428:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2427:14:1"},"returnParameters":{"id":519,"nodeType":"ParameterList","parameters":[{"constant":false,"id":518,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":532,"src":"2465:13:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":517,"name":"string","nodeType":"ElementaryTypeName","src":"2465:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2464:15:1"},"scope":558,"src":"2407:149:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":556,"nodeType":"Block","src":"2711:66:1","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":554,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":545,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":535,"src":"2744:1:1","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":544,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2738:5:1","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":543,"name":"bytes","nodeType":"ElementaryTypeName","src":"2738:5:1","typeDescriptions":{}}},"id":546,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2738:8:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":542,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2728:9:1","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":547,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2728:19:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"arguments":[{"id":551,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":537,"src":"2767:1:1","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":550,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2761:5:1","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":549,"name":"bytes","nodeType":"ElementaryTypeName","src":"2761:5:1","typeDescriptions":{}}},"id":552,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2761:8:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":548,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2751:9:1","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":553,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2751:19:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2728:42:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":541,"id":555,"nodeType":"Return","src":"2721:49:1"}]},"documentation":{"id":533,"nodeType":"StructuredDocumentation","src":"2562:66:1","text":" @dev Returns true if the two strings are equal."},"id":557,"implemented":true,"kind":"function","modifiers":[],"name":"equal","nameLocation":"2642:5:1","nodeType":"FunctionDefinition","parameters":{"id":538,"nodeType":"ParameterList","parameters":[{"constant":false,"id":535,"mutability":"mutable","name":"a","nameLocation":"2662:1:1","nodeType":"VariableDeclaration","scope":557,"src":"2648:15:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":534,"name":"string","nodeType":"ElementaryTypeName","src":"2648:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":537,"mutability":"mutable","name":"b","nameLocation":"2679:1:1","nodeType":"VariableDeclaration","scope":557,"src":"2665:15:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":536,"name":"string","nodeType":"ElementaryTypeName","src":"2665:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2647:34:1"},"returnParameters":{"id":541,"nodeType":"ParameterList","parameters":[{"constant":false,"id":540,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":557,"src":"2705:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":539,"name":"bool","nodeType":"ElementaryTypeName","src":"2705:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2704:6:1"},"scope":558,"src":"2633:144:1","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":559,"src":"220:2559:1","usedErrors":[]}],"src":"101:2679:1"},"id":1},"@openzeppelin/contracts/utils/math/Math.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","exportedSymbols":{"Math":[1424]},"id":1425,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":560,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"103:23:2"},{"abstract":false,"baseContracts":[],"canonicalName":"Math","contractDependencies":[],"contractKind":"library","documentation":{"id":561,"nodeType":"StructuredDocumentation","src":"128:73:2","text":" @dev Standard math utilities missing in the Solidity language."},"fullyImplemented":true,"id":1424,"linearizedBaseContracts":[1424],"name":"Math","nameLocation":"210:4:2","nodeType":"ContractDefinition","nodes":[{"canonicalName":"Math.Rounding","id":565,"members":[{"id":562,"name":"Down","nameLocation":"245:4:2","nodeType":"EnumValue","src":"245:4:2"},{"id":563,"name":"Up","nameLocation":"287:2:2","nodeType":"EnumValue","src":"287:2:2"},{"id":564,"name":"Zero","nameLocation":"318:4:2","nodeType":"EnumValue","src":"318:4:2"}],"name":"Rounding","nameLocation":"226:8:2","nodeType":"EnumDefinition","src":"221:122:2"},{"body":{"id":582,"nodeType":"Block","src":"480:37:2","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":577,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":575,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":568,"src":"497:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":576,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":570,"src":"501:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"497:5:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":579,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":570,"src":"509:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":580,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"497:13:2","trueExpression":{"id":578,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":568,"src":"505:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":574,"id":581,"nodeType":"Return","src":"490:20:2"}]},"documentation":{"id":566,"nodeType":"StructuredDocumentation","src":"349:59:2","text":" @dev Returns the largest of two numbers."},"id":583,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"422:3:2","nodeType":"FunctionDefinition","parameters":{"id":571,"nodeType":"ParameterList","parameters":[{"constant":false,"id":568,"mutability":"mutable","name":"a","nameLocation":"434:1:2","nodeType":"VariableDeclaration","scope":583,"src":"426:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":567,"name":"uint256","nodeType":"ElementaryTypeName","src":"426:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":570,"mutability":"mutable","name":"b","nameLocation":"445:1:2","nodeType":"VariableDeclaration","scope":583,"src":"437:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":569,"name":"uint256","nodeType":"ElementaryTypeName","src":"437:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"425:22:2"},"returnParameters":{"id":574,"nodeType":"ParameterList","parameters":[{"constant":false,"id":573,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":583,"src":"471:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":572,"name":"uint256","nodeType":"ElementaryTypeName","src":"471:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"470:9:2"},"scope":1424,"src":"413:104:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":600,"nodeType":"Block","src":"655:37:2","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":595,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":593,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":586,"src":"672:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":594,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":588,"src":"676:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"672:5:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":597,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":588,"src":"684:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":598,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"672:13:2","trueExpression":{"id":596,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":586,"src":"680:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":592,"id":599,"nodeType":"Return","src":"665:20:2"}]},"documentation":{"id":584,"nodeType":"StructuredDocumentation","src":"523:60:2","text":" @dev Returns the smallest of two numbers."},"id":601,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"597:3:2","nodeType":"FunctionDefinition","parameters":{"id":589,"nodeType":"ParameterList","parameters":[{"constant":false,"id":586,"mutability":"mutable","name":"a","nameLocation":"609:1:2","nodeType":"VariableDeclaration","scope":601,"src":"601:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":585,"name":"uint256","nodeType":"ElementaryTypeName","src":"601:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":588,"mutability":"mutable","name":"b","nameLocation":"620:1:2","nodeType":"VariableDeclaration","scope":601,"src":"612:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":587,"name":"uint256","nodeType":"ElementaryTypeName","src":"612:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"600:22:2"},"returnParameters":{"id":592,"nodeType":"ParameterList","parameters":[{"constant":false,"id":591,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":601,"src":"646:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":590,"name":"uint256","nodeType":"ElementaryTypeName","src":"646:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"645:9:2"},"scope":1424,"src":"588:104:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":623,"nodeType":"Block","src":"876:82:2","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":621,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":613,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":611,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":604,"src":"931:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":612,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":606,"src":"935:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"931:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":614,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"930:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":620,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":617,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":615,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":604,"src":"941:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":616,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":606,"src":"945:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"941:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":618,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"940:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":619,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"950:1:2","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"940:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"930:21:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":610,"id":622,"nodeType":"Return","src":"923:28:2"}]},"documentation":{"id":602,"nodeType":"StructuredDocumentation","src":"698:102:2","text":" @dev Returns the average of two numbers. The result is rounded towards\n zero."},"id":624,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"814:7:2","nodeType":"FunctionDefinition","parameters":{"id":607,"nodeType":"ParameterList","parameters":[{"constant":false,"id":604,"mutability":"mutable","name":"a","nameLocation":"830:1:2","nodeType":"VariableDeclaration","scope":624,"src":"822:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":603,"name":"uint256","nodeType":"ElementaryTypeName","src":"822:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":606,"mutability":"mutable","name":"b","nameLocation":"841:1:2","nodeType":"VariableDeclaration","scope":624,"src":"833:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":605,"name":"uint256","nodeType":"ElementaryTypeName","src":"833:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"821:22:2"},"returnParameters":{"id":610,"nodeType":"ParameterList","parameters":[{"constant":false,"id":609,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":624,"src":"867:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":608,"name":"uint256","nodeType":"ElementaryTypeName","src":"867:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"866:9:2"},"scope":1424,"src":"805:153:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":648,"nodeType":"Block","src":"1228:123:2","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":636,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":634,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":627,"src":"1316:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":635,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1321:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1316:6:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":645,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":643,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":640,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":638,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":627,"src":"1330:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":639,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1334:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1330:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":641,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1329:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":642,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":629,"src":"1339:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1329:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":644,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1343:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1329:15:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":646,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1316:28:2","trueExpression":{"hexValue":"30","id":637,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1325:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":633,"id":647,"nodeType":"Return","src":"1309:35:2"}]},"documentation":{"id":625,"nodeType":"StructuredDocumentation","src":"964:188:2","text":" @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds up instead\n of rounding down."},"id":649,"implemented":true,"kind":"function","modifiers":[],"name":"ceilDiv","nameLocation":"1166:7:2","nodeType":"FunctionDefinition","parameters":{"id":630,"nodeType":"ParameterList","parameters":[{"constant":false,"id":627,"mutability":"mutable","name":"a","nameLocation":"1182:1:2","nodeType":"VariableDeclaration","scope":649,"src":"1174:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":626,"name":"uint256","nodeType":"ElementaryTypeName","src":"1174:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":629,"mutability":"mutable","name":"b","nameLocation":"1193:1:2","nodeType":"VariableDeclaration","scope":649,"src":"1185:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":628,"name":"uint256","nodeType":"ElementaryTypeName","src":"1185:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1173:22:2"},"returnParameters":{"id":633,"nodeType":"ParameterList","parameters":[{"constant":false,"id":632,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":649,"src":"1219:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":631,"name":"uint256","nodeType":"ElementaryTypeName","src":"1219:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1218:9:2"},"scope":1424,"src":"1157:194:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":771,"nodeType":"Block","src":"1765:4115:2","statements":[{"id":770,"nodeType":"UncheckedBlock","src":"1775:4099:2","statements":[{"assignments":[662],"declarations":[{"constant":false,"id":662,"mutability":"mutable","name":"prod0","nameLocation":"2104:5:2","nodeType":"VariableDeclaration","scope":770,"src":"2096:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":661,"name":"uint256","nodeType":"ElementaryTypeName","src":"2096:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":663,"nodeType":"VariableDeclarationStatement","src":"2096:13:2"},{"assignments":[665],"declarations":[{"constant":false,"id":665,"mutability":"mutable","name":"prod1","nameLocation":"2176:5:2","nodeType":"VariableDeclaration","scope":770,"src":"2168:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":664,"name":"uint256","nodeType":"ElementaryTypeName","src":"2168:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":666,"nodeType":"VariableDeclarationStatement","src":"2168:13:2"},{"AST":{"nodeType":"YulBlock","src":"2248:157:2","statements":[{"nodeType":"YulVariableDeclaration","src":"2266:30:2","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2283:1:2"},{"name":"y","nodeType":"YulIdentifier","src":"2286:1:2"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2293:1:2","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2289:3:2"},"nodeType":"YulFunctionCall","src":"2289:6:2"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"2276:6:2"},"nodeType":"YulFunctionCall","src":"2276:20:2"},"variables":[{"name":"mm","nodeType":"YulTypedName","src":"2270:2:2","type":""}]},{"nodeType":"YulAssignment","src":"2313:18:2","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2326:1:2"},{"name":"y","nodeType":"YulIdentifier","src":"2329:1:2"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"2322:3:2"},"nodeType":"YulFunctionCall","src":"2322:9:2"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"2313:5:2"}]},{"nodeType":"YulAssignment","src":"2348:43:2","value":{"arguments":[{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2365:2:2"},{"name":"prod0","nodeType":"YulIdentifier","src":"2369:5:2"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2361:3:2"},"nodeType":"YulFunctionCall","src":"2361:14:2"},{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2380:2:2"},{"name":"prod0","nodeType":"YulIdentifier","src":"2384:5:2"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2377:2:2"},"nodeType":"YulFunctionCall","src":"2377:13:2"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2357:3:2"},"nodeType":"YulFunctionCall","src":"2357:34:2"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"2348:5:2"}]}]},"evmVersion":"london","externalReferences":[{"declaration":662,"isOffset":false,"isSlot":false,"src":"2313:5:2","valueSize":1},{"declaration":662,"isOffset":false,"isSlot":false,"src":"2369:5:2","valueSize":1},{"declaration":662,"isOffset":false,"isSlot":false,"src":"2384:5:2","valueSize":1},{"declaration":665,"isOffset":false,"isSlot":false,"src":"2348:5:2","valueSize":1},{"declaration":652,"isOffset":false,"isSlot":false,"src":"2283:1:2","valueSize":1},{"declaration":652,"isOffset":false,"isSlot":false,"src":"2326:1:2","valueSize":1},{"declaration":654,"isOffset":false,"isSlot":false,"src":"2286:1:2","valueSize":1},{"declaration":654,"isOffset":false,"isSlot":false,"src":"2329:1:2","valueSize":1}],"id":667,"nodeType":"InlineAssembly","src":"2239:166:2"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":670,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":668,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":665,"src":"2486:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":669,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2495:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2486:10:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":676,"nodeType":"IfStatement","src":"2482:368:2","trueBody":{"id":675,"nodeType":"Block","src":"2498:352:2","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":673,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":671,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":662,"src":"2816:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":672,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":656,"src":"2824:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2816:19:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":660,"id":674,"nodeType":"Return","src":"2809:26:2"}]}},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":680,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":678,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":656,"src":"2960:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":679,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":665,"src":"2974:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2960:19:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d6174683a206d756c446976206f766572666c6f77","id":681,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2981:23:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_d87093691d63b122ac2c14d1b11554b287e2431cf2b03550b3be7cffb0f86851","typeString":"literal_string \"Math: mulDiv overflow\""},"value":"Math: mulDiv overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d87093691d63b122ac2c14d1b11554b287e2431cf2b03550b3be7cffb0f86851","typeString":"literal_string \"Math: mulDiv overflow\""}],"id":677,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2952:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":682,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2952:53:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":683,"nodeType":"ExpressionStatement","src":"2952:53:2"},{"assignments":[685],"declarations":[{"constant":false,"id":685,"mutability":"mutable","name":"remainder","nameLocation":"3269:9:2","nodeType":"VariableDeclaration","scope":770,"src":"3261:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":684,"name":"uint256","nodeType":"ElementaryTypeName","src":"3261:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":686,"nodeType":"VariableDeclarationStatement","src":"3261:17:2"},{"AST":{"nodeType":"YulBlock","src":"3301:291:2","statements":[{"nodeType":"YulAssignment","src":"3370:38:2","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"3390:1:2"},{"name":"y","nodeType":"YulIdentifier","src":"3393:1:2"},{"name":"denominator","nodeType":"YulIdentifier","src":"3396:11:2"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"3383:6:2"},"nodeType":"YulFunctionCall","src":"3383:25:2"},"variableNames":[{"name":"remainder","nodeType":"YulIdentifier","src":"3370:9:2"}]},{"nodeType":"YulAssignment","src":"3490:41:2","value":{"arguments":[{"name":"prod1","nodeType":"YulIdentifier","src":"3503:5:2"},{"arguments":[{"name":"remainder","nodeType":"YulIdentifier","src":"3513:9:2"},{"name":"prod0","nodeType":"YulIdentifier","src":"3524:5:2"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3510:2:2"},"nodeType":"YulFunctionCall","src":"3510:20:2"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3499:3:2"},"nodeType":"YulFunctionCall","src":"3499:32:2"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"3490:5:2"}]},{"nodeType":"YulAssignment","src":"3548:30:2","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"3561:5:2"},{"name":"remainder","nodeType":"YulIdentifier","src":"3568:9:2"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3557:3:2"},"nodeType":"YulFunctionCall","src":"3557:21:2"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"3548:5:2"}]}]},"evmVersion":"london","externalReferences":[{"declaration":656,"isOffset":false,"isSlot":false,"src":"3396:11:2","valueSize":1},{"declaration":662,"isOffset":false,"isSlot":false,"src":"3524:5:2","valueSize":1},{"declaration":662,"isOffset":false,"isSlot":false,"src":"3548:5:2","valueSize":1},{"declaration":662,"isOffset":false,"isSlot":false,"src":"3561:5:2","valueSize":1},{"declaration":665,"isOffset":false,"isSlot":false,"src":"3490:5:2","valueSize":1},{"declaration":665,"isOffset":false,"isSlot":false,"src":"3503:5:2","valueSize":1},{"declaration":685,"isOffset":false,"isSlot":false,"src":"3370:9:2","valueSize":1},{"declaration":685,"isOffset":false,"isSlot":false,"src":"3513:9:2","valueSize":1},{"declaration":685,"isOffset":false,"isSlot":false,"src":"3568:9:2","valueSize":1},{"declaration":652,"isOffset":false,"isSlot":false,"src":"3390:1:2","valueSize":1},{"declaration":654,"isOffset":false,"isSlot":false,"src":"3393:1:2","valueSize":1}],"id":687,"nodeType":"InlineAssembly","src":"3292:300:2"},{"assignments":[689],"declarations":[{"constant":false,"id":689,"mutability":"mutable","name":"twos","nameLocation":"3907:4:2","nodeType":"VariableDeclaration","scope":770,"src":"3899:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":688,"name":"uint256","nodeType":"ElementaryTypeName","src":"3899:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":697,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":696,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":690,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":656,"src":"3914:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":694,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":692,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"~","prefix":true,"src":"3929:12:2","subExpression":{"id":691,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":656,"src":"3930:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":693,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3944:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3929:16:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":695,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3928:18:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3914:32:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3899:47:2"},{"AST":{"nodeType":"YulBlock","src":"3969:362:2","statements":[{"nodeType":"YulAssignment","src":"4034:37:2","value":{"arguments":[{"name":"denominator","nodeType":"YulIdentifier","src":"4053:11:2"},{"name":"twos","nodeType":"YulIdentifier","src":"4066:4:2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4049:3:2"},"nodeType":"YulFunctionCall","src":"4049:22:2"},"variableNames":[{"name":"denominator","nodeType":"YulIdentifier","src":"4034:11:2"}]},{"nodeType":"YulAssignment","src":"4138:25:2","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"4151:5:2"},{"name":"twos","nodeType":"YulIdentifier","src":"4158:4:2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4147:3:2"},"nodeType":"YulFunctionCall","src":"4147:16:2"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"4138:5:2"}]},{"nodeType":"YulAssignment","src":"4278:39:2","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4298:1:2","type":"","value":"0"},{"name":"twos","nodeType":"YulIdentifier","src":"4301:4:2"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4294:3:2"},"nodeType":"YulFunctionCall","src":"4294:12:2"},{"name":"twos","nodeType":"YulIdentifier","src":"4308:4:2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4290:3:2"},"nodeType":"YulFunctionCall","src":"4290:23:2"},{"kind":"number","nodeType":"YulLiteral","src":"4315:1:2","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4286:3:2"},"nodeType":"YulFunctionCall","src":"4286:31:2"},"variableNames":[{"name":"twos","nodeType":"YulIdentifier","src":"4278:4:2"}]}]},"evmVersion":"london","externalReferences":[{"declaration":656,"isOffset":false,"isSlot":false,"src":"4034:11:2","valueSize":1},{"declaration":656,"isOffset":false,"isSlot":false,"src":"4053:11:2","valueSize":1},{"declaration":662,"isOffset":false,"isSlot":false,"src":"4138:5:2","valueSize":1},{"declaration":662,"isOffset":false,"isSlot":false,"src":"4151:5:2","valueSize":1},{"declaration":689,"isOffset":false,"isSlot":false,"src":"4066:4:2","valueSize":1},{"declaration":689,"isOffset":false,"isSlot":false,"src":"4158:4:2","valueSize":1},{"declaration":689,"isOffset":false,"isSlot":false,"src":"4278:4:2","valueSize":1},{"declaration":689,"isOffset":false,"isSlot":false,"src":"4301:4:2","valueSize":1},{"declaration":689,"isOffset":false,"isSlot":false,"src":"4308:4:2","valueSize":1}],"id":698,"nodeType":"InlineAssembly","src":"3960:371:2"},{"expression":{"id":703,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":699,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":662,"src":"4397:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":702,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":700,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":665,"src":"4406:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":701,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":689,"src":"4414:4:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4406:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4397:21:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":704,"nodeType":"ExpressionStatement","src":"4397:21:2"},{"assignments":[706],"declarations":[{"constant":false,"id":706,"mutability":"mutable","name":"inverse","nameLocation":"4744:7:2","nodeType":"VariableDeclaration","scope":770,"src":"4736:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":705,"name":"uint256","nodeType":"ElementaryTypeName","src":"4736:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":713,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":712,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":709,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":707,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4755:1:2","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":708,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":656,"src":"4759:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4755:15:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":710,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4754:17:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":711,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4774:1:2","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"4754:21:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4736:39:2"},{"expression":{"id":720,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":714,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":706,"src":"4992:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":719,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":715,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5003:1:2","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":718,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":716,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":656,"src":"5007:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":717,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":706,"src":"5021:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5007:21:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5003:25:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4992:36:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":721,"nodeType":"ExpressionStatement","src":"4992:36:2"},{"expression":{"id":728,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":722,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":706,"src":"5061:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":727,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":723,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5072:1:2","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":726,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":724,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":656,"src":"5076:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":725,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":706,"src":"5090:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5076:21:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5072:25:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5061:36:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":729,"nodeType":"ExpressionStatement","src":"5061:36:2"},{"expression":{"id":736,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":730,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":706,"src":"5131:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":735,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":731,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5142:1:2","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":734,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":732,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":656,"src":"5146:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":733,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":706,"src":"5160:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5146:21:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5142:25:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5131:36:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":737,"nodeType":"ExpressionStatement","src":"5131:36:2"},{"expression":{"id":744,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":738,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":706,"src":"5201:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":743,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":739,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5212:1:2","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":742,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":740,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":656,"src":"5216:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":741,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":706,"src":"5230:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5216:21:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5212:25:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5201:36:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":745,"nodeType":"ExpressionStatement","src":"5201:36:2"},{"expression":{"id":752,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":746,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":706,"src":"5271:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":751,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":747,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5282:1:2","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":750,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":748,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":656,"src":"5286:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":749,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":706,"src":"5300:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5286:21:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5282:25:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5271:36:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":753,"nodeType":"ExpressionStatement","src":"5271:36:2"},{"expression":{"id":760,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":754,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":706,"src":"5342:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":759,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":755,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5353:1:2","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":758,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":756,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":656,"src":"5357:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":757,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":706,"src":"5371:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5357:21:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5353:25:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5342:36:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":761,"nodeType":"ExpressionStatement","src":"5342:36:2"},{"expression":{"id":766,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":762,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":659,"src":"5812:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":765,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":763,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":662,"src":"5821:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":764,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":706,"src":"5829:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5821:15:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5812:24:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":767,"nodeType":"ExpressionStatement","src":"5812:24:2"},{"expression":{"id":768,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":659,"src":"5857:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":660,"id":769,"nodeType":"Return","src":"5850:13:2"}]}]},"documentation":{"id":650,"nodeType":"StructuredDocumentation","src":"1357:305:2","text":" @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n with further edits by Uniswap Labs also under MIT license."},"id":772,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"1676:6:2","nodeType":"FunctionDefinition","parameters":{"id":657,"nodeType":"ParameterList","parameters":[{"constant":false,"id":652,"mutability":"mutable","name":"x","nameLocation":"1691:1:2","nodeType":"VariableDeclaration","scope":772,"src":"1683:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":651,"name":"uint256","nodeType":"ElementaryTypeName","src":"1683:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":654,"mutability":"mutable","name":"y","nameLocation":"1702:1:2","nodeType":"VariableDeclaration","scope":772,"src":"1694:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":653,"name":"uint256","nodeType":"ElementaryTypeName","src":"1694:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":656,"mutability":"mutable","name":"denominator","nameLocation":"1713:11:2","nodeType":"VariableDeclaration","scope":772,"src":"1705:19:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":655,"name":"uint256","nodeType":"ElementaryTypeName","src":"1705:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1682:43:2"},"returnParameters":{"id":660,"nodeType":"ParameterList","parameters":[{"constant":false,"id":659,"mutability":"mutable","name":"result","nameLocation":"1757:6:2","nodeType":"VariableDeclaration","scope":772,"src":"1749:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":658,"name":"uint256","nodeType":"ElementaryTypeName","src":"1749:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1748:16:2"},"scope":1424,"src":"1667:4213:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":815,"nodeType":"Block","src":"6122:189:2","statements":[{"assignments":[788],"declarations":[{"constant":false,"id":788,"mutability":"mutable","name":"result","nameLocation":"6140:6:2","nodeType":"VariableDeclaration","scope":815,"src":"6132:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":787,"name":"uint256","nodeType":"ElementaryTypeName","src":"6132:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":794,"initialValue":{"arguments":[{"id":790,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":775,"src":"6156:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":791,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":777,"src":"6159:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":792,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":779,"src":"6162:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":789,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[772,816],"referencedDeclaration":772,"src":"6149:6:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":793,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6149:25:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6132:42:2"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":806,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$565","typeString":"enum Math.Rounding"},"id":798,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":795,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":782,"src":"6188:8:2","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$565","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":796,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":565,"src":"6200:8:2","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$565_$","typeString":"type(enum Math.Rounding)"}},"id":797,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":563,"src":"6200:11:2","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$565","typeString":"enum Math.Rounding"}},"src":"6188:23:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":805,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":800,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":775,"src":"6222:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":801,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":777,"src":"6225:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":802,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":779,"src":"6228:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":799,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"6215:6:2","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":803,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6215:25:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":804,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6243:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6215:29:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6188:56:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":812,"nodeType":"IfStatement","src":"6184:98:2","trueBody":{"id":811,"nodeType":"Block","src":"6246:36:2","statements":[{"expression":{"id":809,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":807,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":788,"src":"6260:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":808,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6270:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6260:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":810,"nodeType":"ExpressionStatement","src":"6260:11:2"}]}},{"expression":{"id":813,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":788,"src":"6298:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":786,"id":814,"nodeType":"Return","src":"6291:13:2"}]},"documentation":{"id":773,"nodeType":"StructuredDocumentation","src":"5886:121:2","text":" @notice Calculates x * y / denominator with full precision, following the selected rounding direction."},"id":816,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"6021:6:2","nodeType":"FunctionDefinition","parameters":{"id":783,"nodeType":"ParameterList","parameters":[{"constant":false,"id":775,"mutability":"mutable","name":"x","nameLocation":"6036:1:2","nodeType":"VariableDeclaration","scope":816,"src":"6028:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":774,"name":"uint256","nodeType":"ElementaryTypeName","src":"6028:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":777,"mutability":"mutable","name":"y","nameLocation":"6047:1:2","nodeType":"VariableDeclaration","scope":816,"src":"6039:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":776,"name":"uint256","nodeType":"ElementaryTypeName","src":"6039:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":779,"mutability":"mutable","name":"denominator","nameLocation":"6058:11:2","nodeType":"VariableDeclaration","scope":816,"src":"6050:19:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":778,"name":"uint256","nodeType":"ElementaryTypeName","src":"6050:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":782,"mutability":"mutable","name":"rounding","nameLocation":"6080:8:2","nodeType":"VariableDeclaration","scope":816,"src":"6071:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$565","typeString":"enum Math.Rounding"},"typeName":{"id":781,"nodeType":"UserDefinedTypeName","pathNode":{"id":780,"name":"Rounding","nodeType":"IdentifierPath","referencedDeclaration":565,"src":"6071:8:2"},"referencedDeclaration":565,"src":"6071:8:2","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$565","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"6027:62:2"},"returnParameters":{"id":786,"nodeType":"ParameterList","parameters":[{"constant":false,"id":785,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":816,"src":"6113:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":784,"name":"uint256","nodeType":"ElementaryTypeName","src":"6113:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6112:9:2"},"scope":1424,"src":"6012:299:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":927,"nodeType":"Block","src":"6587:1585:2","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":826,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":824,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":819,"src":"6601:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":825,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6606:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6601:6:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":830,"nodeType":"IfStatement","src":"6597:45:2","trueBody":{"id":829,"nodeType":"Block","src":"6609:33:2","statements":[{"expression":{"hexValue":"30","id":827,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6630:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":823,"id":828,"nodeType":"Return","src":"6623:8:2"}]}},{"assignments":[832],"declarations":[{"constant":false,"id":832,"mutability":"mutable","name":"result","nameLocation":"7329:6:2","nodeType":"VariableDeclaration","scope":927,"src":"7321:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":831,"name":"uint256","nodeType":"ElementaryTypeName","src":"7321:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":841,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":840,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":833,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7338:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":838,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":835,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":819,"src":"7349:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":834,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[1096,1132],"referencedDeclaration":1096,"src":"7344:4:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":836,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7344:7:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":837,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7355:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7344:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":839,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7343:14:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7338:19:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7321:36:2"},{"id":926,"nodeType":"UncheckedBlock","src":"7758:408:2","statements":[{"expression":{"id":851,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":842,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":832,"src":"7782:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":850,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":847,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":843,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":832,"src":"7792:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":846,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":844,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":819,"src":"7801:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":845,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":832,"src":"7805:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7801:10:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7792:19:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":848,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7791:21:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":849,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7816:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7791:26:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7782:35:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":852,"nodeType":"ExpressionStatement","src":"7782:35:2"},{"expression":{"id":862,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":853,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":832,"src":"7831:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":861,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":858,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":854,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":832,"src":"7841:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":857,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":855,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":819,"src":"7850:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":856,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":832,"src":"7854:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7850:10:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7841:19:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":859,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7840:21:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":860,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7865:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7840:26:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7831:35:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":863,"nodeType":"ExpressionStatement","src":"7831:35:2"},{"expression":{"id":873,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":864,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":832,"src":"7880:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":872,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":869,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":865,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":832,"src":"7890:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":868,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":866,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":819,"src":"7899:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":867,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":832,"src":"7903:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7899:10:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7890:19:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":870,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7889:21:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":871,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7914:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7889:26:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7880:35:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":874,"nodeType":"ExpressionStatement","src":"7880:35:2"},{"expression":{"id":884,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":875,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":832,"src":"7929:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":883,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":880,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":876,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":832,"src":"7939:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":879,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":877,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":819,"src":"7948:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":878,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":832,"src":"7952:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7948:10:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7939:19:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":881,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7938:21:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":882,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7963:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7938:26:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7929:35:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":885,"nodeType":"ExpressionStatement","src":"7929:35:2"},{"expression":{"id":895,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":886,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":832,"src":"7978:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":894,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":891,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":887,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":832,"src":"7988:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":890,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":888,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":819,"src":"7997:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":889,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":832,"src":"8001:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7997:10:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7988:19:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":892,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7987:21:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":893,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8012:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7987:26:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7978:35:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":896,"nodeType":"ExpressionStatement","src":"7978:35:2"},{"expression":{"id":906,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":897,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":832,"src":"8027:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":905,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":902,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":898,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":832,"src":"8037:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":901,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":899,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":819,"src":"8046:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":900,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":832,"src":"8050:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8046:10:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8037:19:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":903,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8036:21:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":904,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8061:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8036:26:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8027:35:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":907,"nodeType":"ExpressionStatement","src":"8027:35:2"},{"expression":{"id":917,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":908,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":832,"src":"8076:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":916,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":913,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":909,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":832,"src":"8086:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":912,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":910,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":819,"src":"8095:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":911,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":832,"src":"8099:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8095:10:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8086:19:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":914,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8085:21:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":915,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8110:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8085:26:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8076:35:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":918,"nodeType":"ExpressionStatement","src":"8076:35:2"},{"expression":{"arguments":[{"id":920,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":832,"src":"8136:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":923,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":921,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":819,"src":"8144:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":922,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":832,"src":"8148:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8144:10:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":919,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":601,"src":"8132:3:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":924,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8132:23:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":823,"id":925,"nodeType":"Return","src":"8125:30:2"}]}]},"documentation":{"id":817,"nodeType":"StructuredDocumentation","src":"6317:208:2","text":" @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."},"id":928,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"6539:4:2","nodeType":"FunctionDefinition","parameters":{"id":820,"nodeType":"ParameterList","parameters":[{"constant":false,"id":819,"mutability":"mutable","name":"a","nameLocation":"6552:1:2","nodeType":"VariableDeclaration","scope":928,"src":"6544:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":818,"name":"uint256","nodeType":"ElementaryTypeName","src":"6544:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6543:11:2"},"returnParameters":{"id":823,"nodeType":"ParameterList","parameters":[{"constant":false,"id":822,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":928,"src":"6578:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":821,"name":"uint256","nodeType":"ElementaryTypeName","src":"6578:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6577:9:2"},"scope":1424,"src":"6530:1642:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":963,"nodeType":"Block","src":"8348:161:2","statements":[{"id":962,"nodeType":"UncheckedBlock","src":"8358:145:2","statements":[{"assignments":[940],"declarations":[{"constant":false,"id":940,"mutability":"mutable","name":"result","nameLocation":"8390:6:2","nodeType":"VariableDeclaration","scope":962,"src":"8382:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":939,"name":"uint256","nodeType":"ElementaryTypeName","src":"8382:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":944,"initialValue":{"arguments":[{"id":942,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":931,"src":"8404:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":941,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[928,964],"referencedDeclaration":928,"src":"8399:4:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":943,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8399:7:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8382:24:2"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":960,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":945,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":940,"src":"8427:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":955,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$565","typeString":"enum Math.Rounding"},"id":949,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":946,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":934,"src":"8437:8:2","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$565","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":947,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":565,"src":"8449:8:2","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$565_$","typeString":"type(enum Math.Rounding)"}},"id":948,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":563,"src":"8449:11:2","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$565","typeString":"enum Math.Rounding"}},"src":"8437:23:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":954,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":952,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":950,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":940,"src":"8464:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":951,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":940,"src":"8473:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8464:15:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":953,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":931,"src":"8482:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8464:19:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8437:46:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":957,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8490:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":958,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8437:54:2","trueExpression":{"hexValue":"31","id":956,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8486:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":959,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8436:56:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"8427:65:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":938,"id":961,"nodeType":"Return","src":"8420:72:2"}]}]},"documentation":{"id":929,"nodeType":"StructuredDocumentation","src":"8178:89:2","text":" @notice Calculates sqrt(a), following the selected rounding direction."},"id":964,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"8281:4:2","nodeType":"FunctionDefinition","parameters":{"id":935,"nodeType":"ParameterList","parameters":[{"constant":false,"id":931,"mutability":"mutable","name":"a","nameLocation":"8294:1:2","nodeType":"VariableDeclaration","scope":964,"src":"8286:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":930,"name":"uint256","nodeType":"ElementaryTypeName","src":"8286:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":934,"mutability":"mutable","name":"rounding","nameLocation":"8306:8:2","nodeType":"VariableDeclaration","scope":964,"src":"8297:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$565","typeString":"enum Math.Rounding"},"typeName":{"id":933,"nodeType":"UserDefinedTypeName","pathNode":{"id":932,"name":"Rounding","nodeType":"IdentifierPath","referencedDeclaration":565,"src":"8297:8:2"},"referencedDeclaration":565,"src":"8297:8:2","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$565","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"8285:30:2"},"returnParameters":{"id":938,"nodeType":"ParameterList","parameters":[{"constant":false,"id":937,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":964,"src":"8339:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":936,"name":"uint256","nodeType":"ElementaryTypeName","src":"8339:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8338:9:2"},"scope":1424,"src":"8272:237:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1095,"nodeType":"Block","src":"8694:922:2","statements":[{"assignments":[973],"declarations":[{"constant":false,"id":973,"mutability":"mutable","name":"result","nameLocation":"8712:6:2","nodeType":"VariableDeclaration","scope":1095,"src":"8704:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":972,"name":"uint256","nodeType":"ElementaryTypeName","src":"8704:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":975,"initialValue":{"hexValue":"30","id":974,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8721:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8704:18:2"},{"id":1092,"nodeType":"UncheckedBlock","src":"8732:855:2","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":980,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":978,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":976,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":967,"src":"8760:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":977,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8769:3:2","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8760:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":979,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8775:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8760:16:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":990,"nodeType":"IfStatement","src":"8756:99:2","trueBody":{"id":989,"nodeType":"Block","src":"8778:77:2","statements":[{"expression":{"id":983,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":981,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":967,"src":"8796:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":982,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8806:3:2","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8796:13:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":984,"nodeType":"ExpressionStatement","src":"8796:13:2"},{"expression":{"id":987,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":985,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":973,"src":"8827:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"313238","id":986,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8837:3:2","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8827:13:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":988,"nodeType":"ExpressionStatement","src":"8827:13:2"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":995,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":993,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":991,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":967,"src":"8872:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":992,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8881:2:2","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8872:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":994,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8886:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8872:15:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1005,"nodeType":"IfStatement","src":"8868:96:2","trueBody":{"id":1004,"nodeType":"Block","src":"8889:75:2","statements":[{"expression":{"id":998,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":996,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":967,"src":"8907:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":997,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8917:2:2","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8907:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":999,"nodeType":"ExpressionStatement","src":"8907:12:2"},{"expression":{"id":1002,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1000,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":973,"src":"8937:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":1001,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8947:2:2","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8937:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1003,"nodeType":"ExpressionStatement","src":"8937:12:2"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1010,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1008,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1006,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":967,"src":"8981:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":1007,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8990:2:2","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8981:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1009,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8995:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8981:15:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1020,"nodeType":"IfStatement","src":"8977:96:2","trueBody":{"id":1019,"nodeType":"Block","src":"8998:75:2","statements":[{"expression":{"id":1013,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1011,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":967,"src":"9016:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":1012,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9026:2:2","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"9016:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1014,"nodeType":"ExpressionStatement","src":"9016:12:2"},{"expression":{"id":1017,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1015,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":973,"src":"9046:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":1016,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9056:2:2","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"9046:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1018,"nodeType":"ExpressionStatement","src":"9046:12:2"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1025,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1023,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1021,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":967,"src":"9090:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":1022,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9099:2:2","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9090:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1024,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9104:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9090:15:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1035,"nodeType":"IfStatement","src":"9086:96:2","trueBody":{"id":1034,"nodeType":"Block","src":"9107:75:2","statements":[{"expression":{"id":1028,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1026,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":967,"src":"9125:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":1027,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9135:2:2","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9125:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1029,"nodeType":"ExpressionStatement","src":"9125:12:2"},{"expression":{"id":1032,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1030,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":973,"src":"9155:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":1031,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9165:2:2","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9155:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1033,"nodeType":"ExpressionStatement","src":"9155:12:2"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1040,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1038,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1036,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":967,"src":"9199:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":1037,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9208:1:2","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9199:10:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1039,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9212:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9199:14:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1050,"nodeType":"IfStatement","src":"9195:93:2","trueBody":{"id":1049,"nodeType":"Block","src":"9215:73:2","statements":[{"expression":{"id":1043,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1041,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":967,"src":"9233:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":1042,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9243:1:2","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9233:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1044,"nodeType":"ExpressionStatement","src":"9233:11:2"},{"expression":{"id":1047,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1045,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":973,"src":"9262:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":1046,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9272:1:2","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9262:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1048,"nodeType":"ExpressionStatement","src":"9262:11:2"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1055,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1053,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1051,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":967,"src":"9305:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"34","id":1052,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9314:1:2","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9305:10:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1054,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9318:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9305:14:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1065,"nodeType":"IfStatement","src":"9301:93:2","trueBody":{"id":1064,"nodeType":"Block","src":"9321:73:2","statements":[{"expression":{"id":1058,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1056,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":967,"src":"9339:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":1057,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9349:1:2","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9339:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1059,"nodeType":"ExpressionStatement","src":"9339:11:2"},{"expression":{"id":1062,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1060,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":973,"src":"9368:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":1061,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9378:1:2","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9368:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1063,"nodeType":"ExpressionStatement","src":"9368:11:2"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1070,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1068,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1066,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":967,"src":"9411:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"32","id":1067,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9420:1:2","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9411:10:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1069,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9424:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9411:14:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1080,"nodeType":"IfStatement","src":"9407:93:2","trueBody":{"id":1079,"nodeType":"Block","src":"9427:73:2","statements":[{"expression":{"id":1073,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1071,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":967,"src":"9445:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"32","id":1072,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9455:1:2","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9445:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1074,"nodeType":"ExpressionStatement","src":"9445:11:2"},{"expression":{"id":1077,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1075,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":973,"src":"9474:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":1076,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9484:1:2","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9474:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1078,"nodeType":"ExpressionStatement","src":"9474:11:2"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1085,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1083,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1081,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":967,"src":"9517:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1082,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9526:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9517:10:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1084,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9530:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9517:14:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1091,"nodeType":"IfStatement","src":"9513:64:2","trueBody":{"id":1090,"nodeType":"Block","src":"9533:44:2","statements":[{"expression":{"id":1088,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1086,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":973,"src":"9551:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":1087,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9561:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9551:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1089,"nodeType":"ExpressionStatement","src":"9551:11:2"}]}}]},{"expression":{"id":1093,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":973,"src":"9603:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":971,"id":1094,"nodeType":"Return","src":"9596:13:2"}]},"documentation":{"id":965,"nodeType":"StructuredDocumentation","src":"8515:113:2","text":" @dev Return the log in base 2, rounded down, of a positive value.\n Returns 0 if given 0."},"id":1096,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"8642:4:2","nodeType":"FunctionDefinition","parameters":{"id":968,"nodeType":"ParameterList","parameters":[{"constant":false,"id":967,"mutability":"mutable","name":"value","nameLocation":"8655:5:2","nodeType":"VariableDeclaration","scope":1096,"src":"8647:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":966,"name":"uint256","nodeType":"ElementaryTypeName","src":"8647:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8646:15:2"},"returnParameters":{"id":971,"nodeType":"ParameterList","parameters":[{"constant":false,"id":970,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1096,"src":"8685:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":969,"name":"uint256","nodeType":"ElementaryTypeName","src":"8685:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8684:9:2"},"scope":1424,"src":"8633:983:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1131,"nodeType":"Block","src":"9849:165:2","statements":[{"id":1130,"nodeType":"UncheckedBlock","src":"9859:149:2","statements":[{"assignments":[1108],"declarations":[{"constant":false,"id":1108,"mutability":"mutable","name":"result","nameLocation":"9891:6:2","nodeType":"VariableDeclaration","scope":1130,"src":"9883:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1107,"name":"uint256","nodeType":"ElementaryTypeName","src":"9883:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1112,"initialValue":{"arguments":[{"id":1110,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1099,"src":"9905:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1109,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[1096,1132],"referencedDeclaration":1096,"src":"9900:4:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1111,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9900:11:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9883:28:2"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1128,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1113,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1108,"src":"9932:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1123,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$565","typeString":"enum Math.Rounding"},"id":1117,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1114,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1102,"src":"9942:8:2","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$565","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1115,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":565,"src":"9954:8:2","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$565_$","typeString":"type(enum Math.Rounding)"}},"id":1116,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":563,"src":"9954:11:2","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$565","typeString":"enum Math.Rounding"}},"src":"9942:23:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1122,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1120,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":1118,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9969:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":1119,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1108,"src":"9974:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9969:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1121,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1099,"src":"9983:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9969:19:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9942:46:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":1125,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9995:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":1126,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9942:54:2","trueExpression":{"hexValue":"31","id":1124,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9991:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":1127,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9941:56:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"9932:65:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1106,"id":1129,"nodeType":"Return","src":"9925:72:2"}]}]},"documentation":{"id":1097,"nodeType":"StructuredDocumentation","src":"9622:142:2","text":" @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":1132,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"9778:4:2","nodeType":"FunctionDefinition","parameters":{"id":1103,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1099,"mutability":"mutable","name":"value","nameLocation":"9791:5:2","nodeType":"VariableDeclaration","scope":1132,"src":"9783:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1098,"name":"uint256","nodeType":"ElementaryTypeName","src":"9783:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1102,"mutability":"mutable","name":"rounding","nameLocation":"9807:8:2","nodeType":"VariableDeclaration","scope":1132,"src":"9798:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$565","typeString":"enum Math.Rounding"},"typeName":{"id":1101,"nodeType":"UserDefinedTypeName","pathNode":{"id":1100,"name":"Rounding","nodeType":"IdentifierPath","referencedDeclaration":565,"src":"9798:8:2"},"referencedDeclaration":565,"src":"9798:8:2","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$565","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"9782:34:2"},"returnParameters":{"id":1106,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1105,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1132,"src":"9840:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1104,"name":"uint256","nodeType":"ElementaryTypeName","src":"9840:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9839:9:2"},"scope":1424,"src":"9769:245:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1260,"nodeType":"Block","src":"10201:854:2","statements":[{"assignments":[1141],"declarations":[{"constant":false,"id":1141,"mutability":"mutable","name":"result","nameLocation":"10219:6:2","nodeType":"VariableDeclaration","scope":1260,"src":"10211:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1140,"name":"uint256","nodeType":"ElementaryTypeName","src":"10211:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1143,"initialValue":{"hexValue":"30","id":1142,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10228:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10211:18:2"},{"id":1257,"nodeType":"UncheckedBlock","src":"10239:787:2","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1148,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1144,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1135,"src":"10267:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":1147,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1145,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10276:2:2","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":1146,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10282:2:2","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10276:8:2","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10267:17:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1160,"nodeType":"IfStatement","src":"10263:103:2","trueBody":{"id":1159,"nodeType":"Block","src":"10286:80:2","statements":[{"expression":{"id":1153,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1149,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1135,"src":"10304:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":1152,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1150,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10313:2:2","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":1151,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10319:2:2","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10313:8:2","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10304:17:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1154,"nodeType":"ExpressionStatement","src":"10304:17:2"},{"expression":{"id":1157,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1155,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1141,"src":"10339:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":1156,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10349:2:2","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10339:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1158,"nodeType":"ExpressionStatement","src":"10339:12:2"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1165,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1161,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1135,"src":"10383:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":1164,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1162,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10392:2:2","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":1163,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10398:2:2","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10392:8:2","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10383:17:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1177,"nodeType":"IfStatement","src":"10379:103:2","trueBody":{"id":1176,"nodeType":"Block","src":"10402:80:2","statements":[{"expression":{"id":1170,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1166,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1135,"src":"10420:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":1169,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1167,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10429:2:2","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":1168,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10435:2:2","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10429:8:2","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10420:17:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1171,"nodeType":"ExpressionStatement","src":"10420:17:2"},{"expression":{"id":1174,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1172,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1141,"src":"10455:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":1173,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10465:2:2","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10455:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1175,"nodeType":"ExpressionStatement","src":"10455:12:2"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1182,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1178,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1135,"src":"10499:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":1181,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1179,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10508:2:2","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":1180,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10514:2:2","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10508:8:2","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10499:17:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1194,"nodeType":"IfStatement","src":"10495:103:2","trueBody":{"id":1193,"nodeType":"Block","src":"10518:80:2","statements":[{"expression":{"id":1187,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1183,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1135,"src":"10536:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":1186,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1184,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10545:2:2","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":1185,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10551:2:2","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10545:8:2","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10536:17:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1188,"nodeType":"ExpressionStatement","src":"10536:17:2"},{"expression":{"id":1191,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1189,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1141,"src":"10571:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":1190,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10581:2:2","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10571:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1192,"nodeType":"ExpressionStatement","src":"10571:12:2"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1199,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1195,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1135,"src":"10615:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":1198,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1196,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10624:2:2","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":1197,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10630:1:2","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10624:7:2","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10615:16:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1211,"nodeType":"IfStatement","src":"10611:100:2","trueBody":{"id":1210,"nodeType":"Block","src":"10633:78:2","statements":[{"expression":{"id":1204,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1200,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1135,"src":"10651:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":1203,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1201,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10660:2:2","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":1202,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10666:1:2","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10660:7:2","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10651:16:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1205,"nodeType":"ExpressionStatement","src":"10651:16:2"},{"expression":{"id":1208,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1206,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1141,"src":"10685:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":1207,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10695:1:2","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10685:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1209,"nodeType":"ExpressionStatement","src":"10685:11:2"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1216,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1212,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1135,"src":"10728:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":1215,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1213,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10737:2:2","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":1214,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10743:1:2","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10737:7:2","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10728:16:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1228,"nodeType":"IfStatement","src":"10724:100:2","trueBody":{"id":1227,"nodeType":"Block","src":"10746:78:2","statements":[{"expression":{"id":1221,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1217,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1135,"src":"10764:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":1220,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1218,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10773:2:2","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":1219,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10779:1:2","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10773:7:2","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10764:16:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1222,"nodeType":"ExpressionStatement","src":"10764:16:2"},{"expression":{"id":1225,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1223,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1141,"src":"10798:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":1224,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10808:1:2","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10798:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1226,"nodeType":"ExpressionStatement","src":"10798:11:2"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1233,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1229,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1135,"src":"10841:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":1232,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1230,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10850:2:2","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":1231,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10856:1:2","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10850:7:2","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10841:16:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1245,"nodeType":"IfStatement","src":"10837:100:2","trueBody":{"id":1244,"nodeType":"Block","src":"10859:78:2","statements":[{"expression":{"id":1238,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1234,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1135,"src":"10877:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":1237,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1235,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10886:2:2","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":1236,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10892:1:2","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10886:7:2","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10877:16:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1239,"nodeType":"ExpressionStatement","src":"10877:16:2"},{"expression":{"id":1242,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1240,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1141,"src":"10911:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":1241,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10921:1:2","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10911:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1243,"nodeType":"ExpressionStatement","src":"10911:11:2"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1250,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1246,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1135,"src":"10954:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"id":1249,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1247,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10963:2:2","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"31","id":1248,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10969:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10963:7:2","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}},"src":"10954:16:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1256,"nodeType":"IfStatement","src":"10950:66:2","trueBody":{"id":1255,"nodeType":"Block","src":"10972:44:2","statements":[{"expression":{"id":1253,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1251,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1141,"src":"10990:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":1252,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11000:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10990:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1254,"nodeType":"ExpressionStatement","src":"10990:11:2"}]}}]},{"expression":{"id":1258,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1141,"src":"11042:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1139,"id":1259,"nodeType":"Return","src":"11035:13:2"}]},"documentation":{"id":1133,"nodeType":"StructuredDocumentation","src":"10020:114:2","text":" @dev Return the log in base 10, rounded down, of a positive value.\n Returns 0 if given 0."},"id":1261,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"10148:5:2","nodeType":"FunctionDefinition","parameters":{"id":1136,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1135,"mutability":"mutable","name":"value","nameLocation":"10162:5:2","nodeType":"VariableDeclaration","scope":1261,"src":"10154:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1134,"name":"uint256","nodeType":"ElementaryTypeName","src":"10154:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10153:15:2"},"returnParameters":{"id":1139,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1138,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1261,"src":"10192:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1137,"name":"uint256","nodeType":"ElementaryTypeName","src":"10192:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10191:9:2"},"scope":1424,"src":"10139:916:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1296,"nodeType":"Block","src":"11290:167:2","statements":[{"id":1295,"nodeType":"UncheckedBlock","src":"11300:151:2","statements":[{"assignments":[1273],"declarations":[{"constant":false,"id":1273,"mutability":"mutable","name":"result","nameLocation":"11332:6:2","nodeType":"VariableDeclaration","scope":1295,"src":"11324:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1272,"name":"uint256","nodeType":"ElementaryTypeName","src":"11324:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1277,"initialValue":{"arguments":[{"id":1275,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1264,"src":"11347:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1274,"name":"log10","nodeType":"Identifier","overloadedDeclarations":[1261,1297],"referencedDeclaration":1261,"src":"11341:5:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1276,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11341:12:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11324:29:2"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1293,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1278,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1273,"src":"11374:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1288,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$565","typeString":"enum Math.Rounding"},"id":1282,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1279,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1267,"src":"11384:8:2","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$565","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1280,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":565,"src":"11396:8:2","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$565_$","typeString":"type(enum Math.Rounding)"}},"id":1281,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":563,"src":"11396:11:2","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$565","typeString":"enum Math.Rounding"}},"src":"11384:23:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1287,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1285,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1283,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11411:2:2","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":1284,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1273,"src":"11417:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11411:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1286,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1264,"src":"11426:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11411:20:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"11384:47:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":1290,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11438:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":1291,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"11384:55:2","trueExpression":{"hexValue":"31","id":1289,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11434:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":1292,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11383:57:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11374:66:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1271,"id":1294,"nodeType":"Return","src":"11367:73:2"}]}]},"documentation":{"id":1262,"nodeType":"StructuredDocumentation","src":"11061:143:2","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":1297,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"11218:5:2","nodeType":"FunctionDefinition","parameters":{"id":1268,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1264,"mutability":"mutable","name":"value","nameLocation":"11232:5:2","nodeType":"VariableDeclaration","scope":1297,"src":"11224:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1263,"name":"uint256","nodeType":"ElementaryTypeName","src":"11224:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1267,"mutability":"mutable","name":"rounding","nameLocation":"11248:8:2","nodeType":"VariableDeclaration","scope":1297,"src":"11239:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$565","typeString":"enum Math.Rounding"},"typeName":{"id":1266,"nodeType":"UserDefinedTypeName","pathNode":{"id":1265,"name":"Rounding","nodeType":"IdentifierPath","referencedDeclaration":565,"src":"11239:8:2"},"referencedDeclaration":565,"src":"11239:8:2","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$565","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"11223:34:2"},"returnParameters":{"id":1271,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1270,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1297,"src":"11281:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1269,"name":"uint256","nodeType":"ElementaryTypeName","src":"11281:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11280:9:2"},"scope":1424,"src":"11209:248:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1383,"nodeType":"Block","src":"11771:600:2","statements":[{"assignments":[1306],"declarations":[{"constant":false,"id":1306,"mutability":"mutable","name":"result","nameLocation":"11789:6:2","nodeType":"VariableDeclaration","scope":1383,"src":"11781:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1305,"name":"uint256","nodeType":"ElementaryTypeName","src":"11781:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1308,"initialValue":{"hexValue":"30","id":1307,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11798:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"11781:18:2"},{"id":1380,"nodeType":"UncheckedBlock","src":"11809:533:2","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1313,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1311,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1309,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1300,"src":"11837:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":1310,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11846:3:2","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11837:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1312,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11852:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11837:16:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1323,"nodeType":"IfStatement","src":"11833:98:2","trueBody":{"id":1322,"nodeType":"Block","src":"11855:76:2","statements":[{"expression":{"id":1316,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1314,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1300,"src":"11873:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":1315,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11883:3:2","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11873:13:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1317,"nodeType":"ExpressionStatement","src":"11873:13:2"},{"expression":{"id":1320,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1318,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1306,"src":"11904:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":1319,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11914:2:2","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11904:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1321,"nodeType":"ExpressionStatement","src":"11904:12:2"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1328,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1326,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1324,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1300,"src":"11948:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":1325,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11957:2:2","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11948:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1327,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11962:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11948:15:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1338,"nodeType":"IfStatement","src":"11944:95:2","trueBody":{"id":1337,"nodeType":"Block","src":"11965:74:2","statements":[{"expression":{"id":1331,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1329,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1300,"src":"11983:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":1330,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11993:2:2","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11983:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1332,"nodeType":"ExpressionStatement","src":"11983:12:2"},{"expression":{"id":1335,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1333,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1306,"src":"12013:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":1334,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12023:1:2","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12013:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1336,"nodeType":"ExpressionStatement","src":"12013:11:2"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1343,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1341,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1339,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1300,"src":"12056:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":1340,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12065:2:2","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12056:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1342,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12070:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12056:15:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1353,"nodeType":"IfStatement","src":"12052:95:2","trueBody":{"id":1352,"nodeType":"Block","src":"12073:74:2","statements":[{"expression":{"id":1346,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1344,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1300,"src":"12091:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":1345,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12101:2:2","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12091:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1347,"nodeType":"ExpressionStatement","src":"12091:12:2"},{"expression":{"id":1350,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1348,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1306,"src":"12121:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":1349,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12131:1:2","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"12121:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1351,"nodeType":"ExpressionStatement","src":"12121:11:2"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1358,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1356,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1354,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1300,"src":"12164:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":1355,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12173:2:2","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12164:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1357,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12178:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12164:15:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1368,"nodeType":"IfStatement","src":"12160:95:2","trueBody":{"id":1367,"nodeType":"Block","src":"12181:74:2","statements":[{"expression":{"id":1361,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1359,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1300,"src":"12199:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":1360,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12209:2:2","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12199:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1362,"nodeType":"ExpressionStatement","src":"12199:12:2"},{"expression":{"id":1365,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1363,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1306,"src":"12229:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":1364,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12239:1:2","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12229:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1366,"nodeType":"ExpressionStatement","src":"12229:11:2"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1373,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1371,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1369,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1300,"src":"12272:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":1370,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12281:1:2","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12272:10:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1372,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12285:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12272:14:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1379,"nodeType":"IfStatement","src":"12268:64:2","trueBody":{"id":1378,"nodeType":"Block","src":"12288:44:2","statements":[{"expression":{"id":1376,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1374,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1306,"src":"12306:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":1375,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12316:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12306:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1377,"nodeType":"ExpressionStatement","src":"12306:11:2"}]}}]},{"expression":{"id":1381,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1306,"src":"12358:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1304,"id":1382,"nodeType":"Return","src":"12351:13:2"}]},"documentation":{"id":1298,"nodeType":"StructuredDocumentation","src":"11463:240:2","text":" @dev Return the log in base 256, rounded down, of a positive value.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."},"id":1384,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"11717:6:2","nodeType":"FunctionDefinition","parameters":{"id":1301,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1300,"mutability":"mutable","name":"value","nameLocation":"11732:5:2","nodeType":"VariableDeclaration","scope":1384,"src":"11724:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1299,"name":"uint256","nodeType":"ElementaryTypeName","src":"11724:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11723:15:2"},"returnParameters":{"id":1304,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1303,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1384,"src":"11762:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1302,"name":"uint256","nodeType":"ElementaryTypeName","src":"11762:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11761:9:2"},"scope":1424,"src":"11708:663:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1422,"nodeType":"Block","src":"12608:174:2","statements":[{"id":1421,"nodeType":"UncheckedBlock","src":"12618:158:2","statements":[{"assignments":[1396],"declarations":[{"constant":false,"id":1396,"mutability":"mutable","name":"result","nameLocation":"12650:6:2","nodeType":"VariableDeclaration","scope":1421,"src":"12642:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1395,"name":"uint256","nodeType":"ElementaryTypeName","src":"12642:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1400,"initialValue":{"arguments":[{"id":1398,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1387,"src":"12666:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1397,"name":"log256","nodeType":"Identifier","overloadedDeclarations":[1384,1423],"referencedDeclaration":1384,"src":"12659:6:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1399,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12659:13:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12642:30:2"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1419,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1401,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1396,"src":"12693:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1414,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$565","typeString":"enum Math.Rounding"},"id":1405,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1402,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1390,"src":"12703:8:2","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$565","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1403,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":565,"src":"12715:8:2","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$565_$","typeString":"type(enum Math.Rounding)"}},"id":1404,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":563,"src":"12715:11:2","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$565","typeString":"enum Math.Rounding"}},"src":"12703:23:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1413,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1411,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":1406,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12730:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1409,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1407,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1396,"src":"12736:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"33","id":1408,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12746:1:2","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"12736:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1410,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12735:13:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12730:18:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1412,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1387,"src":"12751:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12730:26:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12703:53:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":1416,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12763:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":1417,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"12703:61:2","trueExpression":{"hexValue":"31","id":1415,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12759:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":1418,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12702:63:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"12693:72:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1394,"id":1420,"nodeType":"Return","src":"12686:79:2"}]}]},"documentation":{"id":1385,"nodeType":"StructuredDocumentation","src":"12377:144:2","text":" @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":1423,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"12535:6:2","nodeType":"FunctionDefinition","parameters":{"id":1391,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1387,"mutability":"mutable","name":"value","nameLocation":"12550:5:2","nodeType":"VariableDeclaration","scope":1423,"src":"12542:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1386,"name":"uint256","nodeType":"ElementaryTypeName","src":"12542:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1390,"mutability":"mutable","name":"rounding","nameLocation":"12566:8:2","nodeType":"VariableDeclaration","scope":1423,"src":"12557:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$565","typeString":"enum Math.Rounding"},"typeName":{"id":1389,"nodeType":"UserDefinedTypeName","pathNode":{"id":1388,"name":"Rounding","nodeType":"IdentifierPath","referencedDeclaration":565,"src":"12557:8:2"},"referencedDeclaration":565,"src":"12557:8:2","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$565","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"12541:34:2"},"returnParameters":{"id":1394,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1393,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1423,"src":"12599:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1392,"name":"uint256","nodeType":"ElementaryTypeName","src":"12599:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12598:9:2"},"scope":1424,"src":"12526:256:2","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1425,"src":"202:12582:2","usedErrors":[]}],"src":"103:12682:2"},"id":2},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/SignedMath.sol","exportedSymbols":{"SignedMath":[1529]},"id":1530,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1426,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"109:23:3"},{"abstract":false,"baseContracts":[],"canonicalName":"SignedMath","contractDependencies":[],"contractKind":"library","documentation":{"id":1427,"nodeType":"StructuredDocumentation","src":"134:80:3","text":" @dev Standard signed math utilities missing in the Solidity language."},"fullyImplemented":true,"id":1529,"linearizedBaseContracts":[1529],"name":"SignedMath","nameLocation":"223:10:3","nodeType":"ContractDefinition","nodes":[{"body":{"id":1444,"nodeType":"Block","src":"375:37:3","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1439,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1437,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1430,"src":"392:1:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1438,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1432,"src":"396:1:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"392:5:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":1441,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1432,"src":"404:1:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":1442,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"392:13:3","trueExpression":{"id":1440,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1430,"src":"400:1:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":1436,"id":1443,"nodeType":"Return","src":"385:20:3"}]},"documentation":{"id":1428,"nodeType":"StructuredDocumentation","src":"240:66:3","text":" @dev Returns the largest of two signed numbers."},"id":1445,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"320:3:3","nodeType":"FunctionDefinition","parameters":{"id":1433,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1430,"mutability":"mutable","name":"a","nameLocation":"331:1:3","nodeType":"VariableDeclaration","scope":1445,"src":"324:8:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1429,"name":"int256","nodeType":"ElementaryTypeName","src":"324:6:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":1432,"mutability":"mutable","name":"b","nameLocation":"341:1:3","nodeType":"VariableDeclaration","scope":1445,"src":"334:8:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1431,"name":"int256","nodeType":"ElementaryTypeName","src":"334:6:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"323:20:3"},"returnParameters":{"id":1436,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1435,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1445,"src":"367:6:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1434,"name":"int256","nodeType":"ElementaryTypeName","src":"367:6:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"366:8:3"},"scope":1529,"src":"311:101:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1462,"nodeType":"Block","src":"554:37:3","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1457,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1455,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1448,"src":"571:1:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1456,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1450,"src":"575:1:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"571:5:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":1459,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1450,"src":"583:1:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":1460,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"571:13:3","trueExpression":{"id":1458,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1448,"src":"579:1:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":1454,"id":1461,"nodeType":"Return","src":"564:20:3"}]},"documentation":{"id":1446,"nodeType":"StructuredDocumentation","src":"418:67:3","text":" @dev Returns the smallest of two signed numbers."},"id":1463,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"499:3:3","nodeType":"FunctionDefinition","parameters":{"id":1451,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1448,"mutability":"mutable","name":"a","nameLocation":"510:1:3","nodeType":"VariableDeclaration","scope":1463,"src":"503:8:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1447,"name":"int256","nodeType":"ElementaryTypeName","src":"503:6:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":1450,"mutability":"mutable","name":"b","nameLocation":"520:1:3","nodeType":"VariableDeclaration","scope":1463,"src":"513:8:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1449,"name":"int256","nodeType":"ElementaryTypeName","src":"513:6:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"502:20:3"},"returnParameters":{"id":1454,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1453,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1463,"src":"546:6:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1452,"name":"int256","nodeType":"ElementaryTypeName","src":"546:6:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"545:8:3"},"scope":1529,"src":"490:101:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1506,"nodeType":"Block","src":"796:162:3","statements":[{"assignments":[1474],"declarations":[{"constant":false,"id":1474,"mutability":"mutable","name":"x","nameLocation":"865:1:3","nodeType":"VariableDeclaration","scope":1506,"src":"858:8:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1473,"name":"int256","nodeType":"ElementaryTypeName","src":"858:6:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":1487,"initialValue":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1486,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1477,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1475,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1466,"src":"870:1:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":1476,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1468,"src":"874:1:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"870:5:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":1478,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"869:7:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1484,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1481,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1479,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1466,"src":"881:1:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":1480,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1468,"src":"885:1:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"881:5:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":1482,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"880:7:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1483,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"891:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"880:12:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":1485,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"879:14:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"869:24:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"858:35:3"},{"expression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1504,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1488,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1474,"src":"910:1:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1502,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1496,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1493,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1474,"src":"930:1:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":1492,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"922:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1491,"name":"uint256","nodeType":"ElementaryTypeName","src":"922:7:3","typeDescriptions":{}}},"id":1494,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"922:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":1495,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"936:3:3","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"922:17:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1490,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"915:6:3","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":1489,"name":"int256","nodeType":"ElementaryTypeName","src":"915:6:3","typeDescriptions":{}}},"id":1497,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"915:25:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1500,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1498,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1466,"src":"944:1:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":1499,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1468,"src":"948:1:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"944:5:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":1501,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"943:7:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"915:35:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":1503,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"914:37:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"910:41:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":1472,"id":1505,"nodeType":"Return","src":"903:48:3"}]},"documentation":{"id":1464,"nodeType":"StructuredDocumentation","src":"597:126:3","text":" @dev Returns the average of two signed numbers without overflow.\n The result is rounded towards zero."},"id":1507,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"737:7:3","nodeType":"FunctionDefinition","parameters":{"id":1469,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1466,"mutability":"mutable","name":"a","nameLocation":"752:1:3","nodeType":"VariableDeclaration","scope":1507,"src":"745:8:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1465,"name":"int256","nodeType":"ElementaryTypeName","src":"745:6:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":1468,"mutability":"mutable","name":"b","nameLocation":"762:1:3","nodeType":"VariableDeclaration","scope":1507,"src":"755:8:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1467,"name":"int256","nodeType":"ElementaryTypeName","src":"755:6:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"744:20:3"},"returnParameters":{"id":1472,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1471,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1507,"src":"788:6:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1470,"name":"int256","nodeType":"ElementaryTypeName","src":"788:6:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"787:8:3"},"scope":1529,"src":"728:230:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1527,"nodeType":"Block","src":"1102:158:3","statements":[{"id":1526,"nodeType":"UncheckedBlock","src":"1112:142:3","statements":[{"expression":{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1519,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1517,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1510,"src":"1227:1:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"30","id":1518,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1232:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1227:6:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":1522,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"1240:2:3","subExpression":{"id":1521,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1510,"src":"1241:1:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":1523,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1227:15:3","trueExpression":{"id":1520,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1510,"src":"1236:1:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":1516,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1219:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1515,"name":"uint256","nodeType":"ElementaryTypeName","src":"1219:7:3","typeDescriptions":{}}},"id":1524,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1219:24:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1514,"id":1525,"nodeType":"Return","src":"1212:31:3"}]}]},"documentation":{"id":1508,"nodeType":"StructuredDocumentation","src":"964:78:3","text":" @dev Returns the absolute unsigned value of a signed value."},"id":1528,"implemented":true,"kind":"function","modifiers":[],"name":"abs","nameLocation":"1056:3:3","nodeType":"FunctionDefinition","parameters":{"id":1511,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1510,"mutability":"mutable","name":"n","nameLocation":"1067:1:3","nodeType":"VariableDeclaration","scope":1528,"src":"1060:8:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1509,"name":"int256","nodeType":"ElementaryTypeName","src":"1060:6:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1059:10:3"},"returnParameters":{"id":1514,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1513,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1528,"src":"1093:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1512,"name":"uint256","nodeType":"ElementaryTypeName","src":"1093:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1092:9:3"},"scope":1529,"src":"1047:213:3","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1530,"src":"215:1047:3","usedErrors":[]}],"src":"109:1154:3"},"id":3},"contracts/InitFacet.sol":{"ast":{"absolutePath":"contracts/InitFacet.sol","exportedSymbols":{"IDiamondCut":[3178],"IDiamondLoupe":[3219],"InitFacet":[1694],"LibDiamond":[4053],"SusuwatariStorage":[3076],"StorageHandler":[3114],"UsingDiamondOwner":[3140]},"id":1695,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1531,"literals":["solidity","^","0.8",".10"],"nodeType":"PragmaDirective","src":"33:24:4"},{"absolutePath":"hardhat-deploy/solc_0.8/diamond/interfaces/IDiamondLoupe.sol","file":"hardhat-deploy/solc_0.8/diamond/interfaces/IDiamondLoupe.sol","id":1533,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1695,"sourceUnit":3220,"src":"61:91:4","symbolAliases":[{"foreign":{"id":1532,"name":"IDiamondLoupe","nodeType":"Identifier","overloadedDeclarations":[],"src":"69:13:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"hardhat-deploy/solc_0.8/diamond/UsingDiamondOwner.sol","file":"hardhat-deploy/solc_0.8/diamond/UsingDiamondOwner.sol","id":1536,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1695,"sourceUnit":3141,"src":"154:101:4","symbolAliases":[{"foreign":{"id":1534,"name":"UsingDiamondOwner","nodeType":"Identifier","overloadedDeclarations":[],"src":"162:17:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":1535,"name":"IDiamondCut","nodeType":"Identifier","overloadedDeclarations":[],"src":"181:11:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol","file":"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol","id":1537,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1695,"sourceUnit":4054,"src":"257:66:4","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/SusuwatariStorage.sol","file":"./SusuwatariStorage.sol","id":1540,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1695,"sourceUnit":3115,"src":"325:84:4","symbolAliases":[{"foreign":{"id":1538,"name":"SusuwatariStorage","nodeType":"Identifier","overloadedDeclarations":[],"src":"333:22:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":1539,"name":"StorageHandler","nodeType":"Identifier","overloadedDeclarations":[],"src":"357:14:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1541,"name":"UsingDiamondOwner","nodeType":"IdentifierPath","referencedDeclaration":3140,"src":"435:17:4"},"id":1542,"nodeType":"InheritanceSpecifier","src":"435:17:4"},{"baseName":{"id":1543,"name":"StorageHandler","nodeType":"IdentifierPath","referencedDeclaration":3114,"src":"454:14:4"},"id":1544,"nodeType":"InheritanceSpecifier","src":"454:14:4"}],"canonicalName":"InitFacet","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":1694,"linearizedBaseContracts":[1694,3114,3140],"name":"InitFacet","nameLocation":"422:9:4","nodeType":"ContractDefinition","nodes":[{"body":{"id":1554,"nodeType":"Block","src":"491:68:4","statements":[{"expression":{"arguments":[{"expression":{"id":1550,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"530:3:4","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1551,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"530:10:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1547,"name":"LibDiamond","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4053,"src":"502:10:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_LibDiamond_$4053_$","typeString":"type(library LibDiamond)"}},"id":1549,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"setContractOwner","nodeType":"MemberAccess","referencedDeclaration":3305,"src":"502:27:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1552,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"502:39:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1553,"nodeType":"ExpressionStatement","src":"502:39:4"}]},"id":1555,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1545,"nodeType":"ParameterList","parameters":[],"src":"489:2:4"},"returnParameters":{"id":1546,"nodeType":"ParameterList","parameters":[],"src":"491:0:4"},"scope":1694,"src":"478:81:4","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":1692,"nodeType":"Block","src":"659:664:4","statements":[{"assignments":[1568],"declarations":[{"constant":false,"id":1568,"mutability":"mutable","name":"pp","nameLocation":"703:2:4","nodeType":"VariableDeclaration","scope":1692,"src":"672:33:4","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$3076_storage_ptr","typeString":"struct SusuwatariStorage"},"typeName":{"id":1567,"nodeType":"UserDefinedTypeName","pathNode":{"id":1566,"name":"SusuwatariStorage","nodeType":"IdentifierPath","referencedDeclaration":3076,"src":"672:22:4"},"referencedDeclaration":3076,"src":"672:22:4","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$3076_storage_ptr","typeString":"struct SusuwatariStorage"}},"visibility":"internal"}],"id":1571,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1569,"name":"pp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3088,"src":"708:2:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_SusuwatariStorage_$3076_storage_ptr_$","typeString":"function () pure returns (struct SusuwatariStorage storage pointer)"}},"id":1570,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"708:4:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$3076_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"672:40:4"},{"assignments":[1573],"declarations":[{"constant":false,"id":1573,"mutability":"mutable","name":"currentMonth0Based","nameLocation":"732:18:4","nodeType":"VariableDeclaration","scope":1692,"src":"725:25:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":1572,"name":"uint16","nodeType":"ElementaryTypeName","src":"725:6:4","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"id":1577,"initialValue":{"commonType":{"typeIdentifier":"t_uint16","typeString":"uint16"},"id":1576,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1574,"name":"currentMonth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1557,"src":"753:12:4","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1575,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"767:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"753:15:4","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"VariableDeclarationStatement","src":"725:43:4"},{"expression":{"id":1586,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1578,"name":"pp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1568,"src":"781:2:4","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$3076_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},"id":1580,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"_startDateId","nodeType":"MemberAccess","referencedDeclaration":3043,"src":"781:15:4","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint16","typeString":"uint16"},"id":1585,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint16","typeString":"uint16"},"id":1583,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1581,"name":"currentYear","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1559,"src":"799:11:4","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"3132","id":1582,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"813:2:4","typeDescriptions":{"typeIdentifier":"t_rational_12_by_1","typeString":"int_const 12"},"value":"12"},"src":"799:16:4","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1584,"name":"currentMonth0Based","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1573,"src":"818:18:4","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"src":"799:37:4","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"src":"781:55:4","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"id":1587,"nodeType":"ExpressionStatement","src":"781:55:4"},{"expression":{"id":1592,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1588,"name":"pp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1568,"src":"849:2:4","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$3076_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},"id":1590,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"_isTesting","nodeType":"MemberAccess","referencedDeclaration":3066,"src":"849:13:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1591,"name":"isTesting","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1561,"src":"865:9:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"849:25:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1593,"nodeType":"ExpressionStatement","src":"849:25:4"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1598,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":1594,"name":"pp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1568,"src":"890:2:4","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$3076_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},"id":1595,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"_donationBuckets","nodeType":"MemberAccess","referencedDeclaration":3047,"src":"890:19:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint32_$48_storage","typeString":"uint32[48] storage ref"}},"id":1596,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"890:26:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1597,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"920:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"890:31:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1653,"nodeType":"IfStatement","src":"887:155:4","trueBody":{"expression":{"id":1651,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1599,"name":"pp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1568,"src":"923:2:4","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$3076_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},"id":1601,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"_donationBuckets","nodeType":"MemberAccess","referencedDeclaration":3047,"src":"923:19:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint32_$48_storage","typeString":"uint32[48] storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"components":[{"hexValue":"30","id":1602,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"946:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":1603,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"948:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":1604,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"950:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":1605,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"952:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":1606,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"954:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":1607,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"956:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":1608,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"958:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":1609,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"960:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":1610,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"962:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":1611,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"964:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":1612,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"966:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":1613,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"968:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":1614,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"970:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":1615,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"972:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":1616,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"974:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":1617,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"976:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":1618,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"978:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":1619,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"980:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":1620,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"982:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":1621,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"984:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":1622,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"986:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":1623,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"988:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":1624,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"990:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":1625,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"992:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":1626,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"994:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":1627,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"996:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":1628,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"998:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":1629,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1000:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":1630,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1002:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":1631,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1004:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":1632,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1006:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":1633,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1008:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":1634,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1010:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":1635,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1012:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":1636,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1014:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":1637,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1016:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":1638,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1018:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":1639,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1020:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":1640,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1022:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":1641,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1024:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":1642,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1026:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":1643,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1028:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":1644,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1030:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":1645,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1032:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":1646,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1034:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":1647,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1036:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":1648,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1038:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":1649,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1040:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":1650,"isConstant":false,"isInlineArray":true,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"945:97:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint8_$48_memory_ptr","typeString":"uint8[48] memory"}},"src":"923:119:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint32_$48_storage","typeString":"uint32[48] storage ref"}},"id":1652,"nodeType":"ExpressionStatement","src":"923:119:4"}},{"condition":{"expression":{"id":1654,"name":"pp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1568,"src":"1059:2:4","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$3076_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},"id":1655,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"isInitialized","nodeType":"MemberAccess","referencedDeclaration":3039,"src":"1059:16:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1657,"nodeType":"IfStatement","src":"1055:29:4","trueBody":{"functionReturnParameters":1565,"id":1656,"nodeType":"Return","src":"1077:7:4"}},{"expression":{"id":1662,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1658,"name":"pp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1568,"src":"1096:2:4","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$3076_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},"id":1660,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"_isDonatingActive","nodeType":"MemberAccess","referencedDeclaration":3041,"src":"1096:20:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":1661,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1117:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"1096:25:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1663,"nodeType":"ExpressionStatement","src":"1096:25:4"},{"expression":{"id":1673,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":1664,"name":"ds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3113,"src":"1134:2:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_DiamondStorage_$3259_storage_ptr_$","typeString":"function () pure returns (struct LibDiamond.DiamondStorage storage pointer)"}},"id":1665,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1134:4:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3259_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"}},"id":1666,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"supportedInterfaces","nodeType":"MemberAccess","referencedDeclaration":3256,"src":"1134:24:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"}},"id":1671,"indexExpression":{"expression":{"arguments":[{"id":1668,"name":"IDiamondCut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3178,"src":"1164:11:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IDiamondCut_$3178_$","typeString":"type(contract IDiamondCut)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IDiamondCut_$3178_$","typeString":"type(contract IDiamondCut)"}],"id":1667,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1159:4:4","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1669,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1159:17:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IDiamondCut_$3178","typeString":"type(contract IDiamondCut)"}},"id":1670,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"interfaceId","nodeType":"MemberAccess","src":"1159:29:4","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1134:55:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":1672,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1192:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"1134:62:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1674,"nodeType":"ExpressionStatement","src":"1134:62:4"},{"expression":{"id":1684,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":1675,"name":"ds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3113,"src":"1207:2:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_DiamondStorage_$3259_storage_ptr_$","typeString":"function () pure returns (struct LibDiamond.DiamondStorage storage pointer)"}},"id":1676,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1207:4:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3259_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"}},"id":1677,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"supportedInterfaces","nodeType":"MemberAccess","referencedDeclaration":3256,"src":"1207:24:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"}},"id":1682,"indexExpression":{"expression":{"arguments":[{"id":1679,"name":"IDiamondLoupe","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3219,"src":"1237:13:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IDiamondLoupe_$3219_$","typeString":"type(contract IDiamondLoupe)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IDiamondLoupe_$3219_$","typeString":"type(contract IDiamondLoupe)"}],"id":1678,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1232:4:4","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1680,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1232:19:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IDiamondLoupe_$3219","typeString":"type(contract IDiamondLoupe)"}},"id":1681,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"interfaceId","nodeType":"MemberAccess","src":"1232:31:4","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1207:57:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":1683,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1267:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"1207:64:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1685,"nodeType":"ExpressionStatement","src":"1207:64:4"},{"expression":{"id":1690,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1686,"name":"pp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1568,"src":"1292:2:4","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$3076_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},"id":1688,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"isInitialized","nodeType":"MemberAccess","referencedDeclaration":3039,"src":"1292:16:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":1689,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1311:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"1292:23:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1691,"nodeType":"ExpressionStatement","src":"1292:23:4"}]},"functionSelector":"59259007","id":1693,"implemented":true,"kind":"function","modifiers":[{"id":1564,"kind":"modifierInvocation","modifierName":{"id":1563,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":3139,"src":"649:9:4"},"nodeType":"ModifierInvocation","src":"649:9:4"}],"name":"init","nameLocation":"580:4:4","nodeType":"FunctionDefinition","parameters":{"id":1562,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1557,"mutability":"mutable","name":"currentMonth","nameLocation":"592:12:4","nodeType":"VariableDeclaration","scope":1693,"src":"585:19:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":1556,"name":"uint16","nodeType":"ElementaryTypeName","src":"585:6:4","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":1559,"mutability":"mutable","name":"currentYear","nameLocation":"612:11:4","nodeType":"VariableDeclaration","scope":1693,"src":"605:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":1558,"name":"uint16","nodeType":"ElementaryTypeName","src":"605:6:4","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":1561,"mutability":"mutable","name":"isTesting","nameLocation":"629:9:4","nodeType":"VariableDeclaration","scope":1693,"src":"624:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1560,"name":"bool","nodeType":"ElementaryTypeName","src":"624:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"584:55:4"},"returnParameters":{"id":1565,"nodeType":"ParameterList","parameters":[],"src":"659:0:4"},"scope":1694,"src":"571:752:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1695,"src":"413:913:4","usedErrors":[]}],"src":"33:1293:4"},"id":4},"contracts/LibSusuwatari.sol":{"ast":{"absolutePath":"contracts/LibSusuwatari.sol","exportedSymbols":{"IDiamondCut":[3178],"LibDiamond":[4053],"LibSusuwatari":[2226],"Math":[1424],"SusuwatariStorage":[3076],"SignedMath":[1529],"StorageHandler":[3114],"Strings":[558]},"id":2227,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1696,"literals":["solidity","0.8",".10"],"nodeType":"PragmaDirective","src":"34:23:5"},{"absolutePath":"contracts/SusuwatariStorage.sol","file":"./SusuwatariStorage.sol","id":1699,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2227,"sourceUnit":3115,"src":"63:83:5","symbolAliases":[{"foreign":{"id":1697,"name":"SusuwatariStorage","nodeType":"Identifier","overloadedDeclarations":[],"src":"71:22:5","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":1698,"name":"StorageHandler","nodeType":"Identifier","overloadedDeclarations":[],"src":"94:14:5","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","file":"@openzeppelin/contracts/utils/Strings.sol","id":1700,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2227,"sourceUnit":559,"src":"148:51:5","symbolAliases":[],"unitAlias":""},{"absolutePath":"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol","file":"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol","id":1701,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2227,"sourceUnit":4054,"src":"201:66:5","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"LibSusuwatari","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":2226,"linearizedBaseContracts":[2226],"name":"LibSusuwatari","nameLocation":"281:18:5","nodeType":"ContractDefinition","nodes":[{"id":1704,"libraryName":{"id":1702,"name":"Strings","nodeType":"IdentifierPath","referencedDeclaration":558,"src":"312:7:5"},"nodeType":"UsingForDirective","src":"306:26:5","typeName":{"id":1703,"name":"uint256","nodeType":"ElementaryTypeName","src":"324:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"canonicalName":"LibSusuwatari._DateTime","id":1709,"members":[{"constant":false,"id":1706,"mutability":"mutable","name":"year","nameLocation":"383:4:5","nodeType":"VariableDeclaration","scope":1709,"src":"376:11:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":1705,"name":"uint16","nodeType":"ElementaryTypeName","src":"376:6:5","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":1708,"mutability":"mutable","name":"month","nameLocation":"412:5:5","nodeType":"VariableDeclaration","scope":1709,"src":"406:11:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1707,"name":"uint8","nodeType":"ElementaryTypeName","src":"406:5:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"name":"_DateTime","nameLocation":"347:9:5","nodeType":"StructDefinition","scope":2226,"src":"340:89:5","visibility":"public"},{"constant":true,"id":1712,"mutability":"constant","name":"DAY_IN_SECONDS","nameLocation":"447:14:5","nodeType":"VariableDeclaration","scope":2226,"src":"433:36:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1710,"name":"uint","nodeType":"ElementaryTypeName","src":"433:4:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"3836343030","id":1711,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"464:5:5","typeDescriptions":{"typeIdentifier":"t_rational_86400_by_1","typeString":"int_const 86400"},"value":"86400"},"visibility":"internal"},{"constant":true,"id":1715,"mutability":"constant","name":"YEAR_IN_SECONDS","nameLocation":"494:15:5","nodeType":"VariableDeclaration","scope":2226,"src":"480:40:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1713,"name":"uint","nodeType":"ElementaryTypeName","src":"480:4:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"3331353336303030","id":1714,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"512:8:5","typeDescriptions":{"typeIdentifier":"t_rational_31536000_by_1","typeString":"int_const 31536000"},"value":"31536000"},"visibility":"internal"},{"constant":true,"id":1718,"mutability":"constant","name":"LEAP_YEAR_IN_SECONDS","nameLocation":"545:20:5","nodeType":"VariableDeclaration","scope":2226,"src":"531:45:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1716,"name":"uint","nodeType":"ElementaryTypeName","src":"531:4:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"3331363232343030","id":1717,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"568:8:5","typeDescriptions":{"typeIdentifier":"t_rational_31622400_by_1","typeString":"int_const 31622400"},"value":"31622400"},"visibility":"internal"},{"constant":true,"id":1721,"mutability":"constant","name":"HOUR_IN_SECONDS","nameLocation":"603:15:5","nodeType":"VariableDeclaration","scope":2226,"src":"589:36:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1719,"name":"uint","nodeType":"ElementaryTypeName","src":"589:4:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"33363030","id":1720,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"621:4:5","typeDescriptions":{"typeIdentifier":"t_rational_3600_by_1","typeString":"int_const 3600"},"value":"3600"},"visibility":"internal"},{"constant":true,"id":1724,"mutability":"constant","name":"MINUTE_IN_SECONDS","nameLocation":"650:17:5","nodeType":"VariableDeclaration","scope":2226,"src":"636:36:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1722,"name":"uint","nodeType":"ElementaryTypeName","src":"636:4:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"3630","id":1723,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"670:2:5","typeDescriptions":{"typeIdentifier":"t_rational_60_by_1","typeString":"int_const 60"},"value":"60"},"visibility":"internal"},{"constant":true,"id":1727,"mutability":"constant","name":"ORIGIN_YEAR","nameLocation":"701:11:5","nodeType":"VariableDeclaration","scope":2226,"src":"685:34:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":1725,"name":"uint16","nodeType":"ElementaryTypeName","src":"685:6:5","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"value":{"hexValue":"31393730","id":1726,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"715:4:5","typeDescriptions":{"typeIdentifier":"t_rational_1970_by_1","typeString":"int_const 1970"},"value":"1970"},"visibility":"internal"},{"body":{"id":1750,"nodeType":"Block","src":"830:100:5","statements":[{"condition":{"commonType":{"typeIdentifier":"t_int64","typeString":"int64"},"id":1736,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1734,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1729,"src":"845:1:5","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30","id":1735,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"849:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"845:5:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1744,"nodeType":"IfStatement","src":"841:55:5","trueBody":{"id":1743,"nodeType":"Block","src":"852:44:5","statements":[{"expression":{"arguments":[{"id":1740,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"881:2:5","subExpression":{"id":1739,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1729,"src":"882:1:5","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"}},"typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int64","typeString":"int64"}],"id":1738,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"874:6:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"},"typeName":{"id":1737,"name":"uint64","nodeType":"ElementaryTypeName","src":"874:6:5","typeDescriptions":{}}},"id":1741,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"874:10:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"functionReturnParameters":1733,"id":1742,"nodeType":"Return","src":"867:17:5"}]}},{"expression":{"arguments":[{"id":1747,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1729,"src":"920:1:5","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int64","typeString":"int64"}],"id":1746,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"913:6:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"},"typeName":{"id":1745,"name":"uint64","nodeType":"ElementaryTypeName","src":"913:6:5","typeDescriptions":{}}},"id":1748,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"913:9:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"functionReturnParameters":1733,"id":1749,"nodeType":"Return","src":"906:16:5"}]},"id":1751,"implemented":true,"kind":"function","modifiers":[],"name":"abs","nameLocation":"786:3:5","nodeType":"FunctionDefinition","parameters":{"id":1730,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1729,"mutability":"mutable","name":"x","nameLocation":"796:1:5","nodeType":"VariableDeclaration","scope":1751,"src":"790:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"},"typeName":{"id":1728,"name":"int64","nodeType":"ElementaryTypeName","src":"790:5:5","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"}},"visibility":"internal"}],"src":"789:9:5"},"returnParameters":{"id":1733,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1732,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1751,"src":"822:6:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1731,"name":"uint64","nodeType":"ElementaryTypeName","src":"822:6:5","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"821:8:5"},"scope":2226,"src":"777:153:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1860,"nodeType":"Block","src":"1010:391:5","statements":[{"assignments":[1759],"declarations":[{"constant":false,"id":1759,"mutability":"mutable","name":"s","nameLocation":"1034:1:5","nodeType":"VariableDeclaration","scope":1860,"src":"1021:14:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1758,"name":"bytes","nodeType":"ElementaryTypeName","src":"1021:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1764,"initialValue":{"arguments":[{"hexValue":"3430","id":1762,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1048:2:5","typeDescriptions":{"typeIdentifier":"t_rational_40_by_1","typeString":"int_const 40"},"value":"40"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_40_by_1","typeString":"int_const 40"}],"id":1761,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1038:9:5","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":1760,"name":"bytes","nodeType":"ElementaryTypeName","src":"1042:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":1763,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1038:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1021:30:5"},{"body":{"id":1853,"nodeType":"Block","src":"1092:275:5","statements":[{"assignments":[1776],"declarations":[{"constant":false,"id":1776,"mutability":"mutable","name":"b","nameLocation":"1114:1:5","nodeType":"VariableDeclaration","scope":1853,"src":"1107:8:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"typeName":{"id":1775,"name":"bytes1","nodeType":"ElementaryTypeName","src":"1107:6:5","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"visibility":"internal"}],"id":1801,"initialValue":{"arguments":[{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1798,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":1785,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1753,"src":"1144:1:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1784,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1136:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":1783,"name":"uint160","nodeType":"ElementaryTypeName","src":"1136:7:5","typeDescriptions":{}}},"id":1786,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1136:10:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":1782,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1131:4:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1781,"name":"uint","nodeType":"ElementaryTypeName","src":"1131:4:5","typeDescriptions":{}}},"id":1787,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1131:16:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1796,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1788,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1151:1:5","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1794,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"38","id":1789,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1155:1:5","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1792,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3139","id":1790,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1158:2:5","typeDescriptions":{"typeIdentifier":"t_rational_19_by_1","typeString":"int_const 19"},"value":"19"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1791,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1766,"src":"1163:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1158:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1793,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1157:8:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1155:10:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1795,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1154:12:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1151:15:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1797,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1150:17:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1131:36:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1780,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1125:5:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":1779,"name":"uint8","nodeType":"ElementaryTypeName","src":"1125:5:5","typeDescriptions":{}}},"id":1799,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1125:43:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":1778,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1118:6:5","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes1_$","typeString":"type(bytes1)"},"typeName":{"id":1777,"name":"bytes1","nodeType":"ElementaryTypeName","src":"1118:6:5","typeDescriptions":{}}},"id":1800,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1118:51:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"VariableDeclarationStatement","src":"1107:62:5"},{"assignments":[1803],"declarations":[{"constant":false,"id":1803,"mutability":"mutable","name":"hi","nameLocation":"1191:2:5","nodeType":"VariableDeclaration","scope":1853,"src":"1184:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"typeName":{"id":1802,"name":"bytes1","nodeType":"ElementaryTypeName","src":"1184:6:5","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"visibility":"internal"}],"id":1813,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":1811,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1808,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1776,"src":"1209:1:5","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes1","typeString":"bytes1"}],"id":1807,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1203:5:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":1806,"name":"uint8","nodeType":"ElementaryTypeName","src":"1203:5:5","typeDescriptions":{}}},"id":1809,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1203:8:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"3136","id":1810,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1214:2:5","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"1203:13:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":1805,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1196:6:5","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes1_$","typeString":"type(bytes1)"},"typeName":{"id":1804,"name":"bytes1","nodeType":"ElementaryTypeName","src":"1196:6:5","typeDescriptions":{}}},"id":1812,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1196:21:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"VariableDeclarationStatement","src":"1184:33:5"},{"assignments":[1815],"declarations":[{"constant":false,"id":1815,"mutability":"mutable","name":"lo","nameLocation":"1239:2:5","nodeType":"VariableDeclaration","scope":1853,"src":"1232:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"typeName":{"id":1814,"name":"bytes1","nodeType":"ElementaryTypeName","src":"1232:6:5","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"visibility":"internal"}],"id":1830,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":1828,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1820,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1776,"src":"1257:1:5","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes1","typeString":"bytes1"}],"id":1819,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1251:5:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":1818,"name":"uint8","nodeType":"ElementaryTypeName","src":"1251:5:5","typeDescriptions":{}}},"id":1821,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1251:8:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":1827,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3136","id":1822,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1262:2:5","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"arguments":[{"id":1825,"name":"hi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1803,"src":"1273:2:5","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes1","typeString":"bytes1"}],"id":1824,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1267:5:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":1823,"name":"uint8","nodeType":"ElementaryTypeName","src":"1267:5:5","typeDescriptions":{}}},"id":1826,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1267:9:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"1262:14:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"1251:25:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":1817,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1244:6:5","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes1_$","typeString":"type(bytes1)"},"typeName":{"id":1816,"name":"bytes1","nodeType":"ElementaryTypeName","src":"1244:6:5","typeDescriptions":{}}},"id":1829,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1244:33:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"VariableDeclarationStatement","src":"1232:45:5"},{"expression":{"id":1839,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1831,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1759,"src":"1292:1:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1835,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1834,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1832,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1294:1:5","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1833,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1766,"src":"1296:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1294:3:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1292:6:5","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1837,"name":"hi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1803,"src":"1306:2:5","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes1","typeString":"bytes1"}],"id":1836,"name":"char","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1896,"src":"1301:4:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes1_$returns$_t_bytes1_$","typeString":"function (bytes1) pure returns (bytes1)"}},"id":1838,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1301:8:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"1292:17:5","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1840,"nodeType":"ExpressionStatement","src":"1292:17:5"},{"expression":{"id":1851,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1841,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1759,"src":"1324:1:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1847,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1846,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1844,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1842,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1326:1:5","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1843,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1766,"src":"1328:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1326:3:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1845,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1330:1:5","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1326:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1324:8:5","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1849,"name":"lo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1815,"src":"1340:2:5","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes1","typeString":"bytes1"}],"id":1848,"name":"char","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1896,"src":"1335:4:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes1_$returns$_t_bytes1_$","typeString":"function (bytes1) pure returns (bytes1)"}},"id":1850,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1335:8:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"1324:19:5","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1852,"nodeType":"ExpressionStatement","src":"1324:19:5"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1771,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1769,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1766,"src":"1079:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"3230","id":1770,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1083:2:5","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"src":"1079:6:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1854,"initializationExpression":{"assignments":[1766],"declarations":[{"constant":false,"id":1766,"mutability":"mutable","name":"i","nameLocation":"1072:1:5","nodeType":"VariableDeclaration","scope":1854,"src":"1067:6:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1765,"name":"uint","nodeType":"ElementaryTypeName","src":"1067:4:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1768,"initialValue":{"hexValue":"30","id":1767,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1076:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"1067:10:5"},"loopExpression":{"expression":{"id":1773,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"1087:3:5","subExpression":{"id":1772,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1766,"src":"1087:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1774,"nodeType":"ExpressionStatement","src":"1087:3:5"},"nodeType":"ForStatement","src":"1062:305:5"},{"expression":{"arguments":[{"id":1857,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1759,"src":"1391:1:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1856,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1384:6:5","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":1855,"name":"string","nodeType":"ElementaryTypeName","src":"1384:6:5","typeDescriptions":{}}},"id":1858,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1384:9:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1757,"id":1859,"nodeType":"Return","src":"1377:16:5"}]},"id":1861,"implemented":true,"kind":"function","modifiers":[],"name":"toAsciiString","nameLocation":"947:13:5","nodeType":"FunctionDefinition","parameters":{"id":1754,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1753,"mutability":"mutable","name":"x","nameLocation":"969:1:5","nodeType":"VariableDeclaration","scope":1861,"src":"961:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1752,"name":"address","nodeType":"ElementaryTypeName","src":"961:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"960:11:5"},"returnParameters":{"id":1757,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1756,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1861,"src":"995:13:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1755,"name":"string","nodeType":"ElementaryTypeName","src":"995:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"994:15:5"},"scope":2226,"src":"938:463:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1895,"nodeType":"Block","src":"1466:114:5","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":1873,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1870,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1863,"src":"1487:1:5","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes1","typeString":"bytes1"}],"id":1869,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1481:5:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":1868,"name":"uint8","nodeType":"ElementaryTypeName","src":"1481:5:5","typeDescriptions":{}}},"id":1871,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1481:8:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"3130","id":1872,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1492:2:5","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"1481:13:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":1891,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1888,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1863,"src":"1562:1:5","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes1","typeString":"bytes1"}],"id":1887,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1556:5:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":1886,"name":"uint8","nodeType":"ElementaryTypeName","src":"1556:5:5","typeDescriptions":{}}},"id":1889,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1556:8:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"30783537","id":1890,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1567:4:5","typeDescriptions":{"typeIdentifier":"t_rational_87_by_1","typeString":"int_const 87"},"value":"0x57"},"src":"1556:15:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":1885,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1549:6:5","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes1_$","typeString":"type(bytes1)"},"typeName":{"id":1884,"name":"bytes1","nodeType":"ElementaryTypeName","src":"1549:6:5","typeDescriptions":{}}},"id":1892,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1549:23:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"functionReturnParameters":1867,"id":1893,"nodeType":"Return","src":"1542:30:5"},"id":1894,"nodeType":"IfStatement","src":"1477:95:5","trueBody":{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":1881,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1878,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1863,"src":"1516:1:5","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes1","typeString":"bytes1"}],"id":1877,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1510:5:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":1876,"name":"uint8","nodeType":"ElementaryTypeName","src":"1510:5:5","typeDescriptions":{}}},"id":1879,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1510:8:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"30783330","id":1880,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1521:4:5","typeDescriptions":{"typeIdentifier":"t_rational_48_by_1","typeString":"int_const 48"},"value":"0x30"},"src":"1510:15:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":1875,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1503:6:5","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes1_$","typeString":"type(bytes1)"},"typeName":{"id":1874,"name":"bytes1","nodeType":"ElementaryTypeName","src":"1503:6:5","typeDescriptions":{}}},"id":1882,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1503:23:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"functionReturnParameters":1867,"id":1883,"nodeType":"Return","src":"1496:30:5"}}]},"id":1896,"implemented":true,"kind":"function","modifiers":[],"name":"char","nameLocation":"1418:4:5","nodeType":"FunctionDefinition","parameters":{"id":1864,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1863,"mutability":"mutable","name":"b","nameLocation":"1430:1:5","nodeType":"VariableDeclaration","scope":1896,"src":"1423:8:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"typeName":{"id":1862,"name":"bytes1","nodeType":"ElementaryTypeName","src":"1423:6:5","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"visibility":"internal"}],"src":"1422:10:5"},"returnParameters":{"id":1867,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1866,"mutability":"mutable","name":"c","nameLocation":"1463:1:5","nodeType":"VariableDeclaration","scope":1896,"src":"1456:8:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"typeName":{"id":1865,"name":"bytes1","nodeType":"ElementaryTypeName","src":"1456:6:5","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"visibility":"internal"}],"src":"1455:10:5"},"scope":2226,"src":"1409:171:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1932,"nodeType":"Block","src":"1648:333:5","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint16","typeString":"uint16"},"id":1907,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint16","typeString":"uint16"},"id":1905,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1903,"name":"year","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1898,"src":"1671:4:5","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"hexValue":"34","id":1904,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1678:1:5","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"1671:8:5","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":1906,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1683:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1671:13:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1911,"nodeType":"IfStatement","src":"1667:78:5","trueBody":{"id":1910,"nodeType":"Block","src":"1686:59:5","statements":[{"expression":{"hexValue":"66616c7365","id":1908,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1720:5:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":1902,"id":1909,"nodeType":"Return","src":"1713:12:5"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint16","typeString":"uint16"},"id":1916,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint16","typeString":"uint16"},"id":1914,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1912,"name":"year","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1898,"src":"1767:4:5","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"hexValue":"313030","id":1913,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1774:3:5","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"value":"100"},"src":"1767:10:5","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":1915,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1781:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1767:15:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1920,"nodeType":"IfStatement","src":"1763:79:5","trueBody":{"id":1919,"nodeType":"Block","src":"1784:58:5","statements":[{"expression":{"hexValue":"74727565","id":1917,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1818:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":1902,"id":1918,"nodeType":"Return","src":"1811:11:5"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint16","typeString":"uint16"},"id":1925,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint16","typeString":"uint16"},"id":1923,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1921,"name":"year","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1898,"src":"1864:4:5","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"hexValue":"343030","id":1922,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1871:3:5","typeDescriptions":{"typeIdentifier":"t_rational_400_by_1","typeString":"int_const 400"},"value":"400"},"src":"1864:10:5","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":1924,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1878:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1864:15:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1929,"nodeType":"IfStatement","src":"1860:80:5","trueBody":{"id":1928,"nodeType":"Block","src":"1881:59:5","statements":[{"expression":{"hexValue":"66616c7365","id":1926,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1915:5:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":1902,"id":1927,"nodeType":"Return","src":"1908:12:5"}]}},{"expression":{"hexValue":"74727565","id":1930,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1965:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":1902,"id":1931,"nodeType":"Return","src":"1958:11:5"}]},"functionSelector":"a6f0e577","id":1933,"implemented":true,"kind":"function","modifiers":[],"name":"isLeapYear","nameLocation":"1597:10:5","nodeType":"FunctionDefinition","parameters":{"id":1899,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1898,"mutability":"mutable","name":"year","nameLocation":"1615:4:5","nodeType":"VariableDeclaration","scope":1933,"src":"1608:11:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":1897,"name":"uint16","nodeType":"ElementaryTypeName","src":"1608:6:5","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"1607:13:5"},"returnParameters":{"id":1902,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1901,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1933,"src":"1642:4:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1900,"name":"bool","nodeType":"ElementaryTypeName","src":"1642:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1641:6:5"},"scope":2226,"src":"1588:393:5","stateMutability":"pure","virtual":false,"visibility":"public"},{"body":{"id":1956,"nodeType":"Block","src":"2056:100:5","statements":[{"expression":{"id":1942,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1940,"name":"year","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1935,"src":"2075:4:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"31","id":1941,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2083:1:5","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2075:9:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1943,"nodeType":"ExpressionStatement","src":"2075:9:5"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1954,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1950,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1946,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1944,"name":"year","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1935,"src":"2110:4:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"34","id":1945,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2117:1:5","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"2110:8:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1949,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1947,"name":"year","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1935,"src":"2121:4:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"313030","id":1948,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2128:3:5","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"value":"100"},"src":"2121:10:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2110:21:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1953,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1951,"name":"year","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1935,"src":"2134:4:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"343030","id":1952,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2141:3:5","typeDescriptions":{"typeIdentifier":"t_rational_400_by_1","typeString":"int_const 400"},"value":"400"},"src":"2134:10:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2110:34:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1939,"id":1955,"nodeType":"Return","src":"2103:41:5"}]},"functionSelector":"b1999937","id":1957,"implemented":true,"kind":"function","modifiers":[],"name":"leapYearsBefore","nameLocation":"2002:15:5","nodeType":"FunctionDefinition","parameters":{"id":1936,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1935,"mutability":"mutable","name":"year","nameLocation":"2023:4:5","nodeType":"VariableDeclaration","scope":1957,"src":"2018:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1934,"name":"uint","nodeType":"ElementaryTypeName","src":"2018:4:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2017:11:5"},"returnParameters":{"id":1939,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1938,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1957,"src":"2050:4:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1937,"name":"uint","nodeType":"ElementaryTypeName","src":"2050:4:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2049:6:5"},"scope":2226,"src":"1993:163:5","stateMutability":"pure","virtual":false,"visibility":"public"},{"body":{"id":2055,"nodeType":"Block","src":"2248:903:5","statements":[{"assignments":[1966],"declarations":[{"constant":false,"id":1966,"mutability":"mutable","name":"secondsAccountedFor","nameLocation":"2272:19:5","nodeType":"VariableDeclaration","scope":2055,"src":"2267:24:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1965,"name":"uint","nodeType":"ElementaryTypeName","src":"2267:4:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1968,"initialValue":{"hexValue":"30","id":1967,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2294:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"2267:28:5"},{"assignments":[1970],"declarations":[{"constant":false,"id":1970,"mutability":"mutable","name":"buf","nameLocation":"2319:3:5","nodeType":"VariableDeclaration","scope":2055,"src":"2314:8:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1969,"name":"uint","nodeType":"ElementaryTypeName","src":"2314:4:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1971,"nodeType":"VariableDeclarationStatement","src":"2314:8:5"},{"assignments":[1973],"declarations":[{"constant":false,"id":1973,"mutability":"mutable","name":"i","nameLocation":"2347:1:5","nodeType":"VariableDeclaration","scope":2055,"src":"2341:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1972,"name":"uint8","nodeType":"ElementaryTypeName","src":"2341:5:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":1974,"nodeType":"VariableDeclarationStatement","src":"2341:7:5"},{"expression":{"id":1981,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1975,"name":"dt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1963,"src":"2394:2:5","typeDescriptions":{"typeIdentifier":"t_struct$__DateTime_$1709_memory_ptr","typeString":"struct LibSusuwatari._DateTime memory"}},"id":1977,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"year","nodeType":"MemberAccess","referencedDeclaration":1706,"src":"2394:7:5","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1979,"name":"timestamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1959,"src":"2412:9:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1978,"name":"getYear","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2142,"src":"2404:7:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint16_$","typeString":"function (uint256) pure returns (uint16)"}},"id":1980,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2404:18:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"src":"2394:28:5","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"id":1982,"nodeType":"ExpressionStatement","src":"2394:28:5"},{"expression":{"id":1992,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1983,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1970,"src":"2441:3:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1991,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"expression":{"id":1985,"name":"dt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1963,"src":"2463:2:5","typeDescriptions":{"typeIdentifier":"t_struct$__DateTime_$1709_memory_ptr","typeString":"struct LibSusuwatari._DateTime memory"}},"id":1986,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"year","nodeType":"MemberAccess","referencedDeclaration":1706,"src":"2463:7:5","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint16","typeString":"uint16"}],"id":1984,"name":"leapYearsBefore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1957,"src":"2447:15:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1987,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2447:24:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"arguments":[{"id":1989,"name":"ORIGIN_YEAR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1727,"src":"2490:11:5","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint16","typeString":"uint16"}],"id":1988,"name":"leapYearsBefore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1957,"src":"2474:15:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1990,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2474:28:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2447:55:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2441:61:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1993,"nodeType":"ExpressionStatement","src":"2441:61:5"},{"expression":{"id":1998,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1994,"name":"secondsAccountedFor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1966,"src":"2523:19:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1997,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1995,"name":"LEAP_YEAR_IN_SECONDS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1718,"src":"2546:20:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1996,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1970,"src":"2569:3:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2546:26:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2523:49:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1999,"nodeType":"ExpressionStatement","src":"2523:49:5"},{"expression":{"id":2010,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2000,"name":"secondsAccountedFor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1966,"src":"2591:19:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2009,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2001,"name":"YEAR_IN_SECONDS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1715,"src":"2614:15:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2007,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint16","typeString":"uint16"},"id":2005,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2002,"name":"dt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1963,"src":"2633:2:5","typeDescriptions":{"typeIdentifier":"t_struct$__DateTime_$1709_memory_ptr","typeString":"struct LibSusuwatari._DateTime memory"}},"id":2003,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"year","nodeType":"MemberAccess","referencedDeclaration":1706,"src":"2633:7:5","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":2004,"name":"ORIGIN_YEAR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1727,"src":"2643:11:5","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"src":"2633:21:5","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":2006,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1970,"src":"2657:3:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2633:27:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2008,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2632:29:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2614:47:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2591:70:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2011,"nodeType":"ExpressionStatement","src":"2591:70:5"},{"assignments":[2013],"declarations":[{"constant":false,"id":2013,"mutability":"mutable","name":"secondsInMonth","nameLocation":"2713:14:5","nodeType":"VariableDeclaration","scope":2055,"src":"2708:19:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2012,"name":"uint","nodeType":"ElementaryTypeName","src":"2708:4:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2014,"nodeType":"VariableDeclarationStatement","src":"2708:19:5"},{"body":{"id":2053,"nodeType":"Block","src":"2772:366:5","statements":[{"expression":{"id":2033,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2025,"name":"secondsInMonth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2013,"src":"2799:14:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2032,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2026,"name":"DAY_IN_SECONDS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1712,"src":"2816:14:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"arguments":[{"id":2028,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1973,"src":"2848:1:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"expression":{"id":2029,"name":"dt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1963,"src":"2851:2:5","typeDescriptions":{"typeIdentifier":"t_struct$__DateTime_$1709_memory_ptr","typeString":"struct LibSusuwatari._DateTime memory"}},"id":2030,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"year","nodeType":"MemberAccess","referencedDeclaration":1706,"src":"2851:7:5","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_uint16","typeString":"uint16"}],"id":2027,"name":"getDaysInMonth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2225,"src":"2833:14:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint8_$_t_uint16_$returns$_t_uint8_$","typeString":"function (uint8,uint16) pure returns (uint8)"}},"id":2031,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2833:26:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"2816:43:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2799:60:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2034,"nodeType":"ExpressionStatement","src":"2799:60:5"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2039,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2037,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2035,"name":"secondsInMonth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2013,"src":"2890:14:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":2036,"name":"secondsAccountedFor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1966,"src":"2907:19:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2890:36:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2038,"name":"timestamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1959,"src":"2929:9:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2890:48:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2048,"nodeType":"IfStatement","src":"2886:169:5","trueBody":{"id":2047,"nodeType":"Block","src":"2940:115:5","statements":[{"expression":{"id":2044,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2040,"name":"dt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1963,"src":"2975:2:5","typeDescriptions":{"typeIdentifier":"t_struct$__DateTime_$1709_memory_ptr","typeString":"struct LibSusuwatari._DateTime memory"}},"id":2042,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"month","nodeType":"MemberAccess","referencedDeclaration":1708,"src":"2975:8:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2043,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1973,"src":"2986:1:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"2975:12:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":2045,"nodeType":"ExpressionStatement","src":"2975:12:5"},{"id":2046,"nodeType":"Break","src":"3022:5:5"}]}},{"expression":{"id":2051,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2049,"name":"secondsAccountedFor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1966,"src":"3081:19:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":2050,"name":"secondsInMonth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2013,"src":"3104:14:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3081:37:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2052,"nodeType":"ExpressionStatement","src":"3081:37:5"}]},"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":2021,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2019,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1973,"src":"2758:1:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"hexValue":"3132","id":2020,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2763:2:5","typeDescriptions":{"typeIdentifier":"t_rational_12_by_1","typeString":"int_const 12"},"value":"12"},"src":"2758:7:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2054,"initializationExpression":{"expression":{"id":2017,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2015,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1973,"src":"2751:1:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"31","id":2016,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2755:1:5","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2751:5:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":2018,"nodeType":"ExpressionStatement","src":"2751:5:5"},"loopExpression":{"expression":{"id":2023,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2767:3:5","subExpression":{"id":2022,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1973,"src":"2767:1:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":2024,"nodeType":"ExpressionStatement","src":"2767:3:5"},"nodeType":"ForStatement","src":"2746:392:5"}]},"id":2056,"implemented":true,"kind":"function","modifiers":[],"name":"parseTimestamp","nameLocation":"2173:14:5","nodeType":"FunctionDefinition","parameters":{"id":1960,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1959,"mutability":"mutable","name":"timestamp","nameLocation":"2193:9:5","nodeType":"VariableDeclaration","scope":2056,"src":"2188:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1958,"name":"uint","nodeType":"ElementaryTypeName","src":"2188:4:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2187:16:5"},"returnParameters":{"id":1964,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1963,"mutability":"mutable","name":"dt","nameLocation":"2244:2:5","nodeType":"VariableDeclaration","scope":2056,"src":"2227:19:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$__DateTime_$1709_memory_ptr","typeString":"struct LibSusuwatari._DateTime"},"typeName":{"id":1962,"nodeType":"UserDefinedTypeName","pathNode":{"id":1961,"name":"_DateTime","nodeType":"IdentifierPath","referencedDeclaration":1709,"src":"2227:9:5"},"referencedDeclaration":1709,"src":"2227:9:5","typeDescriptions":{"typeIdentifier":"t_struct$__DateTime_$1709_storage_ptr","typeString":"struct LibSusuwatari._DateTime"}},"visibility":"internal"}],"src":"2226:21:5"},"scope":2226,"src":"2164:987:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2141,"nodeType":"Block","src":"3221:931:5","statements":[{"assignments":[2064],"declarations":[{"constant":false,"id":2064,"mutability":"mutable","name":"secondsAccountedFor","nameLocation":"3245:19:5","nodeType":"VariableDeclaration","scope":2141,"src":"3240:24:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2063,"name":"uint","nodeType":"ElementaryTypeName","src":"3240:4:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2066,"initialValue":{"hexValue":"30","id":2065,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3267:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"3240:28:5"},{"assignments":[2068],"declarations":[{"constant":false,"id":2068,"mutability":"mutable","name":"year","nameLocation":"3294:4:5","nodeType":"VariableDeclaration","scope":2141,"src":"3287:11:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":2067,"name":"uint16","nodeType":"ElementaryTypeName","src":"3287:6:5","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"id":2069,"nodeType":"VariableDeclarationStatement","src":"3287:11:5"},{"assignments":[2071],"declarations":[{"constant":false,"id":2071,"mutability":"mutable","name":"numLeapYears","nameLocation":"3322:12:5","nodeType":"VariableDeclaration","scope":2141,"src":"3317:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2070,"name":"uint","nodeType":"ElementaryTypeName","src":"3317:4:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2072,"nodeType":"VariableDeclarationStatement","src":"3317:17:5"},{"expression":{"id":2082,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2073,"name":"year","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2068,"src":"3380:4:5","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2080,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2076,"name":"ORIGIN_YEAR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1727,"src":"3394:11:5","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2079,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2077,"name":"timestamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2058,"src":"3408:9:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2078,"name":"YEAR_IN_SECONDS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1715,"src":"3420:15:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3408:27:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3394:41:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2075,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3387:6:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint16_$","typeString":"type(uint16)"},"typeName":{"id":2074,"name":"uint16","nodeType":"ElementaryTypeName","src":"3387:6:5","typeDescriptions":{}}},"id":2081,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3387:49:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"src":"3380:56:5","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"id":2083,"nodeType":"ExpressionStatement","src":"3380:56:5"},{"expression":{"id":2092,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2084,"name":"numLeapYears","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2071,"src":"3455:12:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2091,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2086,"name":"year","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2068,"src":"3486:4:5","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint16","typeString":"uint16"}],"id":2085,"name":"leapYearsBefore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1957,"src":"3470:15:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2087,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3470:21:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"arguments":[{"id":2089,"name":"ORIGIN_YEAR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1727,"src":"3510:11:5","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint16","typeString":"uint16"}],"id":2088,"name":"leapYearsBefore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1957,"src":"3494:15:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2090,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3494:28:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3470:52:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3455:67:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2093,"nodeType":"ExpressionStatement","src":"3455:67:5"},{"expression":{"id":2098,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2094,"name":"secondsAccountedFor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2064,"src":"3543:19:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2097,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2095,"name":"LEAP_YEAR_IN_SECONDS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1718,"src":"3566:20:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2096,"name":"numLeapYears","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2071,"src":"3589:12:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3566:35:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3543:58:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2099,"nodeType":"ExpressionStatement","src":"3543:58:5"},{"expression":{"id":2109,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2100,"name":"secondsAccountedFor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2064,"src":"3620:19:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2108,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2101,"name":"YEAR_IN_SECONDS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1715,"src":"3643:15:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2106,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint16","typeString":"uint16"},"id":2104,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2102,"name":"year","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2068,"src":"3662:4:5","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":2103,"name":"ORIGIN_YEAR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1727,"src":"3669:11:5","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"src":"3662:18:5","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":2105,"name":"numLeapYears","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2071,"src":"3683:12:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3662:33:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2107,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3661:35:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3643:53:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3620:76:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2110,"nodeType":"ExpressionStatement","src":"3620:76:5"},{"body":{"id":2137,"nodeType":"Block","src":"3757:354:5","statements":[{"condition":{"arguments":[{"arguments":[{"commonType":{"typeIdentifier":"t_uint16","typeString":"uint16"},"id":2119,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2117,"name":"year","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2068,"src":"3806:4:5","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2118,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3813:1:5","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3806:8:5","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint16","typeString":"uint16"}],"id":2116,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3799:6:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint16_$","typeString":"type(uint16)"},"typeName":{"id":2115,"name":"uint16","nodeType":"ElementaryTypeName","src":"3799:6:5","typeDescriptions":{}}},"id":2120,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3799:16:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint16","typeString":"uint16"}],"id":2114,"name":"isLeapYear","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1933,"src":"3788:10:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint16_$returns$_t_bool_$","typeString":"function (uint16) pure returns (bool)"}},"id":2121,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3788:28:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2131,"nodeType":"Block","src":"3955:101:5","statements":[{"expression":{"id":2129,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2127,"name":"secondsAccountedFor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2064,"src":"3990:19:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":2128,"name":"YEAR_IN_SECONDS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1715,"src":"4013:15:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3990:38:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2130,"nodeType":"ExpressionStatement","src":"3990:38:5"}]},"id":2132,"nodeType":"IfStatement","src":"3784:272:5","trueBody":{"id":2126,"nodeType":"Block","src":"3818:106:5","statements":[{"expression":{"id":2124,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2122,"name":"secondsAccountedFor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2064,"src":"3853:19:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":2123,"name":"LEAP_YEAR_IN_SECONDS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1718,"src":"3876:20:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3853:43:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2125,"nodeType":"ExpressionStatement","src":"3853:43:5"}]}},{"expression":{"id":2135,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2133,"name":"year","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2068,"src":"4082:4:5","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"31","id":2134,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4090:1:5","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"4082:9:5","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"id":2136,"nodeType":"ExpressionStatement","src":"4082:9:5"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2113,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2111,"name":"secondsAccountedFor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2064,"src":"3724:19:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2112,"name":"timestamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2058,"src":"3746:9:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3724:31:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2138,"nodeType":"WhileStatement","src":"3717:394:5"},{"expression":{"id":2139,"name":"year","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2068,"src":"4136:4:5","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"functionReturnParameters":2062,"id":2140,"nodeType":"Return","src":"4129:11:5"}]},"functionSelector":"92d66313","id":2142,"implemented":true,"kind":"function","modifiers":[],"name":"getYear","nameLocation":"3168:7:5","nodeType":"FunctionDefinition","parameters":{"id":2059,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2058,"mutability":"mutable","name":"timestamp","nameLocation":"3181:9:5","nodeType":"VariableDeclaration","scope":2142,"src":"3176:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2057,"name":"uint","nodeType":"ElementaryTypeName","src":"3176:4:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3175:16:5"},"returnParameters":{"id":2062,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2061,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2142,"src":"3213:6:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":2060,"name":"uint16","nodeType":"ElementaryTypeName","src":"3213:6:5","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"3212:8:5"},"scope":2226,"src":"3159:993:5","stateMutability":"pure","virtual":false,"visibility":"public"},{"body":{"id":2154,"nodeType":"Block","src":"4226:69:5","statements":[{"expression":{"expression":{"arguments":[{"id":2150,"name":"timestamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2144,"src":"4267:9:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2149,"name":"parseTimestamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2056,"src":"4252:14:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_struct$__DateTime_$1709_memory_ptr_$","typeString":"function (uint256) pure returns (struct LibSusuwatari._DateTime memory)"}},"id":2151,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4252:25:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$__DateTime_$1709_memory_ptr","typeString":"struct LibSusuwatari._DateTime memory"}},"id":2152,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"month","nodeType":"MemberAccess","referencedDeclaration":1708,"src":"4252:31:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"functionReturnParameters":2148,"id":2153,"nodeType":"Return","src":"4245:38:5"}]},"functionSelector":"a324ad24","id":2155,"implemented":true,"kind":"function","modifiers":[],"name":"getMonth","nameLocation":"4173:8:5","nodeType":"FunctionDefinition","parameters":{"id":2145,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2144,"mutability":"mutable","name":"timestamp","nameLocation":"4187:9:5","nodeType":"VariableDeclaration","scope":2155,"src":"4182:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2143,"name":"uint","nodeType":"ElementaryTypeName","src":"4182:4:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4181:16:5"},"returnParameters":{"id":2148,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2147,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2155,"src":"4219:5:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2146,"name":"uint8","nodeType":"ElementaryTypeName","src":"4219:5:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"4218:7:5"},"scope":2226,"src":"4164:131:5","stateMutability":"pure","virtual":false,"visibility":"public"},{"body":{"id":2224,"nodeType":"Block","src":"4385:506:5","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2190,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2186,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2182,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2178,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2174,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2170,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":2166,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2164,"name":"month","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2157,"src":"4408:5:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":2165,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4417:1:5","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"4408:10:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":2169,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2167,"name":"month","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2157,"src":"4422:5:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"33","id":2168,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4431:1:5","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"4422:10:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4408:24:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":2173,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2171,"name":"month","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2157,"src":"4436:5:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"35","id":2172,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4445:1:5","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"src":"4436:10:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4408:38:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":2177,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2175,"name":"month","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2157,"src":"4450:5:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"37","id":2176,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4459:1:5","typeDescriptions":{"typeIdentifier":"t_rational_7_by_1","typeString":"int_const 7"},"value":"7"},"src":"4450:10:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4408:52:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":2181,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2179,"name":"month","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2157,"src":"4464:5:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"38","id":2180,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4473:1:5","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"4464:10:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4408:66:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":2185,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2183,"name":"month","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2157,"src":"4478:5:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"3130","id":2184,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4487:2:5","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"4478:11:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4408:81:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":2189,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2187,"name":"month","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2157,"src":"4493:5:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"3132","id":2188,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4502:2:5","typeDescriptions":{"typeIdentifier":"t_rational_12_by_1","typeString":"int_const 12"},"value":"12"},"src":"4493:11:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4408:96:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2208,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2204,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2200,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":2196,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2194,"name":"month","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2157,"src":"4589:5:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"34","id":2195,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4598:1:5","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"4589:10:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":2199,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2197,"name":"month","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2157,"src":"4603:5:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"36","id":2198,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4612:1:5","typeDescriptions":{"typeIdentifier":"t_rational_6_by_1","typeString":"int_const 6"},"value":"6"},"src":"4603:10:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4589:24:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":2203,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2201,"name":"month","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2157,"src":"4617:5:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"39","id":2202,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4626:1:5","typeDescriptions":{"typeIdentifier":"t_rational_9_by_1","typeString":"int_const 9"},"value":"9"},"src":"4617:10:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4589:38:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":2207,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2205,"name":"month","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2157,"src":"4631:5:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"3131","id":2206,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4640:2:5","typeDescriptions":{"typeIdentifier":"t_rational_11_by_1","typeString":"int_const 11"},"value":"11"},"src":"4631:11:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4589:53:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"arguments":[{"id":2213,"name":"year","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2159,"src":"4738:4:5","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint16","typeString":"uint16"}],"id":2212,"name":"isLeapYear","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1933,"src":"4727:10:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint16_$returns$_t_bool_$","typeString":"function (uint16) pure returns (bool)"}},"id":2214,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4727:16:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2220,"nodeType":"Block","src":"4824:56:5","statements":[{"expression":{"hexValue":"3238","id":2218,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4858:2:5","typeDescriptions":{"typeIdentifier":"t_rational_28_by_1","typeString":"int_const 28"},"value":"28"},"functionReturnParameters":2163,"id":2219,"nodeType":"Return","src":"4851:9:5"}]},"id":2221,"nodeType":"IfStatement","src":"4723:157:5","trueBody":{"id":2217,"nodeType":"Block","src":"4745:56:5","statements":[{"expression":{"hexValue":"3239","id":2215,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4779:2:5","typeDescriptions":{"typeIdentifier":"t_rational_29_by_1","typeString":"int_const 29"},"value":"29"},"functionReturnParameters":2163,"id":2216,"nodeType":"Return","src":"4772:9:5"}]}},"id":2222,"nodeType":"IfStatement","src":"4585:295:5","trueBody":{"id":2211,"nodeType":"Block","src":"4644:56:5","statements":[{"expression":{"hexValue":"3330","id":2209,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4678:2:5","typeDescriptions":{"typeIdentifier":"t_rational_30_by_1","typeString":"int_const 30"},"value":"30"},"functionReturnParameters":2163,"id":2210,"nodeType":"Return","src":"4671:9:5"}]}},"id":2223,"nodeType":"IfStatement","src":"4404:476:5","trueBody":{"id":2193,"nodeType":"Block","src":"4506:56:5","statements":[{"expression":{"hexValue":"3331","id":2191,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4540:2:5","typeDescriptions":{"typeIdentifier":"t_rational_31_by_1","typeString":"int_const 31"},"value":"31"},"functionReturnParameters":2163,"id":2192,"nodeType":"Return","src":"4533:9:5"}]}}]},"functionSelector":"b238ad0e","id":2225,"implemented":true,"kind":"function","modifiers":[],"name":"getDaysInMonth","nameLocation":"4316:14:5","nodeType":"FunctionDefinition","parameters":{"id":2160,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2157,"mutability":"mutable","name":"month","nameLocation":"4337:5:5","nodeType":"VariableDeclaration","scope":2225,"src":"4331:11:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2156,"name":"uint8","nodeType":"ElementaryTypeName","src":"4331:5:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":2159,"mutability":"mutable","name":"year","nameLocation":"4351:4:5","nodeType":"VariableDeclaration","scope":2225,"src":"4344:11:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":2158,"name":"uint16","nodeType":"ElementaryTypeName","src":"4344:6:5","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"4330:26:5"},"returnParameters":{"id":2163,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2162,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2225,"src":"4378:5:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2161,"name":"uint8","nodeType":"ElementaryTypeName","src":"4378:5:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"4377:7:5"},"scope":2226,"src":"4307:584:5","stateMutability":"pure","virtual":false,"visibility":"public"}],"scope":2227,"src":"273:4621:5","usedErrors":[]}],"src":"34:4860:5"},"id":5},"contracts/SusuwatariFacet.sol":{"ast":{"absolutePath":"contracts/SusuwatariFacet.sol","exportedSymbols":{"Address":[329],"LibSusuwatari":[2226],"Math":[1424],"SusuwatariFacet":[3020],"SusuwatariStorage":[3076],"SignedMath":[1529],"StorageHandler":[3114],"Strings":[558],"UsingDiamondOwner":[3140]},"id":3021,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2228,"literals":["solidity","^","0.8",".10"],"nodeType":"PragmaDirective","src":"34:24:6"},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"@openzeppelin/contracts/utils/Address.sol","id":2229,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3021,"sourceUnit":330,"src":"60:51:6","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","file":"@openzeppelin/contracts/utils/Strings.sol","id":2230,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3021,"sourceUnit":559,"src":"113:51:6","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/SusuwatariStorage.sol","file":"./SusuwatariStorage.sol","id":2233,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3021,"sourceUnit":3115,"src":"203:83:6","symbolAliases":[{"foreign":{"id":2231,"name":"SusuwatariStorage","nodeType":"Identifier","overloadedDeclarations":[],"src":"211:22:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":2232,"name":"StorageHandler","nodeType":"Identifier","overloadedDeclarations":[],"src":"234:14:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/LibSusuwatari.sol","file":"./LibSusuwatari.sol","id":2235,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3021,"sourceUnit":2227,"src":"288:60:6","symbolAliases":[{"foreign":{"id":2234,"name":"LibSusuwatari","nodeType":"Identifier","overloadedDeclarations":[],"src":"296:18:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"hardhat-deploy/solc_0.8/diamond/UsingDiamondOwner.sol","file":"hardhat-deploy/solc_0.8/diamond/UsingDiamondOwner.sol","id":2237,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3021,"sourceUnit":3141,"src":"350:88:6","symbolAliases":[{"foreign":{"id":2236,"name":"UsingDiamondOwner","nodeType":"Identifier","overloadedDeclarations":[],"src":"358:17:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2239,"name":"StorageHandler","nodeType":"IdentifierPath","referencedDeclaration":3114,"src":"729:14:6"},"id":2240,"nodeType":"InheritanceSpecifier","src":"729:14:6"},{"baseName":{"id":2241,"name":"UsingDiamondOwner","nodeType":"IdentifierPath","referencedDeclaration":3140,"src":"745:17:6"},"id":2242,"nodeType":"InheritanceSpecifier","src":"745:17:6"}],"canonicalName":"SusuwatariFacet","contractDependencies":[],"contractKind":"contract","documentation":{"id":2238,"nodeType":"StructuredDocumentation","src":"444:250:6","text":" @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n the Metadata extension, but not including the Enumerable extension, which is available separately as\n {ERC721Enumerable}."},"fullyImplemented":true,"id":3020,"linearizedBaseContracts":[3020,3140,3114],"name":"SusuwatariFacet","nameLocation":"705:20:6","nodeType":"ContractDefinition","nodes":[{"id":2245,"libraryName":{"id":2243,"name":"Address","nodeType":"IdentifierPath","referencedDeclaration":329,"src":"776:7:6"},"nodeType":"UsingForDirective","src":"770:26:6","typeName":{"id":2244,"name":"address","nodeType":"ElementaryTypeName","src":"788:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"id":2248,"libraryName":{"id":2246,"name":"Strings","nodeType":"IdentifierPath","referencedDeclaration":558,"src":"808:7:6"},"nodeType":"UsingForDirective","src":"802:26:6","typeName":{"id":2247,"name":"uint256","nodeType":"ElementaryTypeName","src":"820:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"anonymous":false,"id":2264,"name":"Voted","nameLocation":"848:5:6","nodeType":"EventDefinition","parameters":{"id":2263,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2250,"indexed":false,"mutability":"mutable","name":"url","nameLocation":"861:3:6","nodeType":"VariableDeclaration","scope":2264,"src":"854:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2249,"name":"string","nodeType":"ElementaryTypeName","src":"854:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2252,"indexed":false,"mutability":"mutable","name":"up","nameLocation":"870:2:6","nodeType":"VariableDeclaration","scope":2264,"src":"865:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2251,"name":"bool","nodeType":"ElementaryTypeName","src":"865:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2254,"indexed":false,"mutability":"mutable","name":"title","nameLocation":"880:5:6","nodeType":"VariableDeclaration","scope":2264,"src":"873:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2253,"name":"string","nodeType":"ElementaryTypeName","src":"873:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2256,"indexed":false,"mutability":"mutable","name":"receiver","nameLocation":"894:8:6","nodeType":"VariableDeclaration","scope":2264,"src":"886:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2255,"name":"address","nodeType":"ElementaryTypeName","src":"886:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2258,"indexed":false,"mutability":"mutable","name":"sender","nameLocation":"911:6:6","nodeType":"VariableDeclaration","scope":2264,"src":"903:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2257,"name":"address","nodeType":"ElementaryTypeName","src":"903:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2260,"indexed":false,"mutability":"mutable","name":"month","nameLocation":"924:5:6","nodeType":"VariableDeclaration","scope":2264,"src":"918:11:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2259,"name":"uint8","nodeType":"ElementaryTypeName","src":"918:5:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":2262,"indexed":false,"mutability":"mutable","name":"year","nameLocation":"938:4:6","nodeType":"VariableDeclaration","scope":2264,"src":"931:11:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":2261,"name":"uint16","nodeType":"ElementaryTypeName","src":"931:6:6","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"853:90:6"},"src":"842:102:6"},{"anonymous":false,"id":2276,"name":"Donated","nameLocation":"956:7:6","nodeType":"EventDefinition","parameters":{"id":2275,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2266,"indexed":false,"mutability":"mutable","name":"donatedFinney","nameLocation":"971:13:6","nodeType":"VariableDeclaration","scope":2276,"src":"964:20:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":2265,"name":"uint64","nodeType":"ElementaryTypeName","src":"964:6:6","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":2268,"indexed":false,"mutability":"mutable","name":"name","nameLocation":"993:4:6","nodeType":"VariableDeclaration","scope":2276,"src":"986:11:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2267,"name":"string","nodeType":"ElementaryTypeName","src":"986:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2270,"indexed":false,"mutability":"mutable","name":"months","nameLocation":"1006:6:6","nodeType":"VariableDeclaration","scope":2276,"src":"999:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":2269,"name":"uint16","nodeType":"ElementaryTypeName","src":"999:6:6","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":2272,"indexed":false,"mutability":"mutable","name":"currentMonth","nameLocation":"1020:12:6","nodeType":"VariableDeclaration","scope":2276,"src":"1013:19:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":2271,"name":"uint16","nodeType":"ElementaryTypeName","src":"1013:6:6","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":2274,"indexed":false,"mutability":"mutable","name":"currentYear","nameLocation":"1040:11:6","nodeType":"VariableDeclaration","scope":2276,"src":"1033:18:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":2273,"name":"uint16","nodeType":"ElementaryTypeName","src":"1033:6:6","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"963:89:6"},"src":"950:103:6"},{"anonymous":false,"id":2286,"name":"TransferedFairShare","nameLocation":"1065:19:6","nodeType":"EventDefinition","parameters":{"id":2285,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2278,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"1093:6:6","nodeType":"VariableDeclaration","scope":2286,"src":"1085:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2277,"name":"uint256","nodeType":"ElementaryTypeName","src":"1085:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2280,"indexed":false,"mutability":"mutable","name":"to","nameLocation":"1108:2:6","nodeType":"VariableDeclaration","scope":2286,"src":"1100:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2279,"name":"address","nodeType":"ElementaryTypeName","src":"1100:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2282,"indexed":false,"mutability":"mutable","name":"month","nameLocation":"1118:5:6","nodeType":"VariableDeclaration","scope":2286,"src":"1111:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":2281,"name":"uint16","nodeType":"ElementaryTypeName","src":"1111:6:6","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":2284,"indexed":false,"mutability":"mutable","name":"year","nameLocation":"1131:4:6","nodeType":"VariableDeclaration","scope":2286,"src":"1124:11:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":2283,"name":"uint16","nodeType":"ElementaryTypeName","src":"1124:6:6","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"1084:52:6"},"src":"1059:78:6"},{"anonymous":false,"id":2298,"name":"RemovedFromDonationBucket","nameLocation":"1149:25:6","nodeType":"EventDefinition","parameters":{"id":2297,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2288,"indexed":false,"mutability":"mutable","name":"shareFinney","nameLocation":"1182:11:6","nodeType":"VariableDeclaration","scope":2298,"src":"1175:18:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":2287,"name":"uint32","nodeType":"ElementaryTypeName","src":"1175:6:6","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":2290,"indexed":false,"mutability":"mutable","name":"transferDateId","nameLocation":"1201:14:6","nodeType":"VariableDeclaration","scope":2298,"src":"1194:21:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":2289,"name":"uint32","nodeType":"ElementaryTypeName","src":"1194:6:6","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":2292,"indexed":false,"mutability":"mutable","name":"transferFromDonationBucketPos","nameLocation":"1223:29:6","nodeType":"VariableDeclaration","scope":2298,"src":"1216:36:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":2291,"name":"uint16","nodeType":"ElementaryTypeName","src":"1216:6:6","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":2294,"indexed":false,"mutability":"mutable","name":"month","nameLocation":"1261:5:6","nodeType":"VariableDeclaration","scope":2298,"src":"1254:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":2293,"name":"uint16","nodeType":"ElementaryTypeName","src":"1254:6:6","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":2296,"indexed":false,"mutability":"mutable","name":"year","nameLocation":"1275:4:6","nodeType":"VariableDeclaration","scope":2298,"src":"1268:11:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":2295,"name":"uint16","nodeType":"ElementaryTypeName","src":"1268:6:6","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"1174:106:6"},"src":"1143:138:6"},{"canonicalName":"SusuwatariFacet.DonationBuckets","id":2307,"members":[{"constant":false,"id":2300,"mutability":"mutable","name":"startMonth","nameLocation":"1329:10:6","nodeType":"VariableDeclaration","scope":2307,"src":"1322:17:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":2299,"name":"uint16","nodeType":"ElementaryTypeName","src":"1322:6:6","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":2302,"mutability":"mutable","name":"startYear","nameLocation":"1357:9:6","nodeType":"VariableDeclaration","scope":2307,"src":"1350:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":2301,"name":"uint16","nodeType":"ElementaryTypeName","src":"1350:6:6","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":2306,"mutability":"mutable","name":"donationBuckets","nameLocation":"1388:15:6","nodeType":"VariableDeclaration","scope":2307,"src":"1377:26:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint32_$48_storage_ptr","typeString":"uint32[48]"},"typeName":{"baseType":{"id":2303,"name":"uint32","nodeType":"ElementaryTypeName","src":"1377:6:6","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"id":2305,"length":{"hexValue":"3438","id":2304,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1384:2:6","typeDescriptions":{"typeIdentifier":"t_rational_48_by_1","typeString":"int_const 48"},"value":"48"},"nodeType":"ArrayTypeName","src":"1377:10:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint32_$48_storage_ptr","typeString":"uint32[48]"}},"visibility":"internal"}],"name":"DonationBuckets","nameLocation":"1296:15:6","nodeType":"StructDefinition","scope":3020,"src":"1289:122:6","visibility":"public"},{"body":{"id":2324,"nodeType":"Block","src":"1467:97:6","statements":[{"assignments":[2314],"declarations":[{"constant":false,"id":2314,"mutability":"mutable","name":"pp","nameLocation":"1509:2:6","nodeType":"VariableDeclaration","scope":2324,"src":"1478:33:6","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$3076_storage_ptr","typeString":"struct SusuwatariStorage"},"typeName":{"id":2313,"nodeType":"UserDefinedTypeName","pathNode":{"id":2312,"name":"SusuwatariStorage","nodeType":"IdentifierPath","referencedDeclaration":3076,"src":"1478:22:6"},"referencedDeclaration":3076,"src":"1478:22:6","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$3076_storage_ptr","typeString":"struct SusuwatariStorage"}},"visibility":"internal"}],"id":2317,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":2315,"name":"pp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3088,"src":"1514:2:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_SusuwatariStorage_$3076_storage_ptr_$","typeString":"function () pure returns (struct SusuwatariStorage storage pointer)"}},"id":2316,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1514:4:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$3076_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"1478:40:6"},{"expression":{"id":2322,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2318,"name":"pp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2314,"src":"1529:2:6","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$3076_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},"id":2320,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"_isDonatingActive","nodeType":"MemberAccess","referencedDeclaration":3041,"src":"1529:20:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":2321,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1552:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"1529:27:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2323,"nodeType":"ExpressionStatement","src":"1529:27:6"}]},"functionSelector":"5f592bb5","id":2325,"implemented":true,"kind":"function","modifiers":[{"id":2310,"kind":"modifierInvocation","modifierName":{"id":2309,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":3139,"src":"1457:9:6"},"nodeType":"ModifierInvocation","src":"1457:9:6"}],"name":"setDonatingActive","nameLocation":"1430:17:6","nodeType":"FunctionDefinition","parameters":{"id":2308,"nodeType":"ParameterList","parameters":[],"src":"1447:2:6"},"returnParameters":{"id":2311,"nodeType":"ParameterList","parameters":[],"src":"1467:0:6"},"scope":3020,"src":"1421:143:6","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":2342,"nodeType":"Block","src":"1620:98:6","statements":[{"assignments":[2332],"declarations":[{"constant":false,"id":2332,"mutability":"mutable","name":"pp","nameLocation":"1662:2:6","nodeType":"VariableDeclaration","scope":2342,"src":"1631:33:6","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$3076_storage_ptr","typeString":"struct SusuwatariStorage"},"typeName":{"id":2331,"nodeType":"UserDefinedTypeName","pathNode":{"id":2330,"name":"SusuwatariStorage","nodeType":"IdentifierPath","referencedDeclaration":3076,"src":"1631:22:6"},"referencedDeclaration":3076,"src":"1631:22:6","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$3076_storage_ptr","typeString":"struct SusuwatariStorage"}},"visibility":"internal"}],"id":2335,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":2333,"name":"pp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3088,"src":"1667:2:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_SusuwatariStorage_$3076_storage_ptr_$","typeString":"function () pure returns (struct SusuwatariStorage storage pointer)"}},"id":2334,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1667:4:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$3076_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"1631:40:6"},{"expression":{"id":2340,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2336,"name":"pp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2332,"src":"1682:2:6","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$3076_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},"id":2338,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"_isDonatingActive","nodeType":"MemberAccess","referencedDeclaration":3041,"src":"1682:20:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":2339,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1705:5:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"1682:28:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2341,"nodeType":"ExpressionStatement","src":"1682:28:6"}]},"functionSelector":"c3269df9","id":2343,"implemented":true,"kind":"function","modifiers":[{"id":2328,"kind":"modifierInvocation","modifierName":{"id":2327,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":3139,"src":"1610:9:6"},"nodeType":"ModifierInvocation","src":"1610:9:6"}],"name":"setDonatingInactive","nameLocation":"1581:19:6","nodeType":"FunctionDefinition","parameters":{"id":2326,"nodeType":"ParameterList","parameters":[],"src":"1600:2:6"},"returnParameters":{"id":2329,"nodeType":"ParameterList","parameters":[],"src":"1620:0:6"},"scope":3020,"src":"1572:146:6","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":2515,"nodeType":"Block","src":"1792:1507:6","statements":[{"assignments":[2354],"declarations":[{"constant":false,"id":2354,"mutability":"mutable","name":"date","nameLocation":"1839:4:6","nodeType":"VariableDeclaration","scope":2515,"src":"1803:40:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$__DateTime_$1709_memory_ptr","typeString":"struct LibSusuwatari._DateTime"},"typeName":{"id":2353,"nodeType":"UserDefinedTypeName","pathNode":{"id":2352,"name":"LibSusuwatari._DateTime","nodeType":"IdentifierPath","referencedDeclaration":1709,"src":"1803:28:6"},"referencedDeclaration":1709,"src":"1803:28:6","typeDescriptions":{"typeIdentifier":"t_struct$__DateTime_$1709_storage_ptr","typeString":"struct LibSusuwatari._DateTime"}},"visibility":"internal"}],"id":2360,"initialValue":{"arguments":[{"expression":{"id":2357,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"1880:5:6","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2358,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"timestamp","nodeType":"MemberAccess","src":"1880:15:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2355,"name":"LibSusuwatari","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2226,"src":"1846:18:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_LibSusuwatari_$2226_$","typeString":"type(library LibSusuwatari)"}},"id":2356,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"parseTimestamp","nodeType":"MemberAccess","referencedDeclaration":2056,"src":"1846:33:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_struct$__DateTime_$1709_memory_ptr_$","typeString":"function (uint256) pure returns (struct LibSusuwatari._DateTime memory)"}},"id":2359,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1846:50:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$__DateTime_$1709_memory_ptr","typeString":"struct LibSusuwatari._DateTime memory"}},"nodeType":"VariableDeclarationStatement","src":"1803:93:6"},{"assignments":[2362],"declarations":[{"constant":false,"id":2362,"mutability":"mutable","name":"currentMonth0Based","nameLocation":"1914:18:6","nodeType":"VariableDeclaration","scope":2515,"src":"1907:25:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":2361,"name":"uint16","nodeType":"ElementaryTypeName","src":"1907:6:6","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"id":2367,"initialValue":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":2366,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2363,"name":"date","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2354,"src":"1935:4:6","typeDescriptions":{"typeIdentifier":"t_struct$__DateTime_$1709_memory_ptr","typeString":"struct LibSusuwatari._DateTime memory"}},"id":2364,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"month","nodeType":"MemberAccess","referencedDeclaration":1708,"src":"1935:10:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2365,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1946:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1935:12:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"VariableDeclarationStatement","src":"1907:40:6"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint16","typeString":"uint16"},"id":2371,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2369,"name":"months","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2345,"src":"1966:6:6","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"3235","id":2370,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1975:2:6","typeDescriptions":{"typeIdentifier":"t_rational_25_by_1","typeString":"int_const 25"},"value":"25"},"src":"1966:11:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f6e6c79207570746f203234206d6f6e74687320697320737570706f72746564","id":2372,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1979:34:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_0793a9e324d7f9507290b008bf5807487b0423dc29b2d30e68717b9336ecd2e2","typeString":"literal_string \"Only upto 24 months is supported\""},"value":"Only upto 24 months is supported"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0793a9e324d7f9507290b008bf5807487b0423dc29b2d30e68717b9336ecd2e2","typeString":"literal_string \"Only upto 24 months is supported\""}],"id":2368,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1958:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2373,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1958:56:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2374,"nodeType":"ExpressionStatement","src":"1958:56:6"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2381,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2379,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2376,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2033:3:6","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2377,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"value","nodeType":"MemberAccess","src":"2033:9:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":2378,"name":"months","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2345,"src":"2045:6:6","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"src":"2033:18:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2380,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2055:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2033:23:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"506179656420616d6f756e74206d75737420626520646576696461626c6520627920746865206469737472696275746564206d6f6e746873","id":2382,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2058:58:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_01d4855b20158f61880beb1b3699f227a6ea30ffe5944246c65c86c47bcf22b2","typeString":"literal_string \"Payed amount must be devidable by the distributed months\""},"value":"Payed amount must be devidable by the distributed months"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_01d4855b20158f61880beb1b3699f227a6ea30ffe5944246c65c86c47bcf22b2","typeString":"literal_string \"Payed amount must be devidable by the distributed months\""}],"id":2375,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2025:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2383,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2025:92:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2384,"nodeType":"ExpressionStatement","src":"2025:92:6"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2391,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2389,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2386,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2136:3:6","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2387,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"value","nodeType":"MemberAccess","src":"2136:9:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"hexValue":"315f3030305f3030305f3030305f3030305f303030","id":2388,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2148:21:6","typeDescriptions":{"typeIdentifier":"t_rational_1000000000000000_by_1","typeString":"int_const 1000000000000000"},"value":"1_000_000_000_000_000"},"src":"2136:33:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2390,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2174:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2136:39:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4c657373207468616e20312066696e6e657928312f313030302045544829206672616374696f6e7320617265206e6f7420737570706f72746564","id":2392,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2177:60:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_765a8b979473614c6a31b440d14797ba7eb8864388594b0d031e1e5a6b9ce578","typeString":"literal_string \"Less than 1 finney(1/1000 ETH) fractions are not supported\""},"value":"Less than 1 finney(1/1000 ETH) fractions are not supported"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_765a8b979473614c6a31b440d14797ba7eb8864388594b0d031e1e5a6b9ce578","typeString":"literal_string \"Less than 1 finney(1/1000 ETH) fractions are not supported\""}],"id":2385,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2128:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2393,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2128:110:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2394,"nodeType":"ExpressionStatement","src":"2128:110:6"},{"assignments":[2396],"declarations":[{"constant":false,"id":2396,"mutability":"mutable","name":"donatedValueInFinney","nameLocation":"2259:20:6","nodeType":"VariableDeclaration","scope":2515,"src":"2251:28:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2395,"name":"uint256","nodeType":"ElementaryTypeName","src":"2251:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2401,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2400,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2397,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2282:3:6","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2398,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"value","nodeType":"MemberAccess","src":"2282:9:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"315f3030305f3030305f3030305f3030305f303030","id":2399,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2294:21:6","typeDescriptions":{"typeIdentifier":"t_rational_1000000000000000_by_1","typeString":"int_const 1000000000000000"},"value":"1_000_000_000_000_000"},"src":"2282:33:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2251:64:6"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2405,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2403,"name":"donatedValueInFinney","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2396,"src":"2334:20:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"hexValue":"315f3030305f3030305f303030","id":2404,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2359:13:6","typeDescriptions":{"typeIdentifier":"t_rational_1000000000_by_1","typeString":"int_const 1000000000"},"value":"1_000_000_000"},"src":"2334:38:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"446f6e6174696f6e73206c6172676572207468616e20315f3030305f3030305f3030302066696e6e657920617265206e6f7420737570706f72746564","id":2406,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2375:62:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_dc114cb1d3f4ae22ae590ee4a39d51b8bfbe0c8d5ebc7f7a1c04080534913804","typeString":"literal_string \"Donations larger than 1_000_000_000 finney are not supported\""},"value":"Donations larger than 1_000_000_000 finney are not supported"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_dc114cb1d3f4ae22ae590ee4a39d51b8bfbe0c8d5ebc7f7a1c04080534913804","typeString":"literal_string \"Donations larger than 1_000_000_000 finney are not supported\""}],"id":2402,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2326:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2407,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2326:112:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2408,"nodeType":"ExpressionStatement","src":"2326:112:6"},{"assignments":[2410],"declarations":[{"constant":false,"id":2410,"mutability":"mutable","name":"perMonthValue","nameLocation":"2456:13:6","nodeType":"VariableDeclaration","scope":2515,"src":"2449:20:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":2409,"name":"uint32","nodeType":"ElementaryTypeName","src":"2449:6:6","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"id":2417,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2415,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2413,"name":"donatedValueInFinney","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2396,"src":"2479:20:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2414,"name":"months","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2345,"src":"2502:6:6","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"src":"2479:29:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2412,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2472:6:6","typeDescriptions":{"typeIdentifier":"t_type$_t_uint32_$","typeString":"type(uint32)"},"typeName":{"id":2411,"name":"uint32","nodeType":"ElementaryTypeName","src":"2472:6:6","typeDescriptions":{}}},"id":2416,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2472:37:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"VariableDeclarationStatement","src":"2449:60:6"},{"assignments":[2420],"declarations":[{"constant":false,"id":2420,"mutability":"mutable","name":"pp","nameLocation":"2553:2:6","nodeType":"VariableDeclaration","scope":2515,"src":"2522:33:6","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$3076_storage_ptr","typeString":"struct SusuwatariStorage"},"typeName":{"id":2419,"nodeType":"UserDefinedTypeName","pathNode":{"id":2418,"name":"SusuwatariStorage","nodeType":"IdentifierPath","referencedDeclaration":3076,"src":"2522:22:6"},"referencedDeclaration":3076,"src":"2522:22:6","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$3076_storage_ptr","typeString":"struct SusuwatariStorage"}},"visibility":"internal"}],"id":2423,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":2421,"name":"pp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3088,"src":"2558:2:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_SusuwatariStorage_$3076_storage_ptr_$","typeString":"function () pure returns (struct SusuwatariStorage storage pointer)"}},"id":2422,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2558:4:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$3076_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"2522:40:6"},{"assignments":[2425],"declarations":[{"constant":false,"id":2425,"mutability":"mutable","name":"testSubMonths","nameLocation":"2582:13:6","nodeType":"VariableDeclaration","scope":2515,"src":"2575:20:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":2424,"name":"uint32","nodeType":"ElementaryTypeName","src":"2575:6:6","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"id":2431,"initialValue":{"condition":{"expression":{"id":2426,"name":"pp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2420,"src":"2598:2:6","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$3076_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},"id":2427,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"_isTesting","nodeType":"MemberAccess","referencedDeclaration":3066,"src":"2598:13:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2429,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2614:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2430,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2598:17:6","trueExpression":{"hexValue":"35","id":2428,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2612:1:6","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"VariableDeclarationStatement","src":"2575:40:6"},{"assignments":[2433],"declarations":[{"constant":false,"id":2433,"mutability":"mutable","name":"donationRelativeDateId","nameLocation":"2635:22:6","nodeType":"VariableDeclaration","scope":2515,"src":"2628:29:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":2432,"name":"uint32","nodeType":"ElementaryTypeName","src":"2628:6:6","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"id":2446,"initialValue":{"commonType":{"typeIdentifier":"t_uint32","typeString":"uint32"},"id":2445,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint16","typeString":"uint16"},"id":2443,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint16","typeString":"uint16"},"id":2439,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint16","typeString":"uint16"},"id":2437,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2434,"name":"date","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2354,"src":"2661:4:6","typeDescriptions":{"typeIdentifier":"t_struct$__DateTime_$1709_memory_ptr","typeString":"struct LibSusuwatari._DateTime memory"}},"id":2435,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"year","nodeType":"MemberAccess","referencedDeclaration":1706,"src":"2661:9:6","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"3132","id":2436,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2671:2:6","typeDescriptions":{"typeIdentifier":"t_rational_12_by_1","typeString":"int_const 12"},"value":"12"},"src":"2661:12:6","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":2438,"name":"currentMonth0Based","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2362,"src":"2674:18:6","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"src":"2661:31:6","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}}],"id":2440,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2660:33:6","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"expression":{"id":2441,"name":"pp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2420,"src":"2694:2:6","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$3076_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},"id":2442,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"_startDateId","nodeType":"MemberAccess","referencedDeclaration":3043,"src":"2694:15:6","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"src":"2660:49:6","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":2444,"name":"testSubMonths","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2425,"src":"2712:13:6","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"2660:65:6","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"VariableDeclarationStatement","src":"2628:97:6"},{"body":{"id":2478,"nodeType":"Block","src":"2888:179:6","statements":[{"assignments":[2460],"declarations":[{"constant":false,"id":2460,"mutability":"mutable","name":"donationBucketPos","nameLocation":"2921:17:6","nodeType":"VariableDeclaration","scope":2478,"src":"2914:24:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":2459,"name":"uint32","nodeType":"ElementaryTypeName","src":"2914:6:6","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"id":2464,"initialValue":{"commonType":{"typeIdentifier":"t_uint32","typeString":"uint32"},"id":2463,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2461,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2448,"src":"2941:1:6","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"hexValue":"3438","id":2462,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2945:2:6","typeDescriptions":{"typeIdentifier":"t_rational_48_by_1","typeString":"int_const 48"},"value":"48"},"src":"2941:6:6","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"VariableDeclarationStatement","src":"2914:33:6"},{"expression":{"id":2476,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":2465,"name":"pp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2420,"src":"2962:2:6","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$3076_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},"id":2468,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"_donationBuckets","nodeType":"MemberAccess","referencedDeclaration":3047,"src":"2962:19:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint32_$48_storage","typeString":"uint32[48] storage ref"}},"id":2469,"indexExpression":{"id":2467,"name":"donationBucketPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2460,"src":"2982:17:6","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2962:38:6","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint32","typeString":"uint32"},"id":2475,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"expression":{"id":2470,"name":"pp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2420,"src":"3001:2:6","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$3076_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},"id":2471,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"_donationBuckets","nodeType":"MemberAccess","referencedDeclaration":3047,"src":"3001:19:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint32_$48_storage","typeString":"uint32[48] storage ref"}},"id":2473,"indexExpression":{"id":2472,"name":"donationBucketPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2460,"src":"3021:17:6","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3001:38:6","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":2474,"name":"perMonthValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2410,"src":"3040:13:6","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"3001:52:6","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"2962:91:6","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"id":2477,"nodeType":"ExpressionStatement","src":"2962:91:6"}]},"condition":{"commonType":{"typeIdentifier":"t_uint32","typeString":"uint32"},"id":2455,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2451,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2448,"src":"2846:1:6","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"commonType":{"typeIdentifier":"t_uint32","typeString":"uint32"},"id":2454,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2452,"name":"donationRelativeDateId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2433,"src":"2850:22:6","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":2453,"name":"months","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2345,"src":"2875:6:6","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"src":"2850:31:6","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"2846:35:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2479,"initializationExpression":{"assignments":[2448],"declarations":[{"constant":false,"id":2448,"mutability":"mutable","name":"i","nameLocation":"2818:1:6","nodeType":"VariableDeclaration","scope":2479,"src":"2811:8:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":2447,"name":"uint32","nodeType":"ElementaryTypeName","src":"2811:6:6","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"id":2450,"initialValue":{"id":2449,"name":"donationRelativeDateId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2433,"src":"2822:22:6","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"VariableDeclarationStatement","src":"2811:33:6"},"loopExpression":{"expression":{"id":2457,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2883:3:6","subExpression":{"id":2456,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2448,"src":"2883:1:6","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"id":2458,"nodeType":"ExpressionStatement","src":"2883:3:6"},"nodeType":"ForStatement","src":"2806:261:6"},{"expression":{"id":2492,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":2480,"name":"pp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2420,"src":"3079:2:6","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$3076_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},"id":2484,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"_fameHoldings","nodeType":"MemberAccess","referencedDeclaration":3070,"src":"3079:16:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint64_$","typeString":"mapping(address => uint64)"}},"id":2485,"indexExpression":{"expression":{"id":2482,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3096:3:6","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2483,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"3096:10:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3079:28:6","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2490,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2488,"name":"donatedValueInFinney","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2396,"src":"3119:20:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"3130","id":2489,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3142:2:6","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"3119:25:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2487,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3111:6:6","typeDescriptions":{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"},"typeName":{"id":2486,"name":"uint64","nodeType":"ElementaryTypeName","src":"3111:6:6","typeDescriptions":{}}},"id":2491,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3111:34:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"3079:66:6","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"id":2493,"nodeType":"ExpressionStatement","src":"3079:66:6"},{"expression":{"id":2500,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2494,"name":"pp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2420,"src":"3156:2:6","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$3076_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},"id":2496,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"_totalFame","nodeType":"MemberAccess","referencedDeclaration":3075,"src":"3156:13:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2499,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2497,"name":"donatedValueInFinney","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2396,"src":"3173:20:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"3130","id":2498,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3196:2:6","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"3173:25:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3156:42:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2501,"nodeType":"ExpressionStatement","src":"3156:42:6"},{"eventCall":{"arguments":[{"arguments":[{"id":2505,"name":"donatedValueInFinney","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2396,"src":"3231:20:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2504,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3224:6:6","typeDescriptions":{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"},"typeName":{"id":2503,"name":"uint64","nodeType":"ElementaryTypeName","src":"3224:6:6","typeDescriptions":{}}},"id":2506,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3224:28:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":2507,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2347,"src":"3253:4:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":2508,"name":"months","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2345,"src":"3259:6:6","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"expression":{"id":2509,"name":"date","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2354,"src":"3267:4:6","typeDescriptions":{"typeIdentifier":"t_struct$__DateTime_$1709_memory_ptr","typeString":"struct LibSusuwatari._DateTime memory"}},"id":2510,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"month","nodeType":"MemberAccess","referencedDeclaration":1708,"src":"3267:10:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"expression":{"id":2511,"name":"date","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2354,"src":"3279:4:6","typeDescriptions":{"typeIdentifier":"t_struct$__DateTime_$1709_memory_ptr","typeString":"struct LibSusuwatari._DateTime memory"}},"id":2512,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"year","nodeType":"MemberAccess","referencedDeclaration":1706,"src":"3279:9:6","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_uint16","typeString":"uint16"}],"id":2502,"name":"Donated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2276,"src":"3216:7:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint64_$_t_string_memory_ptr_$_t_uint16_$_t_uint16_$_t_uint16_$returns$__$","typeString":"function (uint64,string memory,uint16,uint16,uint16)"}},"id":2513,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3216:73:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2514,"nodeType":"EmitStatement","src":"3211:78:6"}]},"functionSelector":"4f9b09af","id":2516,"implemented":true,"kind":"function","modifiers":[],"name":"donate","nameLocation":"1735:6:6","nodeType":"FunctionDefinition","parameters":{"id":2348,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2345,"mutability":"mutable","name":"months","nameLocation":"1749:6:6","nodeType":"VariableDeclaration","scope":2516,"src":"1742:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":2344,"name":"uint16","nodeType":"ElementaryTypeName","src":"1742:6:6","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":2347,"mutability":"mutable","name":"name","nameLocation":"1771:4:6","nodeType":"VariableDeclaration","scope":2516,"src":"1757:18:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2346,"name":"string","nodeType":"ElementaryTypeName","src":"1757:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1741:35:6"},"returnParameters":{"id":2349,"nodeType":"ParameterList","parameters":[],"src":"1792:0:6"},"scope":3020,"src":"1726:1573:6","stateMutability":"payable","virtual":false,"visibility":"public"},{"body":{"id":2680,"nodeType":"Block","src":"3392:1273:6","statements":[{"assignments":[2531],"declarations":[{"constant":false,"id":2531,"mutability":"mutable","name":"date","nameLocation":"3439:4:6","nodeType":"VariableDeclaration","scope":2680,"src":"3403:40:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$__DateTime_$1709_memory_ptr","typeString":"struct LibSusuwatari._DateTime"},"typeName":{"id":2530,"nodeType":"UserDefinedTypeName","pathNode":{"id":2529,"name":"LibSusuwatari._DateTime","nodeType":"IdentifierPath","referencedDeclaration":1709,"src":"3403:28:6"},"referencedDeclaration":1709,"src":"3403:28:6","typeDescriptions":{"typeIdentifier":"t_struct$__DateTime_$1709_storage_ptr","typeString":"struct LibSusuwatari._DateTime"}},"visibility":"internal"}],"id":2537,"initialValue":{"arguments":[{"expression":{"id":2534,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"3480:5:6","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2535,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"timestamp","nodeType":"MemberAccess","src":"3480:15:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2532,"name":"LibSusuwatari","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2226,"src":"3446:18:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_LibSusuwatari_$2226_$","typeString":"type(library LibSusuwatari)"}},"id":2533,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"parseTimestamp","nodeType":"MemberAccess","referencedDeclaration":2056,"src":"3446:33:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_struct$__DateTime_$1709_memory_ptr_$","typeString":"function (uint256) pure returns (struct LibSusuwatari._DateTime memory)"}},"id":2536,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3446:50:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$__DateTime_$1709_memory_ptr","typeString":"struct LibSusuwatari._DateTime memory"}},"nodeType":"VariableDeclarationStatement","src":"3403:93:6"},{"assignments":[2539],"declarations":[{"constant":false,"id":2539,"mutability":"mutable","name":"currentMonth0Based","nameLocation":"3514:18:6","nodeType":"VariableDeclaration","scope":2680,"src":"3507:25:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":2538,"name":"uint16","nodeType":"ElementaryTypeName","src":"3507:6:6","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"id":2544,"initialValue":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":2543,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2540,"name":"date","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2531,"src":"3535:4:6","typeDescriptions":{"typeIdentifier":"t_struct$__DateTime_$1709_memory_ptr","typeString":"struct LibSusuwatari._DateTime memory"}},"id":2541,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"month","nodeType":"MemberAccess","referencedDeclaration":1708,"src":"3535:10:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2542,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3546:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3535:12:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"VariableDeclarationStatement","src":"3507:40:6"},{"assignments":[2546],"declarations":[{"constant":false,"id":2546,"mutability":"mutable","name":"uintAddress","nameLocation":"3566:11:6","nodeType":"VariableDeclaration","scope":2680,"src":"3558:19:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":2545,"name":"uint160","nodeType":"ElementaryTypeName","src":"3558:7:6","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"}],"id":2551,"initialValue":{"arguments":[{"id":2549,"name":"receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2522,"src":"3588:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2548,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3580:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":2547,"name":"uint160","nodeType":"ElementaryTypeName","src":"3580:7:6","typeDescriptions":{}}},"id":2550,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3580:17:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"VariableDeclarationStatement","src":"3558:39:6"},{"assignments":[2554],"declarations":[{"constant":false,"id":2554,"mutability":"mutable","name":"pp","nameLocation":"3639:2:6","nodeType":"VariableDeclaration","scope":2680,"src":"3608:33:6","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$3076_storage_ptr","typeString":"struct SusuwatariStorage"},"typeName":{"id":2553,"nodeType":"UserDefinedTypeName","pathNode":{"id":2552,"name":"SusuwatariStorage","nodeType":"IdentifierPath","referencedDeclaration":3076,"src":"3608:22:6"},"referencedDeclaration":3076,"src":"3608:22:6","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$3076_storage_ptr","typeString":"struct SusuwatariStorage"}},"visibility":"internal"}],"id":2557,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":2555,"name":"pp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3088,"src":"3644:2:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_SusuwatariStorage_$3076_storage_ptr_$","typeString":"function () pure returns (struct SusuwatariStorage storage pointer)"}},"id":2556,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3644:4:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$3076_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"3608:40:6"},{"condition":{"commonType":{"typeIdentifier":"t_uint160","typeString":"uint160"},"id":2568,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint160","typeString":"uint160"},"id":2563,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2558,"name":"uintAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2546,"src":"3662:11:6","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"arguments":[{"hexValue":"307831313131303030303030303030303030303030303030303030303030303030303030303030303030","id":2561,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3684:42:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"value":"0x1111000000000000000000000000000000000000"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2560,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3676:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":2559,"name":"uint160","nodeType":"ElementaryTypeName","src":"3676:7:6","typeDescriptions":{}}},"id":2562,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3676:51:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"3662:65:6","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"307831313131303030303030303030303030303030303030303030303030303030303030303030303030","id":2566,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3739:42:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"value":"0x1111000000000000000000000000000000000000"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2565,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3731:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":2564,"name":"uint160","nodeType":"ElementaryTypeName","src":"3731:7:6","typeDescriptions":{}}},"id":2567,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3731:51:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"3662:120:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2651,"nodeType":"IfStatement","src":"3659:847:6","trueBody":{"id":2650,"nodeType":"Block","src":"3793:713:6","statements":[{"assignments":[2570],"declarations":[{"constant":false,"id":2570,"mutability":"mutable","name":"testSubMonths","nameLocation":"3831:13:6","nodeType":"VariableDeclaration","scope":2650,"src":"3824:20:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":2569,"name":"uint32","nodeType":"ElementaryTypeName","src":"3824:6:6","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"id":2576,"initialValue":{"condition":{"expression":{"id":2571,"name":"pp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2554,"src":"3847:2:6","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$3076_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},"id":2572,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"_isTesting","nodeType":"MemberAccess","referencedDeclaration":3066,"src":"3847:13:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2574,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3863:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2575,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"3847:17:6","trueExpression":{"hexValue":"35","id":2573,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3861:1:6","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"VariableDeclarationStatement","src":"3824:40:6"},{"assignments":[2578],"declarations":[{"constant":false,"id":2578,"mutability":"mutable","name":"voteDateId","nameLocation":"3886:10:6","nodeType":"VariableDeclaration","scope":2650,"src":"3879:17:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":2577,"name":"uint32","nodeType":"ElementaryTypeName","src":"3879:6:6","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"id":2587,"initialValue":{"commonType":{"typeIdentifier":"t_uint32","typeString":"uint32"},"id":2586,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint16","typeString":"uint16"},"id":2584,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint16","typeString":"uint16"},"id":2582,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2579,"name":"date","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2531,"src":"3899:4:6","typeDescriptions":{"typeIdentifier":"t_struct$__DateTime_$1709_memory_ptr","typeString":"struct LibSusuwatari._DateTime memory"}},"id":2580,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"year","nodeType":"MemberAccess","referencedDeclaration":1706,"src":"3899:9:6","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"3132","id":2581,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3911:2:6","typeDescriptions":{"typeIdentifier":"t_rational_12_by_1","typeString":"int_const 12"},"value":"12"},"src":"3899:14:6","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":2583,"name":"currentMonth0Based","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2539,"src":"3916:18:6","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"src":"3899:35:6","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":2585,"name":"testSubMonths","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2570,"src":"3937:13:6","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"3899:51:6","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"VariableDeclarationStatement","src":"3879:71:6"},{"assignments":[2589],"declarations":[{"constant":false,"id":2589,"mutability":"mutable","name":"dateAddressId","nameLocation":"3973:13:6","nodeType":"VariableDeclaration","scope":2650,"src":"3965:21:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2588,"name":"uint256","nodeType":"ElementaryTypeName","src":"3965:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2599,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2598,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2595,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2592,"name":"uintAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2546,"src":"3998:11:6","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":2591,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3990:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2590,"name":"uint256","nodeType":"ElementaryTypeName","src":"3990:7:6","typeDescriptions":{}}},"id":2593,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3990:20:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"3230","id":2594,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4014:2:6","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"src":"3990:26:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2596,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3989:28:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":2597,"name":"voteDateId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2578,"src":"4019:10:6","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"3989:40:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3965:64:6"},{"condition":{"id":2604,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4061:41:6","subExpression":{"baseExpression":{"expression":{"id":2600,"name":"pp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2554,"src":"4062:2:6","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$3076_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},"id":2601,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"_dateAddressIdHasVotes","nodeType":"MemberAccess","referencedDeclaration":3060,"src":"4062:25:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bool_$","typeString":"mapping(uint256 => bool)"}},"id":2603,"indexExpression":{"id":2602,"name":"dateAddressId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2589,"src":"4088:13:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4062:40:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2631,"nodeType":"IfStatement","src":"4058:253:6","trueBody":{"id":2630,"nodeType":"Block","src":"4103:208:6","statements":[{"expression":{"id":2611,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":2605,"name":"pp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2554,"src":"4122:2:6","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$3076_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},"id":2608,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"_dateAddressIdHasVotes","nodeType":"MemberAccess","referencedDeclaration":3060,"src":"4122:25:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bool_$","typeString":"mapping(uint256 => bool)"}},"id":2609,"indexExpression":{"id":2607,"name":"dateAddressId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2589,"src":"4148:13:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4122:40:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":2610,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4163:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"4122:45:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2612,"nodeType":"ExpressionStatement","src":"4122:45:6"},{"expression":{"id":2619,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":2613,"name":"pp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2554,"src":"4186:2:6","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$3076_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},"id":2616,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"_dateAddressIdVoteValues","nodeType":"MemberAccess","referencedDeclaration":3056,"src":"4186:27:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_int32_$","typeString":"mapping(uint256 => int32)"}},"id":2617,"indexExpression":{"id":2615,"name":"dateAddressId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2589,"src":"4214:13:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4186:42:6","typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":2618,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4229:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4186:44:6","typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"}},"id":2620,"nodeType":"ExpressionStatement","src":"4186:44:6"},{"expression":{"arguments":[{"id":2627,"name":"receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2522,"src":"4286:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"baseExpression":{"expression":{"id":2621,"name":"pp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2554,"src":"4249:2:6","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$3076_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},"id":2624,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"_dateIdAddresses","nodeType":"MemberAccess","referencedDeclaration":3052,"src":"4249:19:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint32_$_t_array$_t_address_$dyn_storage_$","typeString":"mapping(uint32 => address[] storage ref)"}},"id":2625,"indexExpression":{"id":2623,"name":"voteDateId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2578,"src":"4269:10:6","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4249:31:6","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":2626,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"push","nodeType":"MemberAccess","src":"4249:36:6","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_address_$dyn_storage_ptr_$_t_address_$returns$__$bound_to$_t_array$_t_address_$dyn_storage_ptr_$","typeString":"function (address[] storage pointer,address)"}},"id":2628,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4249:46:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2629,"nodeType":"ExpressionStatement","src":"4249:46:6"}]}},{"condition":{"id":2632,"name":"up","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2520,"src":"4330:2:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2648,"nodeType":"Block","src":"4416:79:6","statements":[{"expression":{"id":2646,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"4435:44:6","subExpression":{"baseExpression":{"expression":{"id":2641,"name":"pp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2554,"src":"4435:2:6","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$3076_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},"id":2644,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"_dateAddressIdVoteValues","nodeType":"MemberAccess","referencedDeclaration":3056,"src":"4435:27:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_int32_$","typeString":"mapping(uint256 => int32)"}},"id":2645,"indexExpression":{"id":2643,"name":"dateAddressId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2589,"src":"4463:13:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4435:42:6","typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"}},"typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"}},"id":2647,"nodeType":"ExpressionStatement","src":"4435:44:6"}]},"id":2649,"nodeType":"IfStatement","src":"4327:168:6","trueBody":{"id":2640,"nodeType":"Block","src":"4333:79:6","statements":[{"expression":{"id":2638,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"4352:44:6","subExpression":{"baseExpression":{"expression":{"id":2633,"name":"pp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2554,"src":"4352:2:6","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$3076_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},"id":2636,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"_dateAddressIdVoteValues","nodeType":"MemberAccess","referencedDeclaration":3056,"src":"4352:27:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_int32_$","typeString":"mapping(uint256 => int32)"}},"id":2637,"indexExpression":{"id":2635,"name":"dateAddressId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2589,"src":"4380:13:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4352:42:6","typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"}},"typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"}},"id":2639,"nodeType":"ExpressionStatement","src":"4352:44:6"}]}}]}},{"expression":{"id":2659,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":2652,"name":"pp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2554,"src":"4516:2:6","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$3076_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},"id":2656,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"_fameHoldings","nodeType":"MemberAccess","referencedDeclaration":3070,"src":"4516:16:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint64_$","typeString":"mapping(address => uint64)"}},"id":2657,"indexExpression":{"expression":{"id":2654,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4533:3:6","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2655,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"4533:10:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4516:28:6","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2658,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4548:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"4516:33:6","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"id":2660,"nodeType":"ExpressionStatement","src":"4516:33:6"},{"expression":{"id":2665,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2661,"name":"pp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2554,"src":"4560:2:6","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$3076_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},"id":2663,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"_totalFame","nodeType":"MemberAccess","referencedDeclaration":3075,"src":"4560:13:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2664,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4577:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"4560:18:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2666,"nodeType":"ExpressionStatement","src":"4560:18:6"},{"eventCall":{"arguments":[{"id":2668,"name":"url","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2518,"src":"4602:3:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":2669,"name":"up","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2520,"src":"4607:2:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":2670,"name":"title","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2524,"src":"4610:5:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":2671,"name":"receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2522,"src":"4616:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":2672,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4625:3:6","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2673,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"4625:10:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":2674,"name":"date","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2531,"src":"4636:4:6","typeDescriptions":{"typeIdentifier":"t_struct$__DateTime_$1709_memory_ptr","typeString":"struct LibSusuwatari._DateTime memory"}},"id":2675,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"month","nodeType":"MemberAccess","referencedDeclaration":1708,"src":"4636:10:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"expression":{"id":2676,"name":"date","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2531,"src":"4647:4:6","typeDescriptions":{"typeIdentifier":"t_struct$__DateTime_$1709_memory_ptr","typeString":"struct LibSusuwatari._DateTime memory"}},"id":2677,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"year","nodeType":"MemberAccess","referencedDeclaration":1706,"src":"4647:9:6","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_uint16","typeString":"uint16"}],"id":2667,"name":"Voted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2264,"src":"4596:5:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_string_memory_ptr_$_t_bool_$_t_string_memory_ptr_$_t_address_$_t_address_$_t_uint8_$_t_uint16_$returns$__$","typeString":"function (string memory,bool,string memory,address,address,uint8,uint16)"}},"id":2678,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4596:61:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2679,"nodeType":"EmitStatement","src":"4591:66:6"}]},"functionSelector":"6e283c38","id":2681,"implemented":true,"kind":"function","modifiers":[],"name":"vote","nameLocation":"3316:4:6","nodeType":"FunctionDefinition","parameters":{"id":2525,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2518,"mutability":"mutable","name":"url","nameLocation":"3335:3:6","nodeType":"VariableDeclaration","scope":2681,"src":"3321:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2517,"name":"string","nodeType":"ElementaryTypeName","src":"3321:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2520,"mutability":"mutable","name":"up","nameLocation":"3345:2:6","nodeType":"VariableDeclaration","scope":2681,"src":"3340:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2519,"name":"bool","nodeType":"ElementaryTypeName","src":"3340:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2522,"mutability":"mutable","name":"receiver","nameLocation":"3356:8:6","nodeType":"VariableDeclaration","scope":2681,"src":"3348:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2521,"name":"address","nodeType":"ElementaryTypeName","src":"3348:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2524,"mutability":"mutable","name":"title","nameLocation":"3379:5:6","nodeType":"VariableDeclaration","scope":2681,"src":"3365:19:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2523,"name":"string","nodeType":"ElementaryTypeName","src":"3365:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3320:65:6"},"returnParameters":{"id":2526,"nodeType":"ParameterList","parameters":[],"src":"3392:0:6"},"scope":3020,"src":"3307:1358:6","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":2957,"nodeType":"Block","src":"4745:2411:6","statements":[{"assignments":[2694],"declarations":[{"constant":false,"id":2694,"mutability":"mutable","name":"date","nameLocation":"4792:4:6","nodeType":"VariableDeclaration","scope":2957,"src":"4756:40:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$__DateTime_$1709_memory_ptr","typeString":"struct LibSusuwatari._DateTime"},"typeName":{"id":2693,"nodeType":"UserDefinedTypeName","pathNode":{"id":2692,"name":"LibSusuwatari._DateTime","nodeType":"IdentifierPath","referencedDeclaration":1709,"src":"4756:28:6"},"referencedDeclaration":1709,"src":"4756:28:6","typeDescriptions":{"typeIdentifier":"t_struct$__DateTime_$1709_storage_ptr","typeString":"struct LibSusuwatari._DateTime"}},"visibility":"internal"}],"id":2700,"initialValue":{"arguments":[{"expression":{"id":2697,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"4833:5:6","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2698,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"timestamp","nodeType":"MemberAccess","src":"4833:15:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2695,"name":"LibSusuwatari","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2226,"src":"4799:18:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_LibSusuwatari_$2226_$","typeString":"type(library LibSusuwatari)"}},"id":2696,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"parseTimestamp","nodeType":"MemberAccess","referencedDeclaration":2056,"src":"4799:33:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_struct$__DateTime_$1709_memory_ptr_$","typeString":"function (uint256) pure returns (struct LibSusuwatari._DateTime memory)"}},"id":2699,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4799:50:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$__DateTime_$1709_memory_ptr","typeString":"struct LibSusuwatari._DateTime memory"}},"nodeType":"VariableDeclarationStatement","src":"4756:93:6"},{"assignments":[2702],"declarations":[{"constant":false,"id":2702,"mutability":"mutable","name":"currentMonth0Based","nameLocation":"4867:18:6","nodeType":"VariableDeclaration","scope":2957,"src":"4860:25:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":2701,"name":"uint16","nodeType":"ElementaryTypeName","src":"4860:6:6","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"id":2707,"initialValue":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":2706,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2703,"name":"date","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2694,"src":"4888:4:6","typeDescriptions":{"typeIdentifier":"t_struct$__DateTime_$1709_memory_ptr","typeString":"struct LibSusuwatari._DateTime memory"}},"id":2704,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"month","nodeType":"MemberAccess","referencedDeclaration":1708,"src":"4888:10:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2705,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4899:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"4888:12:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"VariableDeclarationStatement","src":"4860:40:6"},{"assignments":[2709],"declarations":[{"constant":false,"id":2709,"mutability":"mutable","name":"curDateId","nameLocation":"4918:9:6","nodeType":"VariableDeclaration","scope":2957,"src":"4911:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":2708,"name":"uint32","nodeType":"ElementaryTypeName","src":"4911:6:6","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"id":2716,"initialValue":{"commonType":{"typeIdentifier":"t_uint16","typeString":"uint16"},"id":2715,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint16","typeString":"uint16"},"id":2713,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2710,"name":"date","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2694,"src":"4930:4:6","typeDescriptions":{"typeIdentifier":"t_struct$__DateTime_$1709_memory_ptr","typeString":"struct LibSusuwatari._DateTime memory"}},"id":2711,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"year","nodeType":"MemberAccess","referencedDeclaration":1706,"src":"4930:9:6","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"3132","id":2712,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4942:2:6","typeDescriptions":{"typeIdentifier":"t_rational_12_by_1","typeString":"int_const 12"},"value":"12"},"src":"4930:14:6","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":2714,"name":"currentMonth0Based","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2702,"src":"4947:18:6","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"src":"4930:35:6","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"VariableDeclarationStatement","src":"4911:54:6"},{"assignments":[2718],"declarations":[{"constant":false,"id":2718,"mutability":"mutable","name":"transferDateId","nameLocation":"5039:14:6","nodeType":"VariableDeclaration","scope":2957,"src":"5032:21:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":2717,"name":"uint32","nodeType":"ElementaryTypeName","src":"5032:6:6","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"id":2726,"initialValue":{"commonType":{"typeIdentifier":"t_uint16","typeString":"uint16"},"id":2725,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint16","typeString":"uint16"},"id":2723,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint16","typeString":"uint16"},"id":2721,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2719,"name":"year","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2687,"src":"5056:4:6","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"3132","id":2720,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5063:2:6","typeDescriptions":{"typeIdentifier":"t_rational_12_by_1","typeString":"int_const 12"},"value":"12"},"src":"5056:9:6","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":2722,"name":"month","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2685,"src":"5068:5:6","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"src":"5056:17:6","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2724,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5075:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"5056:20:6","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"VariableDeclarationStatement","src":"5032:44:6"},{"assignments":[2729],"declarations":[{"constant":false,"id":2729,"mutability":"mutable","name":"pp","nameLocation":"5118:2:6","nodeType":"VariableDeclaration","scope":2957,"src":"5087:33:6","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$3076_storage_ptr","typeString":"struct SusuwatariStorage"},"typeName":{"id":2728,"nodeType":"UserDefinedTypeName","pathNode":{"id":2727,"name":"SusuwatariStorage","nodeType":"IdentifierPath","referencedDeclaration":3076,"src":"5087:22:6"},"referencedDeclaration":3076,"src":"5087:22:6","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$3076_storage_ptr","typeString":"struct SusuwatariStorage"}},"visibility":"internal"}],"id":2732,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":2730,"name":"pp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3088,"src":"5123:2:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_SusuwatariStorage_$3076_storage_ptr_$","typeString":"function () pure returns (struct SusuwatariStorage storage pointer)"}},"id":2731,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5123:4:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$3076_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"5087:40:6"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint32","typeString":"uint32"},"id":2736,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2734,"name":"transferDateId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2718,"src":"5146:14:6","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2735,"name":"curDateId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2709,"src":"5163:9:6","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"5146:26:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"596f75722063616e206f6e6c79207472616e7366657220796f757220736861726520666f72206d6f6e7468206265666f7265207468652063757272656e74206f6e65","id":2737,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5173:68:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_c86055965cfb09ce6c8c88fc7c23556171d48aaa56dc886c5a903a9f4fe7d4ab","typeString":"literal_string \"Your can only transfer your share for month before the current one\""},"value":"Your can only transfer your share for month before the current one"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c86055965cfb09ce6c8c88fc7c23556171d48aaa56dc886c5a903a9f4fe7d4ab","typeString":"literal_string \"Your can only transfer your share for month before the current one\""}],"id":2733,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5138:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2738,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5138:104:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2739,"nodeType":"ExpressionStatement","src":"5138:104:6"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint32","typeString":"uint32"},"id":2744,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2741,"name":"transferDateId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2718,"src":"5261:14:6","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"expression":{"id":2742,"name":"pp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2729,"src":"5279:2:6","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$3076_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},"id":2743,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"_startDateId","nodeType":"MemberAccess","referencedDeclaration":3043,"src":"5279:15:6","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"src":"5261:33:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"596f75722063616e206f6e6c79207472616e7366657220796f757220736861726520666f72206d6f6e74687320616674657220646f6e6174696f6e2073746172746564","id":2745,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5295:69:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_eb906778e0ef46c47d9aefc59b95d6c8a789396c17b0e73d6343e4c012d08da4","typeString":"literal_string \"Your can only transfer your share for months after donation started\""},"value":"Your can only transfer your share for months after donation started"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_eb906778e0ef46c47d9aefc59b95d6c8a789396c17b0e73d6343e4c012d08da4","typeString":"literal_string \"Your can only transfer your share for months after donation started\""}],"id":2740,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5253:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2746,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5253:112:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2747,"nodeType":"ExpressionStatement","src":"5253:112:6"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint32","typeString":"uint32"},"id":2753,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint32","typeString":"uint32"},"id":2751,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2749,"name":"curDateId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2709,"src":"5384:9:6","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":2750,"name":"transferDateId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2718,"src":"5396:14:6","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"5384:26:6","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"3234","id":2752,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5413:2:6","typeDescriptions":{"typeIdentifier":"t_rational_24_by_1","typeString":"int_const 24"},"value":"24"},"src":"5384:31:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"596f75722063616e2774207472616e7366657220736861726573206d6f7265207468616e203234206d6f6e7468732061676f2e","id":2754,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5416:53:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_7141022b9666f419d14c4a927a5391b2083a09cc78baf287cb62cc0d4c3413f2","typeString":"literal_string \"Your can't transfer shares more than 24 months ago.\""},"value":"Your can't transfer shares more than 24 months ago."}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7141022b9666f419d14c4a927a5391b2083a09cc78baf287cb62cc0d4c3413f2","typeString":"literal_string \"Your can't transfer shares more than 24 months ago.\""}],"id":2748,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5376:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2755,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5376:94:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2756,"nodeType":"ExpressionStatement","src":"5376:94:6"},{"assignments":[2758],"declarations":[{"constant":false,"id":2758,"mutability":"mutable","name":"monthSenderAddressId","nameLocation":"5489:20:6","nodeType":"VariableDeclaration","scope":2957,"src":"5481:28:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2757,"name":"uint256","nodeType":"ElementaryTypeName","src":"5481:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2772,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2771,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2768,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"expression":{"id":2763,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"5529:3:6","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2764,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"5529:10:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2762,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5521:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":2761,"name":"uint160","nodeType":"ElementaryTypeName","src":"5521:7:6","typeDescriptions":{}}},"id":2765,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5521:19:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":2760,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5513:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2759,"name":"uint256","nodeType":"ElementaryTypeName","src":"5513:7:6","typeDescriptions":{}}},"id":2766,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5513:28:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"3230","id":2767,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5545:2:6","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"src":"5513:34:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2769,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5512:36:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":2770,"name":"transferDateId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2718,"src":"5550:14:6","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"5512:52:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5481:83:6"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2779,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"expression":{"id":2774,"name":"pp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2729,"src":"5593:2:6","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$3076_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},"id":2775,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"_monthAddressHasTransfered","nodeType":"MemberAccess","referencedDeclaration":3064,"src":"5593:29:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bool_$","typeString":"mapping(uint256 => bool)"}},"id":2777,"indexExpression":{"id":2776,"name":"monthSenderAddressId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2758,"src":"5623:20:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5593:51:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"66616c7365","id":2778,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5646:5:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"5593:58:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"536861726520616c7265616479207472616e736665726564","id":2780,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5652:26:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_5bc0301fbc5bfbf252e61f8b1e4c481f2d8a8ebc71cd7388914f5e8105346bea","typeString":"literal_string \"Share already transfered\""},"value":"Share already transfered"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5bc0301fbc5bfbf252e61f8b1e4c481f2d8a8ebc71cd7388914f5e8105346bea","typeString":"literal_string \"Share already transfered\""}],"id":2773,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5585:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2781,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5585:94:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2782,"nodeType":"ExpressionStatement","src":"5585:94:6"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int32","typeString":"int32"},"id":2789,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"expression":{"id":2784,"name":"pp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2729,"src":"5698:2:6","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$3076_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},"id":2785,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"_dateAddressIdVoteValues","nodeType":"MemberAccess","referencedDeclaration":3056,"src":"5698:27:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_int32_$","typeString":"mapping(uint256 => int32)"}},"id":2787,"indexExpression":{"id":2786,"name":"monthSenderAddressId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2758,"src":"5726:20:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5698:49:6","typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2788,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5748:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5698:51:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"596f752068617665206e6f7420656e6f756768207570766f74657320746f20626520656c696769626c65","id":2790,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5750:44:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc5fdfd9c7353c18016c5bb01607b75df5d9796377b79e7a44e5c795f69953a4","typeString":"literal_string \"You have not enough upvotes to be eligible\""},"value":"You have not enough upvotes to be eligible"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc5fdfd9c7353c18016c5bb01607b75df5d9796377b79e7a44e5c795f69953a4","typeString":"literal_string \"You have not enough upvotes to be eligible\""}],"id":2783,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5690:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2791,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5690:105:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2792,"nodeType":"ExpressionStatement","src":"5690:105:6"},{"assignments":[2794],"declarations":[{"constant":false,"id":2794,"mutability":"mutable","name":"voteSum","nameLocation":"5823:7:6","nodeType":"VariableDeclaration","scope":2957,"src":"5816:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":2793,"name":"uint64","nodeType":"ElementaryTypeName","src":"5816:6:6","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"id":2796,"initialValue":{"hexValue":"30","id":2795,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5833:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"5816:18:6"},{"body":{"id":2851,"nodeType":"Block","src":"5911:314:6","statements":[{"assignments":[2812],"declarations":[{"constant":false,"id":2812,"mutability":"mutable","name":"monthAddressId","nameLocation":"5934:14:6","nodeType":"VariableDeclaration","scope":2851,"src":"5926:22:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2811,"name":"uint256","nodeType":"ElementaryTypeName","src":"5926:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2830,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2829,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2826,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"baseExpression":{"baseExpression":{"expression":{"id":2817,"name":"pp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2729,"src":"5967:2:6","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$3076_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},"id":2818,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"_dateIdAddresses","nodeType":"MemberAccess","referencedDeclaration":3052,"src":"5967:19:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint32_$_t_array$_t_address_$dyn_storage_$","typeString":"mapping(uint32 => address[] storage ref)"}},"id":2820,"indexExpression":{"id":2819,"name":"transferDateId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2718,"src":"5987:14:6","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5967:35:6","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":2822,"indexExpression":{"id":2821,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2798,"src":"6003:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5967:38:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2816,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5959:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":2815,"name":"uint160","nodeType":"ElementaryTypeName","src":"5959:7:6","typeDescriptions":{}}},"id":2823,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5959:47:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":2814,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5950:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2813,"name":"uint256","nodeType":"ElementaryTypeName","src":"5950:7:6","typeDescriptions":{}}},"id":2824,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5950:57:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"3230","id":2825,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6011:2:6","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"src":"5950:63:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2827,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5949:65:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":2828,"name":"transferDateId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2718,"src":"6016:14:6","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"5949:81:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5926:104:6"},{"condition":{"commonType":{"typeIdentifier":"t_int32","typeString":"int32"},"id":2836,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"expression":{"id":2831,"name":"pp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2729,"src":"6048:2:6","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$3076_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},"id":2832,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"_dateAddressIdVoteValues","nodeType":"MemberAccess","referencedDeclaration":3056,"src":"6048:27:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_int32_$","typeString":"mapping(uint256 => int32)"}},"id":2834,"indexExpression":{"id":2833,"name":"monthAddressId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2812,"src":"6076:14:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6048:43:6","typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2835,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6092:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6048:45:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2850,"nodeType":"IfStatement","src":"6045:155:6","trueBody":{"id":2849,"nodeType":"Block","src":"6094:106:6","statements":[{"expression":{"id":2847,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2837,"name":"voteSum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2794,"src":"6113:7:6","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint64","typeString":"uint64"},"id":2846,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2838,"name":"voteSum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2794,"src":"6123:7:6","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"arguments":[{"baseExpression":{"expression":{"id":2841,"name":"pp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2729,"src":"6140:2:6","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$3076_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},"id":2842,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"_dateAddressIdVoteValues","nodeType":"MemberAccess","referencedDeclaration":3056,"src":"6140:27:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_int32_$","typeString":"mapping(uint256 => int32)"}},"id":2844,"indexExpression":{"id":2843,"name":"monthAddressId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2812,"src":"6168:14:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6140:43:6","typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int32","typeString":"int32"}],"id":2840,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6133:6:6","typeDescriptions":{"typeIdentifier":"t_type$_t_uint32_$","typeString":"type(uint32)"},"typeName":{"id":2839,"name":"uint32","nodeType":"ElementaryTypeName","src":"6133:6:6","typeDescriptions":{}}},"id":2845,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6133:51:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"6123:61:6","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"6113:71:6","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"id":2848,"nodeType":"ExpressionStatement","src":"6113:71:6"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2807,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2801,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2798,"src":"5860:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"baseExpression":{"expression":{"id":2802,"name":"pp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2729,"src":"5862:2:6","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$3076_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},"id":2803,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"_dateIdAddresses","nodeType":"MemberAccess","referencedDeclaration":3052,"src":"5862:19:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint32_$_t_array$_t_address_$dyn_storage_$","typeString":"mapping(uint32 => address[] storage ref)"}},"id":2805,"indexExpression":{"id":2804,"name":"transferDateId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2718,"src":"5882:14:6","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5862:35:6","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":2806,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"5862:42:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5860:44:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2852,"initializationExpression":{"assignments":[2798],"declarations":[{"constant":false,"id":2798,"mutability":"mutable","name":"i","nameLocation":"5855:1:6","nodeType":"VariableDeclaration","scope":2852,"src":"5850:6:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2797,"name":"uint","nodeType":"ElementaryTypeName","src":"5850:4:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2800,"initialValue":{"hexValue":"30","id":2799,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5857:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"5850:8:6"},"loopExpression":{"expression":{"id":2809,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"5906:3:6","subExpression":{"id":2808,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2798,"src":"5906:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2810,"nodeType":"ExpressionStatement","src":"5906:3:6"},"nodeType":"ForStatement","src":"5845:380:6"},{"assignments":[2854],"declarations":[{"constant":false,"id":2854,"mutability":"mutable","name":"transferFromDonationBucketPos","nameLocation":"6252:29:6","nodeType":"VariableDeclaration","scope":2957,"src":"6245:36:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":2853,"name":"uint16","nodeType":"ElementaryTypeName","src":"6245:6:6","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"id":2864,"initialValue":{"commonType":{"typeIdentifier":"t_uint16","typeString":"uint16"},"id":2863,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint32","typeString":"uint32"},"id":2860,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2857,"name":"transferDateId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2718,"src":"6291:14:6","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"expression":{"id":2858,"name":"pp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2729,"src":"6308:2:6","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$3076_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},"id":2859,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"_startDateId","nodeType":"MemberAccess","referencedDeclaration":3043,"src":"6308:15:6","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"src":"6291:32:6","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint32","typeString":"uint32"}],"id":2856,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6284:6:6","typeDescriptions":{"typeIdentifier":"t_type$_t_uint16_$","typeString":"type(uint16)"},"typeName":{"id":2855,"name":"uint16","nodeType":"ElementaryTypeName","src":"6284:6:6","typeDescriptions":{}}},"id":2861,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6284:40:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"hexValue":"3438","id":2862,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6327:2:6","typeDescriptions":{"typeIdentifier":"t_rational_48_by_1","typeString":"int_const 48"},"value":"48"},"src":"6284:45:6","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"VariableDeclarationStatement","src":"6245:84:6"},{"assignments":[2866],"declarations":[{"constant":false,"id":2866,"mutability":"mutable","name":"shareFinney","nameLocation":"6354:11:6","nodeType":"VariableDeclaration","scope":2957,"src":"6347:18:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":2865,"name":"uint32","nodeType":"ElementaryTypeName","src":"6347:6:6","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"id":2886,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint64","typeString":"uint64"},"id":2884,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint32","typeString":"uint32"},"id":2880,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"expression":{"id":2869,"name":"pp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2729,"src":"6376:2:6","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$3076_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},"id":2870,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"_donationBuckets","nodeType":"MemberAccess","referencedDeclaration":3047,"src":"6376:19:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint32_$48_storage","typeString":"uint32[48] storage ref"}},"id":2872,"indexExpression":{"id":2871,"name":"transferFromDonationBucketPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2854,"src":"6396:29:6","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6376:50:6","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"arguments":[{"baseExpression":{"expression":{"id":2875,"name":"pp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2729,"src":"6437:2:6","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$3076_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},"id":2876,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"_dateAddressIdVoteValues","nodeType":"MemberAccess","referencedDeclaration":3056,"src":"6437:27:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_int32_$","typeString":"mapping(uint256 => int32)"}},"id":2878,"indexExpression":{"id":2877,"name":"monthSenderAddressId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2758,"src":"6465:20:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6437:49:6","typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int32","typeString":"int32"}],"id":2874,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6430:6:6","typeDescriptions":{"typeIdentifier":"t_type$_t_uint32_$","typeString":"type(uint32)"},"typeName":{"id":2873,"name":"uint32","nodeType":"ElementaryTypeName","src":"6430:6:6","typeDescriptions":{}}},"id":2879,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6430:57:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"6376:111:6","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"id":2881,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6375:113:6","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"components":[{"id":2882,"name":"voteSum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2794,"src":"6492:7:6","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"id":2883,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6491:10:6","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"6375:126:6","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"}],"id":2868,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6367:6:6","typeDescriptions":{"typeIdentifier":"t_type$_t_uint32_$","typeString":"type(uint32)"},"typeName":{"id":2867,"name":"uint32","nodeType":"ElementaryTypeName","src":"6367:6:6","typeDescriptions":{}}},"id":2885,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6367:135:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"VariableDeclarationStatement","src":"6347:155:6"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint32","typeString":"uint32"},"id":2893,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"expression":{"id":2888,"name":"pp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2729,"src":"6531:2:6","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$3076_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},"id":2889,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"_donationBuckets","nodeType":"MemberAccess","referencedDeclaration":3047,"src":"6531:19:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint32_$48_storage","typeString":"uint32[48] storage ref"}},"id":2891,"indexExpression":{"id":2890,"name":"transferFromDonationBucketPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2854,"src":"6551:29:6","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6531:50:6","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2892,"name":"shareFinney","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2866,"src":"6585:11:6","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"6531:65:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e6f7420656e6f75676820646f6e6174696f6e7320666f722074686174206d6f6e74687320617661696c61626c652e","id":2894,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6597:49:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_4861bc7a7375f0de0784e30bad1f1860c50ae21adc75803ca9410abf6eef8dbc","typeString":"literal_string \"Not enough donations for that months available.\""},"value":"Not enough donations for that months available."}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_4861bc7a7375f0de0784e30bad1f1860c50ae21adc75803ca9410abf6eef8dbc","typeString":"literal_string \"Not enough donations for that months available.\""}],"id":2887,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6523:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2895,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6523:124:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2896,"nodeType":"ExpressionStatement","src":"6523:124:6"},{"expression":{"id":2903,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":2897,"name":"pp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2729,"src":"6658:2:6","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$3076_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},"id":2900,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"_donationBuckets","nodeType":"MemberAccess","referencedDeclaration":3047,"src":"6658:19:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint32_$48_storage","typeString":"uint32[48] storage ref"}},"id":2901,"indexExpression":{"id":2899,"name":"transferFromDonationBucketPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2854,"src":"6678:29:6","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6658:50:6","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":2902,"name":"shareFinney","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2866,"src":"6712:11:6","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"6658:65:6","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"id":2904,"nodeType":"ExpressionStatement","src":"6658:65:6"},{"expression":{"id":2911,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":2905,"name":"pp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2729,"src":"6734:2:6","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$3076_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},"id":2908,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"_monthAddressHasTransfered","nodeType":"MemberAccess","referencedDeclaration":3064,"src":"6734:29:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bool_$","typeString":"mapping(uint256 => bool)"}},"id":2909,"indexExpression":{"id":2907,"name":"monthSenderAddressId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2758,"src":"6764:20:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6734:51:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":2910,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6786:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"6734:56:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2912,"nodeType":"ExpressionStatement","src":"6734:56:6"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint56","typeString":"uint56"},"id":2918,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2916,"name":"shareFinney","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2866,"src":"6813:11:6","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"315f3030305f3030305f3030305f3030305f303030","id":2917,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6825:21:6","typeDescriptions":{"typeIdentifier":"t_rational_1000000000000000_by_1","typeString":"int_const 1000000000000000"},"value":"1_000_000_000_000_000"},"src":"6813:33:6","typeDescriptions":{"typeIdentifier":"t_uint56","typeString":"uint56"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint56","typeString":"uint56"}],"expression":{"id":2913,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2683,"src":"6801:2:6","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":2915,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"transfer","nodeType":"MemberAccess","src":"6801:11:6","typeDescriptions":{"typeIdentifier":"t_function_transfer_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":2919,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6801:46:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2920,"nodeType":"ExpressionStatement","src":"6801:46:6"},{"expression":{"id":2930,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":2921,"name":"pp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2729,"src":"6858:2:6","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$3076_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},"id":2925,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"_fameHoldings","nodeType":"MemberAccess","referencedDeclaration":3070,"src":"6858:16:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint64_$","typeString":"mapping(address => uint64)"}},"id":2926,"indexExpression":{"expression":{"id":2923,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6875:3:6","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2924,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"6875:10:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6858:28:6","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint32","typeString":"uint32"},"id":2929,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2927,"name":"shareFinney","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2866,"src":"6890:11:6","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"3130","id":2928,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6904:2:6","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"6890:16:6","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"6858:48:6","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"id":2931,"nodeType":"ExpressionStatement","src":"6858:48:6"},{"expression":{"id":2938,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2932,"name":"pp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2729,"src":"6917:2:6","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$3076_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},"id":2934,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"_totalFame","nodeType":"MemberAccess","referencedDeclaration":3075,"src":"6917:13:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint32","typeString":"uint32"},"id":2937,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2935,"name":"shareFinney","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2866,"src":"6934:11:6","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"3130","id":2936,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6948:2:6","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"6934:16:6","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"6917:33:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2939,"nodeType":"ExpressionStatement","src":"6917:33:6"},{"eventCall":{"arguments":[{"commonType":{"typeIdentifier":"t_uint56","typeString":"uint56"},"id":2943,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2941,"name":"shareFinney","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2866,"src":"6986:11:6","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"315f3030305f3030305f3030305f3030305f303030","id":2942,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6998:21:6","typeDescriptions":{"typeIdentifier":"t_rational_1000000000000000_by_1","typeString":"int_const 1000000000000000"},"value":"1_000_000_000_000_000"},"src":"6986:33:6","typeDescriptions":{"typeIdentifier":"t_uint56","typeString":"uint56"}},{"id":2944,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2683,"src":"7021:2:6","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"id":2945,"name":"month","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2685,"src":"7024:5:6","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"id":2946,"name":"year","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2687,"src":"7031:4:6","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint56","typeString":"uint56"},{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_uint16","typeString":"uint16"}],"id":2940,"name":"TransferedFairShare","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2286,"src":"6966:19:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_address_$_t_uint16_$_t_uint16_$returns$__$","typeString":"function (uint256,address,uint16,uint16)"}},"id":2947,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6966:70:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2948,"nodeType":"EmitStatement","src":"6961:75:6"},{"eventCall":{"arguments":[{"id":2950,"name":"shareFinney","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2866,"src":"7078:11:6","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"id":2951,"name":"transferDateId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2718,"src":"7090:14:6","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"id":2952,"name":"transferFromDonationBucketPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2854,"src":"7105:29:6","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"id":2953,"name":"month","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2685,"src":"7136:5:6","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"id":2954,"name":"year","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2687,"src":"7143:4:6","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint32","typeString":"uint32"},{"typeIdentifier":"t_uint32","typeString":"uint32"},{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_uint16","typeString":"uint16"}],"id":2949,"name":"RemovedFromDonationBucket","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2298,"src":"7052:25:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint32_$_t_uint32_$_t_uint16_$_t_uint16_$_t_uint16_$returns$__$","typeString":"function (uint32,uint32,uint16,uint16,uint16)"}},"id":2955,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7052:96:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2956,"nodeType":"EmitStatement","src":"7047:101:6"}]},"functionSelector":"672296dc","id":2958,"implemented":true,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"4682:8:6","nodeType":"FunctionDefinition","parameters":{"id":2688,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2683,"mutability":"mutable","name":"to","nameLocation":"4707:2:6","nodeType":"VariableDeclaration","scope":2958,"src":"4691:18:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":2682,"name":"address","nodeType":"ElementaryTypeName","src":"4691:15:6","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":2685,"mutability":"mutable","name":"month","nameLocation":"4718:5:6","nodeType":"VariableDeclaration","scope":2958,"src":"4711:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":2684,"name":"uint16","nodeType":"ElementaryTypeName","src":"4711:6:6","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":2687,"mutability":"mutable","name":"year","nameLocation":"4732:4:6","nodeType":"VariableDeclaration","scope":2958,"src":"4725:11:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":2686,"name":"uint16","nodeType":"ElementaryTypeName","src":"4725:6:6","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"4690:47:6"},"returnParameters":{"id":2689,"nodeType":"ParameterList","parameters":[],"src":"4745:0:6"},"scope":3020,"src":"4673:2483:6","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":2985,"nodeType":"Block","src":"7235:161:6","statements":[{"assignments":[2966],"declarations":[{"constant":false,"id":2966,"mutability":"mutable","name":"pp","nameLocation":"7277:2:6","nodeType":"VariableDeclaration","scope":2985,"src":"7246:33:6","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$3076_storage_ptr","typeString":"struct SusuwatariStorage"},"typeName":{"id":2965,"nodeType":"UserDefinedTypeName","pathNode":{"id":2964,"name":"SusuwatariStorage","nodeType":"IdentifierPath","referencedDeclaration":3076,"src":"7246:22:6"},"referencedDeclaration":3076,"src":"7246:22:6","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$3076_storage_ptr","typeString":"struct SusuwatariStorage"}},"visibility":"internal"}],"id":2969,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":2967,"name":"pp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3088,"src":"7282:2:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_SusuwatariStorage_$3076_storage_ptr_$","typeString":"function () pure returns (struct SusuwatariStorage storage pointer)"}},"id":2968,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7282:4:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$3076_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"7246:40:6"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint16","typeString":"uint16"},"id":2976,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint16","typeString":"uint16"},"id":2974,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2971,"name":"pp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2966,"src":"7320:2:6","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$3076_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},"id":2972,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"_startDateId","nodeType":"MemberAccess","referencedDeclaration":3043,"src":"7320:15:6","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"hexValue":"3132","id":2973,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7338:2:6","typeDescriptions":{"typeIdentifier":"t_rational_12_by_1","typeString":"int_const 12"},"value":"12"},"src":"7320:20:6","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2975,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7343:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7320:24:6","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"commonType":{"typeIdentifier":"t_uint16","typeString":"uint16"},"id":2980,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2977,"name":"pp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2966,"src":"7345:2:6","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$3076_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},"id":2978,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"_startDateId","nodeType":"MemberAccess","referencedDeclaration":3043,"src":"7345:15:6","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"3132","id":2979,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7363:2:6","typeDescriptions":{"typeIdentifier":"t_rational_12_by_1","typeString":"int_const 12"},"value":"12"},"src":"7345:20:6","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"expression":{"id":2981,"name":"pp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2966,"src":"7366:2:6","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$3076_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},"id":2982,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"_donationBuckets","nodeType":"MemberAccess","referencedDeclaration":3047,"src":"7366:19:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint32_$48_storage","typeString":"uint32[48] storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_array$_t_uint32_$48_storage","typeString":"uint32[48] storage ref"}],"id":2970,"name":"DonationBuckets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2307,"src":"7304:15:6","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_DonationBuckets_$2307_storage_ptr_$","typeString":"type(struct SusuwatariFacet.DonationBuckets storage pointer)"}},"id":2983,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7304:82:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_DonationBuckets_$2307_memory_ptr","typeString":"struct SusuwatariFacet.DonationBuckets memory"}},"functionReturnParameters":2963,"id":2984,"nodeType":"Return","src":"7297:89:6"}]},"functionSelector":"db75953b","id":2986,"implemented":true,"kind":"function","modifiers":[],"name":"donationBuckets","nameLocation":"7173:15:6","nodeType":"FunctionDefinition","parameters":{"id":2959,"nodeType":"ParameterList","parameters":[],"src":"7188:2:6"},"returnParameters":{"id":2963,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2962,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2986,"src":"7211:22:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_DonationBuckets_$2307_memory_ptr","typeString":"struct SusuwatariFacet.DonationBuckets"},"typeName":{"id":2961,"nodeType":"UserDefinedTypeName","pathNode":{"id":2960,"name":"DonationBuckets","nodeType":"IdentifierPath","referencedDeclaration":2307,"src":"7211:15:6"},"referencedDeclaration":2307,"src":"7211:15:6","typeDescriptions":{"typeIdentifier":"t_struct$_DonationBuckets_$2307_storage_ptr","typeString":"struct SusuwatariFacet.DonationBuckets"}},"visibility":"internal"}],"src":"7210:24:6"},"scope":3020,"src":"7164:232:6","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":3000,"nodeType":"Block","src":"7454:92:6","statements":[{"assignments":[2993],"declarations":[{"constant":false,"id":2993,"mutability":"mutable","name":"pp","nameLocation":"7496:2:6","nodeType":"VariableDeclaration","scope":3000,"src":"7465:33:6","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$3076_storage_ptr","typeString":"struct SusuwatariStorage"},"typeName":{"id":2992,"nodeType":"UserDefinedTypeName","pathNode":{"id":2991,"name":"SusuwatariStorage","nodeType":"IdentifierPath","referencedDeclaration":3076,"src":"7465:22:6"},"referencedDeclaration":3076,"src":"7465:22:6","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$3076_storage_ptr","typeString":"struct SusuwatariStorage"}},"visibility":"internal"}],"id":2996,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":2994,"name":"pp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3088,"src":"7501:2:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_SusuwatariStorage_$3076_storage_ptr_$","typeString":"function () pure returns (struct SusuwatariStorage storage pointer)"}},"id":2995,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7501:4:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$3076_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"7465:40:6"},{"expression":{"expression":{"id":2997,"name":"pp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2993,"src":"7523:2:6","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$3076_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},"id":2998,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"_totalFame","nodeType":"MemberAccess","referencedDeclaration":3075,"src":"7523:13:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2990,"id":2999,"nodeType":"Return","src":"7516:20:6"}]},"functionSelector":"27e665f7","id":3001,"implemented":true,"kind":"function","modifiers":[],"name":"totalFame","nameLocation":"7413:9:6","nodeType":"FunctionDefinition","parameters":{"id":2987,"nodeType":"ParameterList","parameters":[],"src":"7422:2:6"},"returnParameters":{"id":2990,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2989,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3001,"src":"7445:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2988,"name":"uint256","nodeType":"ElementaryTypeName","src":"7445:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7444:9:6"},"scope":3020,"src":"7404:142:6","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":3018,"nodeType":"Block","src":"7600:107:6","statements":[{"assignments":[3008],"declarations":[{"constant":false,"id":3008,"mutability":"mutable","name":"pp","nameLocation":"7642:2:6","nodeType":"VariableDeclaration","scope":3018,"src":"7611:33:6","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$3076_storage_ptr","typeString":"struct SusuwatariStorage"},"typeName":{"id":3007,"nodeType":"UserDefinedTypeName","pathNode":{"id":3006,"name":"SusuwatariStorage","nodeType":"IdentifierPath","referencedDeclaration":3076,"src":"7611:22:6"},"referencedDeclaration":3076,"src":"7611:22:6","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$3076_storage_ptr","typeString":"struct SusuwatariStorage"}},"visibility":"internal"}],"id":3011,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":3009,"name":"pp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3088,"src":"7647:2:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_SusuwatariStorage_$3076_storage_ptr_$","typeString":"function () pure returns (struct SusuwatariStorage storage pointer)"}},"id":3010,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7647:4:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$3076_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"7611:40:6"},{"expression":{"baseExpression":{"expression":{"id":3012,"name":"pp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3008,"src":"7669:2:6","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$3076_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},"id":3013,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"_fameHoldings","nodeType":"MemberAccess","referencedDeclaration":3070,"src":"7669:16:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint64_$","typeString":"mapping(address => uint64)"}},"id":3016,"indexExpression":{"expression":{"id":3014,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7686:3:6","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3015,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"7686:10:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7669:28:6","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"functionReturnParameters":3005,"id":3017,"nodeType":"Return","src":"7662:35:6"}]},"functionSelector":"bc956abb","id":3019,"implemented":true,"kind":"function","modifiers":[],"name":"myFame","nameLocation":"7563:6:6","nodeType":"FunctionDefinition","parameters":{"id":3002,"nodeType":"ParameterList","parameters":[],"src":"7569:2:6"},"returnParameters":{"id":3005,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3004,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3019,"src":"7592:6:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":3003,"name":"uint64","nodeType":"ElementaryTypeName","src":"7592:6:6","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"7591:8:6"},"scope":3020,"src":"7554:153:6","stateMutability":"view","virtual":false,"visibility":"public"}],"scope":3021,"src":"696:7014:6","usedErrors":[]}],"src":"34:7678:6"},"id":6},"contracts/SusuwatariStorage.sol":{"ast":{"absolutePath":"contracts/SusuwatariStorage.sol","exportedSymbols":{"LEAFWALLET_STORAGE_POSITION":[3034],"LibDiamond":[4053],"OwnableStorage":[3037],"SUSUWATARI_STORAGE_POSITION":[3029],"SusuwatariStorage":[3076],"StorageHandler":[3114]},"id":3115,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3022,"literals":["solidity","^","0.8",".10"],"nodeType":"PragmaDirective","src":"34:24:7"},{"absolutePath":"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol","file":"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol","id":3024,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3115,"sourceUnit":4054,"src":"62:84:7","symbolAliases":[{"foreign":{"id":3023,"name":"LibDiamond","nodeType":"Identifier","overloadedDeclarations":[],"src":"70:10:7","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"constant":true,"id":3029,"mutability":"constant","name":"SUSUWATARI_STORAGE_POSITION","nameLocation":"167:32:7","nodeType":"VariableDeclaration","scope":3115,"src":"150:97:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3025,"name":"bytes32","nodeType":"ElementaryTypeName","src":"150:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"70656f706c6573706c6174666f726d2e636f6e74726163742e73746f72616765","id":3027,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"212:34:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_033cb808a453240b3c9916e6d1ccc504e492e2b2453192ff241c73847a521d06","typeString":"literal_string \"susuwatari.contract.storage\""},"value":"susuwatari.contract.storage"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_033cb808a453240b3c9916e6d1ccc504e492e2b2453192ff241c73847a521d06","typeString":"literal_string \"susuwatari.contract.storage\""}],"id":3026,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"202:9:7","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3028,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"202:45:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":true,"id":3034,"mutability":"constant","name":"LEAFWALLET_STORAGE_POSITION","nameLocation":"267:27:7","nodeType":"VariableDeclaration","scope":3115,"src":"250:87:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3030,"name":"bytes32","nodeType":"ElementaryTypeName","src":"250:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"6c65616677616c6c65742e636f6e74726163742e73746f72616765","id":3032,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"307:29:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_83ed3ba29c1d52058c877df3ebd264cf957c42ef7764387349be0ccf6df0b63b","typeString":"literal_string \"leafwallet.contract.storage\""},"value":"leafwallet.contract.storage"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_83ed3ba29c1d52058c877df3ebd264cf957c42ef7764387349be0ccf6df0b63b","typeString":"literal_string \"leafwallet.contract.storage\""}],"id":3031,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"297:9:7","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3033,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"297:40:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"canonicalName":"OwnableStorage","id":3037,"members":[{"constant":false,"id":3036,"mutability":"mutable","name":"_owner","nameLocation":"381:6:7","nodeType":"VariableDeclaration","scope":3037,"src":"373:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3035,"name":"address","nodeType":"ElementaryTypeName","src":"373:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"OwnableStorage","nameLocation":"349:14:7","nodeType":"StructDefinition","scope":3115,"src":"342:49:7","visibility":"public"},{"canonicalName":"SusuwatariStorage","id":3076,"members":[{"constant":false,"id":3039,"mutability":"mutable","name":"isInitialized","nameLocation":"445:13:7","nodeType":"VariableDeclaration","scope":3076,"src":"440:18:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3038,"name":"bool","nodeType":"ElementaryTypeName","src":"440:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3041,"mutability":"mutable","name":"_isDonatingActive","nameLocation":"470:17:7","nodeType":"VariableDeclaration","scope":3076,"src":"465:22:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3040,"name":"bool","nodeType":"ElementaryTypeName","src":"465:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3043,"mutability":"mutable","name":"_startDateId","nameLocation":"507:12:7","nodeType":"VariableDeclaration","scope":3076,"src":"500:19:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":3042,"name":"uint16","nodeType":"ElementaryTypeName","src":"500:6:7","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":3047,"mutability":"mutable","name":"_donationBuckets","nameLocation":"539:16:7","nodeType":"VariableDeclaration","scope":3076,"src":"528:27:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint32_$48_storage_ptr","typeString":"uint32[48]"},"typeName":{"baseType":{"id":3044,"name":"uint32","nodeType":"ElementaryTypeName","src":"528:6:7","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"id":3046,"length":{"hexValue":"3438","id":3045,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"535:2:7","typeDescriptions":{"typeIdentifier":"t_rational_48_by_1","typeString":"int_const 48"},"value":"48"},"nodeType":"ArrayTypeName","src":"528:10:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint32_$48_storage_ptr","typeString":"uint32[48]"}},"visibility":"internal"},{"constant":false,"id":3052,"mutability":"mutable","name":"_dateIdAddresses","nameLocation":"593:16:7","nodeType":"VariableDeclaration","scope":3076,"src":"564:45:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint32_$_t_array$_t_address_$dyn_storage_$","typeString":"mapping(uint32 => address[])"},"typeName":{"id":3051,"keyType":{"id":3048,"name":"uint32","nodeType":"ElementaryTypeName","src":"572:6:7","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"Mapping","src":"564:28:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint32_$_t_array$_t_address_$dyn_storage_$","typeString":"mapping(uint32 => address[])"},"valueType":{"baseType":{"id":3049,"name":"address","nodeType":"ElementaryTypeName","src":"582:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3050,"nodeType":"ArrayTypeName","src":"582:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}}},"visibility":"internal"},{"constant":false,"id":3056,"mutability":"mutable","name":"_dateAddressIdVoteValues","nameLocation":"642:24:7","nodeType":"VariableDeclaration","scope":3076,"src":"616:50:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_int32_$","typeString":"mapping(uint256 => int32)"},"typeName":{"id":3055,"keyType":{"id":3053,"name":"uint256","nodeType":"ElementaryTypeName","src":"624:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"616:25:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_int32_$","typeString":"mapping(uint256 => int32)"},"valueType":{"id":3054,"name":"int32","nodeType":"ElementaryTypeName","src":"635:5:7","typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"}}},"visibility":"internal"},{"constant":false,"id":3060,"mutability":"mutable","name":"_dateAddressIdHasVotes","nameLocation":"698:22:7","nodeType":"VariableDeclaration","scope":3076,"src":"673:47:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bool_$","typeString":"mapping(uint256 => bool)"},"typeName":{"id":3059,"keyType":{"id":3057,"name":"uint256","nodeType":"ElementaryTypeName","src":"681:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"673:24:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bool_$","typeString":"mapping(uint256 => bool)"},"valueType":{"id":3058,"name":"bool","nodeType":"ElementaryTypeName","src":"692:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"internal"},{"constant":false,"id":3064,"mutability":"mutable","name":"_monthAddressHasTransfered","nameLocation":"752:26:7","nodeType":"VariableDeclaration","scope":3076,"src":"727:51:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bool_$","typeString":"mapping(uint256 => bool)"},"typeName":{"id":3063,"keyType":{"id":3061,"name":"uint256","nodeType":"ElementaryTypeName","src":"735:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"727:24:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bool_$","typeString":"mapping(uint256 => bool)"},"valueType":{"id":3062,"name":"bool","nodeType":"ElementaryTypeName","src":"746:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"internal"},{"constant":false,"id":3066,"mutability":"mutable","name":"_isTesting","nameLocation":"792:10:7","nodeType":"VariableDeclaration","scope":3076,"src":"787:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3065,"name":"bool","nodeType":"ElementaryTypeName","src":"787:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3070,"mutability":"mutable","name":"_fameHoldings","nameLocation":"839:13:7","nodeType":"VariableDeclaration","scope":3076,"src":"811:41:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint64_$","typeString":"mapping(address => uint64)"},"typeName":{"id":3069,"keyType":{"id":3067,"name":"address","nodeType":"ElementaryTypeName","src":"820:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"811:27:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint64_$","typeString":"mapping(address => uint64)"},"valueType":{"id":3068,"name":"uint64","nodeType":"ElementaryTypeName","src":"831:6:7","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}},"visibility":"internal"},{"constant":false,"id":3073,"mutability":"mutable","name":"_fameHolders","nameLocation":"869:12:7","nodeType":"VariableDeclaration","scope":3076,"src":"859:22:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":3071,"name":"address","nodeType":"ElementaryTypeName","src":"859:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3072,"nodeType":"ArrayTypeName","src":"859:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":3075,"mutability":"mutable","name":"_totalFame","nameLocation":"896:10:7","nodeType":"VariableDeclaration","scope":3076,"src":"888:18:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3074,"name":"uint256","nodeType":"ElementaryTypeName","src":"888:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"SusuwatariStorage","nameLocation":"402:22:7","nodeType":"StructDefinition","scope":3115,"src":"395:515:7","visibility":"public"},{"abstract":false,"baseContracts":[],"canonicalName":"StorageHandler","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":3114,"linearizedBaseContracts":[3114],"name":"StorageHandler","nameLocation":"923:14:7","nodeType":"ContractDefinition","nodes":[{"body":{"id":3087,"nodeType":"Block","src":"1017:133:7","statements":[{"assignments":[3083],"declarations":[{"constant":false,"id":3083,"mutability":"mutable","name":"position","nameLocation":"1036:8:7","nodeType":"VariableDeclaration","scope":3087,"src":"1028:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3082,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1028:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3085,"initialValue":{"id":3084,"name":"SUSUWATARI_STORAGE_POSITION","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3029,"src":"1047:32:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"1028:51:7"},{"AST":{"nodeType":"YulBlock","src":"1099:44:7","statements":[{"nodeType":"YulAssignment","src":"1113:19:7","value":{"name":"position","nodeType":"YulIdentifier","src":"1124:8:7"},"variableNames":[{"name":"cs.slot","nodeType":"YulIdentifier","src":"1113:7:7"}]}]},"evmVersion":"london","externalReferences":[{"declaration":3080,"isOffset":false,"isSlot":true,"src":"1113:7:7","suffix":"slot","valueSize":1},{"declaration":3083,"isOffset":false,"isSlot":false,"src":"1124:8:7","valueSize":1}],"id":3086,"nodeType":"InlineAssembly","src":"1090:53:7"}]},"id":3088,"implemented":true,"kind":"function","modifiers":[],"name":"pp","nameLocation":"954:2:7","nodeType":"FunctionDefinition","parameters":{"id":3077,"nodeType":"ParameterList","parameters":[],"src":"956:2:7"},"returnParameters":{"id":3081,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3080,"mutability":"mutable","name":"cs","nameLocation":"1013:2:7","nodeType":"VariableDeclaration","scope":3088,"src":"982:33:7","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$3076_storage_ptr","typeString":"struct SusuwatariStorage"},"typeName":{"id":3079,"nodeType":"UserDefinedTypeName","pathNode":{"id":3078,"name":"SusuwatariStorage","nodeType":"IdentifierPath","referencedDeclaration":3076,"src":"982:22:7"},"referencedDeclaration":3076,"src":"982:22:7","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$3076_storage_ptr","typeString":"struct SusuwatariStorage"}},"visibility":"internal"}],"src":"981:35:7"},"scope":3114,"src":"945:205:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3101,"nodeType":"Block","src":"1222:138:7","statements":[{"assignments":[3095],"declarations":[{"constant":false,"id":3095,"mutability":"mutable","name":"position","nameLocation":"1241:8:7","nodeType":"VariableDeclaration","scope":3101,"src":"1233:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3094,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1233:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3099,"initialValue":{"arguments":[{"hexValue":"6f776e61626c652e636f6e74726163742e73746f72616765","id":3097,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1262:26:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_ba54e5e2df07707c0738a1dc17a9db81c007d13b963ffe942523a0b589b045cf","typeString":"literal_string \"ownable.contract.storage\""},"value":"ownable.contract.storage"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_ba54e5e2df07707c0738a1dc17a9db81c007d13b963ffe942523a0b589b045cf","typeString":"literal_string \"ownable.contract.storage\""}],"id":3096,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1252:9:7","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3098,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1252:37:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"1233:56:7"},{"AST":{"nodeType":"YulBlock","src":"1309:44:7","statements":[{"nodeType":"YulAssignment","src":"1323:19:7","value":{"name":"position","nodeType":"YulIdentifier","src":"1334:8:7"},"variableNames":[{"name":"cs.slot","nodeType":"YulIdentifier","src":"1323:7:7"}]}]},"evmVersion":"london","externalReferences":[{"declaration":3092,"isOffset":false,"isSlot":true,"src":"1323:7:7","suffix":"slot","valueSize":1},{"declaration":3095,"isOffset":false,"isSlot":false,"src":"1334:8:7","valueSize":1}],"id":3100,"nodeType":"InlineAssembly","src":"1300:53:7"}]},"id":3102,"implemented":true,"kind":"function","modifiers":[],"name":"os","nameLocation":"1167:2:7","nodeType":"FunctionDefinition","parameters":{"id":3089,"nodeType":"ParameterList","parameters":[],"src":"1169:2:7"},"returnParameters":{"id":3093,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3092,"mutability":"mutable","name":"cs","nameLocation":"1218:2:7","nodeType":"VariableDeclaration","scope":3102,"src":"1195:25:7","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_OwnableStorage_$3037_storage_ptr","typeString":"struct OwnableStorage"},"typeName":{"id":3091,"nodeType":"UserDefinedTypeName","pathNode":{"id":3090,"name":"OwnableStorage","nodeType":"IdentifierPath","referencedDeclaration":3037,"src":"1195:14:7"},"referencedDeclaration":3037,"src":"1195:14:7","typeDescriptions":{"typeIdentifier":"t_struct$_OwnableStorage_$3037_storage_ptr","typeString":"struct OwnableStorage"}},"visibility":"internal"}],"src":"1194:27:7"},"scope":3114,"src":"1158:202:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3112,"nodeType":"Block","src":"1444:53:7","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3108,"name":"LibDiamond","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4053,"src":"1462:10:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_LibDiamond_$4053_$","typeString":"type(library LibDiamond)"}},"id":3109,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"diamondStorage","nodeType":"MemberAccess","referencedDeclaration":3271,"src":"1462:25:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_DiamondStorage_$3259_storage_ptr_$","typeString":"function () pure returns (struct LibDiamond.DiamondStorage storage pointer)"}},"id":3110,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1462:27:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3259_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"}},"functionReturnParameters":3107,"id":3111,"nodeType":"Return","src":"1455:34:7"}]},"id":3113,"implemented":true,"kind":"function","modifiers":[],"name":"ds","nameLocation":"1381:2:7","nodeType":"FunctionDefinition","parameters":{"id":3103,"nodeType":"ParameterList","parameters":[],"src":"1383:2:7"},"returnParameters":{"id":3107,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3106,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3113,"src":"1409:33:7","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3259_storage_ptr","typeString":"struct LibDiamond.DiamondStorage"},"typeName":{"id":3105,"nodeType":"UserDefinedTypeName","pathNode":{"id":3104,"name":"LibDiamond.DiamondStorage","nodeType":"IdentifierPath","referencedDeclaration":3259,"src":"1409:25:7"},"referencedDeclaration":3259,"src":"1409:25:7","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3259_storage_ptr","typeString":"struct LibDiamond.DiamondStorage"}},"visibility":"internal"}],"src":"1408:35:7"},"scope":3114,"src":"1372:125:7","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":3115,"src":"914:586:7","usedErrors":[]}],"src":"34:1466:7"},"id":7},"hardhat-deploy/solc_0.8/diamond/UsingDiamondOwner.sol":{"ast":{"absolutePath":"hardhat-deploy/solc_0.8/diamond/UsingDiamondOwner.sol","exportedSymbols":{"IDiamondCut":[3178],"LibDiamond":[4053],"UsingDiamondOwner":[3140]},"id":3141,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3116,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:8"},{"absolutePath":"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol","file":"./libraries/LibDiamond.sol","id":3117,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3141,"sourceUnit":4054,"src":"57:36:8","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"UsingDiamondOwner","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":3140,"linearizedBaseContracts":[3140],"name":"UsingDiamondOwner","nameLocation":"104:17:8","nodeType":"ContractDefinition","nodes":[{"body":{"id":3138,"nodeType":"Block","src":"149:191:8","statements":[{"assignments":[3123],"declarations":[{"constant":false,"id":3123,"mutability":"mutable","name":"ds","nameLocation":"193:2:8","nodeType":"VariableDeclaration","scope":3138,"src":"159:36:8","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3259_storage_ptr","typeString":"struct LibDiamond.DiamondStorage"},"typeName":{"id":3122,"nodeType":"UserDefinedTypeName","pathNode":{"id":3121,"name":"LibDiamond.DiamondStorage","nodeType":"IdentifierPath","referencedDeclaration":3259,"src":"159:25:8"},"referencedDeclaration":3259,"src":"159:25:8","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3259_storage_ptr","typeString":"struct LibDiamond.DiamondStorage"}},"visibility":"internal"}],"id":3127,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3124,"name":"LibDiamond","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4053,"src":"198:10:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_LibDiamond_$4053_$","typeString":"type(library LibDiamond)"}},"id":3125,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"diamondStorage","nodeType":"MemberAccess","referencedDeclaration":3271,"src":"198:25:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_DiamondStorage_$3259_storage_ptr_$","typeString":"function () pure returns (struct LibDiamond.DiamondStorage storage pointer)"}},"id":3126,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"198:27:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3259_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"159:66:8"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3133,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3129,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"243:3:8","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3130,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"243:10:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3131,"name":"ds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3123,"src":"257:2:8","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3259_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"}},"id":3132,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":3258,"src":"257:16:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"243:30:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f6e6c79206f776e657220697320616c6c6f77656420746f20706572666f726d207468697320616374696f6e","id":3134,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"275:46:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_6667b359373c33067b673e635924033a431279501d99693f6e8f303e664c81d7","typeString":"literal_string \"Only owner is allowed to perform this action\""},"value":"Only owner is allowed to perform this action"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_6667b359373c33067b673e635924033a431279501d99693f6e8f303e664c81d7","typeString":"literal_string \"Only owner is allowed to perform this action\""}],"id":3128,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"235:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3135,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"235:87:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3136,"nodeType":"ExpressionStatement","src":"235:87:8"},{"id":3137,"nodeType":"PlaceholderStatement","src":"332:1:8"}]},"id":3139,"name":"onlyOwner","nameLocation":"137:9:8","nodeType":"ModifierDefinition","parameters":{"id":3118,"nodeType":"ParameterList","parameters":[],"src":"146:2:8"},"src":"128:212:8","virtual":false,"visibility":"internal"}],"scope":3141,"src":"95:247:8","usedErrors":[]}],"src":"32:311:8"},"id":8},"hardhat-deploy/solc_0.8/diamond/interfaces/IDiamondCut.sol":{"ast":{"absolutePath":"hardhat-deploy/solc_0.8/diamond/interfaces/IDiamondCut.sol","exportedSymbols":{"IDiamondCut":[3178]},"id":3179,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3142,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:9"},{"abstract":false,"baseContracts":[],"canonicalName":"IDiamondCut","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":3178,"linearizedBaseContracts":[3178],"name":"IDiamondCut","nameLocation":"372:11:9","nodeType":"ContractDefinition","nodes":[{"canonicalName":"IDiamondCut.FacetCutAction","id":3146,"members":[{"id":3143,"name":"Add","nameLocation":"411:3:9","nodeType":"EnumValue","src":"411:3:9"},{"id":3144,"name":"Replace","nameLocation":"416:7:9","nodeType":"EnumValue","src":"416:7:9"},{"id":3145,"name":"Remove","nameLocation":"425:6:9","nodeType":"EnumValue","src":"425:6:9"}],"name":"FacetCutAction","nameLocation":"395:14:9","nodeType":"EnumDefinition","src":"390:42:9"},{"canonicalName":"IDiamondCut.FacetCut","id":3155,"members":[{"constant":false,"id":3148,"mutability":"mutable","name":"facetAddress","nameLocation":"506:12:9","nodeType":"VariableDeclaration","scope":3155,"src":"498:20:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3147,"name":"address","nodeType":"ElementaryTypeName","src":"498:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3151,"mutability":"mutable","name":"action","nameLocation":"543:6:9","nodeType":"VariableDeclaration","scope":3155,"src":"528:21:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_FacetCutAction_$3146","typeString":"enum IDiamondCut.FacetCutAction"},"typeName":{"id":3150,"nodeType":"UserDefinedTypeName","pathNode":{"id":3149,"name":"FacetCutAction","nodeType":"IdentifierPath","referencedDeclaration":3146,"src":"528:14:9"},"referencedDeclaration":3146,"src":"528:14:9","typeDescriptions":{"typeIdentifier":"t_enum$_FacetCutAction_$3146","typeString":"enum IDiamondCut.FacetCutAction"}},"visibility":"internal"},{"constant":false,"id":3154,"mutability":"mutable","name":"functionSelectors","nameLocation":"568:17:9","nodeType":"VariableDeclaration","scope":3155,"src":"559:26:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_storage_ptr","typeString":"bytes4[]"},"typeName":{"baseType":{"id":3152,"name":"bytes4","nodeType":"ElementaryTypeName","src":"559:6:9","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":3153,"nodeType":"ArrayTypeName","src":"559:8:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_storage_ptr","typeString":"bytes4[]"}},"visibility":"internal"}],"name":"FacetCut","nameLocation":"479:8:9","nodeType":"StructDefinition","scope":3178,"src":"472:120:9","visibility":"public"},{"documentation":{"id":3156,"nodeType":"StructuredDocumentation","src":"598:438:9","text":"@notice Add/replace/remove any number of functions and optionally execute\n         a function with delegatecall\n @param _diamondCut Contains the facet addresses and function selectors\n @param _init The address of the contract or facet to execute _calldata\n @param _calldata A function call, including function selector and arguments\n                  _calldata is executed with delegatecall on _init"},"functionSelector":"1f931c1c","id":3167,"implemented":false,"kind":"function","modifiers":[],"name":"diamondCut","nameLocation":"1050:10:9","nodeType":"FunctionDefinition","parameters":{"id":3165,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3160,"mutability":"mutable","name":"_diamondCut","nameLocation":"1090:11:9","nodeType":"VariableDeclaration","scope":3167,"src":"1070:31:9","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_FacetCut_$3155_calldata_ptr_$dyn_calldata_ptr","typeString":"struct IDiamondCut.FacetCut[]"},"typeName":{"baseType":{"id":3158,"nodeType":"UserDefinedTypeName","pathNode":{"id":3157,"name":"FacetCut","nodeType":"IdentifierPath","referencedDeclaration":3155,"src":"1070:8:9"},"referencedDeclaration":3155,"src":"1070:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_FacetCut_$3155_storage_ptr","typeString":"struct IDiamondCut.FacetCut"}},"id":3159,"nodeType":"ArrayTypeName","src":"1070:10:9","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_FacetCut_$3155_storage_$dyn_storage_ptr","typeString":"struct IDiamondCut.FacetCut[]"}},"visibility":"internal"},{"constant":false,"id":3162,"mutability":"mutable","name":"_init","nameLocation":"1119:5:9","nodeType":"VariableDeclaration","scope":3167,"src":"1111:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3161,"name":"address","nodeType":"ElementaryTypeName","src":"1111:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3164,"mutability":"mutable","name":"_calldata","nameLocation":"1149:9:9","nodeType":"VariableDeclaration","scope":3167,"src":"1134:24:9","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3163,"name":"bytes","nodeType":"ElementaryTypeName","src":"1134:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1060:104:9"},"returnParameters":{"id":3166,"nodeType":"ParameterList","parameters":[],"src":"1173:0:9"},"scope":3178,"src":"1041:133:9","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"anonymous":false,"id":3177,"name":"DiamondCut","nameLocation":"1186:10:9","nodeType":"EventDefinition","parameters":{"id":3176,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3171,"indexed":false,"mutability":"mutable","name":"_diamondCut","nameLocation":"1208:11:9","nodeType":"VariableDeclaration","scope":3177,"src":"1197:22:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_FacetCut_$3155_memory_ptr_$dyn_memory_ptr","typeString":"struct IDiamondCut.FacetCut[]"},"typeName":{"baseType":{"id":3169,"nodeType":"UserDefinedTypeName","pathNode":{"id":3168,"name":"FacetCut","nodeType":"IdentifierPath","referencedDeclaration":3155,"src":"1197:8:9"},"referencedDeclaration":3155,"src":"1197:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_FacetCut_$3155_storage_ptr","typeString":"struct IDiamondCut.FacetCut"}},"id":3170,"nodeType":"ArrayTypeName","src":"1197:10:9","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_FacetCut_$3155_storage_$dyn_storage_ptr","typeString":"struct IDiamondCut.FacetCut[]"}},"visibility":"internal"},{"constant":false,"id":3173,"indexed":false,"mutability":"mutable","name":"_init","nameLocation":"1229:5:9","nodeType":"VariableDeclaration","scope":3177,"src":"1221:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3172,"name":"address","nodeType":"ElementaryTypeName","src":"1221:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3175,"indexed":false,"mutability":"mutable","name":"_calldata","nameLocation":"1242:9:9","nodeType":"VariableDeclaration","scope":3177,"src":"1236:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3174,"name":"bytes","nodeType":"ElementaryTypeName","src":"1236:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1196:56:9"},"src":"1180:73:9"}],"scope":3179,"src":"362:893:9","usedErrors":[]}],"src":"32:1224:9"},"id":9},"hardhat-deploy/solc_0.8/diamond/interfaces/IDiamondLoupe.sol":{"ast":{"absolutePath":"hardhat-deploy/solc_0.8/diamond/interfaces/IDiamondLoupe.sol","exportedSymbols":{"IDiamondLoupe":[3219]},"id":3220,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3180,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:10"},{"abstract":false,"baseContracts":[],"canonicalName":"IDiamondLoupe","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":3219,"linearizedBaseContracts":[3219],"name":"IDiamondLoupe","nameLocation":"473:13:10","nodeType":"ContractDefinition","nodes":[{"canonicalName":"IDiamondLoupe.Facet","id":3186,"members":[{"constant":false,"id":3182,"mutability":"mutable","name":"facetAddress","nameLocation":"604:12:10","nodeType":"VariableDeclaration","scope":3186,"src":"596:20:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3181,"name":"address","nodeType":"ElementaryTypeName","src":"596:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3185,"mutability":"mutable","name":"functionSelectors","nameLocation":"635:17:10","nodeType":"VariableDeclaration","scope":3186,"src":"626:26:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_storage_ptr","typeString":"bytes4[]"},"typeName":{"baseType":{"id":3183,"name":"bytes4","nodeType":"ElementaryTypeName","src":"626:6:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":3184,"nodeType":"ArrayTypeName","src":"626:8:10","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_storage_ptr","typeString":"bytes4[]"}},"visibility":"internal"}],"name":"Facet","nameLocation":"580:5:10","nodeType":"StructDefinition","scope":3219,"src":"573:86:10","visibility":"public"},{"documentation":{"id":3187,"nodeType":"StructuredDocumentation","src":"665:106:10","text":"@notice Gets all facet addresses and their four byte function selectors.\n @return facets_ Facet"},"functionSelector":"7a0ed627","id":3194,"implemented":false,"kind":"function","modifiers":[],"name":"facets","nameLocation":"785:6:10","nodeType":"FunctionDefinition","parameters":{"id":3188,"nodeType":"ParameterList","parameters":[],"src":"791:2:10"},"returnParameters":{"id":3193,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3192,"mutability":"mutable","name":"facets_","nameLocation":"832:7:10","nodeType":"VariableDeclaration","scope":3194,"src":"817:22:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Facet_$3186_memory_ptr_$dyn_memory_ptr","typeString":"struct IDiamondLoupe.Facet[]"},"typeName":{"baseType":{"id":3190,"nodeType":"UserDefinedTypeName","pathNode":{"id":3189,"name":"Facet","nodeType":"IdentifierPath","referencedDeclaration":3186,"src":"817:5:10"},"referencedDeclaration":3186,"src":"817:5:10","typeDescriptions":{"typeIdentifier":"t_struct$_Facet_$3186_storage_ptr","typeString":"struct IDiamondLoupe.Facet"}},"id":3191,"nodeType":"ArrayTypeName","src":"817:7:10","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Facet_$3186_storage_$dyn_storage_ptr","typeString":"struct IDiamondLoupe.Facet[]"}},"visibility":"internal"}],"src":"816:24:10"},"scope":3219,"src":"776:65:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3195,"nodeType":"StructuredDocumentation","src":"847:155:10","text":"@notice Gets all the function selectors supported by a specific facet.\n @param _facet The facet address.\n @return facetFunctionSelectors_"},"functionSelector":"adfca15e","id":3203,"implemented":false,"kind":"function","modifiers":[],"name":"facetFunctionSelectors","nameLocation":"1016:22:10","nodeType":"FunctionDefinition","parameters":{"id":3198,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3197,"mutability":"mutable","name":"_facet","nameLocation":"1047:6:10","nodeType":"VariableDeclaration","scope":3203,"src":"1039:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3196,"name":"address","nodeType":"ElementaryTypeName","src":"1039:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1038:16:10"},"returnParameters":{"id":3202,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3201,"mutability":"mutable","name":"facetFunctionSelectors_","nameLocation":"1094:23:10","nodeType":"VariableDeclaration","scope":3203,"src":"1078:39:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_memory_ptr","typeString":"bytes4[]"},"typeName":{"baseType":{"id":3199,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1078:6:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":3200,"nodeType":"ArrayTypeName","src":"1078:8:10","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_storage_ptr","typeString":"bytes4[]"}},"visibility":"internal"}],"src":"1077:41:10"},"scope":3219,"src":"1007:112:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3204,"nodeType":"StructuredDocumentation","src":"1125:90:10","text":"@notice Get all the facet addresses used by a diamond.\n @return facetAddresses_"},"functionSelector":"52ef6b2c","id":3210,"implemented":false,"kind":"function","modifiers":[],"name":"facetAddresses","nameLocation":"1229:14:10","nodeType":"FunctionDefinition","parameters":{"id":3205,"nodeType":"ParameterList","parameters":[],"src":"1243:2:10"},"returnParameters":{"id":3209,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3208,"mutability":"mutable","name":"facetAddresses_","nameLocation":"1286:15:10","nodeType":"VariableDeclaration","scope":3210,"src":"1269:32:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":3206,"name":"address","nodeType":"ElementaryTypeName","src":"1269:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3207,"nodeType":"ArrayTypeName","src":"1269:9:10","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"1268:34:10"},"scope":3219,"src":"1220:83:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3211,"nodeType":"StructuredDocumentation","src":"1309:219:10","text":"@notice Gets the facet that supports the given selector.\n @dev If facet is not found return address(0).\n @param _functionSelector The function selector.\n @return facetAddress_ The facet address."},"functionSelector":"cdffacc6","id":3218,"implemented":false,"kind":"function","modifiers":[],"name":"facetAddress","nameLocation":"1542:12:10","nodeType":"FunctionDefinition","parameters":{"id":3214,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3213,"mutability":"mutable","name":"_functionSelector","nameLocation":"1562:17:10","nodeType":"VariableDeclaration","scope":3218,"src":"1555:24:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3212,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1555:6:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1554:26:10"},"returnParameters":{"id":3217,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3216,"mutability":"mutable","name":"facetAddress_","nameLocation":"1612:13:10","nodeType":"VariableDeclaration","scope":3218,"src":"1604:21:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3215,"name":"address","nodeType":"ElementaryTypeName","src":"1604:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1603:23:10"},"scope":3219,"src":"1533:94:10","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":3220,"src":"463:1166:10","usedErrors":[]}],"src":"32:1598:10"},"id":10},"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol":{"ast":{"absolutePath":"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol","exportedSymbols":{"IDiamondCut":[3178],"LibDiamond":[4053]},"id":4054,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3221,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:11"},{"absolutePath":"hardhat-deploy/solc_0.8/diamond/interfaces/IDiamondCut.sol","file":"../interfaces/IDiamondCut.sol","id":3223,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4054,"sourceUnit":3179,"src":"361:60:11","symbolAliases":[{"foreign":{"id":3222,"name":"IDiamondCut","nodeType":"Identifier","overloadedDeclarations":[],"src":"370:11:11","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"LibDiamond","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":4053,"linearizedBaseContracts":[4053],"name":"LibDiamond","nameLocation":"431:10:11","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":3228,"mutability":"constant","name":"DIAMOND_STORAGE_POSITION","nameLocation":"465:24:11","nodeType":"VariableDeclaration","scope":4053,"src":"448:89:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3224,"name":"bytes32","nodeType":"ElementaryTypeName","src":"448:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"6469616d6f6e642e7374616e646172642e6469616d6f6e642e73746f72616765","id":3226,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"502:34:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_c8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c","typeString":"literal_string \"diamond.standard.diamond.storage\""},"value":"diamond.standard.diamond.storage"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c","typeString":"literal_string \"diamond.standard.diamond.storage\""}],"id":3225,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"492:9:11","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3227,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"492:45:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"canonicalName":"LibDiamond.FacetAddressAndPosition","id":3233,"members":[{"constant":false,"id":3230,"mutability":"mutable","name":"facetAddress","nameLocation":"593:12:11","nodeType":"VariableDeclaration","scope":3233,"src":"585:20:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3229,"name":"address","nodeType":"ElementaryTypeName","src":"585:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3232,"mutability":"mutable","name":"functionSelectorPosition","nameLocation":"622:24:11","nodeType":"VariableDeclaration","scope":3233,"src":"615:31:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":3231,"name":"uint96","nodeType":"ElementaryTypeName","src":"615:6:11","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"}],"name":"FacetAddressAndPosition","nameLocation":"551:23:11","nodeType":"StructDefinition","scope":4053,"src":"544:171:11","visibility":"public"},{"canonicalName":"LibDiamond.FacetFunctionSelectors","id":3239,"members":[{"constant":false,"id":3236,"mutability":"mutable","name":"functionSelectors","nameLocation":"770:17:11","nodeType":"VariableDeclaration","scope":3239,"src":"761:26:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_storage_ptr","typeString":"bytes4[]"},"typeName":{"baseType":{"id":3234,"name":"bytes4","nodeType":"ElementaryTypeName","src":"761:6:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":3235,"nodeType":"ArrayTypeName","src":"761:8:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_storage_ptr","typeString":"bytes4[]"}},"visibility":"internal"},{"constant":false,"id":3238,"mutability":"mutable","name":"facetAddressPosition","nameLocation":"805:20:11","nodeType":"VariableDeclaration","scope":3239,"src":"797:28:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3237,"name":"uint256","nodeType":"ElementaryTypeName","src":"797:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"FacetFunctionSelectors","nameLocation":"728:22:11","nodeType":"StructDefinition","scope":4053,"src":"721:163:11","visibility":"public"},{"canonicalName":"LibDiamond.DiamondStorage","id":3259,"members":[{"constant":false,"id":3244,"mutability":"mutable","name":"selectorToFacetAndPosition","nameLocation":"1110:26:11","nodeType":"VariableDeclaration","scope":3259,"src":"1067:69:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_struct$_FacetAddressAndPosition_$3233_storage_$","typeString":"mapping(bytes4 => struct LibDiamond.FacetAddressAndPosition)"},"typeName":{"id":3243,"keyType":{"id":3240,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1075:6:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"Mapping","src":"1067:42:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_struct$_FacetAddressAndPosition_$3233_storage_$","typeString":"mapping(bytes4 => struct LibDiamond.FacetAddressAndPosition)"},"valueType":{"id":3242,"nodeType":"UserDefinedTypeName","pathNode":{"id":3241,"name":"FacetAddressAndPosition","nodeType":"IdentifierPath","referencedDeclaration":3233,"src":"1085:23:11"},"referencedDeclaration":3233,"src":"1085:23:11","typeDescriptions":{"typeIdentifier":"t_struct$_FacetAddressAndPosition_$3233_storage_ptr","typeString":"struct LibDiamond.FacetAddressAndPosition"}}},"visibility":"internal"},{"constant":false,"id":3249,"mutability":"mutable","name":"facetFunctionSelectors","nameLocation":"1243:22:11","nodeType":"VariableDeclaration","scope":3259,"src":"1200:65:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_FacetFunctionSelectors_$3239_storage_$","typeString":"mapping(address => struct LibDiamond.FacetFunctionSelectors)"},"typeName":{"id":3248,"keyType":{"id":3245,"name":"address","nodeType":"ElementaryTypeName","src":"1208:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1200:42:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_FacetFunctionSelectors_$3239_storage_$","typeString":"mapping(address => struct LibDiamond.FacetFunctionSelectors)"},"valueType":{"id":3247,"nodeType":"UserDefinedTypeName","pathNode":{"id":3246,"name":"FacetFunctionSelectors","nodeType":"IdentifierPath","referencedDeclaration":3239,"src":"1219:22:11"},"referencedDeclaration":3239,"src":"1219:22:11","typeDescriptions":{"typeIdentifier":"t_struct$_FacetFunctionSelectors_$3239_storage_ptr","typeString":"struct LibDiamond.FacetFunctionSelectors"}}},"visibility":"internal"},{"constant":false,"id":3252,"mutability":"mutable","name":"facetAddresses","nameLocation":"1312:14:11","nodeType":"VariableDeclaration","scope":3259,"src":"1302:24:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":3250,"name":"address","nodeType":"ElementaryTypeName","src":"1302:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3251,"nodeType":"ArrayTypeName","src":"1302:9:11","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":3256,"mutability":"mutable","name":"supportedInterfaces","nameLocation":"1462:19:11","nodeType":"VariableDeclaration","scope":3259,"src":"1438:43:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"},"typeName":{"id":3255,"keyType":{"id":3253,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1446:6:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"Mapping","src":"1438:23:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"},"valueType":{"id":3254,"name":"bool","nodeType":"ElementaryTypeName","src":"1456:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"internal"},{"constant":false,"id":3258,"mutability":"mutable","name":"contractOwner","nameLocation":"1532:13:11","nodeType":"VariableDeclaration","scope":3259,"src":"1524:21:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3257,"name":"address","nodeType":"ElementaryTypeName","src":"1524:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"DiamondStorage","nameLocation":"897:14:11","nodeType":"StructDefinition","scope":4053,"src":"890:662:11","visibility":"public"},{"body":{"id":3270,"nodeType":"Block","src":"1634:121:11","statements":[{"assignments":[3266],"declarations":[{"constant":false,"id":3266,"mutability":"mutable","name":"position","nameLocation":"1652:8:11","nodeType":"VariableDeclaration","scope":3270,"src":"1644:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3265,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1644:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3268,"initialValue":{"id":3267,"name":"DIAMOND_STORAGE_POSITION","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3228,"src":"1663:24:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"1644:43:11"},{"AST":{"nodeType":"YulBlock","src":"1706:43:11","statements":[{"nodeType":"YulAssignment","src":"1720:19:11","value":{"name":"position","nodeType":"YulIdentifier","src":"1731:8:11"},"variableNames":[{"name":"ds.slot","nodeType":"YulIdentifier","src":"1720:7:11"}]}]},"evmVersion":"london","externalReferences":[{"declaration":3263,"isOffset":false,"isSlot":true,"src":"1720:7:11","suffix":"slot","valueSize":1},{"declaration":3266,"isOffset":false,"isSlot":false,"src":"1731:8:11","valueSize":1}],"id":3269,"nodeType":"InlineAssembly","src":"1697:52:11"}]},"id":3271,"implemented":true,"kind":"function","modifiers":[],"name":"diamondStorage","nameLocation":"1567:14:11","nodeType":"FunctionDefinition","parameters":{"id":3260,"nodeType":"ParameterList","parameters":[],"src":"1581:2:11"},"returnParameters":{"id":3264,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3263,"mutability":"mutable","name":"ds","nameLocation":"1630:2:11","nodeType":"VariableDeclaration","scope":3271,"src":"1607:25:11","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3259_storage_ptr","typeString":"struct LibDiamond.DiamondStorage"},"typeName":{"id":3262,"nodeType":"UserDefinedTypeName","pathNode":{"id":3261,"name":"DiamondStorage","nodeType":"IdentifierPath","referencedDeclaration":3259,"src":"1607:14:11"},"referencedDeclaration":3259,"src":"1607:14:11","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3259_storage_ptr","typeString":"struct LibDiamond.DiamondStorage"}},"visibility":"internal"}],"src":"1606:27:11"},"scope":4053,"src":"1558:197:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"anonymous":false,"id":3277,"name":"OwnershipTransferred","nameLocation":"1767:20:11","nodeType":"EventDefinition","parameters":{"id":3276,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3273,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"1804:13:11","nodeType":"VariableDeclaration","scope":3277,"src":"1788:29:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3272,"name":"address","nodeType":"ElementaryTypeName","src":"1788:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3275,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"1835:8:11","nodeType":"VariableDeclaration","scope":3277,"src":"1819:24:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3274,"name":"address","nodeType":"ElementaryTypeName","src":"1819:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1787:57:11"},"src":"1761:84:11"},{"body":{"id":3304,"nodeType":"Block","src":"1905:210:11","statements":[{"assignments":[3284],"declarations":[{"constant":false,"id":3284,"mutability":"mutable","name":"ds","nameLocation":"1938:2:11","nodeType":"VariableDeclaration","scope":3304,"src":"1915:25:11","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3259_storage_ptr","typeString":"struct LibDiamond.DiamondStorage"},"typeName":{"id":3283,"nodeType":"UserDefinedTypeName","pathNode":{"id":3282,"name":"DiamondStorage","nodeType":"IdentifierPath","referencedDeclaration":3259,"src":"1915:14:11"},"referencedDeclaration":3259,"src":"1915:14:11","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3259_storage_ptr","typeString":"struct LibDiamond.DiamondStorage"}},"visibility":"internal"}],"id":3287,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":3285,"name":"diamondStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3271,"src":"1943:14:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_DiamondStorage_$3259_storage_ptr_$","typeString":"function () pure returns (struct LibDiamond.DiamondStorage storage pointer)"}},"id":3286,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1943:16:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3259_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"1915:44:11"},{"assignments":[3289],"declarations":[{"constant":false,"id":3289,"mutability":"mutable","name":"previousOwner","nameLocation":"1977:13:11","nodeType":"VariableDeclaration","scope":3304,"src":"1969:21:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3288,"name":"address","nodeType":"ElementaryTypeName","src":"1969:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3292,"initialValue":{"expression":{"id":3290,"name":"ds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3284,"src":"1993:2:11","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3259_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"}},"id":3291,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":3258,"src":"1993:16:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"1969:40:11"},{"expression":{"id":3297,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3293,"name":"ds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3284,"src":"2019:2:11","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3259_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"}},"id":3295,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":3258,"src":"2019:16:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3296,"name":"_newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3279,"src":"2038:9:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2019:28:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3298,"nodeType":"ExpressionStatement","src":"2019:28:11"},{"eventCall":{"arguments":[{"id":3300,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3289,"src":"2083:13:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3301,"name":"_newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3279,"src":"2098:9:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3299,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3277,"src":"2062:20:11","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":3302,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2062:46:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3303,"nodeType":"EmitStatement","src":"2057:51:11"}]},"id":3305,"implemented":true,"kind":"function","modifiers":[],"name":"setContractOwner","nameLocation":"1860:16:11","nodeType":"FunctionDefinition","parameters":{"id":3280,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3279,"mutability":"mutable","name":"_newOwner","nameLocation":"1885:9:11","nodeType":"VariableDeclaration","scope":3305,"src":"1877:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3278,"name":"address","nodeType":"ElementaryTypeName","src":"1877:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1876:19:11"},"returnParameters":{"id":3281,"nodeType":"ParameterList","parameters":[],"src":"1905:0:11"},"scope":4053,"src":"1851:264:11","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3316,"nodeType":"Block","src":"2193:64:11","statements":[{"expression":{"id":3314,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3310,"name":"contractOwner_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3308,"src":"2203:14:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":3311,"name":"diamondStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3271,"src":"2220:14:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_DiamondStorage_$3259_storage_ptr_$","typeString":"function () pure returns (struct LibDiamond.DiamondStorage storage pointer)"}},"id":3312,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2220:16:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3259_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"}},"id":3313,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":3258,"src":"2220:30:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2203:47:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3315,"nodeType":"ExpressionStatement","src":"2203:47:11"}]},"id":3317,"implemented":true,"kind":"function","modifiers":[],"name":"contractOwner","nameLocation":"2130:13:11","nodeType":"FunctionDefinition","parameters":{"id":3306,"nodeType":"ParameterList","parameters":[],"src":"2143:2:11"},"returnParameters":{"id":3309,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3308,"mutability":"mutable","name":"contractOwner_","nameLocation":"2177:14:11","nodeType":"VariableDeclaration","scope":3317,"src":"2169:22:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3307,"name":"address","nodeType":"ElementaryTypeName","src":"2169:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2168:24:11"},"scope":4053,"src":"2121:136:11","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3330,"nodeType":"Block","src":"2311:108:11","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3326,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3321,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2329:3:11","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3322,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"2329:10:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":3323,"name":"diamondStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3271,"src":"2343:14:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_DiamondStorage_$3259_storage_ptr_$","typeString":"function () pure returns (struct LibDiamond.DiamondStorage storage pointer)"}},"id":3324,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2343:16:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3259_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"}},"id":3325,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":3258,"src":"2343:30:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2329:44:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4c69624469616d6f6e643a204d75737420626520636f6e7472616374206f776e6572","id":3327,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2375:36:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_0d4ae41009c51fd276653a54d7793c24f266ddc8c56ce21f8be5e2c6595ab3ac","typeString":"literal_string \"LibDiamond: Must be contract owner\""},"value":"LibDiamond: Must be contract owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0d4ae41009c51fd276653a54d7793c24f266ddc8c56ce21f8be5e2c6595ab3ac","typeString":"literal_string \"LibDiamond: Must be contract owner\""}],"id":3320,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2321:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3328,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2321:91:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3329,"nodeType":"ExpressionStatement","src":"2321:91:11"}]},"id":3331,"implemented":true,"kind":"function","modifiers":[],"name":"enforceIsContractOwner","nameLocation":"2272:22:11","nodeType":"FunctionDefinition","parameters":{"id":3318,"nodeType":"ParameterList","parameters":[],"src":"2294:2:11"},"returnParameters":{"id":3319,"nodeType":"ParameterList","parameters":[],"src":"2311:0:11"},"scope":4053,"src":"2263:156:11","stateMutability":"view","virtual":false,"visibility":"internal"},{"anonymous":false,"id":3341,"name":"DiamondCut","nameLocation":"2431:10:11","nodeType":"EventDefinition","parameters":{"id":3340,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3335,"indexed":false,"mutability":"mutable","name":"_diamondCut","nameLocation":"2465:11:11","nodeType":"VariableDeclaration","scope":3341,"src":"2442:34:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_FacetCut_$3155_memory_ptr_$dyn_memory_ptr","typeString":"struct IDiamondCut.FacetCut[]"},"typeName":{"baseType":{"id":3333,"nodeType":"UserDefinedTypeName","pathNode":{"id":3332,"name":"IDiamondCut.FacetCut","nodeType":"IdentifierPath","referencedDeclaration":3155,"src":"2442:20:11"},"referencedDeclaration":3155,"src":"2442:20:11","typeDescriptions":{"typeIdentifier":"t_struct$_FacetCut_$3155_storage_ptr","typeString":"struct IDiamondCut.FacetCut"}},"id":3334,"nodeType":"ArrayTypeName","src":"2442:22:11","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_FacetCut_$3155_storage_$dyn_storage_ptr","typeString":"struct IDiamondCut.FacetCut[]"}},"visibility":"internal"},{"constant":false,"id":3337,"indexed":false,"mutability":"mutable","name":"_init","nameLocation":"2486:5:11","nodeType":"VariableDeclaration","scope":3341,"src":"2478:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3336,"name":"address","nodeType":"ElementaryTypeName","src":"2478:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3339,"indexed":false,"mutability":"mutable","name":"_calldata","nameLocation":"2499:9:11","nodeType":"VariableDeclaration","scope":3341,"src":"2493:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3338,"name":"bytes","nodeType":"ElementaryTypeName","src":"2493:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2441:68:11"},"src":"2425:85:11"},{"body":{"id":3444,"nodeType":"Block","src":"2704:926:11","statements":[{"body":{"id":3431,"nodeType":"Block","src":"2786:734:11","statements":[{"assignments":[3366],"declarations":[{"constant":false,"id":3366,"mutability":"mutable","name":"action","nameLocation":"2827:6:11","nodeType":"VariableDeclaration","scope":3431,"src":"2800:33:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_FacetCutAction_$3146","typeString":"enum IDiamondCut.FacetCutAction"},"typeName":{"id":3365,"nodeType":"UserDefinedTypeName","pathNode":{"id":3364,"name":"IDiamondCut.FacetCutAction","nodeType":"IdentifierPath","referencedDeclaration":3146,"src":"2800:26:11"},"referencedDeclaration":3146,"src":"2800:26:11","typeDescriptions":{"typeIdentifier":"t_enum$_FacetCutAction_$3146","typeString":"enum IDiamondCut.FacetCutAction"}},"visibility":"internal"}],"id":3371,"initialValue":{"expression":{"baseExpression":{"id":3367,"name":"_diamondCut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3345,"src":"2836:11:11","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_FacetCut_$3155_memory_ptr_$dyn_memory_ptr","typeString":"struct IDiamondCut.FacetCut memory[] memory"}},"id":3369,"indexExpression":{"id":3368,"name":"facetIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3353,"src":"2848:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2836:23:11","typeDescriptions":{"typeIdentifier":"t_struct$_FacetCut_$3155_memory_ptr","typeString":"struct IDiamondCut.FacetCut memory"}},"id":3370,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"action","nodeType":"MemberAccess","referencedDeclaration":3151,"src":"2836:30:11","typeDescriptions":{"typeIdentifier":"t_enum$_FacetCutAction_$3146","typeString":"enum IDiamondCut.FacetCutAction"}},"nodeType":"VariableDeclarationStatement","src":"2800:66:11"},{"condition":{"commonType":{"typeIdentifier":"t_enum$_FacetCutAction_$3146","typeString":"enum IDiamondCut.FacetCutAction"},"id":3376,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3372,"name":"action","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3366,"src":"2884:6:11","typeDescriptions":{"typeIdentifier":"t_enum$_FacetCutAction_$3146","typeString":"enum IDiamondCut.FacetCutAction"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":3373,"name":"IDiamondCut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3178,"src":"2894:11:11","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IDiamondCut_$3178_$","typeString":"type(contract IDiamondCut)"}},"id":3374,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"FacetCutAction","nodeType":"MemberAccess","referencedDeclaration":3146,"src":"2894:26:11","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_FacetCutAction_$3146_$","typeString":"type(enum IDiamondCut.FacetCutAction)"}},"id":3375,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Add","nodeType":"MemberAccess","referencedDeclaration":3143,"src":"2894:30:11","typeDescriptions":{"typeIdentifier":"t_enum$_FacetCutAction_$3146","typeString":"enum IDiamondCut.FacetCutAction"}},"src":"2884:40:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_FacetCutAction_$3146","typeString":"enum IDiamondCut.FacetCutAction"},"id":3393,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3389,"name":"action","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3366,"src":"3062:6:11","typeDescriptions":{"typeIdentifier":"t_enum$_FacetCutAction_$3146","typeString":"enum IDiamondCut.FacetCutAction"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":3390,"name":"IDiamondCut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3178,"src":"3072:11:11","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IDiamondCut_$3178_$","typeString":"type(contract IDiamondCut)"}},"id":3391,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"FacetCutAction","nodeType":"MemberAccess","referencedDeclaration":3146,"src":"3072:26:11","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_FacetCutAction_$3146_$","typeString":"type(enum IDiamondCut.FacetCutAction)"}},"id":3392,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Replace","nodeType":"MemberAccess","referencedDeclaration":3144,"src":"3072:34:11","typeDescriptions":{"typeIdentifier":"t_enum$_FacetCutAction_$3146","typeString":"enum IDiamondCut.FacetCutAction"}},"src":"3062:44:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_FacetCutAction_$3146","typeString":"enum IDiamondCut.FacetCutAction"},"id":3410,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3406,"name":"action","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3366,"src":"3248:6:11","typeDescriptions":{"typeIdentifier":"t_enum$_FacetCutAction_$3146","typeString":"enum IDiamondCut.FacetCutAction"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":3407,"name":"IDiamondCut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3178,"src":"3258:11:11","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IDiamondCut_$3178_$","typeString":"type(contract IDiamondCut)"}},"id":3408,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"FacetCutAction","nodeType":"MemberAccess","referencedDeclaration":3146,"src":"3258:26:11","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_FacetCutAction_$3146_$","typeString":"type(enum IDiamondCut.FacetCutAction)"}},"id":3409,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Remove","nodeType":"MemberAccess","referencedDeclaration":3145,"src":"3258:33:11","typeDescriptions":{"typeIdentifier":"t_enum$_FacetCutAction_$3146","typeString":"enum IDiamondCut.FacetCutAction"}},"src":"3248:43:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3427,"nodeType":"Block","src":"3428:82:11","statements":[{"expression":{"arguments":[{"hexValue":"4c69624469616d6f6e644375743a20496e636f7272656374204661636574437574416374696f6e","id":3424,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3453:41:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_48267d8daf5ea9c6bbad1fe9c53dc4c04a2a01b2b85bad432956cf42f45b2f54","typeString":"literal_string \"LibDiamondCut: Incorrect FacetCutAction\""},"value":"LibDiamondCut: Incorrect FacetCutAction"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_48267d8daf5ea9c6bbad1fe9c53dc4c04a2a01b2b85bad432956cf42f45b2f54","typeString":"literal_string \"LibDiamondCut: Incorrect FacetCutAction\""}],"id":3423,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"3446:6:11","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":3425,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3446:49:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3426,"nodeType":"ExpressionStatement","src":"3446:49:11"}]},"id":3428,"nodeType":"IfStatement","src":"3244:266:11","trueBody":{"id":3422,"nodeType":"Block","src":"3293:129:11","statements":[{"expression":{"arguments":[{"expression":{"baseExpression":{"id":3412,"name":"_diamondCut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3345,"src":"3327:11:11","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_FacetCut_$3155_memory_ptr_$dyn_memory_ptr","typeString":"struct IDiamondCut.FacetCut memory[] memory"}},"id":3414,"indexExpression":{"id":3413,"name":"facetIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3353,"src":"3339:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3327:23:11","typeDescriptions":{"typeIdentifier":"t_struct$_FacetCut_$3155_memory_ptr","typeString":"struct IDiamondCut.FacetCut memory"}},"id":3415,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"facetAddress","nodeType":"MemberAccess","referencedDeclaration":3148,"src":"3327:36:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"baseExpression":{"id":3416,"name":"_diamondCut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3345,"src":"3365:11:11","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_FacetCut_$3155_memory_ptr_$dyn_memory_ptr","typeString":"struct IDiamondCut.FacetCut memory[] memory"}},"id":3418,"indexExpression":{"id":3417,"name":"facetIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3353,"src":"3377:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3365:23:11","typeDescriptions":{"typeIdentifier":"t_struct$_FacetCut_$3155_memory_ptr","typeString":"struct IDiamondCut.FacetCut memory"}},"id":3419,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"functionSelectors","nodeType":"MemberAccess","referencedDeclaration":3154,"src":"3365:41:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_memory_ptr","typeString":"bytes4[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_bytes4_$dyn_memory_ptr","typeString":"bytes4[] memory"}],"id":3411,"name":"removeFunctions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3715,"src":"3311:15:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_array$_t_bytes4_$dyn_memory_ptr_$returns$__$","typeString":"function (address,bytes4[] memory)"}},"id":3420,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3311:96:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3421,"nodeType":"ExpressionStatement","src":"3311:96:11"}]}},"id":3429,"nodeType":"IfStatement","src":"3058:452:11","trueBody":{"id":3405,"nodeType":"Block","src":"3108:130:11","statements":[{"expression":{"arguments":[{"expression":{"baseExpression":{"id":3395,"name":"_diamondCut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3345,"src":"3143:11:11","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_FacetCut_$3155_memory_ptr_$dyn_memory_ptr","typeString":"struct IDiamondCut.FacetCut memory[] memory"}},"id":3397,"indexExpression":{"id":3396,"name":"facetIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3353,"src":"3155:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3143:23:11","typeDescriptions":{"typeIdentifier":"t_struct$_FacetCut_$3155_memory_ptr","typeString":"struct IDiamondCut.FacetCut memory"}},"id":3398,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"facetAddress","nodeType":"MemberAccess","referencedDeclaration":3148,"src":"3143:36:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"baseExpression":{"id":3399,"name":"_diamondCut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3345,"src":"3181:11:11","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_FacetCut_$3155_memory_ptr_$dyn_memory_ptr","typeString":"struct IDiamondCut.FacetCut memory[] memory"}},"id":3401,"indexExpression":{"id":3400,"name":"facetIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3353,"src":"3193:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3181:23:11","typeDescriptions":{"typeIdentifier":"t_struct$_FacetCut_$3155_memory_ptr","typeString":"struct IDiamondCut.FacetCut memory"}},"id":3402,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"functionSelectors","nodeType":"MemberAccess","referencedDeclaration":3154,"src":"3181:41:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_memory_ptr","typeString":"bytes4[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_bytes4_$dyn_memory_ptr","typeString":"bytes4[] memory"}],"id":3394,"name":"replaceFunctions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3650,"src":"3126:16:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_array$_t_bytes4_$dyn_memory_ptr_$returns$__$","typeString":"function (address,bytes4[] memory)"}},"id":3403,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3126:97:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3404,"nodeType":"ExpressionStatement","src":"3126:97:11"}]}},"id":3430,"nodeType":"IfStatement","src":"2880:630:11","trueBody":{"id":3388,"nodeType":"Block","src":"2926:126:11","statements":[{"expression":{"arguments":[{"expression":{"baseExpression":{"id":3378,"name":"_diamondCut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3345,"src":"2957:11:11","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_FacetCut_$3155_memory_ptr_$dyn_memory_ptr","typeString":"struct IDiamondCut.FacetCut memory[] memory"}},"id":3380,"indexExpression":{"id":3379,"name":"facetIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3353,"src":"2969:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2957:23:11","typeDescriptions":{"typeIdentifier":"t_struct$_FacetCut_$3155_memory_ptr","typeString":"struct IDiamondCut.FacetCut memory"}},"id":3381,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"facetAddress","nodeType":"MemberAccess","referencedDeclaration":3148,"src":"2957:36:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"baseExpression":{"id":3382,"name":"_diamondCut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3345,"src":"2995:11:11","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_FacetCut_$3155_memory_ptr_$dyn_memory_ptr","typeString":"struct IDiamondCut.FacetCut memory[] memory"}},"id":3384,"indexExpression":{"id":3383,"name":"facetIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3353,"src":"3007:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2995:23:11","typeDescriptions":{"typeIdentifier":"t_struct$_FacetCut_$3155_memory_ptr","typeString":"struct IDiamondCut.FacetCut memory"}},"id":3385,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"functionSelectors","nodeType":"MemberAccess","referencedDeclaration":3154,"src":"2995:41:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_memory_ptr","typeString":"bytes4[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_bytes4_$dyn_memory_ptr","typeString":"bytes4[] memory"}],"id":3377,"name":"addFunctions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3546,"src":"2944:12:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_array$_t_bytes4_$dyn_memory_ptr_$returns$__$","typeString":"function (address,bytes4[] memory)"}},"id":3386,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2944:93:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3387,"nodeType":"ExpressionStatement","src":"2944:93:11"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3358,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3355,"name":"facetIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3353,"src":"2739:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":3356,"name":"_diamondCut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3345,"src":"2752:11:11","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_FacetCut_$3155_memory_ptr_$dyn_memory_ptr","typeString":"struct IDiamondCut.FacetCut memory[] memory"}},"id":3357,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"2752:18:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2739:31:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3432,"initializationExpression":{"assignments":[3353],"declarations":[{"constant":false,"id":3353,"mutability":"mutable","name":"facetIndex","nameLocation":"2727:10:11","nodeType":"VariableDeclaration","scope":3432,"src":"2719:18:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3352,"name":"uint256","nodeType":"ElementaryTypeName","src":"2719:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3354,"nodeType":"VariableDeclarationStatement","src":"2719:18:11"},"loopExpression":{"expression":{"id":3360,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2772:12:11","subExpression":{"id":3359,"name":"facetIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3353,"src":"2772:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3361,"nodeType":"ExpressionStatement","src":"2772:12:11"},"nodeType":"ForStatement","src":"2714:806:11"},{"eventCall":{"arguments":[{"id":3434,"name":"_diamondCut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3345,"src":"3545:11:11","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_FacetCut_$3155_memory_ptr_$dyn_memory_ptr","typeString":"struct IDiamondCut.FacetCut memory[] memory"}},{"id":3435,"name":"_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3347,"src":"3558:5:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3436,"name":"_calldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3349,"src":"3565:9:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_struct$_FacetCut_$3155_memory_ptr_$dyn_memory_ptr","typeString":"struct IDiamondCut.FacetCut memory[] memory"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3433,"name":"DiamondCut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3341,"src":"3534:10:11","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_array$_t_struct$_FacetCut_$3155_memory_ptr_$dyn_memory_ptr_$_t_address_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (struct IDiamondCut.FacetCut memory[] memory,address,bytes memory)"}},"id":3437,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3534:41:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3438,"nodeType":"EmitStatement","src":"3529:46:11"},{"expression":{"arguments":[{"id":3440,"name":"_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3347,"src":"3606:5:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3441,"name":"_calldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3349,"src":"3613:9:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3439,"name":"initializeDiamondCut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4033,"src":"3585:20:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,bytes memory)"}},"id":3442,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3585:38:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3443,"nodeType":"ExpressionStatement","src":"3585:38:11"}]},"id":3445,"implemented":true,"kind":"function","modifiers":[],"name":"diamondCut","nameLocation":"2572:10:11","nodeType":"FunctionDefinition","parameters":{"id":3350,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3345,"mutability":"mutable","name":"_diamondCut","nameLocation":"2622:11:11","nodeType":"VariableDeclaration","scope":3445,"src":"2592:41:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_FacetCut_$3155_memory_ptr_$dyn_memory_ptr","typeString":"struct IDiamondCut.FacetCut[]"},"typeName":{"baseType":{"id":3343,"nodeType":"UserDefinedTypeName","pathNode":{"id":3342,"name":"IDiamondCut.FacetCut","nodeType":"IdentifierPath","referencedDeclaration":3155,"src":"2592:20:11"},"referencedDeclaration":3155,"src":"2592:20:11","typeDescriptions":{"typeIdentifier":"t_struct$_FacetCut_$3155_storage_ptr","typeString":"struct IDiamondCut.FacetCut"}},"id":3344,"nodeType":"ArrayTypeName","src":"2592:22:11","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_FacetCut_$3155_storage_$dyn_storage_ptr","typeString":"struct IDiamondCut.FacetCut[]"}},"visibility":"internal"},{"constant":false,"id":3347,"mutability":"mutable","name":"_init","nameLocation":"2651:5:11","nodeType":"VariableDeclaration","scope":3445,"src":"2643:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3346,"name":"address","nodeType":"ElementaryTypeName","src":"2643:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3349,"mutability":"mutable","name":"_calldata","nameLocation":"2679:9:11","nodeType":"VariableDeclaration","scope":3445,"src":"2666:22:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3348,"name":"bytes","nodeType":"ElementaryTypeName","src":"2666:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2582:112:11"},"returnParameters":{"id":3351,"nodeType":"ParameterList","parameters":[],"src":"2704:0:11"},"scope":4053,"src":"2563:1067:11","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3545,"nodeType":"Block","src":"3726:999:11","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3457,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3454,"name":"_functionSelectors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3450,"src":"3744:18:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_memory_ptr","typeString":"bytes4[] memory"}},"id":3455,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"3744:25:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3456,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3772:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3744:29:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4c69624469616d6f6e644375743a204e6f2073656c6563746f727320696e20666163657420746f20637574","id":3458,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3775:45:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_1ffc682bcfedefd5e93ba9ed0c2d1bc0b18319886e3b4bd28a03a3d3729f85c0","typeString":"literal_string \"LibDiamondCut: No selectors in facet to cut\""},"value":"LibDiamondCut: No selectors in facet to cut"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1ffc682bcfedefd5e93ba9ed0c2d1bc0b18319886e3b4bd28a03a3d3729f85c0","typeString":"literal_string \"LibDiamondCut: No selectors in facet to cut\""}],"id":3453,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3736:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3459,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3736:85:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3460,"nodeType":"ExpressionStatement","src":"3736:85:11"},{"assignments":[3463],"declarations":[{"constant":false,"id":3463,"mutability":"mutable","name":"ds","nameLocation":"3854:2:11","nodeType":"VariableDeclaration","scope":3545,"src":"3831:25:11","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3259_storage_ptr","typeString":"struct LibDiamond.DiamondStorage"},"typeName":{"id":3462,"nodeType":"UserDefinedTypeName","pathNode":{"id":3461,"name":"DiamondStorage","nodeType":"IdentifierPath","referencedDeclaration":3259,"src":"3831:14:11"},"referencedDeclaration":3259,"src":"3831:14:11","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3259_storage_ptr","typeString":"struct LibDiamond.DiamondStorage"}},"visibility":"internal"}],"id":3466,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":3464,"name":"diamondStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3271,"src":"3859:14:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_DiamondStorage_$3259_storage_ptr_$","typeString":"function () pure returns (struct LibDiamond.DiamondStorage storage pointer)"}},"id":3465,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3859:16:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3259_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"3831:44:11"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3473,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3468,"name":"_facetAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3447,"src":"3901:13:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3471,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3926:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3470,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3918:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3469,"name":"address","nodeType":"ElementaryTypeName","src":"3918:7:11","typeDescriptions":{}}},"id":3472,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3918:10:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3901:27:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4c69624469616d6f6e644375743a204164642066616365742063616e27742062652061646472657373283029","id":3474,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3930:46:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_64609d8b93c93a06b98d7db7a87b04044cd4a52c5661d603bb9b90ad8b914a3a","typeString":"literal_string \"LibDiamondCut: Add facet can't be address(0)\""},"value":"LibDiamondCut: Add facet can't be address(0)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_64609d8b93c93a06b98d7db7a87b04044cd4a52c5661d603bb9b90ad8b914a3a","typeString":"literal_string \"LibDiamondCut: Add facet can't be address(0)\""}],"id":3467,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3893:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3475,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3893:84:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3476,"nodeType":"ExpressionStatement","src":"3893:84:11"},{"assignments":[3478],"declarations":[{"constant":false,"id":3478,"mutability":"mutable","name":"selectorPosition","nameLocation":"3994:16:11","nodeType":"VariableDeclaration","scope":3545,"src":"3987:23:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":3477,"name":"uint96","nodeType":"ElementaryTypeName","src":"3987:6:11","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"}],"id":3488,"initialValue":{"arguments":[{"expression":{"expression":{"baseExpression":{"expression":{"id":3481,"name":"ds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3463,"src":"4020:2:11","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3259_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"}},"id":3482,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"facetFunctionSelectors","nodeType":"MemberAccess","referencedDeclaration":3249,"src":"4020:25:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_FacetFunctionSelectors_$3239_storage_$","typeString":"mapping(address => struct LibDiamond.FacetFunctionSelectors storage ref)"}},"id":3484,"indexExpression":{"id":3483,"name":"_facetAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3447,"src":"4046:13:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4020:40:11","typeDescriptions":{"typeIdentifier":"t_struct$_FacetFunctionSelectors_$3239_storage","typeString":"struct LibDiamond.FacetFunctionSelectors storage ref"}},"id":3485,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"functionSelectors","nodeType":"MemberAccess","referencedDeclaration":3236,"src":"4020:58:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_storage","typeString":"bytes4[] storage ref"}},"id":3486,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"4020:65:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3480,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4013:6:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint96_$","typeString":"type(uint96)"},"typeName":{"id":3479,"name":"uint96","nodeType":"ElementaryTypeName","src":"4013:6:11","typeDescriptions":{}}},"id":3487,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4013:73:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"nodeType":"VariableDeclarationStatement","src":"3987:99:11"},{"condition":{"commonType":{"typeIdentifier":"t_uint96","typeString":"uint96"},"id":3491,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3489,"name":"selectorPosition","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3478,"src":"4154:16:11","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3490,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4174:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4154:21:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3498,"nodeType":"IfStatement","src":"4150:91:11","trueBody":{"id":3497,"nodeType":"Block","src":"4177:64:11","statements":[{"expression":{"arguments":[{"id":3493,"name":"ds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3463,"src":"4200:2:11","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3259_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"}},{"id":3494,"name":"_facetAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3447,"src":"4204:13:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_DiamondStorage_$3259_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3492,"name":"addFacet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3748,"src":"4191:8:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_DiamondStorage_$3259_storage_ptr_$_t_address_$returns$__$","typeString":"function (struct LibDiamond.DiamondStorage storage pointer,address)"}},"id":3495,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4191:27:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3496,"nodeType":"ExpressionStatement","src":"4191:27:11"}]}},{"body":{"id":3543,"nodeType":"Block","src":"4338:381:11","statements":[{"assignments":[3510],"declarations":[{"constant":false,"id":3510,"mutability":"mutable","name":"selector","nameLocation":"4359:8:11","nodeType":"VariableDeclaration","scope":3543,"src":"4352:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3509,"name":"bytes4","nodeType":"ElementaryTypeName","src":"4352:6:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"id":3514,"initialValue":{"baseExpression":{"id":3511,"name":"_functionSelectors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3450,"src":"4370:18:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_memory_ptr","typeString":"bytes4[] memory"}},"id":3513,"indexExpression":{"id":3512,"name":"selectorIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3500,"src":"4389:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4370:33:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"VariableDeclarationStatement","src":"4352:51:11"},{"assignments":[3516],"declarations":[{"constant":false,"id":3516,"mutability":"mutable","name":"oldFacetAddress","nameLocation":"4425:15:11","nodeType":"VariableDeclaration","scope":3543,"src":"4417:23:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3515,"name":"address","nodeType":"ElementaryTypeName","src":"4417:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3522,"initialValue":{"expression":{"baseExpression":{"expression":{"id":3517,"name":"ds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3463,"src":"4443:2:11","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3259_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"}},"id":3518,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"selectorToFacetAndPosition","nodeType":"MemberAccess","referencedDeclaration":3244,"src":"4443:29:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_struct$_FacetAddressAndPosition_$3233_storage_$","typeString":"mapping(bytes4 => struct LibDiamond.FacetAddressAndPosition storage ref)"}},"id":3520,"indexExpression":{"id":3519,"name":"selector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3510,"src":"4473:8:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4443:39:11","typeDescriptions":{"typeIdentifier":"t_struct$_FacetAddressAndPosition_$3233_storage","typeString":"struct LibDiamond.FacetAddressAndPosition storage ref"}},"id":3521,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"facetAddress","nodeType":"MemberAccess","referencedDeclaration":3230,"src":"4443:52:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"4417:78:11"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3529,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3524,"name":"oldFacetAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3516,"src":"4517:15:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":3527,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4544:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3526,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4536:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3525,"name":"address","nodeType":"ElementaryTypeName","src":"4536:7:11","typeDescriptions":{}}},"id":3528,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4536:10:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4517:29:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4c69624469616d6f6e644375743a2043616e2774206164642066756e6374696f6e207468617420616c726561647920657869737473","id":3530,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4548:55:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_99a7418ee014d613f46da44561258cdbb58064508097483a319062b99fa37700","typeString":"literal_string \"LibDiamondCut: Can't add function that already exists\""},"value":"LibDiamondCut: Can't add function that already exists"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_99a7418ee014d613f46da44561258cdbb58064508097483a319062b99fa37700","typeString":"literal_string \"LibDiamondCut: Can't add function that already exists\""}],"id":3523,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4509:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3531,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4509:95:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3532,"nodeType":"ExpressionStatement","src":"4509:95:11"},{"expression":{"arguments":[{"id":3534,"name":"ds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3463,"src":"4630:2:11","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3259_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"}},{"id":3535,"name":"selector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3510,"src":"4634:8:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":3536,"name":"selectorPosition","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3478,"src":"4644:16:11","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},{"id":3537,"name":"_facetAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3447,"src":"4662:13:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_DiamondStorage_$3259_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"},{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_uint96","typeString":"uint96"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3533,"name":"addFunction","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3789,"src":"4618:11:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_DiamondStorage_$3259_storage_ptr_$_t_bytes4_$_t_uint96_$_t_address_$returns$__$","typeString":"function (struct LibDiamond.DiamondStorage storage pointer,bytes4,uint96,address)"}},"id":3538,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4618:58:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3539,"nodeType":"ExpressionStatement","src":"4618:58:11"},{"expression":{"id":3541,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"4690:18:11","subExpression":{"id":3540,"name":"selectorPosition","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3478,"src":"4690:16:11","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"id":3542,"nodeType":"ExpressionStatement","src":"4690:18:11"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3505,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3502,"name":"selectorIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3500,"src":"4278:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":3503,"name":"_functionSelectors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3450,"src":"4294:18:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_memory_ptr","typeString":"bytes4[] memory"}},"id":3504,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"4294:25:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4278:41:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3544,"initializationExpression":{"assignments":[3500],"declarations":[{"constant":false,"id":3500,"mutability":"mutable","name":"selectorIndex","nameLocation":"4263:13:11","nodeType":"VariableDeclaration","scope":3544,"src":"4255:21:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3499,"name":"uint256","nodeType":"ElementaryTypeName","src":"4255:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3501,"nodeType":"VariableDeclarationStatement","src":"4255:21:11"},"loopExpression":{"expression":{"id":3507,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"4321:15:11","subExpression":{"id":3506,"name":"selectorIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3500,"src":"4321:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3508,"nodeType":"ExpressionStatement","src":"4321:15:11"},"nodeType":"ForStatement","src":"4250:469:11"}]},"id":3546,"implemented":true,"kind":"function","modifiers":[],"name":"addFunctions","nameLocation":"3645:12:11","nodeType":"FunctionDefinition","parameters":{"id":3451,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3447,"mutability":"mutable","name":"_facetAddress","nameLocation":"3666:13:11","nodeType":"VariableDeclaration","scope":3546,"src":"3658:21:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3446,"name":"address","nodeType":"ElementaryTypeName","src":"3658:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3450,"mutability":"mutable","name":"_functionSelectors","nameLocation":"3697:18:11","nodeType":"VariableDeclaration","scope":3546,"src":"3681:34:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_memory_ptr","typeString":"bytes4[]"},"typeName":{"baseType":{"id":3448,"name":"bytes4","nodeType":"ElementaryTypeName","src":"3681:6:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":3449,"nodeType":"ArrayTypeName","src":"3681:8:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_storage_ptr","typeString":"bytes4[]"}},"visibility":"internal"}],"src":"3657:59:11"},"returnParameters":{"id":3452,"nodeType":"ParameterList","parameters":[],"src":"3726:0:11"},"scope":4053,"src":"3636:1089:11","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3649,"nodeType":"Block","src":"4825:1044:11","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3558,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3555,"name":"_functionSelectors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3551,"src":"4843:18:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_memory_ptr","typeString":"bytes4[] memory"}},"id":3556,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"4843:25:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3557,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4871:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4843:29:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4c69624469616d6f6e644375743a204e6f2073656c6563746f727320696e20666163657420746f20637574","id":3559,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4874:45:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_1ffc682bcfedefd5e93ba9ed0c2d1bc0b18319886e3b4bd28a03a3d3729f85c0","typeString":"literal_string \"LibDiamondCut: No selectors in facet to cut\""},"value":"LibDiamondCut: No selectors in facet to cut"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1ffc682bcfedefd5e93ba9ed0c2d1bc0b18319886e3b4bd28a03a3d3729f85c0","typeString":"literal_string \"LibDiamondCut: No selectors in facet to cut\""}],"id":3554,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4835:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3560,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4835:85:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3561,"nodeType":"ExpressionStatement","src":"4835:85:11"},{"assignments":[3564],"declarations":[{"constant":false,"id":3564,"mutability":"mutable","name":"ds","nameLocation":"4953:2:11","nodeType":"VariableDeclaration","scope":3649,"src":"4930:25:11","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3259_storage_ptr","typeString":"struct LibDiamond.DiamondStorage"},"typeName":{"id":3563,"nodeType":"UserDefinedTypeName","pathNode":{"id":3562,"name":"DiamondStorage","nodeType":"IdentifierPath","referencedDeclaration":3259,"src":"4930:14:11"},"referencedDeclaration":3259,"src":"4930:14:11","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3259_storage_ptr","typeString":"struct LibDiamond.DiamondStorage"}},"visibility":"internal"}],"id":3567,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":3565,"name":"diamondStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3271,"src":"4958:14:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_DiamondStorage_$3259_storage_ptr_$","typeString":"function () pure returns (struct LibDiamond.DiamondStorage storage pointer)"}},"id":3566,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4958:16:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3259_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"4930:44:11"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3574,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3569,"name":"_facetAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3548,"src":"4992:13:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3572,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5017:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3571,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5009:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3570,"name":"address","nodeType":"ElementaryTypeName","src":"5009:7:11","typeDescriptions":{}}},"id":3573,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5009:10:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4992:27:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4c69624469616d6f6e644375743a204164642066616365742063616e27742062652061646472657373283029","id":3575,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5021:46:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_64609d8b93c93a06b98d7db7a87b04044cd4a52c5661d603bb9b90ad8b914a3a","typeString":"literal_string \"LibDiamondCut: Add facet can't be address(0)\""},"value":"LibDiamondCut: Add facet can't be address(0)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_64609d8b93c93a06b98d7db7a87b04044cd4a52c5661d603bb9b90ad8b914a3a","typeString":"literal_string \"LibDiamondCut: Add facet can't be address(0)\""}],"id":3568,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4984:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3576,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4984:84:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3577,"nodeType":"ExpressionStatement","src":"4984:84:11"},{"assignments":[3579],"declarations":[{"constant":false,"id":3579,"mutability":"mutable","name":"selectorPosition","nameLocation":"5085:16:11","nodeType":"VariableDeclaration","scope":3649,"src":"5078:23:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":3578,"name":"uint96","nodeType":"ElementaryTypeName","src":"5078:6:11","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"}],"id":3589,"initialValue":{"arguments":[{"expression":{"expression":{"baseExpression":{"expression":{"id":3582,"name":"ds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3564,"src":"5111:2:11","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3259_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"}},"id":3583,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"facetFunctionSelectors","nodeType":"MemberAccess","referencedDeclaration":3249,"src":"5111:25:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_FacetFunctionSelectors_$3239_storage_$","typeString":"mapping(address => struct LibDiamond.FacetFunctionSelectors storage ref)"}},"id":3585,"indexExpression":{"id":3584,"name":"_facetAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3548,"src":"5137:13:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5111:40:11","typeDescriptions":{"typeIdentifier":"t_struct$_FacetFunctionSelectors_$3239_storage","typeString":"struct LibDiamond.FacetFunctionSelectors storage ref"}},"id":3586,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"functionSelectors","nodeType":"MemberAccess","referencedDeclaration":3236,"src":"5111:58:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_storage","typeString":"bytes4[] storage ref"}},"id":3587,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"5111:65:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3581,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5104:6:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint96_$","typeString":"type(uint96)"},"typeName":{"id":3580,"name":"uint96","nodeType":"ElementaryTypeName","src":"5104:6:11","typeDescriptions":{}}},"id":3588,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5104:73:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"nodeType":"VariableDeclarationStatement","src":"5078:99:11"},{"condition":{"commonType":{"typeIdentifier":"t_uint96","typeString":"uint96"},"id":3592,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3590,"name":"selectorPosition","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3579,"src":"5245:16:11","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3591,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5265:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5245:21:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3599,"nodeType":"IfStatement","src":"5241:79:11","trueBody":{"id":3598,"nodeType":"Block","src":"5268:52:11","statements":[{"expression":{"arguments":[{"id":3594,"name":"ds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3564,"src":"5291:2:11","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3259_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"}},{"id":3595,"name":"_facetAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3548,"src":"5295:13:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_DiamondStorage_$3259_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3593,"name":"addFacet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3748,"src":"5282:8:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_DiamondStorage_$3259_storage_ptr_$_t_address_$returns$__$","typeString":"function (struct LibDiamond.DiamondStorage storage pointer,address)"}},"id":3596,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5282:27:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3597,"nodeType":"ExpressionStatement","src":"5282:27:11"}]}},{"body":{"id":3647,"nodeType":"Block","src":"5417:446:11","statements":[{"assignments":[3611],"declarations":[{"constant":false,"id":3611,"mutability":"mutable","name":"selector","nameLocation":"5438:8:11","nodeType":"VariableDeclaration","scope":3647,"src":"5431:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3610,"name":"bytes4","nodeType":"ElementaryTypeName","src":"5431:6:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"id":3615,"initialValue":{"baseExpression":{"id":3612,"name":"_functionSelectors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3551,"src":"5449:18:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_memory_ptr","typeString":"bytes4[] memory"}},"id":3614,"indexExpression":{"id":3613,"name":"selectorIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3601,"src":"5468:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5449:33:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"VariableDeclarationStatement","src":"5431:51:11"},{"assignments":[3617],"declarations":[{"constant":false,"id":3617,"mutability":"mutable","name":"oldFacetAddress","nameLocation":"5504:15:11","nodeType":"VariableDeclaration","scope":3647,"src":"5496:23:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3616,"name":"address","nodeType":"ElementaryTypeName","src":"5496:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3623,"initialValue":{"expression":{"baseExpression":{"expression":{"id":3618,"name":"ds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3564,"src":"5522:2:11","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3259_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"}},"id":3619,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"selectorToFacetAndPosition","nodeType":"MemberAccess","referencedDeclaration":3244,"src":"5522:29:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_struct$_FacetAddressAndPosition_$3233_storage_$","typeString":"mapping(bytes4 => struct LibDiamond.FacetAddressAndPosition storage ref)"}},"id":3621,"indexExpression":{"id":3620,"name":"selector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3611,"src":"5552:8:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5522:39:11","typeDescriptions":{"typeIdentifier":"t_struct$_FacetAddressAndPosition_$3233_storage","typeString":"struct LibDiamond.FacetAddressAndPosition storage ref"}},"id":3622,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"facetAddress","nodeType":"MemberAccess","referencedDeclaration":3230,"src":"5522:52:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"5496:78:11"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3627,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3625,"name":"oldFacetAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3617,"src":"5596:15:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":3626,"name":"_facetAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3548,"src":"5615:13:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5596:32:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4c69624469616d6f6e644375743a2043616e2774207265706c6163652066756e6374696f6e20776974682073616d652066756e6374696f6e","id":3628,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5630:58:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_b5a7112edf707196456f338fdcc19cd849be6cb8c0d166bcd035f4cfb00e7078","typeString":"literal_string \"LibDiamondCut: Can't replace function with same function\""},"value":"LibDiamondCut: Can't replace function with same function"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b5a7112edf707196456f338fdcc19cd849be6cb8c0d166bcd035f4cfb00e7078","typeString":"literal_string \"LibDiamondCut: Can't replace function with same function\""}],"id":3624,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5588:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3629,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5588:101:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3630,"nodeType":"ExpressionStatement","src":"5588:101:11"},{"expression":{"arguments":[{"id":3632,"name":"ds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3564,"src":"5718:2:11","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3259_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"}},{"id":3633,"name":"oldFacetAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3617,"src":"5722:15:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3634,"name":"selector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3611,"src":"5739:8:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_DiamondStorage_$3259_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"id":3631,"name":"removeFunction","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3956,"src":"5703:14:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_DiamondStorage_$3259_storage_ptr_$_t_address_$_t_bytes4_$returns$__$","typeString":"function (struct LibDiamond.DiamondStorage storage pointer,address,bytes4)"}},"id":3635,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5703:45:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3636,"nodeType":"ExpressionStatement","src":"5703:45:11"},{"expression":{"arguments":[{"id":3638,"name":"ds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3564,"src":"5774:2:11","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3259_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"}},{"id":3639,"name":"selector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3611,"src":"5778:8:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":3640,"name":"selectorPosition","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3579,"src":"5788:16:11","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},{"id":3641,"name":"_facetAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3548,"src":"5806:13:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_DiamondStorage_$3259_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"},{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_uint96","typeString":"uint96"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3637,"name":"addFunction","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3789,"src":"5762:11:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_DiamondStorage_$3259_storage_ptr_$_t_bytes4_$_t_uint96_$_t_address_$returns$__$","typeString":"function (struct LibDiamond.DiamondStorage storage pointer,bytes4,uint96,address)"}},"id":3642,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5762:58:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3643,"nodeType":"ExpressionStatement","src":"5762:58:11"},{"expression":{"id":3645,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"5834:18:11","subExpression":{"id":3644,"name":"selectorPosition","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3579,"src":"5834:16:11","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"id":3646,"nodeType":"ExpressionStatement","src":"5834:18:11"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3606,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3603,"name":"selectorIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3601,"src":"5357:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":3604,"name":"_functionSelectors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3551,"src":"5373:18:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_memory_ptr","typeString":"bytes4[] memory"}},"id":3605,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"5373:25:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5357:41:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3648,"initializationExpression":{"assignments":[3601],"declarations":[{"constant":false,"id":3601,"mutability":"mutable","name":"selectorIndex","nameLocation":"5342:13:11","nodeType":"VariableDeclaration","scope":3648,"src":"5334:21:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3600,"name":"uint256","nodeType":"ElementaryTypeName","src":"5334:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3602,"nodeType":"VariableDeclarationStatement","src":"5334:21:11"},"loopExpression":{"expression":{"id":3608,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"5400:15:11","subExpression":{"id":3607,"name":"selectorIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3601,"src":"5400:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3609,"nodeType":"ExpressionStatement","src":"5400:15:11"},"nodeType":"ForStatement","src":"5329:534:11"}]},"id":3650,"implemented":true,"kind":"function","modifiers":[],"name":"replaceFunctions","nameLocation":"4740:16:11","nodeType":"FunctionDefinition","parameters":{"id":3552,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3548,"mutability":"mutable","name":"_facetAddress","nameLocation":"4765:13:11","nodeType":"VariableDeclaration","scope":3650,"src":"4757:21:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3547,"name":"address","nodeType":"ElementaryTypeName","src":"4757:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3551,"mutability":"mutable","name":"_functionSelectors","nameLocation":"4796:18:11","nodeType":"VariableDeclaration","scope":3650,"src":"4780:34:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_memory_ptr","typeString":"bytes4[]"},"typeName":{"baseType":{"id":3549,"name":"bytes4","nodeType":"ElementaryTypeName","src":"4780:6:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":3550,"nodeType":"ArrayTypeName","src":"4780:8:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_storage_ptr","typeString":"bytes4[]"}},"visibility":"internal"}],"src":"4756:59:11"},"returnParameters":{"id":3553,"nodeType":"ParameterList","parameters":[],"src":"4825:0:11"},"scope":4053,"src":"4731:1138:11","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3714,"nodeType":"Block","src":"5968:649:11","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3662,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3659,"name":"_functionSelectors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3655,"src":"5986:18:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_memory_ptr","typeString":"bytes4[] memory"}},"id":3660,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"5986:25:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3661,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6014:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5986:29:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4c69624469616d6f6e644375743a204e6f2073656c6563746f727320696e20666163657420746f20637574","id":3663,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6017:45:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_1ffc682bcfedefd5e93ba9ed0c2d1bc0b18319886e3b4bd28a03a3d3729f85c0","typeString":"literal_string \"LibDiamondCut: No selectors in facet to cut\""},"value":"LibDiamondCut: No selectors in facet to cut"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1ffc682bcfedefd5e93ba9ed0c2d1bc0b18319886e3b4bd28a03a3d3729f85c0","typeString":"literal_string \"LibDiamondCut: No selectors in facet to cut\""}],"id":3658,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5978:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3664,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5978:85:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3665,"nodeType":"ExpressionStatement","src":"5978:85:11"},{"assignments":[3668],"declarations":[{"constant":false,"id":3668,"mutability":"mutable","name":"ds","nameLocation":"6096:2:11","nodeType":"VariableDeclaration","scope":3714,"src":"6073:25:11","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3259_storage_ptr","typeString":"struct LibDiamond.DiamondStorage"},"typeName":{"id":3667,"nodeType":"UserDefinedTypeName","pathNode":{"id":3666,"name":"DiamondStorage","nodeType":"IdentifierPath","referencedDeclaration":3259,"src":"6073:14:11"},"referencedDeclaration":3259,"src":"6073:14:11","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3259_storage_ptr","typeString":"struct LibDiamond.DiamondStorage"}},"visibility":"internal"}],"id":3671,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":3669,"name":"diamondStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3271,"src":"6101:14:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_DiamondStorage_$3259_storage_ptr_$","typeString":"function () pure returns (struct LibDiamond.DiamondStorage storage pointer)"}},"id":3670,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6101:16:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3259_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"6073:44:11"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3678,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3673,"name":"_facetAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3652,"src":"6200:13:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":3676,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6225:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3675,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6217:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3674,"name":"address","nodeType":"ElementaryTypeName","src":"6217:7:11","typeDescriptions":{}}},"id":3677,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6217:10:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6200:27:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4c69624469616d6f6e644375743a2052656d6f76652066616365742061646472657373206d7573742062652061646472657373283029","id":3679,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6229:56:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_b739aae768f79b96e91d9f66398733516895e39eb09ee54a795b49dcc77504d4","typeString":"literal_string \"LibDiamondCut: Remove facet address must be address(0)\""},"value":"LibDiamondCut: Remove facet address must be address(0)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b739aae768f79b96e91d9f66398733516895e39eb09ee54a795b49dcc77504d4","typeString":"literal_string \"LibDiamondCut: Remove facet address must be address(0)\""}],"id":3672,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6192:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3680,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6192:94:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3681,"nodeType":"ExpressionStatement","src":"6192:94:11"},{"body":{"id":3712,"nodeType":"Block","src":"6384:227:11","statements":[{"assignments":[3693],"declarations":[{"constant":false,"id":3693,"mutability":"mutable","name":"selector","nameLocation":"6405:8:11","nodeType":"VariableDeclaration","scope":3712,"src":"6398:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3692,"name":"bytes4","nodeType":"ElementaryTypeName","src":"6398:6:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"id":3697,"initialValue":{"baseExpression":{"id":3694,"name":"_functionSelectors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3655,"src":"6416:18:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_memory_ptr","typeString":"bytes4[] memory"}},"id":3696,"indexExpression":{"id":3695,"name":"selectorIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3683,"src":"6435:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6416:33:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"VariableDeclarationStatement","src":"6398:51:11"},{"assignments":[3699],"declarations":[{"constant":false,"id":3699,"mutability":"mutable","name":"oldFacetAddress","nameLocation":"6471:15:11","nodeType":"VariableDeclaration","scope":3712,"src":"6463:23:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3698,"name":"address","nodeType":"ElementaryTypeName","src":"6463:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3705,"initialValue":{"expression":{"baseExpression":{"expression":{"id":3700,"name":"ds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3668,"src":"6489:2:11","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3259_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"}},"id":3701,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"selectorToFacetAndPosition","nodeType":"MemberAccess","referencedDeclaration":3244,"src":"6489:29:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_struct$_FacetAddressAndPosition_$3233_storage_$","typeString":"mapping(bytes4 => struct LibDiamond.FacetAddressAndPosition storage ref)"}},"id":3703,"indexExpression":{"id":3702,"name":"selector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3693,"src":"6519:8:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6489:39:11","typeDescriptions":{"typeIdentifier":"t_struct$_FacetAddressAndPosition_$3233_storage","typeString":"struct LibDiamond.FacetAddressAndPosition storage ref"}},"id":3704,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"facetAddress","nodeType":"MemberAccess","referencedDeclaration":3230,"src":"6489:52:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"6463:78:11"},{"expression":{"arguments":[{"id":3707,"name":"ds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3668,"src":"6570:2:11","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3259_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"}},{"id":3708,"name":"oldFacetAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3699,"src":"6574:15:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3709,"name":"selector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3693,"src":"6591:8:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_DiamondStorage_$3259_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"id":3706,"name":"removeFunction","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3956,"src":"6555:14:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_DiamondStorage_$3259_storage_ptr_$_t_address_$_t_bytes4_$returns$__$","typeString":"function (struct LibDiamond.DiamondStorage storage pointer,address,bytes4)"}},"id":3710,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6555:45:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3711,"nodeType":"ExpressionStatement","src":"6555:45:11"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3688,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3685,"name":"selectorIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3683,"src":"6324:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":3686,"name":"_functionSelectors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3655,"src":"6340:18:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_memory_ptr","typeString":"bytes4[] memory"}},"id":3687,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"6340:25:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6324:41:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3713,"initializationExpression":{"assignments":[3683],"declarations":[{"constant":false,"id":3683,"mutability":"mutable","name":"selectorIndex","nameLocation":"6309:13:11","nodeType":"VariableDeclaration","scope":3713,"src":"6301:21:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3682,"name":"uint256","nodeType":"ElementaryTypeName","src":"6301:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3684,"nodeType":"VariableDeclarationStatement","src":"6301:21:11"},"loopExpression":{"expression":{"id":3690,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6367:15:11","subExpression":{"id":3689,"name":"selectorIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3683,"src":"6367:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3691,"nodeType":"ExpressionStatement","src":"6367:15:11"},"nodeType":"ForStatement","src":"6296:315:11"}]},"id":3715,"implemented":true,"kind":"function","modifiers":[],"name":"removeFunctions","nameLocation":"5884:15:11","nodeType":"FunctionDefinition","parameters":{"id":3656,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3652,"mutability":"mutable","name":"_facetAddress","nameLocation":"5908:13:11","nodeType":"VariableDeclaration","scope":3715,"src":"5900:21:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3651,"name":"address","nodeType":"ElementaryTypeName","src":"5900:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3655,"mutability":"mutable","name":"_functionSelectors","nameLocation":"5939:18:11","nodeType":"VariableDeclaration","scope":3715,"src":"5923:34:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_memory_ptr","typeString":"bytes4[]"},"typeName":{"baseType":{"id":3653,"name":"bytes4","nodeType":"ElementaryTypeName","src":"5923:6:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":3654,"nodeType":"ArrayTypeName","src":"5923:8:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_storage_ptr","typeString":"bytes4[]"}},"visibility":"internal"}],"src":"5899:59:11"},"returnParameters":{"id":3657,"nodeType":"ParameterList","parameters":[],"src":"5968:0:11"},"scope":4053,"src":"5875:742:11","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3747,"nodeType":"Block","src":"6700:239:11","statements":[{"expression":{"arguments":[{"id":3724,"name":"_facetAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3720,"src":"6733:13:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"4c69624469616d6f6e644375743a204e657720666163657420686173206e6f20636f6465","id":3725,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6748:38:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_846ccbeb9c32d4d40d2c1bf991251db6ab65744a2f52b273947cee088a65504b","typeString":"literal_string \"LibDiamondCut: New facet has no code\""},"value":"LibDiamondCut: New facet has no code"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_stringliteral_846ccbeb9c32d4d40d2c1bf991251db6ab65744a2f52b273947cee088a65504b","typeString":"literal_string \"LibDiamondCut: New facet has no code\""}],"id":3723,"name":"enforceHasContractCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4052,"src":"6710:22:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_string_memory_ptr_$returns$__$","typeString":"function (address,string memory) view"}},"id":3726,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6710:77:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3727,"nodeType":"ExpressionStatement","src":"6710:77:11"},{"expression":{"id":3737,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"expression":{"id":3728,"name":"ds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3718,"src":"6797:2:11","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3259_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"}},"id":3731,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"facetFunctionSelectors","nodeType":"MemberAccess","referencedDeclaration":3249,"src":"6797:25:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_FacetFunctionSelectors_$3239_storage_$","typeString":"mapping(address => struct LibDiamond.FacetFunctionSelectors storage ref)"}},"id":3732,"indexExpression":{"id":3730,"name":"_facetAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3720,"src":"6823:13:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6797:40:11","typeDescriptions":{"typeIdentifier":"t_struct$_FacetFunctionSelectors_$3239_storage","typeString":"struct LibDiamond.FacetFunctionSelectors storage ref"}},"id":3733,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"facetAddressPosition","nodeType":"MemberAccess","referencedDeclaration":3238,"src":"6797:61:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"expression":{"id":3734,"name":"ds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3718,"src":"6861:2:11","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3259_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"}},"id":3735,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"facetAddresses","nodeType":"MemberAccess","referencedDeclaration":3252,"src":"6861:17:11","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":3736,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"6861:24:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6797:88:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3738,"nodeType":"ExpressionStatement","src":"6797:88:11"},{"expression":{"arguments":[{"id":3744,"name":"_facetAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3720,"src":"6918:13:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"expression":{"id":3739,"name":"ds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3718,"src":"6895:2:11","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3259_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"}},"id":3742,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"facetAddresses","nodeType":"MemberAccess","referencedDeclaration":3252,"src":"6895:17:11","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":3743,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"push","nodeType":"MemberAccess","src":"6895:22:11","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_address_$dyn_storage_ptr_$_t_address_$returns$__$bound_to$_t_array$_t_address_$dyn_storage_ptr_$","typeString":"function (address[] storage pointer,address)"}},"id":3745,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6895:37:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3746,"nodeType":"ExpressionStatement","src":"6895:37:11"}]},"id":3748,"implemented":true,"kind":"function","modifiers":[],"name":"addFacet","nameLocation":"6632:8:11","nodeType":"FunctionDefinition","parameters":{"id":3721,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3718,"mutability":"mutable","name":"ds","nameLocation":"6664:2:11","nodeType":"VariableDeclaration","scope":3748,"src":"6641:25:11","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3259_storage_ptr","typeString":"struct LibDiamond.DiamondStorage"},"typeName":{"id":3717,"nodeType":"UserDefinedTypeName","pathNode":{"id":3716,"name":"DiamondStorage","nodeType":"IdentifierPath","referencedDeclaration":3259,"src":"6641:14:11"},"referencedDeclaration":3259,"src":"6641:14:11","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3259_storage_ptr","typeString":"struct LibDiamond.DiamondStorage"}},"visibility":"internal"},{"constant":false,"id":3720,"mutability":"mutable","name":"_facetAddress","nameLocation":"6676:13:11","nodeType":"VariableDeclaration","scope":3748,"src":"6668:21:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3719,"name":"address","nodeType":"ElementaryTypeName","src":"6668:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6640:50:11"},"returnParameters":{"id":3722,"nodeType":"ParameterList","parameters":[],"src":"6700:0:11"},"scope":4053,"src":"6623:316:11","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3788,"nodeType":"Block","src":"7074:265:11","statements":[{"expression":{"id":3767,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"expression":{"id":3760,"name":"ds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3751,"src":"7084:2:11","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3259_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"}},"id":3763,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"selectorToFacetAndPosition","nodeType":"MemberAccess","referencedDeclaration":3244,"src":"7084:29:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_struct$_FacetAddressAndPosition_$3233_storage_$","typeString":"mapping(bytes4 => struct LibDiamond.FacetAddressAndPosition storage ref)"}},"id":3764,"indexExpression":{"id":3762,"name":"_selector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3753,"src":"7114:9:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7084:40:11","typeDescriptions":{"typeIdentifier":"t_struct$_FacetAddressAndPosition_$3233_storage","typeString":"struct LibDiamond.FacetAddressAndPosition storage ref"}},"id":3765,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"functionSelectorPosition","nodeType":"MemberAccess","referencedDeclaration":3232,"src":"7084:65:11","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3766,"name":"_selectorPosition","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3755,"src":"7152:17:11","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"src":"7084:85:11","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"id":3768,"nodeType":"ExpressionStatement","src":"7084:85:11"},{"expression":{"arguments":[{"id":3776,"name":"_selector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3753,"src":"7243:9:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"expression":{"baseExpression":{"expression":{"id":3769,"name":"ds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3751,"src":"7179:2:11","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3259_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"}},"id":3772,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"facetFunctionSelectors","nodeType":"MemberAccess","referencedDeclaration":3249,"src":"7179:25:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_FacetFunctionSelectors_$3239_storage_$","typeString":"mapping(address => struct LibDiamond.FacetFunctionSelectors storage ref)"}},"id":3773,"indexExpression":{"id":3771,"name":"_facetAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3757,"src":"7205:13:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7179:40:11","typeDescriptions":{"typeIdentifier":"t_struct$_FacetFunctionSelectors_$3239_storage","typeString":"struct LibDiamond.FacetFunctionSelectors storage ref"}},"id":3774,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"functionSelectors","nodeType":"MemberAccess","referencedDeclaration":3236,"src":"7179:58:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_storage","typeString":"bytes4[] storage ref"}},"id":3775,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"push","nodeType":"MemberAccess","src":"7179:63:11","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_bytes4_$dyn_storage_ptr_$_t_bytes4_$returns$__$bound_to$_t_array$_t_bytes4_$dyn_storage_ptr_$","typeString":"function (bytes4[] storage pointer,bytes4)"}},"id":3777,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7179:74:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3778,"nodeType":"ExpressionStatement","src":"7179:74:11"},{"expression":{"id":3786,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"expression":{"id":3779,"name":"ds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3751,"src":"7263:2:11","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3259_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"}},"id":3782,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"selectorToFacetAndPosition","nodeType":"MemberAccess","referencedDeclaration":3244,"src":"7263:29:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_struct$_FacetAddressAndPosition_$3233_storage_$","typeString":"mapping(bytes4 => struct LibDiamond.FacetAddressAndPosition storage ref)"}},"id":3783,"indexExpression":{"id":3781,"name":"_selector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3753,"src":"7293:9:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7263:40:11","typeDescriptions":{"typeIdentifier":"t_struct$_FacetAddressAndPosition_$3233_storage","typeString":"struct LibDiamond.FacetAddressAndPosition storage ref"}},"id":3784,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"facetAddress","nodeType":"MemberAccess","referencedDeclaration":3230,"src":"7263:53:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3785,"name":"_facetAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3757,"src":"7319:13:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7263:69:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3787,"nodeType":"ExpressionStatement","src":"7263:69:11"}]},"id":3789,"implemented":true,"kind":"function","modifiers":[],"name":"addFunction","nameLocation":"6959:11:11","nodeType":"FunctionDefinition","parameters":{"id":3758,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3751,"mutability":"mutable","name":"ds","nameLocation":"6994:2:11","nodeType":"VariableDeclaration","scope":3789,"src":"6971:25:11","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3259_storage_ptr","typeString":"struct LibDiamond.DiamondStorage"},"typeName":{"id":3750,"nodeType":"UserDefinedTypeName","pathNode":{"id":3749,"name":"DiamondStorage","nodeType":"IdentifierPath","referencedDeclaration":3259,"src":"6971:14:11"},"referencedDeclaration":3259,"src":"6971:14:11","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3259_storage_ptr","typeString":"struct LibDiamond.DiamondStorage"}},"visibility":"internal"},{"constant":false,"id":3753,"mutability":"mutable","name":"_selector","nameLocation":"7005:9:11","nodeType":"VariableDeclaration","scope":3789,"src":"6998:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3752,"name":"bytes4","nodeType":"ElementaryTypeName","src":"6998:6:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"},{"constant":false,"id":3755,"mutability":"mutable","name":"_selectorPosition","nameLocation":"7023:17:11","nodeType":"VariableDeclaration","scope":3789,"src":"7016:24:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":3754,"name":"uint96","nodeType":"ElementaryTypeName","src":"7016:6:11","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"},{"constant":false,"id":3757,"mutability":"mutable","name":"_facetAddress","nameLocation":"7050:13:11","nodeType":"VariableDeclaration","scope":3789,"src":"7042:21:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3756,"name":"address","nodeType":"ElementaryTypeName","src":"7042:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6970:94:11"},"returnParameters":{"id":3759,"nodeType":"ParameterList","parameters":[],"src":"7074:0:11"},"scope":4053,"src":"6950:389:11","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3955,"nodeType":"Block","src":"7446:2089:11","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3805,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3800,"name":"_facetAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3794,"src":"7472:13:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3803,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7497:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3802,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7489:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3801,"name":"address","nodeType":"ElementaryTypeName","src":"7489:7:11","typeDescriptions":{}}},"id":3804,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7489:10:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7472:27:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4c69624469616d6f6e644375743a2043616e27742072656d6f76652066756e6374696f6e207468617420646f65736e2774206578697374","id":3806,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7501:57:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_2c590e498c4d56c984a7092fd5e89a68b9f4541ce9f97252fb74e44a00ffbb71","typeString":"literal_string \"LibDiamondCut: Can't remove function that doesn't exist\""},"value":"LibDiamondCut: Can't remove function that doesn't exist"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2c590e498c4d56c984a7092fd5e89a68b9f4541ce9f97252fb74e44a00ffbb71","typeString":"literal_string \"LibDiamondCut: Can't remove function that doesn't exist\""}],"id":3799,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7464:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3807,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7464:95:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3808,"nodeType":"ExpressionStatement","src":"7464:95:11"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3815,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3810,"name":"_facetAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3794,"src":"7654:13:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"id":3813,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"7679:4:11","typeDescriptions":{"typeIdentifier":"t_contract$_LibDiamond_$4053","typeString":"library LibDiamond"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_LibDiamond_$4053","typeString":"library LibDiamond"}],"id":3812,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7671:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3811,"name":"address","nodeType":"ElementaryTypeName","src":"7671:7:11","typeDescriptions":{}}},"id":3814,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7671:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7654:30:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4c69624469616d6f6e644375743a2043616e27742072656d6f766520696d6d757461626c652066756e6374696f6e","id":3816,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7686:48:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_8ba063dfaa4be2d2cbe73dbb1364728b0f7031ac048441d5fad19e9541992b21","typeString":"literal_string \"LibDiamondCut: Can't remove immutable function\""},"value":"LibDiamondCut: Can't remove immutable function"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8ba063dfaa4be2d2cbe73dbb1364728b0f7031ac048441d5fad19e9541992b21","typeString":"literal_string \"LibDiamondCut: Can't remove immutable function\""}],"id":3809,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7646:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3817,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7646:89:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3818,"nodeType":"ExpressionStatement","src":"7646:89:11"},{"assignments":[3820],"declarations":[{"constant":false,"id":3820,"mutability":"mutable","name":"selectorPosition","nameLocation":"7827:16:11","nodeType":"VariableDeclaration","scope":3955,"src":"7819:24:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3819,"name":"uint256","nodeType":"ElementaryTypeName","src":"7819:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3826,"initialValue":{"expression":{"baseExpression":{"expression":{"id":3821,"name":"ds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3792,"src":"7846:2:11","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3259_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"}},"id":3822,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"selectorToFacetAndPosition","nodeType":"MemberAccess","referencedDeclaration":3244,"src":"7846:29:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_struct$_FacetAddressAndPosition_$3233_storage_$","typeString":"mapping(bytes4 => struct LibDiamond.FacetAddressAndPosition storage ref)"}},"id":3824,"indexExpression":{"id":3823,"name":"_selector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3796,"src":"7876:9:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7846:40:11","typeDescriptions":{"typeIdentifier":"t_struct$_FacetAddressAndPosition_$3233_storage","typeString":"struct LibDiamond.FacetAddressAndPosition storage ref"}},"id":3825,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"functionSelectorPosition","nodeType":"MemberAccess","referencedDeclaration":3232,"src":"7846:65:11","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"nodeType":"VariableDeclarationStatement","src":"7819:92:11"},{"assignments":[3828],"declarations":[{"constant":false,"id":3828,"mutability":"mutable","name":"lastSelectorPosition","nameLocation":"7929:20:11","nodeType":"VariableDeclaration","scope":3955,"src":"7921:28:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3827,"name":"uint256","nodeType":"ElementaryTypeName","src":"7921:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3837,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3836,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"baseExpression":{"expression":{"id":3829,"name":"ds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3792,"src":"7952:2:11","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3259_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"}},"id":3830,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"facetFunctionSelectors","nodeType":"MemberAccess","referencedDeclaration":3249,"src":"7952:25:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_FacetFunctionSelectors_$3239_storage_$","typeString":"mapping(address => struct LibDiamond.FacetFunctionSelectors storage ref)"}},"id":3832,"indexExpression":{"id":3831,"name":"_facetAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3794,"src":"7978:13:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7952:40:11","typeDescriptions":{"typeIdentifier":"t_struct$_FacetFunctionSelectors_$3239_storage","typeString":"struct LibDiamond.FacetFunctionSelectors storage ref"}},"id":3833,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"functionSelectors","nodeType":"MemberAccess","referencedDeclaration":3236,"src":"7952:58:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_storage","typeString":"bytes4[] storage ref"}},"id":3834,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"7952:65:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":3835,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8020:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7952:69:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7921:100:11"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3840,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3838,"name":"selectorPosition","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3820,"src":"8103:16:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":3839,"name":"lastSelectorPosition","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3828,"src":"8123:20:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8103:40:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3875,"nodeType":"IfStatement","src":"8099:387:11","trueBody":{"id":3874,"nodeType":"Block","src":"8145:341:11","statements":[{"assignments":[3842],"declarations":[{"constant":false,"id":3842,"mutability":"mutable","name":"lastSelector","nameLocation":"8166:12:11","nodeType":"VariableDeclaration","scope":3874,"src":"8159:19:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3841,"name":"bytes4","nodeType":"ElementaryTypeName","src":"8159:6:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"id":3850,"initialValue":{"baseExpression":{"expression":{"baseExpression":{"expression":{"id":3843,"name":"ds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3792,"src":"8181:2:11","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3259_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"}},"id":3844,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"facetFunctionSelectors","nodeType":"MemberAccess","referencedDeclaration":3249,"src":"8181:25:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_FacetFunctionSelectors_$3239_storage_$","typeString":"mapping(address => struct LibDiamond.FacetFunctionSelectors storage ref)"}},"id":3846,"indexExpression":{"id":3845,"name":"_facetAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3794,"src":"8207:13:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8181:40:11","typeDescriptions":{"typeIdentifier":"t_struct$_FacetFunctionSelectors_$3239_storage","typeString":"struct LibDiamond.FacetFunctionSelectors storage ref"}},"id":3847,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"functionSelectors","nodeType":"MemberAccess","referencedDeclaration":3236,"src":"8181:58:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_storage","typeString":"bytes4[] storage ref"}},"id":3849,"indexExpression":{"id":3848,"name":"lastSelectorPosition","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3828,"src":"8240:20:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8181:80:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"VariableDeclarationStatement","src":"8159:102:11"},{"expression":{"id":3860,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"baseExpression":{"expression":{"id":3851,"name":"ds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3792,"src":"8275:2:11","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3259_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"}},"id":3854,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"facetFunctionSelectors","nodeType":"MemberAccess","referencedDeclaration":3249,"src":"8275:25:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_FacetFunctionSelectors_$3239_storage_$","typeString":"mapping(address => struct LibDiamond.FacetFunctionSelectors storage ref)"}},"id":3855,"indexExpression":{"id":3853,"name":"_facetAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3794,"src":"8301:13:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8275:40:11","typeDescriptions":{"typeIdentifier":"t_struct$_FacetFunctionSelectors_$3239_storage","typeString":"struct LibDiamond.FacetFunctionSelectors storage ref"}},"id":3856,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"functionSelectors","nodeType":"MemberAccess","referencedDeclaration":3236,"src":"8275:58:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_storage","typeString":"bytes4[] storage ref"}},"id":3858,"indexExpression":{"id":3857,"name":"selectorPosition","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3820,"src":"8334:16:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8275:76:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3859,"name":"lastSelector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3842,"src":"8354:12:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"8275:91:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":3861,"nodeType":"ExpressionStatement","src":"8275:91:11"},{"expression":{"id":3872,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"expression":{"id":3862,"name":"ds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3792,"src":"8380:2:11","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3259_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"}},"id":3865,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"selectorToFacetAndPosition","nodeType":"MemberAccess","referencedDeclaration":3244,"src":"8380:29:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_struct$_FacetAddressAndPosition_$3233_storage_$","typeString":"mapping(bytes4 => struct LibDiamond.FacetAddressAndPosition storage ref)"}},"id":3866,"indexExpression":{"id":3864,"name":"lastSelector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3842,"src":"8410:12:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8380:43:11","typeDescriptions":{"typeIdentifier":"t_struct$_FacetAddressAndPosition_$3233_storage","typeString":"struct LibDiamond.FacetAddressAndPosition storage ref"}},"id":3867,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"functionSelectorPosition","nodeType":"MemberAccess","referencedDeclaration":3232,"src":"8380:68:11","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":3870,"name":"selectorPosition","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3820,"src":"8458:16:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3869,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8451:6:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint96_$","typeString":"type(uint96)"},"typeName":{"id":3868,"name":"uint96","nodeType":"ElementaryTypeName","src":"8451:6:11","typeDescriptions":{}}},"id":3871,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8451:24:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"src":"8380:95:11","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"id":3873,"nodeType":"ExpressionStatement","src":"8380:95:11"}]}},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"expression":{"baseExpression":{"expression":{"id":3876,"name":"ds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3792,"src":"8531:2:11","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3259_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"}},"id":3879,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"facetFunctionSelectors","nodeType":"MemberAccess","referencedDeclaration":3249,"src":"8531:25:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_FacetFunctionSelectors_$3239_storage_$","typeString":"mapping(address => struct LibDiamond.FacetFunctionSelectors storage ref)"}},"id":3880,"indexExpression":{"id":3878,"name":"_facetAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3794,"src":"8557:13:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8531:40:11","typeDescriptions":{"typeIdentifier":"t_struct$_FacetFunctionSelectors_$3239_storage","typeString":"struct LibDiamond.FacetFunctionSelectors storage ref"}},"id":3881,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"functionSelectors","nodeType":"MemberAccess","referencedDeclaration":3236,"src":"8531:58:11","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_storage","typeString":"bytes4[] storage ref"}},"id":3882,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"pop","nodeType":"MemberAccess","src":"8531:62:11","typeDescriptions":{"typeIdentifier":"t_function_arraypop_nonpayable$_t_array$_t_bytes4_$dyn_storage_ptr_$returns$__$bound_to$_t_array$_t_bytes4_$dyn_storage_ptr_$","typeString":"function (bytes4[] storage pointer)"}},"id":3883,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8531:64:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3884,"nodeType":"ExpressionStatement","src":"8531:64:11"},{"expression":{"id":3889,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"8605:47:11","subExpression":{"baseExpression":{"expression":{"id":3885,"name":"ds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3792,"src":"8612:2:11","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3259_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"}},"id":3886,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"selectorToFacetAndPosition","nodeType":"MemberAccess","referencedDeclaration":3244,"src":"8612:29:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_struct$_FacetAddressAndPosition_$3233_storage_$","typeString":"mapping(bytes4 => struct LibDiamond.FacetAddressAndPosition storage ref)"}},"id":3888,"indexExpression":{"id":3887,"name":"_selector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3796,"src":"8642:9:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8612:40:11","typeDescriptions":{"typeIdentifier":"t_struct$_FacetAddressAndPosition_$3233_storage","typeString":"struct LibDiamond.FacetAddressAndPosition storage ref"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3890,"nodeType":"ExpressionStatement","src":"8605:47:11"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3893,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3891,"name":"lastSelectorPosition","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3828,"src":"8747:20:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3892,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8771:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8747:25:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3954,"nodeType":"IfStatement","src":"8743:786:11","trueBody":{"id":3953,"nodeType":"Block","src":"8774:755:11","statements":[{"assignments":[3895],"declarations":[{"constant":false,"id":3895,"mutability":"mutable","name":"lastFacetAddressPosition","nameLocation":"8887:24:11","nodeType":"VariableDeclaration","scope":3953,"src":"8879:32:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3894,"name":"uint256","nodeType":"ElementaryTypeName","src":"8879:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3901,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3900,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":3896,"name":"ds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3792,"src":"8914:2:11","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3259_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"}},"id":3897,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"facetAddresses","nodeType":"MemberAccess","referencedDeclaration":3252,"src":"8914:17:11","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":3898,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"8914:24:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":3899,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8941:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8914:28:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8879:63:11"},{"assignments":[3903],"declarations":[{"constant":false,"id":3903,"mutability":"mutable","name":"facetAddressPosition","nameLocation":"8964:20:11","nodeType":"VariableDeclaration","scope":3953,"src":"8956:28:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3902,"name":"uint256","nodeType":"ElementaryTypeName","src":"8956:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3909,"initialValue":{"expression":{"baseExpression":{"expression":{"id":3904,"name":"ds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3792,"src":"8987:2:11","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3259_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"}},"id":3905,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"facetFunctionSelectors","nodeType":"MemberAccess","referencedDeclaration":3249,"src":"8987:25:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_FacetFunctionSelectors_$3239_storage_$","typeString":"mapping(address => struct LibDiamond.FacetFunctionSelectors storage ref)"}},"id":3907,"indexExpression":{"id":3906,"name":"_facetAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3794,"src":"9013:13:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8987:40:11","typeDescriptions":{"typeIdentifier":"t_struct$_FacetFunctionSelectors_$3239_storage","typeString":"struct LibDiamond.FacetFunctionSelectors storage ref"}},"id":3908,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"facetAddressPosition","nodeType":"MemberAccess","referencedDeclaration":3238,"src":"8987:61:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8956:92:11"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3912,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3910,"name":"facetAddressPosition","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3903,"src":"9066:20:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":3911,"name":"lastFacetAddressPosition","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3895,"src":"9090:24:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9066:48:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3938,"nodeType":"IfStatement","src":"9062:338:11","trueBody":{"id":3937,"nodeType":"Block","src":"9116:284:11","statements":[{"assignments":[3914],"declarations":[{"constant":false,"id":3914,"mutability":"mutable","name":"lastFacetAddress","nameLocation":"9142:16:11","nodeType":"VariableDeclaration","scope":3937,"src":"9134:24:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3913,"name":"address","nodeType":"ElementaryTypeName","src":"9134:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3919,"initialValue":{"baseExpression":{"expression":{"id":3915,"name":"ds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3792,"src":"9161:2:11","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3259_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"}},"id":3916,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"facetAddresses","nodeType":"MemberAccess","referencedDeclaration":3252,"src":"9161:17:11","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":3918,"indexExpression":{"id":3917,"name":"lastFacetAddressPosition","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3895,"src":"9179:24:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9161:43:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"9134:70:11"},{"expression":{"id":3926,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":3920,"name":"ds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3792,"src":"9222:2:11","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3259_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"}},"id":3923,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"facetAddresses","nodeType":"MemberAccess","referencedDeclaration":3252,"src":"9222:17:11","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":3924,"indexExpression":{"id":3922,"name":"facetAddressPosition","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3903,"src":"9240:20:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9222:39:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3925,"name":"lastFacetAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3914,"src":"9264:16:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9222:58:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3927,"nodeType":"ExpressionStatement","src":"9222:58:11"},{"expression":{"id":3935,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"expression":{"id":3928,"name":"ds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3792,"src":"9298:2:11","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3259_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"}},"id":3931,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"facetFunctionSelectors","nodeType":"MemberAccess","referencedDeclaration":3249,"src":"9298:25:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_FacetFunctionSelectors_$3239_storage_$","typeString":"mapping(address => struct LibDiamond.FacetFunctionSelectors storage ref)"}},"id":3932,"indexExpression":{"id":3930,"name":"lastFacetAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3914,"src":"9324:16:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9298:43:11","typeDescriptions":{"typeIdentifier":"t_struct$_FacetFunctionSelectors_$3239_storage","typeString":"struct LibDiamond.FacetFunctionSelectors storage ref"}},"id":3933,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"facetAddressPosition","nodeType":"MemberAccess","referencedDeclaration":3238,"src":"9298:64:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3934,"name":"facetAddressPosition","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3903,"src":"9365:20:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9298:87:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3936,"nodeType":"ExpressionStatement","src":"9298:87:11"}]}},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"expression":{"id":3939,"name":"ds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3792,"src":"9413:2:11","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3259_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"}},"id":3942,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"facetAddresses","nodeType":"MemberAccess","referencedDeclaration":3252,"src":"9413:17:11","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":3943,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"pop","nodeType":"MemberAccess","src":"9413:21:11","typeDescriptions":{"typeIdentifier":"t_function_arraypop_nonpayable$_t_array$_t_address_$dyn_storage_ptr_$returns$__$bound_to$_t_array$_t_address_$dyn_storage_ptr_$","typeString":"function (address[] storage pointer)"}},"id":3944,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9413:23:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3945,"nodeType":"ExpressionStatement","src":"9413:23:11"},{"expression":{"id":3951,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"9450:68:11","subExpression":{"expression":{"baseExpression":{"expression":{"id":3946,"name":"ds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3792,"src":"9457:2:11","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3259_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"}},"id":3947,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"facetFunctionSelectors","nodeType":"MemberAccess","referencedDeclaration":3249,"src":"9457:25:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_FacetFunctionSelectors_$3239_storage_$","typeString":"mapping(address => struct LibDiamond.FacetFunctionSelectors storage ref)"}},"id":3949,"indexExpression":{"id":3948,"name":"_facetAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3794,"src":"9483:13:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9457:40:11","typeDescriptions":{"typeIdentifier":"t_struct$_FacetFunctionSelectors_$3239_storage","typeString":"struct LibDiamond.FacetFunctionSelectors storage ref"}},"id":3950,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"facetAddressPosition","nodeType":"MemberAccess","referencedDeclaration":3238,"src":"9457:61:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3952,"nodeType":"ExpressionStatement","src":"9450:68:11"}]}}]},"id":3956,"implemented":true,"kind":"function","modifiers":[],"name":"removeFunction","nameLocation":"7354:14:11","nodeType":"FunctionDefinition","parameters":{"id":3797,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3792,"mutability":"mutable","name":"ds","nameLocation":"7392:2:11","nodeType":"VariableDeclaration","scope":3956,"src":"7369:25:11","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3259_storage_ptr","typeString":"struct LibDiamond.DiamondStorage"},"typeName":{"id":3791,"nodeType":"UserDefinedTypeName","pathNode":{"id":3790,"name":"DiamondStorage","nodeType":"IdentifierPath","referencedDeclaration":3259,"src":"7369:14:11"},"referencedDeclaration":3259,"src":"7369:14:11","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3259_storage_ptr","typeString":"struct LibDiamond.DiamondStorage"}},"visibility":"internal"},{"constant":false,"id":3794,"mutability":"mutable","name":"_facetAddress","nameLocation":"7404:13:11","nodeType":"VariableDeclaration","scope":3956,"src":"7396:21:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3793,"name":"address","nodeType":"ElementaryTypeName","src":"7396:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3796,"mutability":"mutable","name":"_selector","nameLocation":"7426:9:11","nodeType":"VariableDeclaration","scope":3956,"src":"7419:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3795,"name":"bytes4","nodeType":"ElementaryTypeName","src":"7419:6:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"7368:68:11"},"returnParameters":{"id":3798,"nodeType":"ParameterList","parameters":[],"src":"7446:0:11"},"scope":4053,"src":"7345:2190:11","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4032,"nodeType":"Block","src":"9619:793:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3968,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3963,"name":"_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3958,"src":"9633:5:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":3966,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9650:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3965,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9642:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3964,"name":"address","nodeType":"ElementaryTypeName","src":"9642:7:11","typeDescriptions":{}}},"id":3967,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9642:10:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9633:19:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":4030,"nodeType":"Block","src":"9779:627:11","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3982,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3979,"name":"_calldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3960,"src":"9801:9:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3980,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"9801:16:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3981,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9820:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9801:20:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4c69624469616d6f6e644375743a205f63616c6c6461746120697320656d70747920627574205f696e6974206973206e6f742061646472657373283029","id":3983,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9823:63:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_868d165ec2461661b624442252aed6a645399bfae7b60083a77ea1b61b084042","typeString":"literal_string \"LibDiamondCut: _calldata is empty but _init is not address(0)\""},"value":"LibDiamondCut: _calldata is empty but _init is not address(0)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_868d165ec2461661b624442252aed6a645399bfae7b60083a77ea1b61b084042","typeString":"literal_string \"LibDiamondCut: _calldata is empty but _init is not address(0)\""}],"id":3978,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9793:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3984,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9793:94:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3985,"nodeType":"ExpressionStatement","src":"9793:94:11"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3991,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3986,"name":"_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3958,"src":"9905:5:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"id":3989,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"9922:4:11","typeDescriptions":{"typeIdentifier":"t_contract$_LibDiamond_$4053","typeString":"library LibDiamond"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_LibDiamond_$4053","typeString":"library LibDiamond"}],"id":3988,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9914:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3987,"name":"address","nodeType":"ElementaryTypeName","src":"9914:7:11","typeDescriptions":{}}},"id":3990,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9914:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9905:22:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3998,"nodeType":"IfStatement","src":"9901:134:11","trueBody":{"id":3997,"nodeType":"Block","src":"9929:106:11","statements":[{"expression":{"arguments":[{"id":3993,"name":"_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3958,"src":"9970:5:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"4c69624469616d6f6e644375743a205f696e6974206164647265737320686173206e6f20636f6465","id":3994,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9977:42:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_460f8f0920c649146ef02741816b1cf9ce4f02ea288ceb73adf027cefe9069a0","typeString":"literal_string \"LibDiamondCut: _init address has no code\""},"value":"LibDiamondCut: _init address has no code"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_stringliteral_460f8f0920c649146ef02741816b1cf9ce4f02ea288ceb73adf027cefe9069a0","typeString":"literal_string \"LibDiamondCut: _init address has no code\""}],"id":3992,"name":"enforceHasContractCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4052,"src":"9947:22:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_string_memory_ptr_$returns$__$","typeString":"function (address,string memory) view"}},"id":3995,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9947:73:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3996,"nodeType":"ExpressionStatement","src":"9947:73:11"}]}},{"assignments":[4000,4002],"declarations":[{"constant":false,"id":4000,"mutability":"mutable","name":"success","nameLocation":"10054:7:11","nodeType":"VariableDeclaration","scope":4030,"src":"10049:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3999,"name":"bool","nodeType":"ElementaryTypeName","src":"10049:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":4002,"mutability":"mutable","name":"error","nameLocation":"10076:5:11","nodeType":"VariableDeclaration","scope":4030,"src":"10063:18:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4001,"name":"bytes","nodeType":"ElementaryTypeName","src":"10063:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":4007,"initialValue":{"arguments":[{"id":4005,"name":"_calldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3960,"src":"10104:9:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":4003,"name":"_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3958,"src":"10085:5:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4004,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"delegatecall","nodeType":"MemberAccess","src":"10085:18:11","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":4006,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10085:29:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"10048:66:11"},{"condition":{"id":4009,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"10132:8:11","subExpression":{"id":4008,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4000,"src":"10133:7:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4029,"nodeType":"IfStatement","src":"10128:268:11","trueBody":{"id":4028,"nodeType":"Block","src":"10142:254:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4013,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4010,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4002,"src":"10164:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4011,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"10164:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4012,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10179:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10164:16:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":4026,"nodeType":"Block","src":"10293:89:11","statements":[{"expression":{"arguments":[{"hexValue":"4c69624469616d6f6e644375743a205f696e69742066756e6374696f6e207265766572746564","id":4023,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10322:40:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_080b2fe78815767d522290509c8fce2af708c8a54455ca1b0cc978c92822465d","typeString":"literal_string \"LibDiamondCut: _init function reverted\""},"value":"LibDiamondCut: _init function reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_080b2fe78815767d522290509c8fce2af708c8a54455ca1b0cc978c92822465d","typeString":"literal_string \"LibDiamondCut: _init function reverted\""}],"id":4022,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"10315:6:11","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":4024,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10315:48:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4025,"nodeType":"ExpressionStatement","src":"10315:48:11"}]},"id":4027,"nodeType":"IfStatement","src":"10160:222:11","trueBody":{"id":4021,"nodeType":"Block","src":"10182:105:11","statements":[{"expression":{"arguments":[{"arguments":[{"id":4017,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4002,"src":"10261:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4016,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10254:6:11","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":4015,"name":"string","nodeType":"ElementaryTypeName","src":"10254:6:11","typeDescriptions":{}}},"id":4018,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10254:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":4014,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"10247:6:11","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":4019,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10247:21:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4020,"nodeType":"ExpressionStatement","src":"10247:21:11"}]}}]}}]},"id":4031,"nodeType":"IfStatement","src":"9629:777:11","trueBody":{"id":3977,"nodeType":"Block","src":"9654:119:11","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3973,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3970,"name":"_calldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3960,"src":"9676:9:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3971,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"9676:16:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3972,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9696:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9676:21:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4c69624469616d6f6e644375743a205f696e69742069732061646472657373283029206275745f63616c6c64617461206973206e6f7420656d707479","id":3974,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9699:62:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_046c761a688d1dc3c500562bc5aaa3544f01f394f9bb3b69aa2a950a45afb1f8","typeString":"literal_string \"LibDiamondCut: _init is address(0) but_calldata is not empty\""},"value":"LibDiamondCut: _init is address(0) but_calldata is not empty"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_046c761a688d1dc3c500562bc5aaa3544f01f394f9bb3b69aa2a950a45afb1f8","typeString":"literal_string \"LibDiamondCut: _init is address(0) but_calldata is not empty\""}],"id":3969,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9668:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3975,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9668:94:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3976,"nodeType":"ExpressionStatement","src":"9668:94:11"}]}}]},"id":4033,"implemented":true,"kind":"function","modifiers":[],"name":"initializeDiamondCut","nameLocation":"9550:20:11","nodeType":"FunctionDefinition","parameters":{"id":3961,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3958,"mutability":"mutable","name":"_init","nameLocation":"9579:5:11","nodeType":"VariableDeclaration","scope":4033,"src":"9571:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3957,"name":"address","nodeType":"ElementaryTypeName","src":"9571:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3960,"mutability":"mutable","name":"_calldata","nameLocation":"9599:9:11","nodeType":"VariableDeclaration","scope":4033,"src":"9586:22:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3959,"name":"bytes","nodeType":"ElementaryTypeName","src":"9586:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"9570:39:11"},"returnParameters":{"id":3962,"nodeType":"ParameterList","parameters":[],"src":"9619:0:11"},"scope":4053,"src":"9541:871:11","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4051,"nodeType":"Block","src":"10512:167:11","statements":[{"assignments":[4041],"declarations":[{"constant":false,"id":4041,"mutability":"mutable","name":"contractSize","nameLocation":"10530:12:11","nodeType":"VariableDeclaration","scope":4051,"src":"10522:20:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4040,"name":"uint256","nodeType":"ElementaryTypeName","src":"10522:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4042,"nodeType":"VariableDeclarationStatement","src":"10522:20:11"},{"AST":{"nodeType":"YulBlock","src":"10561:62:11","statements":[{"nodeType":"YulAssignment","src":"10575:38:11","value":{"arguments":[{"name":"_contract","nodeType":"YulIdentifier","src":"10603:9:11"}],"functionName":{"name":"extcodesize","nodeType":"YulIdentifier","src":"10591:11:11"},"nodeType":"YulFunctionCall","src":"10591:22:11"},"variableNames":[{"name":"contractSize","nodeType":"YulIdentifier","src":"10575:12:11"}]}]},"evmVersion":"london","externalReferences":[{"declaration":4035,"isOffset":false,"isSlot":false,"src":"10603:9:11","valueSize":1},{"declaration":4041,"isOffset":false,"isSlot":false,"src":"10575:12:11","valueSize":1}],"id":4043,"nodeType":"InlineAssembly","src":"10552:71:11"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4047,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4045,"name":"contractSize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4041,"src":"10640:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4046,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10655:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10640:16:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":4048,"name":"_errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4037,"src":"10658:13:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":4044,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"10632:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4049,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10632:40:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4050,"nodeType":"ExpressionStatement","src":"10632:40:11"}]},"id":4052,"implemented":true,"kind":"function","modifiers":[],"name":"enforceHasContractCode","nameLocation":"10427:22:11","nodeType":"FunctionDefinition","parameters":{"id":4038,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4035,"mutability":"mutable","name":"_contract","nameLocation":"10458:9:11","nodeType":"VariableDeclaration","scope":4052,"src":"10450:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4034,"name":"address","nodeType":"ElementaryTypeName","src":"10450:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4037,"mutability":"mutable","name":"_errorMessage","nameLocation":"10483:13:11","nodeType":"VariableDeclaration","scope":4052,"src":"10469:27:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4036,"name":"string","nodeType":"ElementaryTypeName","src":"10469:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"10449:48:11"},"returnParameters":{"id":4039,"nodeType":"ParameterList","parameters":[],"src":"10512:0:11"},"scope":4053,"src":"10418:261:11","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":4054,"src":"423:10258:11","usedErrors":[]}],"src":"32:10650:11"},"id":11}},"contracts":{"@openzeppelin/contracts/utils/Address.sol":{"Address":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234601757604d9081601e823930815050f35b50600080fdfe6080604052600080fdfea3646970667358221220dcb06e5320399516a9c431aff699ae5a354f27015a4cf8ccd8528fe24b41ce866c6578706572696d656e74616cf564736f6c634300080a0041","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x4D SWAP1 DUP2 PUSH1 0x1E DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST POP PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG3 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDC 0xB0 PUSH15 0x5320399516A9C431AFF699AE5A354F 0x27 ADD GAS 0x4C 0xF8 0xCC 0xD8 MSTORE DUP16 0xE2 0x4B COINBASE 0xCE DUP7 PUSH13 0x6578706572696D656E74616CF5 PUSH5 0x736F6C6343 STOP ADDMOD EXP STOP COINBASE ","sourceMap":"194:9169:0:-:0;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"6080604052600080fdfea3646970667358221220dcb06e5320399516a9c431aff699ae5a354f27015a4cf8ccd8528fe24b41ce866c6578706572696d656e74616cf564736f6c634300080a0041","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG3 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDC 0xB0 PUSH15 0x5320399516A9C431AFF699AE5A354F 0x27 ADD GAS 0x4C 0xF8 0xCC 0xD8 MSTORE DUP16 0xE2 0x4B COINBASE 0xCE DUP7 PUSH13 0x6578706572696D656E74616CF5 PUSH5 0x736F6C6343 STOP ADDMOD EXP STOP COINBASE ","sourceMap":"194:9169:0:-:0;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"15400","executionCost":"infinite","totalCost":"infinite"},"internal":{"_revert(bytes memory,string memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionDelegateCall(address,bytes memory)":"infinite","functionDelegateCall(address,bytes memory,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory,string memory)":"infinite","verifyCallResultFromTarget(address,bool,bytes memory,string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Strings.sol":{"Strings":{"abi":[],"devdoc":{"details":"String operations.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234601757604d9081601e823930815050f35b50600080fdfe6080604052600080fdfea3646970667358221220a41e82795fbd1293de2de86204056efd5dc8e0609f020d64c7a3fa378ed814f66c6578706572696d656e74616cf564736f6c634300080a0041","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x4D SWAP1 DUP2 PUSH1 0x1E DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST POP PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG3 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG4 0x1E DUP3 PUSH26 0x5FBD1293DE2DE86204056EFD5DC8E0609F020D64C7A3FA378ED8 EQ 0xF6 PUSH13 0x6578706572696D656E74616CF5 PUSH5 0x736F6C6343 STOP ADDMOD EXP STOP COINBASE ","sourceMap":"220:2559:1:-:0;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"6080604052600080fdfea3646970667358221220a41e82795fbd1293de2de86204056efd5dc8e0609f020d64c7a3fa378ed814f66c6578706572696d656e74616cf564736f6c634300080a0041","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG3 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG4 0x1E DUP3 PUSH26 0x5FBD1293DE2DE86204056EFD5DC8E0609F020D64C7A3FA378ED8 EQ 0xF6 PUSH13 0x6578706572696D656E74616CF5 PUSH5 0x736F6C6343 STOP ADDMOD EXP STOP COINBASE ","sourceMap":"220:2559:1:-:0;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"15400","executionCost":"infinite","totalCost":"infinite"},"internal":{"equal(string memory,string memory)":"infinite","toHexString(address)":"infinite","toHexString(uint256)":"infinite","toHexString(uint256,uint256)":"infinite","toString(int256)":"infinite","toString(uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/Math.sol":{"Math":{"abi":[],"devdoc":{"details":"Standard math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234601757604d9081601e823930815050f35b50600080fdfe6080604052600080fdfea36469706673582212202de90fe7ae73b3d8275e9f4407e0a29f2813fbc62a27959da9632a7b58dd4ca06c6578706572696d656e74616cf564736f6c634300080a0041","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x4D SWAP1 DUP2 PUSH1 0x1E DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST POP PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG3 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2D 0xE9 0xF 0xE7 0xAE PUSH20 0xB3D8275E9F4407E0A29F2813FBC62A27959DA963 0x2A PUSH28 0x58DD4CA06C6578706572696D656E74616CF564736F6C634300080A00 COINBASE ","sourceMap":"202:12582:2:-:0;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"6080604052600080fdfea36469706673582212202de90fe7ae73b3d8275e9f4407e0a29f2813fbc62a27959da9632a7b58dd4ca06c6578706572696d656e74616cf564736f6c634300080a0041","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG3 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2D 0xE9 0xF 0xE7 0xAE PUSH20 0xB3D8275E9F4407E0A29F2813FBC62A27959DA963 0x2A PUSH28 0x58DD4CA06C6578706572696D656E74616CF564736F6C634300080A00 COINBASE ","sourceMap":"202:12582:2:-:0;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"15400","executionCost":"infinite","totalCost":"infinite"},"internal":{"average(uint256,uint256)":"infinite","ceilDiv(uint256,uint256)":"infinite","log10(uint256)":"infinite","log10(uint256,enum Math.Rounding)":"infinite","log2(uint256)":"infinite","log2(uint256,enum Math.Rounding)":"infinite","log256(uint256)":"infinite","log256(uint256,enum Math.Rounding)":"infinite","max(uint256,uint256)":"infinite","min(uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256,enum Math.Rounding)":"infinite","sqrt(uint256)":"infinite","sqrt(uint256,enum Math.Rounding)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"SignedMath":{"abi":[],"devdoc":{"details":"Standard signed math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234601757604d9081601e823930815050f35b50600080fdfe6080604052600080fdfea36469706673582212205bd26a169a4a0b4860f7cd9cca3aa911c01d42bf586bd94ea044f8ef1a058ab16c6578706572696d656e74616cf564736f6c634300080a0041","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x4D SWAP1 DUP2 PUSH1 0x1E DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST POP PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG3 PUSH5 0x6970667358 0x22 SLT KECCAK256 JUMPDEST 0xD2 PUSH11 0x169A4A0B4860F7CD9CCA3A 0xA9 GT 0xC0 SAR TIMESTAMP 0xBF PC PUSH12 0xD94EA044F8EF1A058AB16C65 PUSH25 0x706572696D656E74616CF564736F6C634300080A0041000000 ","sourceMap":"215:1047:3:-:0;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"6080604052600080fdfea36469706673582212205bd26a169a4a0b4860f7cd9cca3aa911c01d42bf586bd94ea044f8ef1a058ab16c6578706572696d656e74616cf564736f6c634300080a0041","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG3 PUSH5 0x6970667358 0x22 SLT KECCAK256 JUMPDEST 0xD2 PUSH11 0x169A4A0B4860F7CD9CCA3A 0xA9 GT 0xC0 SAR TIMESTAMP 0xBF PC PUSH12 0xD94EA044F8EF1A058AB16C65 PUSH25 0x706572696D656E74616CF564736F6C634300080A0041000000 ","sourceMap":"215:1047:3:-:0;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"15400","executionCost":"infinite","totalCost":"infinite"},"internal":{"abs(int256)":"infinite","average(int256,int256)":"infinite","max(int256,int256)":"infinite","min(int256,int256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard signed math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":\"SignedMath\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/InitFacet.sol":{"InitFacet":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"uint16","name":"currentMonth","type":"uint16"},{"internalType":"uint16","name":"currentYear","type":"uint16"},{"internalType":"bool","name":"isTesting","type":"bool"}],"name":"init","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60806040523461007a577fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c13208054336001600160a01b0319821681179092556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060006080a361037c806100806080396080f35b600080fdfe6080604052600436101561001257600080fd5b6000803560e01c6359259007146100295750600080fd5b346100775760603660031901126100775760043561ffff81168114156100735761005161007a565b6044359081151582141561006d5761006892610093565b604051f35b50505080fd5b5080fd5b80fd5b6024359061ffff821682141561008c57565b5050600080fd5b919060018060a01b037fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c132054163314156100d1576100cf92610145565b565b50505050608460405162461bcd60e51b815260206004820152602c60248201527f4f6e6c79206f776e657220697320616c6c6f77656420746f20706572666f726d60448201526b103a3434b99030b1ba34b7b760a11b6064820152fd5b50634e487b7160e01b600052601160045260246000fd5b6101f892600c926101f19261ffff80958180809416946001861061032b575b1680830482118115151661031e575b02169160001901168094038111610311575b63ffff00007f033cb808a453240b3c9916e6d1ccc504e492e2b2453192ff241c73847a521d06948554920160101b169063ffff000019161783557f033cb808a453240b3c9916e6d1ccc504e492e2b2453192ff241c73847a521d119060ff801983541691151516179055565b5460ff1690565b6100cf577f033cb808a453240b3c9916e6d1ccc504e492e2b2453192ff241c73847a521d06805461ff0019166101001790556307e4c70760e21b6000527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131f60205261028b7ff97e938d8af42f52387bb74b8b526fda8f184cc2aa534340a8d75a88fbecc7755b805460ff19166001179055565b6348e2b09360e01b6000527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131f6020526102e37f65d510a5d8f7ef134ec444f7f34ee808c8eeb5177cdfd16be0c40fe1ab43369561027e565b7f033cb808a453240b3c9916e6d1ccc504e492e2b2453192ff241c73847a521d06805460ff19166001179055565b61031961012e565b610185565b61032661012e565b610173565b61033361012e565b61016456fea3646970667358221220d5915c920c9ac445f36643434e1e12bc9d30857c5193caebe63987bc577bbdb96c6578706572696d656e74616cf564736f6c634300080a0041","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH2 0x7A JUMPI PUSH32 0xC8FCAD8DB84D3CC18B4C41D551EA0EE66DD599CDE068D998E57D5E09332C1320 DUP1 SLOAD CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP3 AND DUP2 OR SWAP1 SWAP3 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x0 PUSH1 0x80 LOG3 PUSH2 0x37C DUP1 PUSH2 0x80 PUSH1 0x80 CODECOPY PUSH1 0x80 RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 CALLDATALOAD PUSH1 0xE0 SHR PUSH4 0x59259007 EQ PUSH2 0x29 JUMPI POP PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x77 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x77 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0xFFFF DUP2 AND DUP2 EQ ISZERO PUSH2 0x73 JUMPI PUSH2 0x51 PUSH2 0x7A JUMP JUMPDEST PUSH1 0x44 CALLDATALOAD SWAP1 DUP2 ISZERO ISZERO DUP3 EQ ISZERO PUSH2 0x6D JUMPI PUSH2 0x68 SWAP3 PUSH2 0x93 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURN JUMPDEST POP POP POP DUP1 REVERT JUMPDEST POP DUP1 REVERT JUMPDEST DUP1 REVERT JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH2 0xFFFF DUP3 AND DUP3 EQ ISZERO PUSH2 0x8C JUMPI JUMP JUMPDEST POP POP PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH32 0xC8FCAD8DB84D3CC18B4C41D551EA0EE66DD599CDE068D998E57D5E09332C1320 SLOAD AND CALLER EQ ISZERO PUSH2 0xD1 JUMPI PUSH2 0xCF SWAP3 PUSH2 0x145 JUMP JUMPDEST JUMP JUMPDEST POP POP POP POP PUSH1 0x84 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F6E6C79206F776E657220697320616C6C6F77656420746F20706572666F726D PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x103A3434B99030B1BA34B7B7 PUSH1 0xA1 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST POP PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x1F8 SWAP3 PUSH1 0xC SWAP3 PUSH2 0x1F1 SWAP3 PUSH2 0xFFFF DUP1 SWAP6 DUP2 DUP1 DUP1 SWAP5 AND SWAP5 PUSH1 0x1 DUP7 LT PUSH2 0x32B JUMPI JUMPDEST AND DUP1 DUP4 DIV DUP3 GT DUP2 ISZERO ISZERO AND PUSH2 0x31E JUMPI JUMPDEST MUL AND SWAP2 PUSH1 0x0 NOT ADD AND DUP1 SWAP5 SUB DUP2 GT PUSH2 0x311 JUMPI JUMPDEST PUSH4 0xFFFF0000 PUSH32 0x33CB808A453240B3C9916E6D1CCC504E492E2B2453192FF241C73847A521D06 SWAP5 DUP6 SLOAD SWAP3 ADD PUSH1 0x10 SHL AND SWAP1 PUSH4 0xFFFF0000 NOT AND OR DUP4 SSTORE PUSH32 0x33CB808A453240B3C9916E6D1CCC504E492E2B2453192FF241C73847A521D11 SWAP1 PUSH1 0xFF DUP1 NOT DUP4 SLOAD AND SWAP2 ISZERO ISZERO AND OR SWAP1 SSTORE JUMP JUMPDEST SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0xCF JUMPI PUSH32 0x33CB808A453240B3C9916E6D1CCC504E492E2B2453192FF241C73847A521D06 DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE PUSH4 0x7E4C707 PUSH1 0xE2 SHL PUSH1 0x0 MSTORE PUSH32 0xC8FCAD8DB84D3CC18B4C41D551EA0EE66DD599CDE068D998E57D5E09332C131F PUSH1 0x20 MSTORE PUSH2 0x28B PUSH32 0xF97E938D8AF42F52387BB74B8B526FDA8F184CC2AA534340A8D75A88FBECC775 JUMPDEST DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE JUMP JUMPDEST PUSH4 0x48E2B093 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH32 0xC8FCAD8DB84D3CC18B4C41D551EA0EE66DD599CDE068D998E57D5E09332C131F PUSH1 0x20 MSTORE PUSH2 0x2E3 PUSH32 0x65D510A5D8F7EF134EC444F7F34EE808C8EEB5177CDFD16BE0C40FE1AB433695 PUSH2 0x27E JUMP JUMPDEST PUSH32 0x33CB808A453240B3C9916E6D1CCC504E492E2B2453192FF241C73847A521D06 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x319 PUSH2 0x12E JUMP JUMPDEST PUSH2 0x185 JUMP JUMPDEST PUSH2 0x326 PUSH2 0x12E JUMP JUMPDEST PUSH2 0x173 JUMP JUMPDEST PUSH2 0x333 PUSH2 0x12E JUMP JUMPDEST PUSH2 0x164 JUMP INVALID LOG3 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD5 SWAP2 0x5C SWAP3 0xC SWAP11 0xC4 GASLIMIT RETURN PUSH7 0x43434E1E12BC9D ADDRESS DUP6 PUSH29 0x5193CAEBE63987BC577BBDB96C6578706572696D656E74616CF564736F PUSH13 0x634300080A0041000000000000 ","sourceMap":"413:913:4:-:0;;;;;;1993:16:11;413:913:4;;530:10;-1:-1:-1;;;;;;413:913:4;;;;;;;-1:-1:-1;;;;;413:913:4;2062:46:11;-1:-1:-1;413:913:4;2062:46:11;413:913:4;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"abi_decode_uint16":{"entryPoint":122,"id":null,"parameterSlots":0,"returnSlots":1},"cleanup_uint8":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"fun_init_inner":{"entryPoint":325,"id":null,"parameterSlots":3,"returnSlots":0},"mapping_index_access_mapping_bytes4_bool_of_bytes4":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":1},"mapping_index_access_mapping_bytes4_bool_of_bytes4_1845":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":1},"modifier_onlyOwner":{"entryPoint":147,"id":3139,"parameterSlots":3,"returnSlots":0},"panic_error_0x11":{"entryPoint":302,"id":null,"parameterSlots":0,"returnSlots":0},"update_storage_value_offsett_bool_to_bool":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"update_storage_value_offsett_bool_to_bool_1846":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":0},"update_storage_value_offsett_bool_to_bool_1849":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"update_storage_value_offsett_bool_to_t_bool":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"6080604052600436101561001257600080fd5b6000803560e01c6359259007146100295750600080fd5b346100775760603660031901126100775760043561ffff81168114156100735761005161007a565b6044359081151582141561006d5761006892610093565b604051f35b50505080fd5b5080fd5b80fd5b6024359061ffff821682141561008c57565b5050600080fd5b919060018060a01b037fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c132054163314156100d1576100cf92610145565b565b50505050608460405162461bcd60e51b815260206004820152602c60248201527f4f6e6c79206f776e657220697320616c6c6f77656420746f20706572666f726d60448201526b103a3434b99030b1ba34b7b760a11b6064820152fd5b50634e487b7160e01b600052601160045260246000fd5b6101f892600c926101f19261ffff80958180809416946001861061032b575b1680830482118115151661031e575b02169160001901168094038111610311575b63ffff00007f033cb808a453240b3c9916e6d1ccc504e492e2b2453192ff241c73847a521d06948554920160101b169063ffff000019161783557f033cb808a453240b3c9916e6d1ccc504e492e2b2453192ff241c73847a521d119060ff801983541691151516179055565b5460ff1690565b6100cf577f033cb808a453240b3c9916e6d1ccc504e492e2b2453192ff241c73847a521d06805461ff0019166101001790556307e4c70760e21b6000527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131f60205261028b7ff97e938d8af42f52387bb74b8b526fda8f184cc2aa534340a8d75a88fbecc7755b805460ff19166001179055565b6348e2b09360e01b6000527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131f6020526102e37f65d510a5d8f7ef134ec444f7f34ee808c8eeb5177cdfd16be0c40fe1ab43369561027e565b7f033cb808a453240b3c9916e6d1ccc504e492e2b2453192ff241c73847a521d06805460ff19166001179055565b61031961012e565b610185565b61032661012e565b610173565b61033361012e565b61016456fea3646970667358221220d5915c920c9ac445f36643434e1e12bc9d30857c5193caebe63987bc577bbdb96c6578706572696d656e74616cf564736f6c634300080a0041","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 CALLDATALOAD PUSH1 0xE0 SHR PUSH4 0x59259007 EQ PUSH2 0x29 JUMPI POP PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x77 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x77 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0xFFFF DUP2 AND DUP2 EQ ISZERO PUSH2 0x73 JUMPI PUSH2 0x51 PUSH2 0x7A JUMP JUMPDEST PUSH1 0x44 CALLDATALOAD SWAP1 DUP2 ISZERO ISZERO DUP3 EQ ISZERO PUSH2 0x6D JUMPI PUSH2 0x68 SWAP3 PUSH2 0x93 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURN JUMPDEST POP POP POP DUP1 REVERT JUMPDEST POP DUP1 REVERT JUMPDEST DUP1 REVERT JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH2 0xFFFF DUP3 AND DUP3 EQ ISZERO PUSH2 0x8C JUMPI JUMP JUMPDEST POP POP PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH32 0xC8FCAD8DB84D3CC18B4C41D551EA0EE66DD599CDE068D998E57D5E09332C1320 SLOAD AND CALLER EQ ISZERO PUSH2 0xD1 JUMPI PUSH2 0xCF SWAP3 PUSH2 0x145 JUMP JUMPDEST JUMP JUMPDEST POP POP POP POP PUSH1 0x84 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F6E6C79206F776E657220697320616C6C6F77656420746F20706572666F726D PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x103A3434B99030B1BA34B7B7 PUSH1 0xA1 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST POP PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x1F8 SWAP3 PUSH1 0xC SWAP3 PUSH2 0x1F1 SWAP3 PUSH2 0xFFFF DUP1 SWAP6 DUP2 DUP1 DUP1 SWAP5 AND SWAP5 PUSH1 0x1 DUP7 LT PUSH2 0x32B JUMPI JUMPDEST AND DUP1 DUP4 DIV DUP3 GT DUP2 ISZERO ISZERO AND PUSH2 0x31E JUMPI JUMPDEST MUL AND SWAP2 PUSH1 0x0 NOT ADD AND DUP1 SWAP5 SUB DUP2 GT PUSH2 0x311 JUMPI JUMPDEST PUSH4 0xFFFF0000 PUSH32 0x33CB808A453240B3C9916E6D1CCC504E492E2B2453192FF241C73847A521D06 SWAP5 DUP6 SLOAD SWAP3 ADD PUSH1 0x10 SHL AND SWAP1 PUSH4 0xFFFF0000 NOT AND OR DUP4 SSTORE PUSH32 0x33CB808A453240B3C9916E6D1CCC504E492E2B2453192FF241C73847A521D11 SWAP1 PUSH1 0xFF DUP1 NOT DUP4 SLOAD AND SWAP2 ISZERO ISZERO AND OR SWAP1 SSTORE JUMP JUMPDEST SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0xCF JUMPI PUSH32 0x33CB808A453240B3C9916E6D1CCC504E492E2B2453192FF241C73847A521D06 DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE PUSH4 0x7E4C707 PUSH1 0xE2 SHL PUSH1 0x0 MSTORE PUSH32 0xC8FCAD8DB84D3CC18B4C41D551EA0EE66DD599CDE068D998E57D5E09332C131F PUSH1 0x20 MSTORE PUSH2 0x28B PUSH32 0xF97E938D8AF42F52387BB74B8B526FDA8F184CC2AA534340A8D75A88FBECC775 JUMPDEST DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE JUMP JUMPDEST PUSH4 0x48E2B093 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH32 0xC8FCAD8DB84D3CC18B4C41D551EA0EE66DD599CDE068D998E57D5E09332C131F PUSH1 0x20 MSTORE PUSH2 0x2E3 PUSH32 0x65D510A5D8F7EF134EC444F7F34EE808C8EEB5177CDFD16BE0C40FE1AB433695 PUSH2 0x27E JUMP JUMPDEST PUSH32 0x33CB808A453240B3C9916E6D1CCC504E492E2B2453192FF241C73847A521D06 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x319 PUSH2 0x12E JUMP JUMPDEST PUSH2 0x185 JUMP JUMPDEST PUSH2 0x326 PUSH2 0x12E JUMP JUMPDEST PUSH2 0x173 JUMP JUMPDEST PUSH2 0x333 PUSH2 0x12E JUMP JUMPDEST PUSH2 0x164 JUMP INVALID LOG3 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD5 SWAP2 0x5C SWAP3 0xC SWAP11 0xC4 GASLIMIT RETURN PUSH7 0x43434E1E12BC9D ADDRESS DUP6 PUSH29 0x5193CAEBE63987BC577BBDB96C6578706572696D656E74616CF564736F PUSH13 0x634300080A0041000000000000 ","sourceMap":"413:913:4:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;413:913:4;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;571:752;;;:::i;:::-;413:913;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;128:212:8;;;413:913:4;;;;;257:16:8;413:913:4;;243:10:8;:30;413:913:4;;;332:1:8;;;:::i;:::-;128:212::o;413:913:4:-;;;;;;;;;;;;;;257:16:8;413:913:4;;;;;;;;;;;;;-1:-1:-1;;;413:913:4;;;;;;;;;;;;;;;;;;571:752;413:913;571:752;413:913;571:752;849:25;571:752;413:913;;;;;;;;;;;;;;571:752;413:913;;;;;;;;;;;;571:752;413:913;;;;;;;;;;;;;;571:752;413:913;202:45:7;413:913:4;;;;;;;;;;;;;;;849:13;413:913;;;;;;;;;;;;;;;849:25;413:913;;;;;;1055:29;;202:45:7;413:913:4;;-1:-1:-1;;413:913:4;;;;;-1:-1:-1;;;413:913:4;;1134:24;413:913;;1134:62;413:913;1134:55;413:913;;-1:-1:-1;;413:913:4;767:1;413:913;;;;1134:62;-1:-1:-1;;;413:913:4;;1134:24;413:913;;1207:64;413:913;1207:57;413:913;1207:64;202:45:7;413:913:4;;-1:-1:-1;;413:913:4;767:1;413:913;;;128:212:8:o;413:913:4:-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;"},"gasEstimates":{"creation":{"codeDepositCost":"178400","executionCost":"25995","totalCost":"204395"},"external":{"init(uint16,uint16,bool)":"infinite"}},"methodIdentifiers":{"init(uint16,uint16,bool)":"59259007"}},"metadata":"{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"currentMonth\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"currentYear\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"isTesting\",\"type\":\"bool\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/InitFacet.sol\":\"InitFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/InitFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nimport {IDiamondLoupe} from \\\"hardhat-deploy/solc_0.8/diamond/interfaces/IDiamondLoupe.sol\\\";\\r\\nimport {UsingDiamondOwner, IDiamondCut} from \\\"hardhat-deploy/solc_0.8/diamond/UsingDiamondOwner.sol\\\";\\r\\nimport \\\"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\\\";\\r\\nimport {SusuwatariStorage, StorageHandler} from \\\"./SusuwatariStorage.sol\\\";\\r\\n\\r\\ncontract InitFacet is UsingDiamondOwner, StorageHandler {\\r\\n  \\r\\n  constructor(){\\r\\n        LibDiamond.setContractOwner(msg.sender);\\r\\n        \\r\\n    }\\r\\n    \\r\\n    function init(uint16 currentMonth,uint16 currentYear,bool isTesting) external onlyOwner {\\r\\n\\r\\n        SusuwatariStorage storage pp = susu();\\r\\n\\r\\n        uint16 currentMonth0Based = currentMonth -1;\\r\\n\\r\\n        susu._startDateId = currentYear * 12 + currentMonth0Based;\\r\\n\\r\\n        susu._isTesting = isTesting;\\r\\n\\r\\n        if(susu._donationBuckets.length == 0) susu._donationBuckets = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];\\r\\n\\r\\n        if (susu.isInitialized) return;\\r\\n\\r\\n        susu._isDonatingActive=true;\\r\\n\\r\\n        ds().supportedInterfaces[type(IDiamondCut).interfaceId] = true;\\r\\n        ds().supportedInterfaces[type(IDiamondLoupe).interfaceId] = true;\\r\\n        \\r\\n        susu.isInitialized = true;\\r\\n    }\\r\\n}\",\"keccak256\":\"0xe81d7e2812962bb214758da6a1f5d042ae55e45c5f4696ef126407b5860067a1\",\"license\":\"MIT\"},\"contracts/SusuwatariStorage.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nimport {LibDiamond} from \\\"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\\\";\\r\\n\\r\\nbytes32 constant SUSUWATARI_STORAGE_POSITION = keccak256(\\\"susuwatari.contract.storage\\\");\\r\\nbytes32 constant LEAFWALLET_STORAGE_POSITION = keccak256(\\\"leafwallet.contract.storage\\\");\\r\\n\\r\\nstruct OwnableStorage {\\r\\n\\r\\n    address _owner;\\r\\n}\\r\\n\\r\\nstruct SusuwatariStorage {\\r\\n    \\r\\n\\r\\n    bool isInitialized;\\r\\n    bool _isDonatingActive;\\r\\n    \\r\\n    uint16 _startDateId;\\r\\n\\r\\n    uint32[48] _donationBuckets ; \\r\\n    mapping(uint32 => address[]) _dateIdAddresses;\\r\\n    mapping(uint256 => int32) _dateAddressIdVoteValues;\\r\\n    mapping(uint256 => bool) _dateAddressIdHasVotes;\\r\\n    mapping(uint256 => bool) _monthAddressHasTransfered;\\r\\n\\r\\n    bool _isTesting;\\r\\n\\r\\n    mapping (address => uint64) _fameHoldings;\\r\\n    address[] _fameHolders;\\r\\n    uint256 _totalFame;\\r\\n}\\r\\n\\r\\ncontract StorageHandler {\\r\\n    function susu() internal pure returns (SusuwatariStorage storage cs) {\\r\\n        bytes32 position = SUSUWATARI_STORAGE_POSITION;\\r\\n        assembly {\\r\\n           cs.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function os() internal pure returns (OwnableStorage storage cs) {\\r\\n        bytes32 position = keccak256(\\\"ownable.contract.storage\\\");\\r\\n        assembly {\\r\\n           cs.slot := position\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function ds() internal pure returns (LibDiamond.DiamondStorage storage) {\\r\\n        return LibDiamond.diamondStorage();\\r\\n    }\\r\\n}\",\"keccak256\":\"0x1c1b64576006d7245f8b9ec09599b5e9213713b657b461fdbe71a4f0eed0f360\",\"license\":\"MIT\"},\"hardhat-deploy/solc_0.8/diamond/UsingDiamondOwner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./libraries/LibDiamond.sol\\\";\\n\\ncontract UsingDiamondOwner {\\n    modifier onlyOwner() {\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\n        require(msg.sender == ds.contractOwner, \\\"Only owner is allowed to perform this action\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x610145c6957708608f3d2c2626dbf3461f2886b0b304c2bdc0c332df981b82f8\",\"license\":\"MIT\"},\"hardhat-deploy/solc_0.8/diamond/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0xc00c16bfa30a3fa5f3dc684f7f8ba62c259962b25f647d9588739458989717fc\",\"license\":\"MIT\"},\"hardhat-deploy/solc_0.8/diamond/interfaces/IDiamondLoupe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\n// A loupe is a small magnifying glass used to look at diamonds.\\n// These functions look at diamonds\\ninterface IDiamondLoupe {\\n    /// These functions are expected to be called frequently\\n    /// by tools.\\n\\n    struct Facet {\\n        address facetAddress;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Gets all facet addresses and their four byte function selectors.\\n    /// @return facets_ Facet\\n    function facets() external view returns (Facet[] memory facets_);\\n\\n    /// @notice Gets all the function selectors supported by a specific facet.\\n    /// @param _facet The facet address.\\n    /// @return facetFunctionSelectors_\\n    function facetFunctionSelectors(address _facet) external view returns (bytes4[] memory facetFunctionSelectors_);\\n\\n    /// @notice Get all the facet addresses used by a diamond.\\n    /// @return facetAddresses_\\n    function facetAddresses() external view returns (address[] memory facetAddresses_);\\n\\n    /// @notice Gets the facet that supports the given selector.\\n    /// @dev If facet is not found return address(0).\\n    /// @param _functionSelector The function selector.\\n    /// @return facetAddress_ The facet address.\\n    function facetAddress(bytes4 _functionSelector) external view returns (address facetAddress_);\\n}\\n\",\"keccak256\":\"0x10884024af2c0f7deca0fac4ddf84e76da5dba35b6e02fabeac8ea54c1a5c6f7\",\"license\":\"MIT\"},\"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);            \\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress != _facetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(_facetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n        enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }    \\n\\n\\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n        // an immutable function is a function defined directly in a diamond\\n        require(_facetAddress != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\");\\n        } else {\\n            require(_calldata.length > 0, \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\");\\n            if (_init != address(this)) {\\n                enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x2205345e83eb86f5281f159a9215a096cb6d404782619f9b8e9d7a4a46c32a37\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/LibSusuwatari.sol":{"LibSusuwatari":{"abi":[{"inputs":[{"internalType":"uint8","name":"month","type":"uint8"},{"internalType":"uint16","name":"year","type":"uint16"}],"name":"getDaysInMonth","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"uint256","name":"timestamp","type":"uint256"}],"name":"getMonth","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"uint256","name":"timestamp","type":"uint256"}],"name":"getYear","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"uint16","name":"year","type":"uint16"}],"name":"isLeapYear","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"uint256","name":"year","type":"uint256"}],"name":"leapYearsBefore","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"pure","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"6080806040523461001a576106e99081610021823930815050f35b50600080fdfe6040608081526004361015610015575b50600080fd5b60003560e01c806392d66313146100e5578063a324ad24146100cf578063a6f0e577146100a8578063b1999937146100835763b238ad0e146100565761000f565b61007f9061006c61006636610146565b906105cd565b905160ff90911681529081906020820190565b0390f35b5061007f906100996100943661010f565b61025f565b90519081529081906020820190565b5061007f906100be6100b936610121565b61017b565b905190151581529081906020820190565b5061007f9061006c6100e03661010f565b610479565b5061007f906100fb6100f63661010f565b6103a8565b905161ffff90911681529081906020820190565b602090600319011261000f5760043590565b602090600319011261000f5760043561ffff811681141561013f5790565b5050600080fd5b604090600319011261000f5760043560ff811681141561013f579060243561ffff81168114156101735790565b505050600080fd5b600381166101ae5761ffff8091168160648206166101a7576101909006166101a257600190565b600090565b5050600190565b50600090565b50634e487b7160e01b600052601160045260246000fd5b6301e1338081106101e1575b6301e1337f190190565b6101e96101b4565b6101d7565b6301e285008110610204575b6301e284ff190190565b61020c6101b4565b6101fa565b6101dd8110610223575b6101dc190190565b61022b6101b4565b61021b565b81811061023b570390565b6102436101b4565b0390565b81198111610253570190565b61025b6101b4565b0190565b61028d906001811061029d575b600019018060021c906101906064820491828410610290575b049103610247565b90565b6102986101b4565b610285565b6102a56101b4565b61026c565b7c87d206500cf71c7a443cd6c7ebe38ec0b59488f085555dd275ba5624c781116001166102db575b6301e285000290565b6102e36101b4565b6102d2565b7c883148f5cb1270b85273b667ae1cfdf5d70ac5a1ecccd54fe15c297df38111600116610319575b6301e133800290565b6103216101b4565b610310565b7dc22e450672894ab6cd8efb11d33f5617839a5bc7dea00c22e450672894ab8111600116610357575b620151800290565b61035f6101b4565b61034f565b61ffff166107b2811061037a575b6107b1190190565b6103826101b4565b610372565b61ffff166001811061039b575b6000190190565b6103a36101b4565b610394565b6301e133808104906104126107b28319811161046c575b61ffff93849101169261040c6103d48561025f565b6101dd9081811061045f575b6101dc1981016103ef816102aa565b946103f989610364565b16908110610452575b96959603016102e8565b90610247565b82811161041f5750905090565b6104439061042f6100b984610387565b156104495761043d906101ee565b91610387565b90610412565b61043d906101cb565b61045a6101b4565b610402565b6104676101b4565b6103e0565b6104746101b4565b6103bf565b610481610578565b9061049661048e826103a8565b61ffff168352565b6104eb6104ba6104b56100946104ae865161ffff1690565b61ffff1690565b610211565b61040c6104e66104c9836102aa565b926104e16104ae6104dc895161ffff1690565b610364565b610230565b6102e8565b6001905b600c60ff83161115610509575b5050506020015160ff1690565b61052f61052a61052461051e875161ffff1690565b856105cd565b60ff1690565b610326565b908361053b8284610247565b11610559576105539161054d91610247565b916105bb565b906104ef565b5050602091509161057160ff938383019060ff169052565b91386104fc565b604051906040820182811067ffffffffffffffff8211176105a25760405260006020838281520152565b505050634e487b7160e01b600052604160045260246000fd5b60ff6001911660ff8114610253570190565b60ff1660018114801561069b575b8015610691575b8015610687575b801561067d575b8015610673575b8015610669575b1561060a575050601f90565b6004811490811561065e575b8115610653575b8115610648575b50156106305750601e90565b6106399061017b565b1561064357601d90565b601c90565b600b91501438610624565b60098114915061061d565b600681149150610616565b50600c81146105fe565b50600a81146105f7565b50600881146105f0565b50600781146105e9565b50600581146105e2565b50600381146105db56fea364697066735822122078a15abef96075d2d70f38e35f48103095d877c66d9f39a275eafa1b390a1b246c6578706572696d656e74616cf564736f6c634300080a0041","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH2 0x1A JUMPI PUSH2 0x6E9 SWAP1 DUP2 PUSH2 0x21 DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST POP PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x40 PUSH1 0x80 DUP2 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x15 JUMPI JUMPDEST POP PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x92D66313 EQ PUSH2 0xE5 JUMPI DUP1 PUSH4 0xA324AD24 EQ PUSH2 0xCF JUMPI DUP1 PUSH4 0xA6F0E577 EQ PUSH2 0xA8 JUMPI DUP1 PUSH4 0xB1999937 EQ PUSH2 0x83 JUMPI PUSH4 0xB238AD0E EQ PUSH2 0x56 JUMPI PUSH2 0xF JUMP JUMPDEST PUSH2 0x7F SWAP1 PUSH2 0x6C PUSH2 0x66 CALLDATASIZE PUSH2 0x146 JUMP JUMPDEST SWAP1 PUSH2 0x5CD JUMP JUMPDEST SWAP1 MLOAD PUSH1 0xFF SWAP1 SWAP2 AND DUP2 MSTORE SWAP1 DUP2 SWAP1 PUSH1 0x20 DUP3 ADD SWAP1 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST POP PUSH2 0x7F SWAP1 PUSH2 0x99 PUSH2 0x94 CALLDATASIZE PUSH2 0x10F JUMP JUMPDEST PUSH2 0x25F JUMP JUMPDEST SWAP1 MLOAD SWAP1 DUP2 MSTORE SWAP1 DUP2 SWAP1 PUSH1 0x20 DUP3 ADD SWAP1 JUMP JUMPDEST POP PUSH2 0x7F SWAP1 PUSH2 0xBE PUSH2 0xB9 CALLDATASIZE PUSH2 0x121 JUMP JUMPDEST PUSH2 0x17B JUMP JUMPDEST SWAP1 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE SWAP1 DUP2 SWAP1 PUSH1 0x20 DUP3 ADD SWAP1 JUMP JUMPDEST POP PUSH2 0x7F SWAP1 PUSH2 0x6C PUSH2 0xE0 CALLDATASIZE PUSH2 0x10F JUMP JUMPDEST PUSH2 0x479 JUMP JUMPDEST POP PUSH2 0x7F SWAP1 PUSH2 0xFB PUSH2 0xF6 CALLDATASIZE PUSH2 0x10F JUMP JUMPDEST PUSH2 0x3A8 JUMP JUMPDEST SWAP1 MLOAD PUSH2 0xFFFF SWAP1 SWAP2 AND DUP2 MSTORE SWAP1 DUP2 SWAP1 PUSH1 0x20 DUP3 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0xF JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x20 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0xF JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0xFFFF DUP2 AND DUP2 EQ ISZERO PUSH2 0x13F JUMPI SWAP1 JUMP JUMPDEST POP POP PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0xF JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ ISZERO PUSH2 0x13F JUMPI SWAP1 PUSH1 0x24 CALLDATALOAD PUSH2 0xFFFF DUP2 AND DUP2 EQ ISZERO PUSH2 0x173 JUMPI SWAP1 JUMP JUMPDEST POP POP POP PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x3 DUP2 AND PUSH2 0x1AE JUMPI PUSH2 0xFFFF DUP1 SWAP2 AND DUP2 PUSH1 0x64 DUP3 MOD AND PUSH2 0x1A7 JUMPI PUSH2 0x190 SWAP1 MOD AND PUSH2 0x1A2 JUMPI PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST POP POP PUSH1 0x1 SWAP1 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 JUMP JUMPDEST POP PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x1E13380 DUP2 LT PUSH2 0x1E1 JUMPI JUMPDEST PUSH4 0x1E1337F NOT ADD SWAP1 JUMP JUMPDEST PUSH2 0x1E9 PUSH2 0x1B4 JUMP JUMPDEST PUSH2 0x1D7 JUMP JUMPDEST PUSH4 0x1E28500 DUP2 LT PUSH2 0x204 JUMPI JUMPDEST PUSH4 0x1E284FF NOT ADD SWAP1 JUMP JUMPDEST PUSH2 0x20C PUSH2 0x1B4 JUMP JUMPDEST PUSH2 0x1FA JUMP JUMPDEST PUSH2 0x1DD DUP2 LT PUSH2 0x223 JUMPI JUMPDEST PUSH2 0x1DC NOT ADD SWAP1 JUMP JUMPDEST PUSH2 0x22B PUSH2 0x1B4 JUMP JUMPDEST PUSH2 0x21B JUMP JUMPDEST DUP2 DUP2 LT PUSH2 0x23B JUMPI SUB SWAP1 JUMP JUMPDEST PUSH2 0x243 PUSH2 0x1B4 JUMP JUMPDEST SUB SWAP1 JUMP JUMPDEST DUP2 NOT DUP2 GT PUSH2 0x253 JUMPI ADD SWAP1 JUMP JUMPDEST PUSH2 0x25B PUSH2 0x1B4 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x28D SWAP1 PUSH1 0x1 DUP2 LT PUSH2 0x29D JUMPI JUMPDEST PUSH1 0x0 NOT ADD DUP1 PUSH1 0x2 SHR SWAP1 PUSH2 0x190 PUSH1 0x64 DUP3 DIV SWAP2 DUP3 DUP5 LT PUSH2 0x290 JUMPI JUMPDEST DIV SWAP2 SUB PUSH2 0x247 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x298 PUSH2 0x1B4 JUMP JUMPDEST PUSH2 0x285 JUMP JUMPDEST PUSH2 0x2A5 PUSH2 0x1B4 JUMP JUMPDEST PUSH2 0x26C JUMP JUMPDEST PUSH29 0x87D206500CF71C7A443CD6C7EBE38EC0B59488F085555DD275BA5624C7 DUP2 GT PUSH1 0x1 AND PUSH2 0x2DB JUMPI JUMPDEST PUSH4 0x1E28500 MUL SWAP1 JUMP JUMPDEST PUSH2 0x2E3 PUSH2 0x1B4 JUMP JUMPDEST PUSH2 0x2D2 JUMP JUMPDEST PUSH29 0x883148F5CB1270B85273B667AE1CFDF5D70AC5A1ECCCD54FE15C297DF3 DUP2 GT PUSH1 0x1 AND PUSH2 0x319 JUMPI JUMPDEST PUSH4 0x1E13380 MUL SWAP1 JUMP JUMPDEST PUSH2 0x321 PUSH2 0x1B4 JUMP JUMPDEST PUSH2 0x310 JUMP JUMPDEST PUSH30 0xC22E450672894AB6CD8EFB11D33F5617839A5BC7DEA00C22E450672894AB DUP2 GT PUSH1 0x1 AND PUSH2 0x357 JUMPI JUMPDEST PUSH3 0x15180 MUL SWAP1 JUMP JUMPDEST PUSH2 0x35F PUSH2 0x1B4 JUMP JUMPDEST PUSH2 0x34F JUMP JUMPDEST PUSH2 0xFFFF AND PUSH2 0x7B2 DUP2 LT PUSH2 0x37A JUMPI JUMPDEST PUSH2 0x7B1 NOT ADD SWAP1 JUMP JUMPDEST PUSH2 0x382 PUSH2 0x1B4 JUMP JUMPDEST PUSH2 0x372 JUMP JUMPDEST PUSH2 0xFFFF AND PUSH1 0x1 DUP2 LT PUSH2 0x39B JUMPI JUMPDEST PUSH1 0x0 NOT ADD SWAP1 JUMP JUMPDEST PUSH2 0x3A3 PUSH2 0x1B4 JUMP JUMPDEST PUSH2 0x394 JUMP JUMPDEST PUSH4 0x1E13380 DUP2 DIV SWAP1 PUSH2 0x412 PUSH2 0x7B2 DUP4 NOT DUP2 GT PUSH2 0x46C JUMPI JUMPDEST PUSH2 0xFFFF SWAP4 DUP5 SWAP2 ADD AND SWAP3 PUSH2 0x40C PUSH2 0x3D4 DUP6 PUSH2 0x25F JUMP JUMPDEST PUSH2 0x1DD SWAP1 DUP2 DUP2 LT PUSH2 0x45F JUMPI JUMPDEST PUSH2 0x1DC NOT DUP2 ADD PUSH2 0x3EF DUP2 PUSH2 0x2AA JUMP JUMPDEST SWAP5 PUSH2 0x3F9 DUP10 PUSH2 0x364 JUMP JUMPDEST AND SWAP1 DUP2 LT PUSH2 0x452 JUMPI JUMPDEST SWAP7 SWAP6 SWAP7 SUB ADD PUSH2 0x2E8 JUMP JUMPDEST SWAP1 PUSH2 0x247 JUMP JUMPDEST DUP3 DUP2 GT PUSH2 0x41F JUMPI POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x443 SWAP1 PUSH2 0x42F PUSH2 0xB9 DUP5 PUSH2 0x387 JUMP JUMPDEST ISZERO PUSH2 0x449 JUMPI PUSH2 0x43D SWAP1 PUSH2 0x1EE JUMP JUMPDEST SWAP2 PUSH2 0x387 JUMP JUMPDEST SWAP1 PUSH2 0x412 JUMP JUMPDEST PUSH2 0x43D SWAP1 PUSH2 0x1CB JUMP JUMPDEST PUSH2 0x45A PUSH2 0x1B4 JUMP JUMPDEST PUSH2 0x402 JUMP JUMPDEST PUSH2 0x467 PUSH2 0x1B4 JUMP JUMPDEST PUSH2 0x3E0 JUMP JUMPDEST PUSH2 0x474 PUSH2 0x1B4 JUMP JUMPDEST PUSH2 0x3BF JUMP JUMPDEST PUSH2 0x481 PUSH2 0x578 JUMP JUMPDEST SWAP1 PUSH2 0x496 PUSH2 0x48E DUP3 PUSH2 0x3A8 JUMP JUMPDEST PUSH2 0xFFFF AND DUP4 MSTORE JUMP JUMPDEST PUSH2 0x4EB PUSH2 0x4BA PUSH2 0x4B5 PUSH2 0x94 PUSH2 0x4AE DUP7 MLOAD PUSH2 0xFFFF AND SWAP1 JUMP JUMPDEST PUSH2 0xFFFF AND SWAP1 JUMP JUMPDEST PUSH2 0x211 JUMP JUMPDEST PUSH2 0x40C PUSH2 0x4E6 PUSH2 0x4C9 DUP4 PUSH2 0x2AA JUMP JUMPDEST SWAP3 PUSH2 0x4E1 PUSH2 0x4AE PUSH2 0x4DC DUP10 MLOAD PUSH2 0xFFFF AND SWAP1 JUMP JUMPDEST PUSH2 0x364 JUMP JUMPDEST PUSH2 0x230 JUMP JUMPDEST PUSH2 0x2E8 JUMP JUMPDEST PUSH1 0x1 SWAP1 JUMPDEST PUSH1 0xC PUSH1 0xFF DUP4 AND GT ISZERO PUSH2 0x509 JUMPI JUMPDEST POP POP POP PUSH1 0x20 ADD MLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x52F PUSH2 0x52A PUSH2 0x524 PUSH2 0x51E DUP8 MLOAD PUSH2 0xFFFF AND SWAP1 JUMP JUMPDEST DUP6 PUSH2 0x5CD JUMP JUMPDEST PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x326 JUMP JUMPDEST SWAP1 DUP4 PUSH2 0x53B DUP3 DUP5 PUSH2 0x247 JUMP JUMPDEST GT PUSH2 0x559 JUMPI PUSH2 0x553 SWAP2 PUSH2 0x54D SWAP2 PUSH2 0x247 JUMP JUMPDEST SWAP2 PUSH2 0x5BB JUMP JUMPDEST SWAP1 PUSH2 0x4EF JUMP JUMPDEST POP POP PUSH1 0x20 SWAP2 POP SWAP2 PUSH2 0x571 PUSH1 0xFF SWAP4 DUP4 DUP4 ADD SWAP1 PUSH1 0xFF AND SWAP1 MSTORE JUMP JUMPDEST SWAP2 CODESIZE PUSH2 0x4FC JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0x40 DUP3 ADD DUP3 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x5A2 JUMPI PUSH1 0x40 MSTORE PUSH1 0x0 PUSH1 0x20 DUP4 DUP3 DUP2 MSTORE ADD MSTORE JUMP JUMPDEST POP POP POP PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0xFF PUSH1 0x1 SWAP2 AND PUSH1 0xFF DUP2 EQ PUSH2 0x253 JUMPI ADD SWAP1 JUMP JUMPDEST PUSH1 0xFF AND PUSH1 0x1 DUP2 EQ DUP1 ISZERO PUSH2 0x69B JUMPI JUMPDEST DUP1 ISZERO PUSH2 0x691 JUMPI JUMPDEST DUP1 ISZERO PUSH2 0x687 JUMPI JUMPDEST DUP1 ISZERO PUSH2 0x67D JUMPI JUMPDEST DUP1 ISZERO PUSH2 0x673 JUMPI JUMPDEST DUP1 ISZERO PUSH2 0x669 JUMPI JUMPDEST ISZERO PUSH2 0x60A JUMPI POP POP PUSH1 0x1F SWAP1 JUMP JUMPDEST PUSH1 0x4 DUP2 EQ SWAP1 DUP2 ISZERO PUSH2 0x65E JUMPI JUMPDEST DUP2 ISZERO PUSH2 0x653 JUMPI JUMPDEST DUP2 ISZERO PUSH2 0x648 JUMPI JUMPDEST POP ISZERO PUSH2 0x630 JUMPI POP PUSH1 0x1E SWAP1 JUMP JUMPDEST PUSH2 0x639 SWAP1 PUSH2 0x17B JUMP JUMPDEST ISZERO PUSH2 0x643 JUMPI PUSH1 0x1D SWAP1 JUMP JUMPDEST PUSH1 0x1C SWAP1 JUMP JUMPDEST PUSH1 0xB SWAP2 POP EQ CODESIZE PUSH2 0x624 JUMP JUMPDEST PUSH1 0x9 DUP2 EQ SWAP2 POP PUSH2 0x61D JUMP JUMPDEST PUSH1 0x6 DUP2 EQ SWAP2 POP PUSH2 0x616 JUMP JUMPDEST POP PUSH1 0xC DUP2 EQ PUSH2 0x5FE JUMP JUMPDEST POP PUSH1 0xA DUP2 EQ PUSH2 0x5F7 JUMP JUMPDEST POP PUSH1 0x8 DUP2 EQ PUSH2 0x5F0 JUMP JUMPDEST POP PUSH1 0x7 DUP2 EQ PUSH2 0x5E9 JUMP JUMPDEST POP PUSH1 0x5 DUP2 EQ PUSH2 0x5E2 JUMP JUMPDEST POP PUSH1 0x3 DUP2 EQ PUSH2 0x5DB JUMP INVALID LOG3 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH25 0xA15ABEF96075D2D70F38E35F48103095D877C66D9F39A275EA STATICCALL SHL CODECOPY EXP SHL 0x24 PUSH13 0x6578706572696D656E74616CF5 PUSH5 0x736F6C6343 STOP ADDMOD EXP STOP COINBASE ","sourceMap":"273:4621:5:-:0;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"abi_decode_uint16":{"entryPoint":289,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_uint256":{"entryPoint":271,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_uint8t_uint16":{"entryPoint":326,"id":null,"parameterSlots":1,"returnSlots":2},"abi_encode_bool":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_uint16":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_uint256":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_uint8":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_and_zero_memory_struct_struct_DateTime":{"entryPoint":1400,"id":null,"parameterSlots":0,"returnSlots":1},"checked_add_uint256":{"entryPoint":583,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_uint256":{"entryPoint":806,"id":null,"parameterSlots":1,"returnSlots":1},"checked_mul_uint256_1406":{"entryPoint":682,"id":null,"parameterSlots":1,"returnSlots":1},"checked_mul_uint256_1409":{"entryPoint":744,"id":null,"parameterSlots":1,"returnSlots":1},"checked_sub_uint16":{"entryPoint":903,"id":null,"parameterSlots":1,"returnSlots":1},"checked_sub_uint16_1408":{"entryPoint":868,"id":null,"parameterSlots":1,"returnSlots":1},"checked_sub_uint256":{"entryPoint":560,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_uint256_1411":{"entryPoint":459,"id":null,"parameterSlots":1,"returnSlots":1},"checked_sub_uint256_1412":{"entryPoint":494,"id":null,"parameterSlots":1,"returnSlots":1},"checked_sub_uint256_3600":{"entryPoint":529,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_uint16":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_uint8":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"fun_getDaysInMonth":{"entryPoint":1485,"id":2225,"parameterSlots":2,"returnSlots":1},"fun_getMonth":{"entryPoint":1145,"id":2155,"parameterSlots":1,"returnSlots":1},"fun_getYear":{"entryPoint":936,"id":2142,"parameterSlots":1,"returnSlots":1},"fun_isLeapYear":{"entryPoint":379,"id":1933,"parameterSlots":1,"returnSlots":1},"fun_leapYearsBefore":{"entryPoint":607,"id":1957,"parameterSlots":1,"returnSlots":1},"increment_uint8":{"entryPoint":1467,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":436,"id":null,"parameterSlots":0,"returnSlots":0},"write_to_memory_uint16":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":0},"write_to_memory_uint8":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":0}},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"6040608081526004361015610015575b50600080fd5b60003560e01c806392d66313146100e5578063a324ad24146100cf578063a6f0e577146100a8578063b1999937146100835763b238ad0e146100565761000f565b61007f9061006c61006636610146565b906105cd565b905160ff90911681529081906020820190565b0390f35b5061007f906100996100943661010f565b61025f565b90519081529081906020820190565b5061007f906100be6100b936610121565b61017b565b905190151581529081906020820190565b5061007f9061006c6100e03661010f565b610479565b5061007f906100fb6100f63661010f565b6103a8565b905161ffff90911681529081906020820190565b602090600319011261000f5760043590565b602090600319011261000f5760043561ffff811681141561013f5790565b5050600080fd5b604090600319011261000f5760043560ff811681141561013f579060243561ffff81168114156101735790565b505050600080fd5b600381166101ae5761ffff8091168160648206166101a7576101909006166101a257600190565b600090565b5050600190565b50600090565b50634e487b7160e01b600052601160045260246000fd5b6301e1338081106101e1575b6301e1337f190190565b6101e96101b4565b6101d7565b6301e285008110610204575b6301e284ff190190565b61020c6101b4565b6101fa565b6101dd8110610223575b6101dc190190565b61022b6101b4565b61021b565b81811061023b570390565b6102436101b4565b0390565b81198111610253570190565b61025b6101b4565b0190565b61028d906001811061029d575b600019018060021c906101906064820491828410610290575b049103610247565b90565b6102986101b4565b610285565b6102a56101b4565b61026c565b7c87d206500cf71c7a443cd6c7ebe38ec0b59488f085555dd275ba5624c781116001166102db575b6301e285000290565b6102e36101b4565b6102d2565b7c883148f5cb1270b85273b667ae1cfdf5d70ac5a1ecccd54fe15c297df38111600116610319575b6301e133800290565b6103216101b4565b610310565b7dc22e450672894ab6cd8efb11d33f5617839a5bc7dea00c22e450672894ab8111600116610357575b620151800290565b61035f6101b4565b61034f565b61ffff166107b2811061037a575b6107b1190190565b6103826101b4565b610372565b61ffff166001811061039b575b6000190190565b6103a36101b4565b610394565b6301e133808104906104126107b28319811161046c575b61ffff93849101169261040c6103d48561025f565b6101dd9081811061045f575b6101dc1981016103ef816102aa565b946103f989610364565b16908110610452575b96959603016102e8565b90610247565b82811161041f5750905090565b6104439061042f6100b984610387565b156104495761043d906101ee565b91610387565b90610412565b61043d906101cb565b61045a6101b4565b610402565b6104676101b4565b6103e0565b6104746101b4565b6103bf565b610481610578565b9061049661048e826103a8565b61ffff168352565b6104eb6104ba6104b56100946104ae865161ffff1690565b61ffff1690565b610211565b61040c6104e66104c9836102aa565b926104e16104ae6104dc895161ffff1690565b610364565b610230565b6102e8565b6001905b600c60ff83161115610509575b5050506020015160ff1690565b61052f61052a61052461051e875161ffff1690565b856105cd565b60ff1690565b610326565b908361053b8284610247565b11610559576105539161054d91610247565b916105bb565b906104ef565b5050602091509161057160ff938383019060ff169052565b91386104fc565b604051906040820182811067ffffffffffffffff8211176105a25760405260006020838281520152565b505050634e487b7160e01b600052604160045260246000fd5b60ff6001911660ff8114610253570190565b60ff1660018114801561069b575b8015610691575b8015610687575b801561067d575b8015610673575b8015610669575b1561060a575050601f90565b6004811490811561065e575b8115610653575b8115610648575b50156106305750601e90565b6106399061017b565b1561064357601d90565b601c90565b600b91501438610624565b60098114915061061d565b600681149150610616565b50600c81146105fe565b50600a81146105f7565b50600881146105f0565b50600781146105e9565b50600581146105e2565b50600381146105db56fea364697066735822122078a15abef96075d2d70f38e35f48103095d877c66d9f39a275eafa1b390a1b246c6578706572696d656e74616cf564736f6c634300080a0041","opcodes":"PUSH1 0x40 PUSH1 0x80 DUP2 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x15 JUMPI JUMPDEST POP PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x92D66313 EQ PUSH2 0xE5 JUMPI DUP1 PUSH4 0xA324AD24 EQ PUSH2 0xCF JUMPI DUP1 PUSH4 0xA6F0E577 EQ PUSH2 0xA8 JUMPI DUP1 PUSH4 0xB1999937 EQ PUSH2 0x83 JUMPI PUSH4 0xB238AD0E EQ PUSH2 0x56 JUMPI PUSH2 0xF JUMP JUMPDEST PUSH2 0x7F SWAP1 PUSH2 0x6C PUSH2 0x66 CALLDATASIZE PUSH2 0x146 JUMP JUMPDEST SWAP1 PUSH2 0x5CD JUMP JUMPDEST SWAP1 MLOAD PUSH1 0xFF SWAP1 SWAP2 AND DUP2 MSTORE SWAP1 DUP2 SWAP1 PUSH1 0x20 DUP3 ADD SWAP1 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST POP PUSH2 0x7F SWAP1 PUSH2 0x99 PUSH2 0x94 CALLDATASIZE PUSH2 0x10F JUMP JUMPDEST PUSH2 0x25F JUMP JUMPDEST SWAP1 MLOAD SWAP1 DUP2 MSTORE SWAP1 DUP2 SWAP1 PUSH1 0x20 DUP3 ADD SWAP1 JUMP JUMPDEST POP PUSH2 0x7F SWAP1 PUSH2 0xBE PUSH2 0xB9 CALLDATASIZE PUSH2 0x121 JUMP JUMPDEST PUSH2 0x17B JUMP JUMPDEST SWAP1 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE SWAP1 DUP2 SWAP1 PUSH1 0x20 DUP3 ADD SWAP1 JUMP JUMPDEST POP PUSH2 0x7F SWAP1 PUSH2 0x6C PUSH2 0xE0 CALLDATASIZE PUSH2 0x10F JUMP JUMPDEST PUSH2 0x479 JUMP JUMPDEST POP PUSH2 0x7F SWAP1 PUSH2 0xFB PUSH2 0xF6 CALLDATASIZE PUSH2 0x10F JUMP JUMPDEST PUSH2 0x3A8 JUMP JUMPDEST SWAP1 MLOAD PUSH2 0xFFFF SWAP1 SWAP2 AND DUP2 MSTORE SWAP1 DUP2 SWAP1 PUSH1 0x20 DUP3 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0xF JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x20 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0xF JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0xFFFF DUP2 AND DUP2 EQ ISZERO PUSH2 0x13F JUMPI SWAP1 JUMP JUMPDEST POP POP PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0xF JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ ISZERO PUSH2 0x13F JUMPI SWAP1 PUSH1 0x24 CALLDATALOAD PUSH2 0xFFFF DUP2 AND DUP2 EQ ISZERO PUSH2 0x173 JUMPI SWAP1 JUMP JUMPDEST POP POP POP PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x3 DUP2 AND PUSH2 0x1AE JUMPI PUSH2 0xFFFF DUP1 SWAP2 AND DUP2 PUSH1 0x64 DUP3 MOD AND PUSH2 0x1A7 JUMPI PUSH2 0x190 SWAP1 MOD AND PUSH2 0x1A2 JUMPI PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST POP POP PUSH1 0x1 SWAP1 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 JUMP JUMPDEST POP PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x1E13380 DUP2 LT PUSH2 0x1E1 JUMPI JUMPDEST PUSH4 0x1E1337F NOT ADD SWAP1 JUMP JUMPDEST PUSH2 0x1E9 PUSH2 0x1B4 JUMP JUMPDEST PUSH2 0x1D7 JUMP JUMPDEST PUSH4 0x1E28500 DUP2 LT PUSH2 0x204 JUMPI JUMPDEST PUSH4 0x1E284FF NOT ADD SWAP1 JUMP JUMPDEST PUSH2 0x20C PUSH2 0x1B4 JUMP JUMPDEST PUSH2 0x1FA JUMP JUMPDEST PUSH2 0x1DD DUP2 LT PUSH2 0x223 JUMPI JUMPDEST PUSH2 0x1DC NOT ADD SWAP1 JUMP JUMPDEST PUSH2 0x22B PUSH2 0x1B4 JUMP JUMPDEST PUSH2 0x21B JUMP JUMPDEST DUP2 DUP2 LT PUSH2 0x23B JUMPI SUB SWAP1 JUMP JUMPDEST PUSH2 0x243 PUSH2 0x1B4 JUMP JUMPDEST SUB SWAP1 JUMP JUMPDEST DUP2 NOT DUP2 GT PUSH2 0x253 JUMPI ADD SWAP1 JUMP JUMPDEST PUSH2 0x25B PUSH2 0x1B4 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x28D SWAP1 PUSH1 0x1 DUP2 LT PUSH2 0x29D JUMPI JUMPDEST PUSH1 0x0 NOT ADD DUP1 PUSH1 0x2 SHR SWAP1 PUSH2 0x190 PUSH1 0x64 DUP3 DIV SWAP2 DUP3 DUP5 LT PUSH2 0x290 JUMPI JUMPDEST DIV SWAP2 SUB PUSH2 0x247 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x298 PUSH2 0x1B4 JUMP JUMPDEST PUSH2 0x285 JUMP JUMPDEST PUSH2 0x2A5 PUSH2 0x1B4 JUMP JUMPDEST PUSH2 0x26C JUMP JUMPDEST PUSH29 0x87D206500CF71C7A443CD6C7EBE38EC0B59488F085555DD275BA5624C7 DUP2 GT PUSH1 0x1 AND PUSH2 0x2DB JUMPI JUMPDEST PUSH4 0x1E28500 MUL SWAP1 JUMP JUMPDEST PUSH2 0x2E3 PUSH2 0x1B4 JUMP JUMPDEST PUSH2 0x2D2 JUMP JUMPDEST PUSH29 0x883148F5CB1270B85273B667AE1CFDF5D70AC5A1ECCCD54FE15C297DF3 DUP2 GT PUSH1 0x1 AND PUSH2 0x319 JUMPI JUMPDEST PUSH4 0x1E13380 MUL SWAP1 JUMP JUMPDEST PUSH2 0x321 PUSH2 0x1B4 JUMP JUMPDEST PUSH2 0x310 JUMP JUMPDEST PUSH30 0xC22E450672894AB6CD8EFB11D33F5617839A5BC7DEA00C22E450672894AB DUP2 GT PUSH1 0x1 AND PUSH2 0x357 JUMPI JUMPDEST PUSH3 0x15180 MUL SWAP1 JUMP JUMPDEST PUSH2 0x35F PUSH2 0x1B4 JUMP JUMPDEST PUSH2 0x34F JUMP JUMPDEST PUSH2 0xFFFF AND PUSH2 0x7B2 DUP2 LT PUSH2 0x37A JUMPI JUMPDEST PUSH2 0x7B1 NOT ADD SWAP1 JUMP JUMPDEST PUSH2 0x382 PUSH2 0x1B4 JUMP JUMPDEST PUSH2 0x372 JUMP JUMPDEST PUSH2 0xFFFF AND PUSH1 0x1 DUP2 LT PUSH2 0x39B JUMPI JUMPDEST PUSH1 0x0 NOT ADD SWAP1 JUMP JUMPDEST PUSH2 0x3A3 PUSH2 0x1B4 JUMP JUMPDEST PUSH2 0x394 JUMP JUMPDEST PUSH4 0x1E13380 DUP2 DIV SWAP1 PUSH2 0x412 PUSH2 0x7B2 DUP4 NOT DUP2 GT PUSH2 0x46C JUMPI JUMPDEST PUSH2 0xFFFF SWAP4 DUP5 SWAP2 ADD AND SWAP3 PUSH2 0x40C PUSH2 0x3D4 DUP6 PUSH2 0x25F JUMP JUMPDEST PUSH2 0x1DD SWAP1 DUP2 DUP2 LT PUSH2 0x45F JUMPI JUMPDEST PUSH2 0x1DC NOT DUP2 ADD PUSH2 0x3EF DUP2 PUSH2 0x2AA JUMP JUMPDEST SWAP5 PUSH2 0x3F9 DUP10 PUSH2 0x364 JUMP JUMPDEST AND SWAP1 DUP2 LT PUSH2 0x452 JUMPI JUMPDEST SWAP7 SWAP6 SWAP7 SUB ADD PUSH2 0x2E8 JUMP JUMPDEST SWAP1 PUSH2 0x247 JUMP JUMPDEST DUP3 DUP2 GT PUSH2 0x41F JUMPI POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x443 SWAP1 PUSH2 0x42F PUSH2 0xB9 DUP5 PUSH2 0x387 JUMP JUMPDEST ISZERO PUSH2 0x449 JUMPI PUSH2 0x43D SWAP1 PUSH2 0x1EE JUMP JUMPDEST SWAP2 PUSH2 0x387 JUMP JUMPDEST SWAP1 PUSH2 0x412 JUMP JUMPDEST PUSH2 0x43D SWAP1 PUSH2 0x1CB JUMP JUMPDEST PUSH2 0x45A PUSH2 0x1B4 JUMP JUMPDEST PUSH2 0x402 JUMP JUMPDEST PUSH2 0x467 PUSH2 0x1B4 JUMP JUMPDEST PUSH2 0x3E0 JUMP JUMPDEST PUSH2 0x474 PUSH2 0x1B4 JUMP JUMPDEST PUSH2 0x3BF JUMP JUMPDEST PUSH2 0x481 PUSH2 0x578 JUMP JUMPDEST SWAP1 PUSH2 0x496 PUSH2 0x48E DUP3 PUSH2 0x3A8 JUMP JUMPDEST PUSH2 0xFFFF AND DUP4 MSTORE JUMP JUMPDEST PUSH2 0x4EB PUSH2 0x4BA PUSH2 0x4B5 PUSH2 0x94 PUSH2 0x4AE DUP7 MLOAD PUSH2 0xFFFF AND SWAP1 JUMP JUMPDEST PUSH2 0xFFFF AND SWAP1 JUMP JUMPDEST PUSH2 0x211 JUMP JUMPDEST PUSH2 0x40C PUSH2 0x4E6 PUSH2 0x4C9 DUP4 PUSH2 0x2AA JUMP JUMPDEST SWAP3 PUSH2 0x4E1 PUSH2 0x4AE PUSH2 0x4DC DUP10 MLOAD PUSH2 0xFFFF AND SWAP1 JUMP JUMPDEST PUSH2 0x364 JUMP JUMPDEST PUSH2 0x230 JUMP JUMPDEST PUSH2 0x2E8 JUMP JUMPDEST PUSH1 0x1 SWAP1 JUMPDEST PUSH1 0xC PUSH1 0xFF DUP4 AND GT ISZERO PUSH2 0x509 JUMPI JUMPDEST POP POP POP PUSH1 0x20 ADD MLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x52F PUSH2 0x52A PUSH2 0x524 PUSH2 0x51E DUP8 MLOAD PUSH2 0xFFFF AND SWAP1 JUMP JUMPDEST DUP6 PUSH2 0x5CD JUMP JUMPDEST PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x326 JUMP JUMPDEST SWAP1 DUP4 PUSH2 0x53B DUP3 DUP5 PUSH2 0x247 JUMP JUMPDEST GT PUSH2 0x559 JUMPI PUSH2 0x553 SWAP2 PUSH2 0x54D SWAP2 PUSH2 0x247 JUMP JUMPDEST SWAP2 PUSH2 0x5BB JUMP JUMPDEST SWAP1 PUSH2 0x4EF JUMP JUMPDEST POP POP PUSH1 0x20 SWAP2 POP SWAP2 PUSH2 0x571 PUSH1 0xFF SWAP4 DUP4 DUP4 ADD SWAP1 PUSH1 0xFF AND SWAP1 MSTORE JUMP JUMPDEST SWAP2 CODESIZE PUSH2 0x4FC JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0x40 DUP3 ADD DUP3 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x5A2 JUMPI PUSH1 0x40 MSTORE PUSH1 0x0 PUSH1 0x20 DUP4 DUP3 DUP2 MSTORE ADD MSTORE JUMP JUMPDEST POP POP POP PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0xFF PUSH1 0x1 SWAP2 AND PUSH1 0xFF DUP2 EQ PUSH2 0x253 JUMPI ADD SWAP1 JUMP JUMPDEST PUSH1 0xFF AND PUSH1 0x1 DUP2 EQ DUP1 ISZERO PUSH2 0x69B JUMPI JUMPDEST DUP1 ISZERO PUSH2 0x691 JUMPI JUMPDEST DUP1 ISZERO PUSH2 0x687 JUMPI JUMPDEST DUP1 ISZERO PUSH2 0x67D JUMPI JUMPDEST DUP1 ISZERO PUSH2 0x673 JUMPI JUMPDEST DUP1 ISZERO PUSH2 0x669 JUMPI JUMPDEST ISZERO PUSH2 0x60A JUMPI POP POP PUSH1 0x1F SWAP1 JUMP JUMPDEST PUSH1 0x4 DUP2 EQ SWAP1 DUP2 ISZERO PUSH2 0x65E JUMPI JUMPDEST DUP2 ISZERO PUSH2 0x653 JUMPI JUMPDEST DUP2 ISZERO PUSH2 0x648 JUMPI JUMPDEST POP ISZERO PUSH2 0x630 JUMPI POP PUSH1 0x1E SWAP1 JUMP JUMPDEST PUSH2 0x639 SWAP1 PUSH2 0x17B JUMP JUMPDEST ISZERO PUSH2 0x643 JUMPI PUSH1 0x1D SWAP1 JUMP JUMPDEST PUSH1 0x1C SWAP1 JUMP JUMPDEST PUSH1 0xB SWAP2 POP EQ CODESIZE PUSH2 0x624 JUMP JUMPDEST PUSH1 0x9 DUP2 EQ SWAP2 POP PUSH2 0x61D JUMP JUMPDEST PUSH1 0x6 DUP2 EQ SWAP2 POP PUSH2 0x616 JUMP JUMPDEST POP PUSH1 0xC DUP2 EQ PUSH2 0x5FE JUMP JUMPDEST POP PUSH1 0xA DUP2 EQ PUSH2 0x5F7 JUMP JUMPDEST POP PUSH1 0x8 DUP2 EQ PUSH2 0x5F0 JUMP JUMPDEST POP PUSH1 0x7 DUP2 EQ PUSH2 0x5E9 JUMP JUMPDEST POP PUSH1 0x5 DUP2 EQ PUSH2 0x5E2 JUMP JUMPDEST POP PUSH1 0x3 DUP2 EQ PUSH2 0x5DB JUMP INVALID LOG3 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH25 0xA15ABEF96075D2D70F38E35F48103095D877C66D9F39A275EA STATICCALL SHL CODECOPY EXP SHL 0x24 PUSH13 0x6578706572696D656E74616CF5 PUSH5 0x736F6C6343 STOP ADDMOD EXP STOP COINBASE ","sourceMap":"273:4621:5:-:0;;;;;;;;;;-1:-1:-1;273:4621:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;273:4621:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;-1:-1:-1;273:4621:5;;1588:393;273:4621;;;1667:78;;273:4621;;;;;;;;;1763:79;;273:4621;;;;1860:80;;1965:4;1588:393;:::o;1860:80::-;1683:1;1908:12;:::o;1763:79::-;1811:11;;1818:4;1811:11;:::o;1667:78::-;1713:12;1683:1;1713:12;:::o;273:4621::-;;;;;;;;;;;;;;512:8;273:4621;;;;;-1:-1:-1;;273:4621:5;;:::o;:::-;;;:::i;:::-;;;;568:8;273:4621;;;;;-1:-1:-1;;273:4621:5;;:::o;:::-;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;273:4621:5;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;:::o;:::-;;;:::i;:::-;;;:::o;:::-;;;;;;;;;:::o;:::-;;;:::i;:::-;;;:::o;1993:163::-;2110:34;1993:163;2083:1;273:4621;;;;1993:163;273:4621;;;;;;;2141:3;2128;273:4621;;;;;;;;1993:163;273:4621;;;2110:34;:::i;:::-;1993:163;:::o;273:4621::-;;;:::i;:::-;;;;;;:::i;:::-;;;568:8;;;;;;;;;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;512;568;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;464:5;568:8;;:::o;:::-;;;:::i;:::-;;;;273:4621;;;568:8;;;;;-1:-1:-1;;568:8:5;;:::o;:::-;;;:::i;:::-;;;;273:4621;;;568:8;;;;;-1:-1:-1;;568:8:5;;:::o;:::-;;;:::i;:::-;;;3159:993;512:8;273:4621;;;3620:76;273:4621;;;;;;;3159:993;273:4621;;;;;;3470:21;3643:53;3470:21;;;:::i;:::-;273:4621;;;;;;;3159:993;-1:-1:-1;;273:4621:5;;3566:35;273:4621;3566:35;:::i;:::-;3662:18;;;;:::i;:::-;273:4621;;;;;;3159:993;273:4621;;;;;3643:53;:::i;:::-;3620:76;;:::i;:::-;3724:31;;;;;4129:11;;;3159:993;:::o;3717:394::-;4082:9;3806:8;3788:28;3806:8;;;:::i;3788:28::-;3806:8;;;3853:43;;;:::i;:::-;3784:272;4082:9;:::i;:::-;3717:394;;;3784:272;3990:38;;;:::i;273:4621::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;4164:131;273:4621;;:::i;:::-;2267:28;2394;2404:18;;;:::i;:::-;273:4621;;;;;2394:28;2591:70;2447:55;:24;;273:4621;;;;;;;;;;;;2447:24;:55;:::i;:::-;2614:47;2633:27;2546:26;;;:::i;:::-;273:4621;2633:27;:21;273:4621;;;;;;;;2633:21;:::i;:27::-;;:::i;:::-;2614:47;:::i;2591:70::-;2755:1;2746:392;2758:7;2763:2;273:4621;;;2758:7;;;;2746:392;-1:-1:-1;;;4252:31:5;;273:4621;;;;4164:131::o;2767:3::-;2816:43;;2833:26;273:4621;;;;;;;;2833:26;;:::i;:::-;273:4621;;;;2816:43;;:::i;:::-;2890:36;;;;;;:::i;:::-;:48;2886:169;;2767:3;3081:37;;;;:::i;:::-;2767:3;;:::i;:::-;2751:5;;;2886:169;2975:8;;4252:31;2975:8;;;:12;273:4621;2975:8;;;;464:5;273:4621;;464:5;;;2975:12;3022:5;;;;273:4621;;;;;;;;;;;;;;;;;;-1:-1:-1;273:4621:5;;;;;;;:::o;:::-;;;;;;;-1:-1:-1;273:4621:5;;;;;-1:-1:-1;273:4621:5;;;;;;;;;;;;;:::o;4307:584::-;273:4621;;4417:1;4408:10;;:24;;;;4307:584;4408:38;;;;4307:584;4408:52;;;;4307:584;4408:66;;;;4307:584;4408:81;;;;4307:584;4408:96;;;;4307:584;4404:476;;;4533:9;;4540:2;4533:9;:::o;4404:476::-;4598:1;4589:10;;:24;;;;;4404:476;4589:38;;;;4404:476;4589:53;;;;4404:476;-1:-1:-1;4585:295:5;;;4671:9;4678:2;4671:9;:::o;4585:295::-;4727:16;;;:::i;:::-;;;;4779:2;4772:9;:::o;4723:157::-;4858:2;4851:9;:::o;4589:53::-;4640:2;4631:11;;;4589:53;;;:38;4626:1;4617:10;;;-1:-1:-1;4589:38:5;;:24;4612:1;4603:10;;;-1:-1:-1;4589:24:5;;4408:96;4493:11;4502:2;4493:11;;4408:96;;:81;4478:11;4487:2;4478:11;;4408:81;;:66;4464:10;4473:1;4464:10;;4408:66;;:52;4450:10;4459:1;4450:10;;4408:52;;:38;4436:10;4445:1;4436:10;;4408:38;;:24;4422:10;4431:1;4422:10;;4408:24;"},"gasEstimates":{"creation":{"codeDepositCost":"353800","executionCost":"infinite","totalCost":"infinite"},"external":{"getDaysInMonth(uint8,uint16)":"1008","getMonth(uint256)":"infinite","getYear(uint256)":"infinite","isLeapYear(uint16)":"415","leapYearsBefore(uint256)":"458"},"internal":{"abs(int64)":"infinite","char(bytes1)":"infinite","parseTimestamp(uint256)":"infinite","toAsciiString(address)":"infinite"}},"methodIdentifiers":{"getDaysInMonth(uint8,uint16)":"b238ad0e","getMonth(uint256)":"a324ad24","getYear(uint256)":"92d66313","isLeapYear(uint16)":"a6f0e577","leapYearsBefore(uint256)":"b1999937"}},"metadata":"{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"month\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"year\",\"type\":\"uint16\"}],\"name\":\"getDaysInMonth\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getMonth\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getYear\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"year\",\"type\":\"uint16\"}],\"name\":\"isLeapYear\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"year\",\"type\":\"uint256\"}],\"name\":\"leapYearsBefore\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LibSusuwatari.sol\":\"LibSusuwatari\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/LibSusuwatari.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.10;\\r\\n\\r\\n\\r\\nimport {SusuwatariStorage,StorageHandler} from \\\"./SusuwatariStorage.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport \\\"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\\\";\\r\\n\\r\\n\\r\\nlibrary LibSusuwatari{\\r\\n    using Strings for uint256;\\r\\n\\r\\n    struct _DateTime {\\r\\n                uint16 year;\\r\\n                uint8 month;\\r\\n        }\\r\\n\\r\\nuint constant DAY_IN_SECONDS = 86400;\\r\\n        uint constant YEAR_IN_SECONDS = 31536000;\\r\\n        uint constant LEAP_YEAR_IN_SECONDS = 31622400;\\r\\n\\r\\n        uint constant HOUR_IN_SECONDS = 3600;\\r\\n        uint constant MINUTE_IN_SECONDS = 60;\\r\\n\\r\\n        uint16 constant ORIGIN_YEAR = 1970;\\r\\n    // A simple absolute value function for int16\\r\\n    function abs(int64 x) internal pure returns (uint64) {\\r\\n        if (x < 0) {\\r\\n            return uint64(-x);\\r\\n        }\\r\\n        return uint64(x);\\r\\n    }\\r\\n\\r\\n    function toAsciiString(address x) internal pure returns (string memory) {\\r\\n        bytes memory s = new bytes(40);\\r\\n        for (uint i = 0; i < 20; i++) {\\r\\n            bytes1 b = bytes1(uint8(uint(uint160(x)) / (2**(8*(19 - i)))));\\r\\n            bytes1 hi = bytes1(uint8(b) / 16);\\r\\n            bytes1 lo = bytes1(uint8(b) - 16 * uint8(hi));\\r\\n            s[2*i] = char(hi);\\r\\n            s[2*i+1] = char(lo);            \\r\\n        }\\r\\n        return string(s);\\r\\n    }\\r\\n\\r\\n    function char(bytes1 b) internal pure returns (bytes1 c) {\\r\\n        if (uint8(b) < 10) return bytes1(uint8(b) + 0x30);\\r\\n        else return bytes1(uint8(b) + 0x57);\\r\\n    }\\r\\n\\r\\n    function isLeapYear(uint16 year) public pure returns (bool) {\\r\\n                if (year % 4 != 0) {\\r\\n                        return false;\\r\\n                }\\r\\n                if (year % 100 != 0) {\\r\\n                        return true;\\r\\n                }\\r\\n                if (year % 400 != 0) {\\r\\n                        return false;\\r\\n                }\\r\\n                return true;\\r\\n        }\\r\\n\\r\\n        function leapYearsBefore(uint year) public pure returns (uint) {\\r\\n                year -= 1;\\r\\n                return year / 4 - year / 100 + year / 400;\\r\\n        }\\r\\n\\r\\n    function parseTimestamp(uint timestamp) internal pure returns (_DateTime memory dt) {\\r\\n                uint secondsAccountedFor = 0;\\r\\n                uint buf;\\r\\n                uint8 i;\\r\\n\\r\\n                // Year\\r\\n                dt.year = getYear(timestamp);\\r\\n                buf = leapYearsBefore(dt.year) - leapYearsBefore(ORIGIN_YEAR);\\r\\n\\r\\n                secondsAccountedFor += LEAP_YEAR_IN_SECONDS * buf;\\r\\n                secondsAccountedFor += YEAR_IN_SECONDS * (dt.year - ORIGIN_YEAR - buf);\\r\\n\\r\\n                // Month\\r\\n                uint secondsInMonth;\\r\\n                for (i = 1; i <= 12; i++) {\\r\\n                        secondsInMonth = DAY_IN_SECONDS * getDaysInMonth(i, dt.year);\\r\\n                        if (secondsInMonth + secondsAccountedFor > timestamp) {\\r\\n                                dt.month = i;\\r\\n                                break;\\r\\n                        }\\r\\n                        secondsAccountedFor += secondsInMonth;\\r\\n                }\\r\\n\\r\\n        }\\r\\n\\r\\n    function getYear(uint timestamp) public pure returns (uint16) {\\r\\n                uint secondsAccountedFor = 0;\\r\\n                uint16 year;\\r\\n                uint numLeapYears;\\r\\n\\r\\n                // Year\\r\\n                year = uint16(ORIGIN_YEAR + timestamp / YEAR_IN_SECONDS);\\r\\n                numLeapYears = leapYearsBefore(year) - leapYearsBefore(ORIGIN_YEAR);\\r\\n\\r\\n                secondsAccountedFor += LEAP_YEAR_IN_SECONDS * numLeapYears;\\r\\n                secondsAccountedFor += YEAR_IN_SECONDS * (year - ORIGIN_YEAR - numLeapYears);\\r\\n\\r\\n                while (secondsAccountedFor > timestamp) {\\r\\n                        if (isLeapYear(uint16(year - 1))) {\\r\\n                                secondsAccountedFor -= LEAP_YEAR_IN_SECONDS;\\r\\n                        }\\r\\n                        else {\\r\\n                                secondsAccountedFor -= YEAR_IN_SECONDS;\\r\\n                        }\\r\\n                        year -= 1;\\r\\n                }\\r\\n                return year;\\r\\n        }\\r\\n\\r\\n        function getMonth(uint timestamp) public pure returns (uint8) {\\r\\n                return parseTimestamp(timestamp).month;\\r\\n        }\\r\\n\\r\\n        function getDaysInMonth(uint8 month, uint16 year) public pure returns (uint8) {\\r\\n                if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\\r\\n                        return 31;\\r\\n                }\\r\\n                else if (month == 4 || month == 6 || month == 9 || month == 11) {\\r\\n                        return 30;\\r\\n                }\\r\\n                else if (isLeapYear(year)) {\\r\\n                        return 29;\\r\\n                }\\r\\n                else {\\r\\n                        return 28;\\r\\n                }\\r\\n        }\\r\\n}\",\"keccak256\":\"0xe5c469df7073b8ed3d1b3f0776aa1a4bb1cfa43918d2522f2d04b510c92a80b4\",\"license\":\"MIT\"},\"contracts/SusuwatariStorage.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nimport {LibDiamond} from \\\"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\\\";\\r\\n\\r\\nbytes32 constant SUSUWATARI_STORAGE_POSITION = keccak256(\\\"susuwatari.contract.storage\\\");\\r\\nbytes32 constant LEAFWALLET_STORAGE_POSITION = keccak256(\\\"leafwallet.contract.storage\\\");\\r\\n\\r\\nstruct OwnableStorage {\\r\\n\\r\\n    address _owner;\\r\\n}\\r\\n\\r\\nstruct SusuwatariStorage {\\r\\n    \\r\\n\\r\\n    bool isInitialized;\\r\\n    bool _isDonatingActive;\\r\\n    \\r\\n    uint16 _startDateId;\\r\\n\\r\\n    uint32[48] _donationBuckets ; \\r\\n    mapping(uint32 => address[]) _dateIdAddresses;\\r\\n    mapping(uint256 => int32) _dateAddressIdVoteValues;\\r\\n    mapping(uint256 => bool) _dateAddressIdHasVotes;\\r\\n    mapping(uint256 => bool) _monthAddressHasTransfered;\\r\\n\\r\\n    bool _isTesting;\\r\\n\\r\\n    mapping (address => uint64) _fameHoldings;\\r\\n    address[] _fameHolders;\\r\\n    uint256 _totalFame;\\r\\n}\\r\\n\\r\\ncontract StorageHandler {\\r\\n    function susu() internal pure returns (SusuwatariStorage storage cs) {\\r\\n        bytes32 position = SUSUWATARI_STORAGE_POSITION;\\r\\n        assembly {\\r\\n           cs.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function os() internal pure returns (OwnableStorage storage cs) {\\r\\n        bytes32 position = keccak256(\\\"ownable.contract.storage\\\");\\r\\n        assembly {\\r\\n           cs.slot := position\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function ds() internal pure returns (LibDiamond.DiamondStorage storage) {\\r\\n        return LibDiamond.diamondStorage();\\r\\n    }\\r\\n}\",\"keccak256\":\"0x1c1b64576006d7245f8b9ec09599b5e9213713b657b461fdbe71a4f0eed0f360\",\"license\":\"MIT\"},\"hardhat-deploy/solc_0.8/diamond/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0xc00c16bfa30a3fa5f3dc684f7f8ba62c259962b25f647d9588739458989717fc\",\"license\":\"MIT\"},\"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);            \\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress != _facetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(_facetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n        enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }    \\n\\n\\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n        // an immutable function is a function defined directly in a diamond\\n        require(_facetAddress != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\");\\n        } else {\\n            require(_calldata.length > 0, \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\");\\n            if (_init != address(this)) {\\n                enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x2205345e83eb86f5281f159a9215a096cb6d404782619f9b8e9d7a4a46c32a37\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/SusuwatariFacet.sol":{"SusuwatariFacet":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint64","name":"donatedFinney","type":"uint64"},{"indexed":false,"internalType":"string","name":"name","type":"string"},{"indexed":false,"internalType":"uint16","name":"months","type":"uint16"},{"indexed":false,"internalType":"uint16","name":"currentMonth","type":"uint16"},{"indexed":false,"internalType":"uint16","name":"currentYear","type":"uint16"}],"name":"Donated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint32","name":"shareFinney","type":"uint32"},{"indexed":false,"internalType":"uint32","name":"transferDateId","type":"uint32"},{"indexed":false,"internalType":"uint16","name":"transferFromDonationBucketPos","type":"uint16"},{"indexed":false,"internalType":"uint16","name":"month","type":"uint16"},{"indexed":false,"internalType":"uint16","name":"year","type":"uint16"}],"name":"RemovedFromDonationBucket","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint16","name":"month","type":"uint16"},{"indexed":false,"internalType":"uint16","name":"year","type":"uint16"}],"name":"TransferedFairShare","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"url","type":"string"},{"indexed":false,"internalType":"bool","name":"up","type":"bool"},{"indexed":false,"internalType":"string","name":"title","type":"string"},{"indexed":false,"internalType":"address","name":"receiver","type":"address"},{"indexed":false,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"uint8","name":"month","type":"uint8"},{"indexed":false,"internalType":"uint16","name":"year","type":"uint16"}],"name":"Voted","type":"event"},{"inputs":[{"internalType":"uint16","name":"months","type":"uint16"},{"internalType":"string","name":"name","type":"string"}],"name":"donate","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"donationBuckets","outputs":[{"components":[{"internalType":"uint16","name":"startMonth","type":"uint16"},{"internalType":"uint16","name":"startYear","type":"uint16"},{"internalType":"uint32[48]","name":"donationBuckets","type":"uint32[48]"}],"internalType":"struct SusuwatariFacet.DonationBuckets","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"myFame","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"setDonatingActive","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"setDonatingInactive","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"totalFame","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address payable","name":"to","type":"address"},{"internalType":"uint16","name":"month","type":"uint16"},{"internalType":"uint16","name":"year","type":"uint16"}],"name":"transfer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"url","type":"string"},{"internalType":"bool","name":"up","type":"bool"},{"internalType":"address","name":"receiver","type":"address"},{"internalType":"string","name":"title","type":"string"}],"name":"vote","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension, but not including the Enumerable extension, which is available separately as {ERC721Enumerable}.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"6080806040523461001657611db2908161001d8239f35b50600080fdfe6040608081526004361015610015575b50600080fd5b600090813560e01c806327e665f71461015e5780634f9b09af1461014b5780635f592bb514610134578063672296dc1461011c5780636e283c3814610101578063bc956abb146100c2578063c3269df9146100a85763db75953b1461007a575061000f565b346100a4576100a0915061008d3661018f565b610095611c72565b905191829182610390565b0390f35b5080fd5b50346100a4576100b73661018f565b6100bf610497565b51f35b50346100a4576100a091506100d63661018f565b6001600160401b036100e733610845565b54915191166001600160401b031681529081906020820190565b50346100a4576100bf6101133661031d565b92919091611206565b50346100a4576100bf61012e366102e2565b91611754565b50346100a4576101433661018f565b6100bf610445565b506100bf6101583661028b565b90610968565b50503461018c575061016f3661018f565b600080516020611d4f83398151915254608052607f1960a0016080f35b80fd5b600090600319011261000f57565b50634e487b7160e01b600052604160045260246000fd5b61060081019081106001600160401b038211176101d057604052565b6101d861019d565b604052565b60405190606082018281106001600160401b038211176101d057604052565b81601f82011215610283578035906001600160401b0392838311610276575b60405193601f8401601f19908116603f0116850190811185821017610269575b6040528284526020838301011161026057816000926020809301838601378301015290565b50505050600080fd5b61027161019d565b61023b565b61027e61019d565b61021b565b505050600080fd5b9060406003198301126102c95760043561ffff81168114156102835791602435906001600160401b038211610260576102c6916004016101fc565b90565b5050600080fd5b6001600160a01b038116141561000f57565b606090600319011261000f576004356102fa816102d0565b9061ffff9060243582811681141561026057916044359081168114156102605790565b60806003198201126102c9576001600160401b03906004358281116102605781610349916004016101fc565b926024358015158114156103865792604435610364816102d0565b9260643591821161037b576102c6916004016101fc565b505050505050600080fd5b5050505050600080fd5b91909161064081019260408061ffff92838151168552602093848201511684860152015192016000905b603082106103c85750505050565b828060019263ffffffff8751168152019401910190926103ba565b156103ea57565b5060405162461bcd60e51b815260206004820152602c60248201527f4f6e6c79206f776e657220697320616c6c6f77656420746f20706572666f726d60448201526b103a3434b99030b1ba34b7b760a11b6064820152608490fd5b61047960018060a01b037fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c1320541633146103e3565b600080516020611d2f833981519152805461ff001916610100179055565b6104cb60018060a01b037fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c1320541633146103e3565b600080516020611d2f833981519152805461ff0019169055565b50634e487b7160e01b600052601160045260246000fd5b60ff166001811061050f575b6000190190565b6105176104e5565b610508565b1561052357565b50606460405162461bcd60e51b815260206004820152602060248201527f4f6e6c79207570746f203234206d6f6e74687320697320737570706f727465646044820152fd5b50634e487b7160e01b600052601260045260246000fd5b8115610589570690565b610591610568565b0690565b1561059c57565b5060405162461bcd60e51b815260206004820152603860248201527f506179656420616d6f756e74206d75737420626520646576696461626c65206260448201527f7920746865206469737472696275746564206d6f6e74687300000000000000006064820152608490fd5b1561060f57565b5060405162461bcd60e51b815260206004820152603a60248201527f4c657373207468616e20312066696e6e657928312f313030302045544829206660448201527f72616374696f6e7320617265206e6f7420737570706f727465640000000000006064820152608490fd5b8115610685570490565b61068d610568565b0490565b1561069857565b5060405162461bcd60e51b815260206004820152603c60248201527f446f6e6174696f6e73206c6172676572207468616e20315f3030305f3030305f60448201527f3030302066696e6e657920617265206e6f7420737570706f72746564000000006064820152608490fd5b600c9061ffff80911680910482118115151661071e570290565b6107266104e5565b0290565b9061ffff8080931691168092038111610741570190565b6107496104e5565b0190565b61ffff166107b28110610763575b6107b1190190565b61076b6104e5565b61075b565b61ffff166001811061050f576000190190565b61ffff9182169116818110610796570390565b61079e6104e5565b0390565b63ffffffff9182169116818110610796570390565b60019063ffffffff809116908114610741570190565b9063ffffffff8080931691168092038111610741570190565b50634e487b7160e01b600052603260045260246000fd5b906030821015610838575b601c8260031c7f033cb808a453240b3c9916e6d1ccc504e492e2b2453192ff241c73847a521d07019260021b1690565b6108406107e6565b610808565b6001600160a01b031660009081527f033cb808a453240b3c9916e6d1ccc504e492e2b2453192ff241c73847a521d126020526040902090565b6001600160401b036001911667fffffffffffffffe8111610741570190565b906001600160401b038080931691168092038111610741570190565b6001906001198111610741570190565b81198111610741570190565b91908251928382526000905b84821061090e575092806020939411610901575b601f01601f1916010190565b60008382840101526108f5565b906020908180828501015190828601015201906108e1565b93959490610950608094936001600160401b0360ff9316875260a0602088015260a08701906108d5565b9661ffff809416604087015216606085015216910152565b91909161097442610d53565b91602083019161099661099061098b855160ff1690565b6104fc565b60ff1690565b9461ffff8216946109a96019871061051c565b6109bc6109b6873461057f565b15610595565b66038d7ea4c680006109d081340615610608565b3404926109e3633b9aca00851115610691565b610aaa6109f9610a9a610a026109f98b8961067b565b63ffffffff1690565b9a610a2e7f033cb808a453240b3c9916e6d1ccc504e492e2b2453192ff241c73847a521d115460ff1690565b60009015610bfd5750610a95610a8e60ff610a6760059650919390929496505b610a62610a5d8a5161ffff1690565b610704565b61072a565b931692610a88600080516020611d2f8339815191525461ffff9060101c1690565b90610783565b61ffff1690565b6107a2565b96875b610aaa6109f9838b6107cd565b63ffffffff821690811015610b2a5791610b216109f992610b1c8d610afa610af46030610aaa990692610aef610adf856107fd565b905463ffffffff9160031b1c1690565b6107cd565b916107fd565b90919082549060031b9163ffffffff9283811b93849216901b16911916179055565b6107b7565b91509150610a9d565b505050610bf8939497507f6a7f8439932380592f144688013b66f9f08c6c8571bc599d1b18ceae2cf67ed39650610bea610be1610b9997610bda610bc8600a8a04610bb3610b7733610845565b6001600160401b039d8e8416610b9483546001600160401b031690565b61089d565b6001600160401b03166001600160401b0319825416179055565b600080516020611d4f833981519152546108c9565b600080516020611d4f83398151915255565b5160ff1690565b925161ffff1690565b926040519687961686610926565b0390a1565b610a8e60ff610a67610a9593965091939092949650610a4e565b6301e133808110610c2d575b6301e1337f190190565b610c356104e5565b610c23565b6301e285008110610c50575b6301e284ff190190565b610c586104e5565b610c46565b6101dd8110610c6f575b6101dc190190565b610c776104e5565b610c67565b818110610796570390565b7c87d206500cf71c7a443cd6c7ebe38ec0b59488f085555dd275ba5624c78111600116610cb8575b6301e285000290565b610cc06104e5565b610caf565b7c883148f5cb1270b85273b667ae1cfdf5d70ac5a1ecccd54fe15c297df38111600116610cf6575b6301e133800290565b610cfe6104e5565b610ced565b7dc22e450672894ab6cd8efb11d33f5617839a5bc7dea00c22e450672894ab8111600116610d34575b620151800290565b610d3c6104e5565b610d2c565b60ff6001911660ff8114610741570190565b9060405191604083018381106001600160401b03821117610e6c575b604052600083526020830192600084528093610d95610d8d84610ec1565b61ffff168352565b610dee610db7610db2610dad610a8e865161ffff1690565b610e79565b610c5d565b610de8610de3610dc683610c87565b92610dde610a8e610dd9895161ffff1690565b61074d565b610c7c565b610cc5565b906108c9565b906001915b600c60ff84161115610e07575b5050505050565b610e27610e22610990610e1c875161ffff1690565b86610fca565b610d03565b9085610e3382846108c9565b11610e5157610e4b91610e45916108c9565b92610d41565b91610df3565b505060ff909116905250610e629050565b3880808080610e00565b610e7461019d565b610d6f565b6102c69060018110610eb4575b600019018060021c906101906064820491828410610ea7575b0491036108c9565b610eaf6104e5565b610e9f565b610ebc6104e5565b610e86565b6301e13380810490610f256107b283198111610f84575b61ffff938491011692610de8610eed85610e79565b6101dd90818110610f77575b6101dc198101610f0881610c87565b94610f128961074d565b16908110610f6a575b9695960301610cc5565b828111610f325750905090565b610f5b90610f47610f4284610770565b610f91565b15610f6157610f5590610c3a565b91610770565b90610f25565b610f5590610c17565b610f726104e5565b610f1b565b610f7f6104e5565b610ef9565b610f8c6104e5565b610ed8565b60038116610fc45761ffff809116816064820616610fbd57610190900616610fb857600190565b600090565b5050600190565b50600090565b60ff16600181148015611098575b801561108e575b8015611084575b801561107a575b8015611070575b8015611066575b15611007575050601f90565b6004811490811561105b575b8115611050575b8115611045575b501561102d5750601e90565b61103690610f91565b1561104057601d90565b601c90565b600b91501438611021565b60098114915061101a565b600681149150611013565b50600c8114610ffb565b50600a8114610ff4565b5060088114610fed565b5060078114610fe6565b5060058114610fdf565b5060038114610fd8565b6000527f033cb808a453240b3c9916e6d1ccc504e492e2b2453192ff241c73847a521d0e602052604060002090565b63ffffffff166000527f033cb808a453240b3c9916e6d1ccc504e492e2b2453192ff241c73847a521d0d602052604060002090565b805482101561111f575b60005260206000200190600090565b6111276107e6565b611110565b805461114f9168010000000000000000821015611172575b600182018155611106565b819291549060031b9160018060a01b039283811b93849216901b16911916179055565b61117a61019d565b611144565b60030b637fffffff19811461050f576000190190565b60019060030b637fffffff8114610741570190565b9590936111e360ff9360c0979a99956111ce61ffff9860e08c5260e08c01906108d5565b91151560208b015289820360408b01526108d5565b6001600160a01b039182166060890152981660808701521660a085015216910152565b7fd88c393c3c90d3e614d54b41cd8bf24bc2cd20390af15081efe05c39aa4a155b9392610bf89161123642610d53565b906112a3610be16020840161125261099061098b835160ff1690565b61111160901b87811614156112b2575b5061128861126f33610845565b610b9961128382546001600160401b031690565b61087e565b610bda610bc8600080516020611d4f833981519152546108b9565b926040519687963393886111aa565b611306906112e17f033cb808a453240b3c9916e6d1ccc504e492e2b2453192ff241c73847a521d115460ff1690565b6000901561144a5750610a95610a8e60ff60055b1692610a62610a5d8b5161ffff1690565b61132563ffffffff8216601489901b62100000600160b41b03166108c9565b908761136b611367611360856000527f033cb808a453240b3c9916e6d1ccc504e492e2b2453192ff241c73847a521d0f602052604060002090565b5460ff1690565b1590565b6113d6575b505088156113b2576113846113ac916110a2565b611397611392825460030b90565b611195565b63ffffffff198254169063ffffffff16179055565b38611262565b6113be6113d1916110a2565b6113976113cc825460030b90565b61117f565b6113ac565b61143e61144392611420611413866000527f033cb808a453240b3c9916e6d1ccc504e492e2b2453192ff241c73847a521d0f602052604060002090565b805460ff19166001179055565b61143961142c866110a2565b805463ffffffff19169055565b6110d1565b61112c565b3887611370565b610a8e60ff610a95926112f5565b1561145f57565b5060405162461bcd60e51b815260206004820152604260248201527f596f75722063616e206f6e6c79207472616e7366657220796f7572207368617260448201527f6520666f72206d6f6e7468206265666f7265207468652063757272656e74206f6064820152616e6560f01b608482015260a490fd5b156114dd57565b5060405162461bcd60e51b815260206004820152604360248201527f596f75722063616e206f6e6c79207472616e7366657220796f7572207368617260448201527f6520666f72206d6f6e74687320616674657220646f6e6174696f6e20737461726064820152621d195960ea1b608482015260a490fd5b1561155c57565b5060405162461bcd60e51b815260206004820152603360248201527f596f75722063616e2774207472616e7366657220736861726573206d6f7265206044820152723a3430b710191a1036b7b73a34399030b3b79760691b6064820152608490fd5b156115c557565b5060405162461bcd60e51b815260206004820152601860248201527f536861726520616c7265616479207472616e73666572656400000000000000006044820152606490fd5b1561161257565b5060405162461bcd60e51b815260206004820152602a60248201527f596f752068617665206e6f7420656e6f756768207570766f74657320746f20626044820152696520656c696769626c6560b01b6064820152608490fd5b6001906000198114610741570190565b63ffffffff918280921691829116920482118115151661071e570290565b906001600160401b038091169182156116b157160490565b6116b9610568565b160490565b156116c557565b5060405162461bcd60e51b815260206004820152602f60248201527f4e6f7420656e6f75676820646f6e6174696f6e7320666f722074686174206d6f60448201526e373a34399030bb30b4b630b136329760891b6064820152608490fd5b66ffffffffffffff8091168066038d7ea4c68000920482118115151661071e570290565b506040513d6000823e3d90fd5b909161177f610a8e61176542610d53565b610a62610a5d610be161099061098b602086015160ff1690565b92611798610a8e61179383610a6286610704565b610770565b94859163ffffffff936117f16018866117ea8188169b8b6117bd8e85819f1611611458565b610a956117e1610a8e600080516020611d2f8339815191525461ffff9060101c1690565b809e10156114d6565b1610611555565b6117fe883360141b6108c9565b9161183e611838611360856000527f033cb808a453240b3c9916e6d1ccc504e492e2b2453192ff241c73847a521d10602052604060002090565b156115be565b60009661186188611858611851876110a2565b5460030b90565b60030b1361160b565b8796885b61186e886110d1565b54811015611917576118c58c6118c06118ba6118ae6118ae611899878f611894906110d1565b611106565b905460039190911b1c6001600160a01b031690565b6001600160a01b031690565b60141b90565b6108c9565b8a6118db6118d5611851846110a2565b60030b90565b136118f0575b506118eb9061166b565b611865565b6118eb919961190a6109f96109f9611851611910956110a2565b9061089d565b98906118e1565b50889989979993959894969b50908061193185938c6107a2565b603061ffff919091160695611945876107fd565b905460039190911b1c63ffffffff1661195d8c6110a2565b5460030b63ffffffff166119709161167b565b63ffffffff169061198091611699565b63ffffffff1699611990876107fd565b905460039190911b1c63ffffffff16828c169384911610156119b1906116be565b6119ba876107fd565b81548d90600383901b1c63ffffffff16906119d4916107a2565b825463ffffffff60039390931b83811b80199092169390921690911b16179055611a27906000527f033cb808a453240b3c9916e6d1ccc504e492e2b2453192ff241c73847a521d10602052604060002090565b805460ff19166001179055611a3b82611723565b839066ffffffffffffff169182159d610bf89b7fd60ef7047ec8bfc45d19c2ec01830d929258bf2a7ae675fde3dab44fa17f2f769f98611ae197611adc96610bc8967feb338d42e19428a462947fce4ff0c28c2ccae6f7ecdb16beb0dc981f98ae967c9c611b68575b6001600160a01b038c1690f115611b5b575b600a840416610bb3611ac733610845565b610b9983610b9483546001600160401b031690565b611723565b6040805166ffffffffffffff9290921682526001600160a01b0392909216602082015261ffff858116928201929092529085166060820152608090a16040519586958693919594909260809360a086019763ffffffff809216875216602086015261ffff9283809216604087015216606085015216910152565b611b63611747565b611ab6565b506108fc611aa4565b60408051919060007f033cb808a453240b3c9916e6d1ccc504e492e2b2453192ff241c73847a521d07845b60306007840110611bb65750505050611bb4826101b4565b565b6001610100600892611c668554611c5b63ffffffff611bdc8582851663ffffffff169052565b611bf360208285828901921c1663ffffffff169052565b63ffffffff838c1c821616858c0152611c1960608285828901921c1663ffffffff169052565b611c3060808285828901921c1663ffffffff169052565b611c4760a08285828901921c1663ffffffff169052565b60c09083828701921c1663ffffffff169052565b60e090811c90830152565b01920192019190611b9c565b604051606081018181106001600160401b03821117611d21575b60405260008152600060208201526040805191611ca8836101b4565b610600368437015261ffff611d04600c82600080516020611d2f8339815191525460101c1692818406169261fffe8411611d14575b611cf66001611cea6101dd565b9501859061ffff169052565b04602083019061ffff169052565b611d0c611b71565b604082015290565b611d1c6104e5565b611cdd565b611d2961019d565b611c8c56fe033cb808a453240b3c9916e6d1ccc504e492e2b2453192ff241c73847a521d06033cb808a453240b3c9916e6d1ccc504e492e2b2453192ff241c73847a521d14a3646970667358221220256698cabf0f4e0df521a2a56cb0f4f7b2317f83a7a4d60d6901dcae71db636e6c6578706572696d656e74616cf564736f6c634300080a0041","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH2 0x16 JUMPI PUSH2 0x1DB2 SWAP1 DUP2 PUSH2 0x1D DUP3 CODECOPY RETURN JUMPDEST POP PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x40 PUSH1 0x80 DUP2 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x15 JUMPI JUMPDEST POP PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP1 DUP2 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x27E665F7 EQ PUSH2 0x15E JUMPI DUP1 PUSH4 0x4F9B09AF EQ PUSH2 0x14B JUMPI DUP1 PUSH4 0x5F592BB5 EQ PUSH2 0x134 JUMPI DUP1 PUSH4 0x672296DC EQ PUSH2 0x11C JUMPI DUP1 PUSH4 0x6E283C38 EQ PUSH2 0x101 JUMPI DUP1 PUSH4 0xBC956ABB EQ PUSH2 0xC2 JUMPI DUP1 PUSH4 0xC3269DF9 EQ PUSH2 0xA8 JUMPI PUSH4 0xDB75953B EQ PUSH2 0x7A JUMPI POP PUSH2 0xF JUMP JUMPDEST CALLVALUE PUSH2 0xA4 JUMPI PUSH2 0xA0 SWAP2 POP PUSH2 0x8D CALLDATASIZE PUSH2 0x18F JUMP JUMPDEST PUSH2 0x95 PUSH2 0x1C72 JUMP JUMPDEST SWAP1 MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x390 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST POP DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0xA4 JUMPI PUSH2 0xB7 CALLDATASIZE PUSH2 0x18F JUMP JUMPDEST PUSH2 0xBF PUSH2 0x497 JUMP JUMPDEST MLOAD RETURN JUMPDEST POP CALLVALUE PUSH2 0xA4 JUMPI PUSH2 0xA0 SWAP2 POP PUSH2 0xD6 CALLDATASIZE PUSH2 0x18F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH2 0xE7 CALLER PUSH2 0x845 JUMP JUMPDEST SLOAD SWAP2 MLOAD SWAP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND DUP2 MSTORE SWAP1 DUP2 SWAP1 PUSH1 0x20 DUP3 ADD SWAP1 JUMP JUMPDEST POP CALLVALUE PUSH2 0xA4 JUMPI PUSH2 0xBF PUSH2 0x113 CALLDATASIZE PUSH2 0x31D JUMP JUMPDEST SWAP3 SWAP2 SWAP1 SWAP2 PUSH2 0x1206 JUMP JUMPDEST POP CALLVALUE PUSH2 0xA4 JUMPI PUSH2 0xBF PUSH2 0x12E CALLDATASIZE PUSH2 0x2E2 JUMP JUMPDEST SWAP2 PUSH2 0x1754 JUMP JUMPDEST POP CALLVALUE PUSH2 0xA4 JUMPI PUSH2 0x143 CALLDATASIZE PUSH2 0x18F JUMP JUMPDEST PUSH2 0xBF PUSH2 0x445 JUMP JUMPDEST POP PUSH2 0xBF PUSH2 0x158 CALLDATASIZE PUSH2 0x28B JUMP JUMPDEST SWAP1 PUSH2 0x968 JUMP JUMPDEST POP POP CALLVALUE PUSH2 0x18C JUMPI POP PUSH2 0x16F CALLDATASIZE PUSH2 0x18F JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1D4F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x80 MSTORE PUSH1 0x7F NOT PUSH1 0xA0 ADD PUSH1 0x80 RETURN JUMPDEST DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0xF JUMPI JUMP JUMPDEST POP PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x600 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x1D0 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x1D8 PUSH2 0x19D JUMP JUMPDEST PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0x60 DUP3 ADD DUP3 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x1D0 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST DUP2 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0x283 JUMPI DUP1 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP3 DUP4 DUP4 GT PUSH2 0x276 JUMPI JUMPDEST PUSH1 0x40 MLOAD SWAP4 PUSH1 0x1F DUP5 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP6 ADD SWAP1 DUP2 GT DUP6 DUP3 LT OR PUSH2 0x269 JUMPI JUMPDEST PUSH1 0x40 MSTORE DUP3 DUP5 MSTORE PUSH1 0x20 DUP4 DUP4 ADD ADD GT PUSH2 0x260 JUMPI DUP2 PUSH1 0x0 SWAP3 PUSH1 0x20 DUP1 SWAP4 ADD DUP4 DUP7 ADD CALLDATACOPY DUP4 ADD ADD MSTORE SWAP1 JUMP JUMPDEST POP POP POP POP PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x271 PUSH2 0x19D JUMP JUMPDEST PUSH2 0x23B JUMP JUMPDEST PUSH2 0x27E PUSH2 0x19D JUMP JUMPDEST PUSH2 0x21B JUMP JUMPDEST POP POP POP PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 PUSH1 0x40 PUSH1 0x3 NOT DUP4 ADD SLT PUSH2 0x2C9 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0xFFFF DUP2 AND DUP2 EQ ISZERO PUSH2 0x283 JUMPI SWAP2 PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x260 JUMPI PUSH2 0x2C6 SWAP2 PUSH1 0x4 ADD PUSH2 0x1FC JUMP JUMPDEST SWAP1 JUMP JUMPDEST POP POP PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND EQ ISZERO PUSH2 0xF JUMPI JUMP JUMPDEST PUSH1 0x60 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0xF JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x2FA DUP2 PUSH2 0x2D0 JUMP JUMPDEST SWAP1 PUSH2 0xFFFF SWAP1 PUSH1 0x24 CALLDATALOAD DUP3 DUP2 AND DUP2 EQ ISZERO PUSH2 0x260 JUMPI SWAP2 PUSH1 0x44 CALLDATALOAD SWAP1 DUP2 AND DUP2 EQ ISZERO PUSH2 0x260 JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x80 PUSH1 0x3 NOT DUP3 ADD SLT PUSH2 0x2C9 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP1 PUSH1 0x4 CALLDATALOAD DUP3 DUP2 GT PUSH2 0x260 JUMPI DUP2 PUSH2 0x349 SWAP2 PUSH1 0x4 ADD PUSH2 0x1FC JUMP JUMPDEST SWAP3 PUSH1 0x24 CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ ISZERO PUSH2 0x386 JUMPI SWAP3 PUSH1 0x44 CALLDATALOAD PUSH2 0x364 DUP2 PUSH2 0x2D0 JUMP JUMPDEST SWAP3 PUSH1 0x64 CALLDATALOAD SWAP2 DUP3 GT PUSH2 0x37B JUMPI PUSH2 0x2C6 SWAP2 PUSH1 0x4 ADD PUSH2 0x1FC JUMP JUMPDEST POP POP POP POP POP POP PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP POP POP POP PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0x640 DUP2 ADD SWAP3 PUSH1 0x40 DUP1 PUSH2 0xFFFF SWAP3 DUP4 DUP2 MLOAD AND DUP6 MSTORE PUSH1 0x20 SWAP4 DUP5 DUP3 ADD MLOAD AND DUP5 DUP7 ADD MSTORE ADD MLOAD SWAP3 ADD PUSH1 0x0 SWAP1 JUMPDEST PUSH1 0x30 DUP3 LT PUSH2 0x3C8 JUMPI POP POP POP POP JUMP JUMPDEST DUP3 DUP1 PUSH1 0x1 SWAP3 PUSH4 0xFFFFFFFF DUP8 MLOAD AND DUP2 MSTORE ADD SWAP5 ADD SWAP2 ADD SWAP1 SWAP3 PUSH2 0x3BA JUMP JUMPDEST ISZERO PUSH2 0x3EA JUMPI JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F6E6C79206F776E657220697320616C6C6F77656420746F20706572666F726D PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x103A3434B99030B1BA34B7B7 PUSH1 0xA1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH2 0x479 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH32 0xC8FCAD8DB84D3CC18B4C41D551EA0EE66DD599CDE068D998E57D5E09332C1320 SLOAD AND CALLER EQ PUSH2 0x3E3 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1D2F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x4CB PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH32 0xC8FCAD8DB84D3CC18B4C41D551EA0EE66DD599CDE068D998E57D5E09332C1320 SLOAD AND CALLER EQ PUSH2 0x3E3 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1D2F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE JUMP JUMPDEST POP PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0xFF AND PUSH1 0x1 DUP2 LT PUSH2 0x50F JUMPI JUMPDEST PUSH1 0x0 NOT ADD SWAP1 JUMP JUMPDEST PUSH2 0x517 PUSH2 0x4E5 JUMP JUMPDEST PUSH2 0x508 JUMP JUMPDEST ISZERO PUSH2 0x523 JUMPI JUMP JUMPDEST POP PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F6E6C79207570746F203234206D6F6E74687320697320737570706F72746564 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST POP PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 ISZERO PUSH2 0x589 JUMPI MOD SWAP1 JUMP JUMPDEST PUSH2 0x591 PUSH2 0x568 JUMP JUMPDEST MOD SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x59C JUMPI JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x38 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x506179656420616D6F756E74206D75737420626520646576696461626C652062 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7920746865206469737472696275746564206D6F6E7468730000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x60F JUMPI JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4C657373207468616E20312066696E6E657928312F3130303020455448292066 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x72616374696F6E7320617265206E6F7420737570706F72746564000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST DUP2 ISZERO PUSH2 0x685 JUMPI DIV SWAP1 JUMP JUMPDEST PUSH2 0x68D PUSH2 0x568 JUMP JUMPDEST DIV SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x698 JUMPI JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x446F6E6174696F6E73206C6172676572207468616E20315F3030305F3030305F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x3030302066696E6E657920617265206E6F7420737570706F7274656400000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0xC SWAP1 PUSH2 0xFFFF DUP1 SWAP2 AND DUP1 SWAP2 DIV DUP3 GT DUP2 ISZERO ISZERO AND PUSH2 0x71E JUMPI MUL SWAP1 JUMP JUMPDEST PUSH2 0x726 PUSH2 0x4E5 JUMP JUMPDEST MUL SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xFFFF DUP1 DUP1 SWAP4 AND SWAP2 AND DUP1 SWAP3 SUB DUP2 GT PUSH2 0x741 JUMPI ADD SWAP1 JUMP JUMPDEST PUSH2 0x749 PUSH2 0x4E5 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xFFFF AND PUSH2 0x7B2 DUP2 LT PUSH2 0x763 JUMPI JUMPDEST PUSH2 0x7B1 NOT ADD SWAP1 JUMP JUMPDEST PUSH2 0x76B PUSH2 0x4E5 JUMP JUMPDEST PUSH2 0x75B JUMP JUMPDEST PUSH2 0xFFFF AND PUSH1 0x1 DUP2 LT PUSH2 0x50F JUMPI PUSH1 0x0 NOT ADD SWAP1 JUMP JUMPDEST PUSH2 0xFFFF SWAP2 DUP3 AND SWAP2 AND DUP2 DUP2 LT PUSH2 0x796 JUMPI SUB SWAP1 JUMP JUMPDEST PUSH2 0x79E PUSH2 0x4E5 JUMP JUMPDEST SUB SWAP1 JUMP JUMPDEST PUSH4 0xFFFFFFFF SWAP2 DUP3 AND SWAP2 AND DUP2 DUP2 LT PUSH2 0x796 JUMPI SUB SWAP1 JUMP JUMPDEST PUSH1 0x1 SWAP1 PUSH4 0xFFFFFFFF DUP1 SWAP2 AND SWAP1 DUP2 EQ PUSH2 0x741 JUMPI ADD SWAP1 JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF DUP1 DUP1 SWAP4 AND SWAP2 AND DUP1 SWAP3 SUB DUP2 GT PUSH2 0x741 JUMPI ADD SWAP1 JUMP JUMPDEST POP PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x30 DUP3 LT ISZERO PUSH2 0x838 JUMPI JUMPDEST PUSH1 0x1C DUP3 PUSH1 0x3 SHR PUSH32 0x33CB808A453240B3C9916E6D1CCC504E492E2B2453192FF241C73847A521D07 ADD SWAP3 PUSH1 0x2 SHL AND SWAP1 JUMP JUMPDEST PUSH2 0x840 PUSH2 0x7E6 JUMP JUMPDEST PUSH2 0x808 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0x33CB808A453240B3C9916E6D1CCC504E492E2B2453192FF241C73847A521D12 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0x1 SWAP2 AND PUSH8 0xFFFFFFFFFFFFFFFE DUP2 GT PUSH2 0x741 JUMPI ADD SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP1 SWAP4 AND SWAP2 AND DUP1 SWAP3 SUB DUP2 GT PUSH2 0x741 JUMPI ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 SWAP1 PUSH1 0x1 NOT DUP2 GT PUSH2 0x741 JUMPI ADD SWAP1 JUMP JUMPDEST DUP2 NOT DUP2 GT PUSH2 0x741 JUMPI ADD SWAP1 JUMP JUMPDEST SWAP2 SWAP1 DUP3 MLOAD SWAP3 DUP4 DUP3 MSTORE PUSH1 0x0 SWAP1 JUMPDEST DUP5 DUP3 LT PUSH2 0x90E JUMPI POP SWAP3 DUP1 PUSH1 0x20 SWAP4 SWAP5 GT PUSH2 0x901 JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP3 DUP5 ADD ADD MSTORE PUSH2 0x8F5 JUMP JUMPDEST SWAP1 PUSH1 0x20 SWAP1 DUP2 DUP1 DUP3 DUP6 ADD ADD MLOAD SWAP1 DUP3 DUP7 ADD ADD MSTORE ADD SWAP1 PUSH2 0x8E1 JUMP JUMPDEST SWAP4 SWAP6 SWAP5 SWAP1 PUSH2 0x950 PUSH1 0x80 SWAP5 SWAP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0xFF SWAP4 AND DUP8 MSTORE PUSH1 0xA0 PUSH1 0x20 DUP9 ADD MSTORE PUSH1 0xA0 DUP8 ADD SWAP1 PUSH2 0x8D5 JUMP JUMPDEST SWAP7 PUSH2 0xFFFF DUP1 SWAP5 AND PUSH1 0x40 DUP8 ADD MSTORE AND PUSH1 0x60 DUP6 ADD MSTORE AND SWAP2 ADD MSTORE JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0x974 TIMESTAMP PUSH2 0xD53 JUMP JUMPDEST SWAP2 PUSH1 0x20 DUP4 ADD SWAP2 PUSH2 0x996 PUSH2 0x990 PUSH2 0x98B DUP6 MLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x4FC JUMP JUMPDEST PUSH1 0xFF AND SWAP1 JUMP JUMPDEST SWAP5 PUSH2 0xFFFF DUP3 AND SWAP5 PUSH2 0x9A9 PUSH1 0x19 DUP8 LT PUSH2 0x51C JUMP JUMPDEST PUSH2 0x9BC PUSH2 0x9B6 DUP8 CALLVALUE PUSH2 0x57F JUMP JUMPDEST ISZERO PUSH2 0x595 JUMP JUMPDEST PUSH7 0x38D7EA4C68000 PUSH2 0x9D0 DUP2 CALLVALUE MOD ISZERO PUSH2 0x608 JUMP JUMPDEST CALLVALUE DIV SWAP3 PUSH2 0x9E3 PUSH4 0x3B9ACA00 DUP6 GT ISZERO PUSH2 0x691 JUMP JUMPDEST PUSH2 0xAAA PUSH2 0x9F9 PUSH2 0xA9A PUSH2 0xA02 PUSH2 0x9F9 DUP12 DUP10 PUSH2 0x67B JUMP JUMPDEST PUSH4 0xFFFFFFFF AND SWAP1 JUMP JUMPDEST SWAP11 PUSH2 0xA2E PUSH32 0x33CB808A453240B3C9916E6D1CCC504E492E2B2453192FF241C73847A521D11 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 ISZERO PUSH2 0xBFD JUMPI POP PUSH2 0xA95 PUSH2 0xA8E PUSH1 0xFF PUSH2 0xA67 PUSH1 0x5 SWAP7 POP SWAP2 SWAP4 SWAP1 SWAP3 SWAP5 SWAP7 POP JUMPDEST PUSH2 0xA62 PUSH2 0xA5D DUP11 MLOAD PUSH2 0xFFFF AND SWAP1 JUMP JUMPDEST PUSH2 0x704 JUMP JUMPDEST PUSH2 0x72A JUMP JUMPDEST SWAP4 AND SWAP3 PUSH2 0xA88 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1D2F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH2 0xFFFF SWAP1 PUSH1 0x10 SHR AND SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x783 JUMP JUMPDEST PUSH2 0xFFFF AND SWAP1 JUMP JUMPDEST PUSH2 0x7A2 JUMP JUMPDEST SWAP7 DUP8 JUMPDEST PUSH2 0xAAA PUSH2 0x9F9 DUP4 DUP12 PUSH2 0x7CD JUMP JUMPDEST PUSH4 0xFFFFFFFF DUP3 AND SWAP1 DUP2 LT ISZERO PUSH2 0xB2A JUMPI SWAP2 PUSH2 0xB21 PUSH2 0x9F9 SWAP3 PUSH2 0xB1C DUP14 PUSH2 0xAFA PUSH2 0xAF4 PUSH1 0x30 PUSH2 0xAAA SWAP10 MOD SWAP3 PUSH2 0xAEF PUSH2 0xADF DUP6 PUSH2 0x7FD JUMP JUMPDEST SWAP1 SLOAD PUSH4 0xFFFFFFFF SWAP2 PUSH1 0x3 SHL SHR AND SWAP1 JUMP JUMPDEST PUSH2 0x7CD JUMP JUMPDEST SWAP2 PUSH2 0x7FD JUMP JUMPDEST SWAP1 SWAP2 SWAP1 DUP3 SLOAD SWAP1 PUSH1 0x3 SHL SWAP2 PUSH4 0xFFFFFFFF SWAP3 DUP4 DUP2 SHL SWAP4 DUP5 SWAP3 AND SWAP1 SHL AND SWAP2 NOT AND OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x7B7 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0xA9D JUMP JUMPDEST POP POP POP PUSH2 0xBF8 SWAP4 SWAP5 SWAP8 POP PUSH32 0x6A7F8439932380592F144688013B66F9F08C6C8571BC599D1B18CEAE2CF67ED3 SWAP7 POP PUSH2 0xBEA PUSH2 0xBE1 PUSH2 0xB99 SWAP8 PUSH2 0xBDA PUSH2 0xBC8 PUSH1 0xA DUP11 DIV PUSH2 0xBB3 PUSH2 0xB77 CALLER PUSH2 0x845 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP14 DUP15 DUP5 AND PUSH2 0xB94 DUP4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x89D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB NOT DUP3 SLOAD AND OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1D4F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH2 0x8C9 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1D4F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SSTORE JUMP JUMPDEST MLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST SWAP3 MLOAD PUSH2 0xFFFF AND SWAP1 JUMP JUMPDEST SWAP3 PUSH1 0x40 MLOAD SWAP7 DUP8 SWAP7 AND DUP7 PUSH2 0x926 JUMP JUMPDEST SUB SWAP1 LOG1 JUMP JUMPDEST PUSH2 0xA8E PUSH1 0xFF PUSH2 0xA67 PUSH2 0xA95 SWAP4 SWAP7 POP SWAP2 SWAP4 SWAP1 SWAP3 SWAP5 SWAP7 POP PUSH2 0xA4E JUMP JUMPDEST PUSH4 0x1E13380 DUP2 LT PUSH2 0xC2D JUMPI JUMPDEST PUSH4 0x1E1337F NOT ADD SWAP1 JUMP JUMPDEST PUSH2 0xC35 PUSH2 0x4E5 JUMP JUMPDEST PUSH2 0xC23 JUMP JUMPDEST PUSH4 0x1E28500 DUP2 LT PUSH2 0xC50 JUMPI JUMPDEST PUSH4 0x1E284FF NOT ADD SWAP1 JUMP JUMPDEST PUSH2 0xC58 PUSH2 0x4E5 JUMP JUMPDEST PUSH2 0xC46 JUMP JUMPDEST PUSH2 0x1DD DUP2 LT PUSH2 0xC6F JUMPI JUMPDEST PUSH2 0x1DC NOT ADD SWAP1 JUMP JUMPDEST PUSH2 0xC77 PUSH2 0x4E5 JUMP JUMPDEST PUSH2 0xC67 JUMP JUMPDEST DUP2 DUP2 LT PUSH2 0x796 JUMPI SUB SWAP1 JUMP JUMPDEST PUSH29 0x87D206500CF71C7A443CD6C7EBE38EC0B59488F085555DD275BA5624C7 DUP2 GT PUSH1 0x1 AND PUSH2 0xCB8 JUMPI JUMPDEST PUSH4 0x1E28500 MUL SWAP1 JUMP JUMPDEST PUSH2 0xCC0 PUSH2 0x4E5 JUMP JUMPDEST PUSH2 0xCAF JUMP JUMPDEST PUSH29 0x883148F5CB1270B85273B667AE1CFDF5D70AC5A1ECCCD54FE15C297DF3 DUP2 GT PUSH1 0x1 AND PUSH2 0xCF6 JUMPI JUMPDEST PUSH4 0x1E13380 MUL SWAP1 JUMP JUMPDEST PUSH2 0xCFE PUSH2 0x4E5 JUMP JUMPDEST PUSH2 0xCED JUMP JUMPDEST PUSH30 0xC22E450672894AB6CD8EFB11D33F5617839A5BC7DEA00C22E450672894AB DUP2 GT PUSH1 0x1 AND PUSH2 0xD34 JUMPI JUMPDEST PUSH3 0x15180 MUL SWAP1 JUMP JUMPDEST PUSH2 0xD3C PUSH2 0x4E5 JUMP JUMPDEST PUSH2 0xD2C JUMP JUMPDEST PUSH1 0xFF PUSH1 0x1 SWAP2 AND PUSH1 0xFF DUP2 EQ PUSH2 0x741 JUMPI ADD SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD SWAP2 PUSH1 0x40 DUP4 ADD DUP4 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0xE6C JUMPI JUMPDEST PUSH1 0x40 MSTORE PUSH1 0x0 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP3 PUSH1 0x0 DUP5 MSTORE DUP1 SWAP4 PUSH2 0xD95 PUSH2 0xD8D DUP5 PUSH2 0xEC1 JUMP JUMPDEST PUSH2 0xFFFF AND DUP4 MSTORE JUMP JUMPDEST PUSH2 0xDEE PUSH2 0xDB7 PUSH2 0xDB2 PUSH2 0xDAD PUSH2 0xA8E DUP7 MLOAD PUSH2 0xFFFF AND SWAP1 JUMP JUMPDEST PUSH2 0xE79 JUMP JUMPDEST PUSH2 0xC5D JUMP JUMPDEST PUSH2 0xDE8 PUSH2 0xDE3 PUSH2 0xDC6 DUP4 PUSH2 0xC87 JUMP JUMPDEST SWAP3 PUSH2 0xDDE PUSH2 0xA8E PUSH2 0xDD9 DUP10 MLOAD PUSH2 0xFFFF AND SWAP1 JUMP JUMPDEST PUSH2 0x74D JUMP JUMPDEST PUSH2 0xC7C JUMP JUMPDEST PUSH2 0xCC5 JUMP JUMPDEST SWAP1 PUSH2 0x8C9 JUMP JUMPDEST SWAP1 PUSH1 0x1 SWAP2 JUMPDEST PUSH1 0xC PUSH1 0xFF DUP5 AND GT ISZERO PUSH2 0xE07 JUMPI JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH2 0xE27 PUSH2 0xE22 PUSH2 0x990 PUSH2 0xE1C DUP8 MLOAD PUSH2 0xFFFF AND SWAP1 JUMP JUMPDEST DUP7 PUSH2 0xFCA JUMP JUMPDEST PUSH2 0xD03 JUMP JUMPDEST SWAP1 DUP6 PUSH2 0xE33 DUP3 DUP5 PUSH2 0x8C9 JUMP JUMPDEST GT PUSH2 0xE51 JUMPI PUSH2 0xE4B SWAP2 PUSH2 0xE45 SWAP2 PUSH2 0x8C9 JUMP JUMPDEST SWAP3 PUSH2 0xD41 JUMP JUMPDEST SWAP2 PUSH2 0xDF3 JUMP JUMPDEST POP POP PUSH1 0xFF SWAP1 SWAP2 AND SWAP1 MSTORE POP PUSH2 0xE62 SWAP1 POP JUMP JUMPDEST CODESIZE DUP1 DUP1 DUP1 DUP1 PUSH2 0xE00 JUMP JUMPDEST PUSH2 0xE74 PUSH2 0x19D JUMP JUMPDEST PUSH2 0xD6F JUMP JUMPDEST PUSH2 0x2C6 SWAP1 PUSH1 0x1 DUP2 LT PUSH2 0xEB4 JUMPI JUMPDEST PUSH1 0x0 NOT ADD DUP1 PUSH1 0x2 SHR SWAP1 PUSH2 0x190 PUSH1 0x64 DUP3 DIV SWAP2 DUP3 DUP5 LT PUSH2 0xEA7 JUMPI JUMPDEST DIV SWAP2 SUB PUSH2 0x8C9 JUMP JUMPDEST PUSH2 0xEAF PUSH2 0x4E5 JUMP JUMPDEST PUSH2 0xE9F JUMP JUMPDEST PUSH2 0xEBC PUSH2 0x4E5 JUMP JUMPDEST PUSH2 0xE86 JUMP JUMPDEST PUSH4 0x1E13380 DUP2 DIV SWAP1 PUSH2 0xF25 PUSH2 0x7B2 DUP4 NOT DUP2 GT PUSH2 0xF84 JUMPI JUMPDEST PUSH2 0xFFFF SWAP4 DUP5 SWAP2 ADD AND SWAP3 PUSH2 0xDE8 PUSH2 0xEED DUP6 PUSH2 0xE79 JUMP JUMPDEST PUSH2 0x1DD SWAP1 DUP2 DUP2 LT PUSH2 0xF77 JUMPI JUMPDEST PUSH2 0x1DC NOT DUP2 ADD PUSH2 0xF08 DUP2 PUSH2 0xC87 JUMP JUMPDEST SWAP5 PUSH2 0xF12 DUP10 PUSH2 0x74D JUMP JUMPDEST AND SWAP1 DUP2 LT PUSH2 0xF6A JUMPI JUMPDEST SWAP7 SWAP6 SWAP7 SUB ADD PUSH2 0xCC5 JUMP JUMPDEST DUP3 DUP2 GT PUSH2 0xF32 JUMPI POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xF5B SWAP1 PUSH2 0xF47 PUSH2 0xF42 DUP5 PUSH2 0x770 JUMP JUMPDEST PUSH2 0xF91 JUMP JUMPDEST ISZERO PUSH2 0xF61 JUMPI PUSH2 0xF55 SWAP1 PUSH2 0xC3A JUMP JUMPDEST SWAP2 PUSH2 0x770 JUMP JUMPDEST SWAP1 PUSH2 0xF25 JUMP JUMPDEST PUSH2 0xF55 SWAP1 PUSH2 0xC17 JUMP JUMPDEST PUSH2 0xF72 PUSH2 0x4E5 JUMP JUMPDEST PUSH2 0xF1B JUMP JUMPDEST PUSH2 0xF7F PUSH2 0x4E5 JUMP JUMPDEST PUSH2 0xEF9 JUMP JUMPDEST PUSH2 0xF8C PUSH2 0x4E5 JUMP JUMPDEST PUSH2 0xED8 JUMP JUMPDEST PUSH1 0x3 DUP2 AND PUSH2 0xFC4 JUMPI PUSH2 0xFFFF DUP1 SWAP2 AND DUP2 PUSH1 0x64 DUP3 MOD AND PUSH2 0xFBD JUMPI PUSH2 0x190 SWAP1 MOD AND PUSH2 0xFB8 JUMPI PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST POP POP PUSH1 0x1 SWAP1 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0xFF AND PUSH1 0x1 DUP2 EQ DUP1 ISZERO PUSH2 0x1098 JUMPI JUMPDEST DUP1 ISZERO PUSH2 0x108E JUMPI JUMPDEST DUP1 ISZERO PUSH2 0x1084 JUMPI JUMPDEST DUP1 ISZERO PUSH2 0x107A JUMPI JUMPDEST DUP1 ISZERO PUSH2 0x1070 JUMPI JUMPDEST DUP1 ISZERO PUSH2 0x1066 JUMPI JUMPDEST ISZERO PUSH2 0x1007 JUMPI POP POP PUSH1 0x1F SWAP1 JUMP JUMPDEST PUSH1 0x4 DUP2 EQ SWAP1 DUP2 ISZERO PUSH2 0x105B JUMPI JUMPDEST DUP2 ISZERO PUSH2 0x1050 JUMPI JUMPDEST DUP2 ISZERO PUSH2 0x1045 JUMPI JUMPDEST POP ISZERO PUSH2 0x102D JUMPI POP PUSH1 0x1E SWAP1 JUMP JUMPDEST PUSH2 0x1036 SWAP1 PUSH2 0xF91 JUMP JUMPDEST ISZERO PUSH2 0x1040 JUMPI PUSH1 0x1D SWAP1 JUMP JUMPDEST PUSH1 0x1C SWAP1 JUMP JUMPDEST PUSH1 0xB SWAP2 POP EQ CODESIZE PUSH2 0x1021 JUMP JUMPDEST PUSH1 0x9 DUP2 EQ SWAP2 POP PUSH2 0x101A JUMP JUMPDEST PUSH1 0x6 DUP2 EQ SWAP2 POP PUSH2 0x1013 JUMP JUMPDEST POP PUSH1 0xC DUP2 EQ PUSH2 0xFFB JUMP JUMPDEST POP PUSH1 0xA DUP2 EQ PUSH2 0xFF4 JUMP JUMPDEST POP PUSH1 0x8 DUP2 EQ PUSH2 0xFED JUMP JUMPDEST POP PUSH1 0x7 DUP2 EQ PUSH2 0xFE6 JUMP JUMPDEST POP PUSH1 0x5 DUP2 EQ PUSH2 0xFDF JUMP JUMPDEST POP PUSH1 0x3 DUP2 EQ PUSH2 0xFD8 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH32 0x33CB808A453240B3C9916E6D1CCC504E492E2B2453192FF241C73847A521D0E PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH4 0xFFFFFFFF AND PUSH1 0x0 MSTORE PUSH32 0x33CB808A453240B3C9916E6D1CCC504E492E2B2453192FF241C73847A521D0D PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST DUP1 SLOAD DUP3 LT ISZERO PUSH2 0x111F JUMPI JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x1127 PUSH2 0x7E6 JUMP JUMPDEST PUSH2 0x1110 JUMP JUMPDEST DUP1 SLOAD PUSH2 0x114F SWAP2 PUSH9 0x10000000000000000 DUP3 LT ISZERO PUSH2 0x1172 JUMPI JUMPDEST PUSH1 0x1 DUP3 ADD DUP2 SSTORE PUSH2 0x1106 JUMP JUMPDEST DUP2 SWAP3 SWAP2 SLOAD SWAP1 PUSH1 0x3 SHL SWAP2 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 DUP2 SHL SWAP4 DUP5 SWAP3 AND SWAP1 SHL AND SWAP2 NOT AND OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x117A PUSH2 0x19D JUMP JUMPDEST PUSH2 0x1144 JUMP JUMPDEST PUSH1 0x3 SIGNEXTEND PUSH4 0x7FFFFFFF NOT DUP2 EQ PUSH2 0x50F JUMPI PUSH1 0x0 NOT ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 SWAP1 PUSH1 0x3 SIGNEXTEND PUSH4 0x7FFFFFFF DUP2 EQ PUSH2 0x741 JUMPI ADD SWAP1 JUMP JUMPDEST SWAP6 SWAP1 SWAP4 PUSH2 0x11E3 PUSH1 0xFF SWAP4 PUSH1 0xC0 SWAP8 SWAP11 SWAP10 SWAP6 PUSH2 0x11CE PUSH2 0xFFFF SWAP9 PUSH1 0xE0 DUP13 MSTORE PUSH1 0xE0 DUP13 ADD SWAP1 PUSH2 0x8D5 JUMP JUMPDEST SWAP2 ISZERO ISZERO PUSH1 0x20 DUP12 ADD MSTORE DUP10 DUP3 SUB PUSH1 0x40 DUP12 ADD MSTORE PUSH2 0x8D5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x60 DUP10 ADD MSTORE SWAP9 AND PUSH1 0x80 DUP8 ADD MSTORE AND PUSH1 0xA0 DUP6 ADD MSTORE AND SWAP2 ADD MSTORE JUMP JUMPDEST PUSH32 0xD88C393C3C90D3E614D54B41CD8BF24BC2CD20390AF15081EFE05C39AA4A155B SWAP4 SWAP3 PUSH2 0xBF8 SWAP2 PUSH2 0x1236 TIMESTAMP PUSH2 0xD53 JUMP JUMPDEST SWAP1 PUSH2 0x12A3 PUSH2 0xBE1 PUSH1 0x20 DUP5 ADD PUSH2 0x1252 PUSH2 0x990 PUSH2 0x98B DUP4 MLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x1111 PUSH1 0x90 SHL DUP8 DUP2 AND EQ ISZERO PUSH2 0x12B2 JUMPI JUMPDEST POP PUSH2 0x1288 PUSH2 0x126F CALLER PUSH2 0x845 JUMP JUMPDEST PUSH2 0xB99 PUSH2 0x1283 DUP3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x87E JUMP JUMPDEST PUSH2 0xBDA PUSH2 0xBC8 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1D4F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH2 0x8B9 JUMP JUMPDEST SWAP3 PUSH1 0x40 MLOAD SWAP7 DUP8 SWAP7 CALLER SWAP4 DUP9 PUSH2 0x11AA JUMP JUMPDEST PUSH2 0x1306 SWAP1 PUSH2 0x12E1 PUSH32 0x33CB808A453240B3C9916E6D1CCC504E492E2B2453192FF241C73847A521D11 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 ISZERO PUSH2 0x144A JUMPI POP PUSH2 0xA95 PUSH2 0xA8E PUSH1 0xFF PUSH1 0x5 JUMPDEST AND SWAP3 PUSH2 0xA62 PUSH2 0xA5D DUP12 MLOAD PUSH2 0xFFFF AND SWAP1 JUMP JUMPDEST PUSH2 0x1325 PUSH4 0xFFFFFFFF DUP3 AND PUSH1 0x14 DUP10 SWAP1 SHL PUSH3 0x100000 PUSH1 0x1 PUSH1 0xB4 SHL SUB AND PUSH2 0x8C9 JUMP JUMPDEST SWAP1 DUP8 PUSH2 0x136B PUSH2 0x1367 PUSH2 0x1360 DUP6 PUSH1 0x0 MSTORE PUSH32 0x33CB808A453240B3C9916E6D1CCC504E492E2B2453192FF241C73847A521D0F PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST ISZERO SWAP1 JUMP JUMPDEST PUSH2 0x13D6 JUMPI JUMPDEST POP POP DUP9 ISZERO PUSH2 0x13B2 JUMPI PUSH2 0x1384 PUSH2 0x13AC SWAP2 PUSH2 0x10A2 JUMP JUMPDEST PUSH2 0x1397 PUSH2 0x1392 DUP3 SLOAD PUSH1 0x3 SIGNEXTEND SWAP1 JUMP JUMPDEST PUSH2 0x1195 JUMP JUMPDEST PUSH4 0xFFFFFFFF NOT DUP3 SLOAD AND SWAP1 PUSH4 0xFFFFFFFF AND OR SWAP1 SSTORE JUMP JUMPDEST CODESIZE PUSH2 0x1262 JUMP JUMPDEST PUSH2 0x13BE PUSH2 0x13D1 SWAP2 PUSH2 0x10A2 JUMP JUMPDEST PUSH2 0x1397 PUSH2 0x13CC DUP3 SLOAD PUSH1 0x3 SIGNEXTEND SWAP1 JUMP JUMPDEST PUSH2 0x117F JUMP JUMPDEST PUSH2 0x13AC JUMP JUMPDEST PUSH2 0x143E PUSH2 0x1443 SWAP3 PUSH2 0x1420 PUSH2 0x1413 DUP7 PUSH1 0x0 MSTORE PUSH32 0x33CB808A453240B3C9916E6D1CCC504E492E2B2453192FF241C73847A521D0F PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x1439 PUSH2 0x142C DUP7 PUSH2 0x10A2 JUMP JUMPDEST DUP1 SLOAD PUSH4 0xFFFFFFFF NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x10D1 JUMP JUMPDEST PUSH2 0x112C JUMP JUMPDEST CODESIZE DUP8 PUSH2 0x1370 JUMP JUMPDEST PUSH2 0xA8E PUSH1 0xFF PUSH2 0xA95 SWAP3 PUSH2 0x12F5 JUMP JUMPDEST ISZERO PUSH2 0x145F JUMPI JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x42 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x596F75722063616E206F6E6C79207472616E7366657220796F75722073686172 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6520666F72206D6F6E7468206265666F7265207468652063757272656E74206F PUSH1 0x64 DUP3 ADD MSTORE PUSH2 0x6E65 PUSH1 0xF0 SHL PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xA4 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x14DD JUMPI JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x43 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x596F75722063616E206F6E6C79207472616E7366657220796F75722073686172 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6520666F72206D6F6E74687320616674657220646F6E6174696F6E2073746172 PUSH1 0x64 DUP3 ADD MSTORE PUSH3 0x1D1959 PUSH1 0xEA SHL PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xA4 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x155C JUMPI JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x33 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x596F75722063616E2774207472616E7366657220736861726573206D6F726520 PUSH1 0x44 DUP3 ADD MSTORE PUSH19 0x3A3430B710191A1036B7B73A34399030B3B797 PUSH1 0x69 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x15C5 JUMPI JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536861726520616C7265616479207472616E7366657265640000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x1612 JUMPI JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x596F752068617665206E6F7420656E6F756768207570766F74657320746F2062 PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x6520656C696769626C65 PUSH1 0xB0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x1 SWAP1 PUSH1 0x0 NOT DUP2 EQ PUSH2 0x741 JUMPI ADD SWAP1 JUMP JUMPDEST PUSH4 0xFFFFFFFF SWAP2 DUP3 DUP1 SWAP3 AND SWAP2 DUP3 SWAP2 AND SWAP3 DIV DUP3 GT DUP2 ISZERO ISZERO AND PUSH2 0x71E JUMPI MUL SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 SWAP2 AND SWAP2 DUP3 ISZERO PUSH2 0x16B1 JUMPI AND DIV SWAP1 JUMP JUMPDEST PUSH2 0x16B9 PUSH2 0x568 JUMP JUMPDEST AND DIV SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x16C5 JUMPI JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F7420656E6F75676820646F6E6174696F6E7320666F722074686174206D6F PUSH1 0x44 DUP3 ADD MSTORE PUSH15 0x373A34399030BB30B4B630B1363297 PUSH1 0x89 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH7 0xFFFFFFFFFFFFFF DUP1 SWAP2 AND DUP1 PUSH7 0x38D7EA4C68000 SWAP3 DIV DUP3 GT DUP2 ISZERO ISZERO AND PUSH2 0x71E JUMPI MUL SWAP1 JUMP JUMPDEST POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP1 SWAP2 PUSH2 0x177F PUSH2 0xA8E PUSH2 0x1765 TIMESTAMP PUSH2 0xD53 JUMP JUMPDEST PUSH2 0xA62 PUSH2 0xA5D PUSH2 0xBE1 PUSH2 0x990 PUSH2 0x98B PUSH1 0x20 DUP7 ADD MLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST SWAP3 PUSH2 0x1798 PUSH2 0xA8E PUSH2 0x1793 DUP4 PUSH2 0xA62 DUP7 PUSH2 0x704 JUMP JUMPDEST PUSH2 0x770 JUMP JUMPDEST SWAP5 DUP6 SWAP2 PUSH4 0xFFFFFFFF SWAP4 PUSH2 0x17F1 PUSH1 0x18 DUP7 PUSH2 0x17EA DUP2 DUP9 AND SWAP12 DUP12 PUSH2 0x17BD DUP15 DUP6 DUP2 SWAP16 AND GT PUSH2 0x1458 JUMP JUMPDEST PUSH2 0xA95 PUSH2 0x17E1 PUSH2 0xA8E PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1D2F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH2 0xFFFF SWAP1 PUSH1 0x10 SHR AND SWAP1 JUMP JUMPDEST DUP1 SWAP15 LT ISZERO PUSH2 0x14D6 JUMP JUMPDEST AND LT PUSH2 0x1555 JUMP JUMPDEST PUSH2 0x17FE DUP9 CALLER PUSH1 0x14 SHL PUSH2 0x8C9 JUMP JUMPDEST SWAP2 PUSH2 0x183E PUSH2 0x1838 PUSH2 0x1360 DUP6 PUSH1 0x0 MSTORE PUSH32 0x33CB808A453240B3C9916E6D1CCC504E492E2B2453192FF241C73847A521D10 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x15BE JUMP JUMPDEST PUSH1 0x0 SWAP7 PUSH2 0x1861 DUP9 PUSH2 0x1858 PUSH2 0x1851 DUP8 PUSH2 0x10A2 JUMP JUMPDEST SLOAD PUSH1 0x3 SIGNEXTEND SWAP1 JUMP JUMPDEST PUSH1 0x3 SIGNEXTEND SGT PUSH2 0x160B JUMP JUMPDEST DUP8 SWAP7 DUP9 JUMPDEST PUSH2 0x186E DUP9 PUSH2 0x10D1 JUMP JUMPDEST SLOAD DUP2 LT ISZERO PUSH2 0x1917 JUMPI PUSH2 0x18C5 DUP13 PUSH2 0x18C0 PUSH2 0x18BA PUSH2 0x18AE PUSH2 0x18AE PUSH2 0x1899 DUP8 DUP16 PUSH2 0x1894 SWAP1 PUSH2 0x10D1 JUMP JUMPDEST PUSH2 0x1106 JUMP JUMPDEST SWAP1 SLOAD PUSH1 0x3 SWAP2 SWAP1 SWAP2 SHL SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x14 SHL SWAP1 JUMP JUMPDEST PUSH2 0x8C9 JUMP JUMPDEST DUP11 PUSH2 0x18DB PUSH2 0x18D5 PUSH2 0x1851 DUP5 PUSH2 0x10A2 JUMP JUMPDEST PUSH1 0x3 SIGNEXTEND SWAP1 JUMP JUMPDEST SGT PUSH2 0x18F0 JUMPI JUMPDEST POP PUSH2 0x18EB SWAP1 PUSH2 0x166B JUMP JUMPDEST PUSH2 0x1865 JUMP JUMPDEST PUSH2 0x18EB SWAP2 SWAP10 PUSH2 0x190A PUSH2 0x9F9 PUSH2 0x9F9 PUSH2 0x1851 PUSH2 0x1910 SWAP6 PUSH2 0x10A2 JUMP JUMPDEST SWAP1 PUSH2 0x89D JUMP JUMPDEST SWAP9 SWAP1 PUSH2 0x18E1 JUMP JUMPDEST POP DUP9 SWAP10 DUP10 SWAP8 SWAP10 SWAP4 SWAP6 SWAP9 SWAP5 SWAP7 SWAP12 POP SWAP1 DUP1 PUSH2 0x1931 DUP6 SWAP4 DUP13 PUSH2 0x7A2 JUMP JUMPDEST PUSH1 0x30 PUSH2 0xFFFF SWAP2 SWAP1 SWAP2 AND MOD SWAP6 PUSH2 0x1945 DUP8 PUSH2 0x7FD JUMP JUMPDEST SWAP1 SLOAD PUSH1 0x3 SWAP2 SWAP1 SWAP2 SHL SHR PUSH4 0xFFFFFFFF AND PUSH2 0x195D DUP13 PUSH2 0x10A2 JUMP JUMPDEST SLOAD PUSH1 0x3 SIGNEXTEND PUSH4 0xFFFFFFFF AND PUSH2 0x1970 SWAP2 PUSH2 0x167B JUMP JUMPDEST PUSH4 0xFFFFFFFF AND SWAP1 PUSH2 0x1980 SWAP2 PUSH2 0x1699 JUMP JUMPDEST PUSH4 0xFFFFFFFF AND SWAP10 PUSH2 0x1990 DUP8 PUSH2 0x7FD JUMP JUMPDEST SWAP1 SLOAD PUSH1 0x3 SWAP2 SWAP1 SWAP2 SHL SHR PUSH4 0xFFFFFFFF AND DUP3 DUP13 AND SWAP4 DUP5 SWAP2 AND LT ISZERO PUSH2 0x19B1 SWAP1 PUSH2 0x16BE JUMP JUMPDEST PUSH2 0x19BA DUP8 PUSH2 0x7FD JUMP JUMPDEST DUP2 SLOAD DUP14 SWAP1 PUSH1 0x3 DUP4 SWAP1 SHL SHR PUSH4 0xFFFFFFFF AND SWAP1 PUSH2 0x19D4 SWAP2 PUSH2 0x7A2 JUMP JUMPDEST DUP3 SLOAD PUSH4 0xFFFFFFFF PUSH1 0x3 SWAP4 SWAP1 SWAP4 SHL DUP4 DUP2 SHL DUP1 NOT SWAP1 SWAP3 AND SWAP4 SWAP1 SWAP3 AND SWAP1 SWAP2 SHL AND OR SWAP1 SSTORE PUSH2 0x1A27 SWAP1 PUSH1 0x0 MSTORE PUSH32 0x33CB808A453240B3C9916E6D1CCC504E492E2B2453192FF241C73847A521D10 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0x1A3B DUP3 PUSH2 0x1723 JUMP JUMPDEST DUP4 SWAP1 PUSH7 0xFFFFFFFFFFFFFF AND SWAP2 DUP3 ISZERO SWAP14 PUSH2 0xBF8 SWAP12 PUSH32 0xD60EF7047EC8BFC45D19C2EC01830D929258BF2A7AE675FDE3DAB44FA17F2F76 SWAP16 SWAP9 PUSH2 0x1AE1 SWAP8 PUSH2 0x1ADC SWAP7 PUSH2 0xBC8 SWAP7 PUSH32 0xEB338D42E19428A462947FCE4FF0C28C2CCAE6F7ECDB16BEB0DC981F98AE967C SWAP13 PUSH2 0x1B68 JUMPI JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP13 AND SWAP1 CALL ISZERO PUSH2 0x1B5B JUMPI JUMPDEST PUSH1 0xA DUP5 DIV AND PUSH2 0xBB3 PUSH2 0x1AC7 CALLER PUSH2 0x845 JUMP JUMPDEST PUSH2 0xB99 DUP4 PUSH2 0xB94 DUP4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x1723 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH7 0xFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0xFFFF DUP6 DUP2 AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP1 DUP6 AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 SWAP1 LOG1 PUSH1 0x40 MLOAD SWAP6 DUP7 SWAP6 DUP7 SWAP4 SWAP2 SWAP6 SWAP5 SWAP1 SWAP3 PUSH1 0x80 SWAP4 PUSH1 0xA0 DUP7 ADD SWAP8 PUSH4 0xFFFFFFFF DUP1 SWAP3 AND DUP8 MSTORE AND PUSH1 0x20 DUP7 ADD MSTORE PUSH2 0xFFFF SWAP3 DUP4 DUP1 SWAP3 AND PUSH1 0x40 DUP8 ADD MSTORE AND PUSH1 0x60 DUP6 ADD MSTORE AND SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x1B63 PUSH2 0x1747 JUMP JUMPDEST PUSH2 0x1AB6 JUMP JUMPDEST POP PUSH2 0x8FC PUSH2 0x1AA4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 SWAP1 PUSH1 0x0 PUSH32 0x33CB808A453240B3C9916E6D1CCC504E492E2B2453192FF241C73847A521D07 DUP5 JUMPDEST PUSH1 0x30 PUSH1 0x7 DUP5 ADD LT PUSH2 0x1BB6 JUMPI POP POP POP POP PUSH2 0x1BB4 DUP3 PUSH2 0x1B4 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x1 PUSH2 0x100 PUSH1 0x8 SWAP3 PUSH2 0x1C66 DUP6 SLOAD PUSH2 0x1C5B PUSH4 0xFFFFFFFF PUSH2 0x1BDC DUP6 DUP3 DUP6 AND PUSH4 0xFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH2 0x1BF3 PUSH1 0x20 DUP3 DUP6 DUP3 DUP10 ADD SWAP3 SHR AND PUSH4 0xFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH4 0xFFFFFFFF DUP4 DUP13 SHR DUP3 AND AND DUP6 DUP13 ADD MSTORE PUSH2 0x1C19 PUSH1 0x60 DUP3 DUP6 DUP3 DUP10 ADD SWAP3 SHR AND PUSH4 0xFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH2 0x1C30 PUSH1 0x80 DUP3 DUP6 DUP3 DUP10 ADD SWAP3 SHR AND PUSH4 0xFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH2 0x1C47 PUSH1 0xA0 DUP3 DUP6 DUP3 DUP10 ADD SWAP3 SHR AND PUSH4 0xFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0xC0 SWAP1 DUP4 DUP3 DUP8 ADD SWAP3 SHR AND PUSH4 0xFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0xE0 SWAP1 DUP2 SHR SWAP1 DUP4 ADD MSTORE JUMP JUMPDEST ADD SWAP3 ADD SWAP3 ADD SWAP2 SWAP1 PUSH2 0x1B9C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x60 DUP2 ADD DUP2 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x1D21 JUMPI JUMPDEST PUSH1 0x40 MSTORE PUSH1 0x0 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP1 MLOAD SWAP2 PUSH2 0x1CA8 DUP4 PUSH2 0x1B4 JUMP JUMPDEST PUSH2 0x600 CALLDATASIZE DUP5 CALLDATACOPY ADD MSTORE PUSH2 0xFFFF PUSH2 0x1D04 PUSH1 0xC DUP3 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1D2F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x10 SHR AND SWAP3 DUP2 DUP5 MOD AND SWAP3 PUSH2 0xFFFE DUP5 GT PUSH2 0x1D14 JUMPI JUMPDEST PUSH2 0x1CF6 PUSH1 0x1 PUSH2 0x1CEA PUSH2 0x1DD JUMP JUMPDEST SWAP6 ADD DUP6 SWAP1 PUSH2 0xFFFF AND SWAP1 MSTORE JUMP JUMPDEST DIV PUSH1 0x20 DUP4 ADD SWAP1 PUSH2 0xFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH2 0x1D0C PUSH2 0x1B71 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH2 0x1D1C PUSH2 0x4E5 JUMP JUMPDEST PUSH2 0x1CDD JUMP JUMPDEST PUSH2 0x1D29 PUSH2 0x19D JUMP JUMPDEST PUSH2 0x1C8C JUMP INVALID SUB EXTCODECOPY 0xB8 ADDMOD LOG4 MSTORE8 0x24 SIGNEXTEND EXTCODECOPY SWAP10 AND 0xE6 0xD1 0xCC 0xC5 DIV 0xE4 SWAP3 0xE2 0xB2 GASLIMIT BALANCE SWAP3 SELFDESTRUCT 0x24 SHR PUSH20 0x847A521D06033CB808A453240B3C9916E6D1CCC5 DIV 0xE4 SWAP3 0xE2 0xB2 GASLIMIT BALANCE SWAP3 SELFDESTRUCT 0x24 SHR PUSH20 0x847A521D14A3646970667358221220256698CABF 0xF 0x4E 0xD CREATE2 0x21 LOG2 0xA5 PUSH13 0xB0F4F7B2317F83A7A4D60D6901 0xDC 0xAE PUSH18 0xDB636E6C6578706572696D656E74616CF564 PUSH20 0x6F6C634300080A00410000000000000000000000 ","sourceMap":"696:7014:6:-:0;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"abi_decode":{"entryPoint":399,"id":null,"parameterSlots":1,"returnSlots":0},"abi_decode_address_payablet_uint16t_uint16":{"entryPoint":738,"id":null,"parameterSlots":1,"returnSlots":3},"abi_decode_string":{"entryPoint":508,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_stringt_boolt_addresst_string":{"entryPoint":797,"id":null,"parameterSlots":1,"returnSlots":4},"abi_decode_uint16t_string":{"entryPoint":651,"id":null,"parameterSlots":1,"returnSlots":2},"abi_encode_string":{"entryPoint":2261,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_string_bool_string_address_address_uint8_uint16":{"entryPoint":4522,"id":null,"parameterSlots":8,"returnSlots":1},"abi_encode_struct_DonationBuckets":{"entryPoint":912,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_uint256":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_uint32":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_uint32_uint32_uint16_uint16_uint16":{"entryPoint":null,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_uint56_address_payable_uint16_uint16":{"entryPoint":null,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_uint64":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_uint64_string_uint16_uint8_uint16":{"entryPoint":2342,"id":null,"parameterSlots":6,"returnSlots":1},"allocate_memory":{"entryPoint":477,"id":null,"parameterSlots":0,"returnSlots":1},"array_push_from_address_to_array_address_dyn_storage_ptr":{"entryPoint":4396,"id":null,"parameterSlots":2,"returnSlots":0},"checked_add_uint16":{"entryPoint":1834,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_uint256":{"entryPoint":2249,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_uint256_6121":{"entryPoint":2233,"id":null,"parameterSlots":1,"returnSlots":1},"checked_add_uint32":{"entryPoint":1997,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_uint64":{"entryPoint":2205,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_uint64_6120":{"entryPoint":2174,"id":null,"parameterSlots":1,"returnSlots":1},"checked_div_uint256":{"entryPoint":1659,"id":null,"parameterSlots":2,"returnSlots":1},"checked_div_uint64":{"entryPoint":5785,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_uint16":{"entryPoint":1796,"id":null,"parameterSlots":1,"returnSlots":1},"checked_mul_uint256":{"entryPoint":3331,"id":null,"parameterSlots":1,"returnSlots":1},"checked_mul_uint256_6090":{"entryPoint":3207,"id":null,"parameterSlots":1,"returnSlots":1},"checked_mul_uint256_6093":{"entryPoint":3269,"id":null,"parameterSlots":1,"returnSlots":1},"checked_mul_uint32":{"entryPoint":5755,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_uint56":{"entryPoint":5923,"id":null,"parameterSlots":1,"returnSlots":1},"checked_sub_uint16":{"entryPoint":1923,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_uint16_6092":{"entryPoint":1869,"id":null,"parameterSlots":1,"returnSlots":1},"checked_sub_uint16_6101":{"entryPoint":1904,"id":null,"parameterSlots":1,"returnSlots":1},"checked_sub_uint256":{"entryPoint":3196,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_uint256_12756":{"entryPoint":3165,"id":null,"parameterSlots":1,"returnSlots":1},"checked_sub_uint256_6102":{"entryPoint":3095,"id":null,"parameterSlots":1,"returnSlots":1},"checked_sub_uint256_6103":{"entryPoint":3130,"id":null,"parameterSlots":1,"returnSlots":1},"checked_sub_uint32":{"entryPoint":1954,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_uint8":{"entryPoint":1276,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_address_payable":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_bool":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_int32":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_uint16":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_uint32":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_uint8":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"convert_int32_to_uint32":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"convert_uint256_to_uint64":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"copy_array_from_storage_to_memory_array_uint":{"entryPoint":7025,"id":null,"parameterSlots":0,"returnSlots":1},"decrement_int32":{"entryPoint":4479,"id":null,"parameterSlots":1,"returnSlots":1},"extract_from_storage_value_dynamict_address":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"extract_from_storage_value_dynamict_uint32":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"extract_from_storage_value_offsett_uint16":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"finalize_allocation":{"entryPoint":436,"id":null,"parameterSlots":1,"returnSlots":0},"finalize_allocation_10514":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":0},"fun_donate":{"entryPoint":2408,"id":2516,"parameterSlots":2,"returnSlots":0},"fun_donationBuckets":{"entryPoint":7282,"id":2986,"parameterSlots":0,"returnSlots":1},"fun_getDaysInMonth":{"entryPoint":4042,"id":2225,"parameterSlots":2,"returnSlots":1},"fun_getYear":{"entryPoint":3777,"id":2142,"parameterSlots":1,"returnSlots":1},"fun_isLeapYear":{"entryPoint":3985,"id":1933,"parameterSlots":1,"returnSlots":1},"fun_leapYearsBefore":{"entryPoint":3705,"id":1957,"parameterSlots":1,"returnSlots":1},"fun_parseTimestamp":{"entryPoint":3411,"id":2056,"parameterSlots":1,"returnSlots":1},"fun_transfer":{"entryPoint":5972,"id":2958,"parameterSlots":3,"returnSlots":0},"fun_vote":{"entryPoint":4614,"id":2681,"parameterSlots":4,"returnSlots":0},"increment_int32":{"entryPoint":4501,"id":null,"parameterSlots":1,"returnSlots":1},"increment_uint256":{"entryPoint":5739,"id":null,"parameterSlots":1,"returnSlots":1},"increment_uint32":{"entryPoint":1975,"id":null,"parameterSlots":1,"returnSlots":1},"increment_uint8":{"entryPoint":3393,"id":null,"parameterSlots":1,"returnSlots":1},"mapping_index_access_mapping_address_uint64_of_address":{"entryPoint":2117,"id":null,"parameterSlots":1,"returnSlots":1},"mapping_index_access_mapping_uint256_bool_of_uint256":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"mapping_index_access_mapping_uint256_bool_of_uint256_6111":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"mapping_index_access_mapping_uint256_bool_of_uint256_6114":{"entryPoint":4258,"id":null,"parameterSlots":1,"returnSlots":1},"mapping_index_access_mapping_uint32_array_address_dyn_storage_of_uint32":{"entryPoint":4305,"id":null,"parameterSlots":1,"returnSlots":1},"mod_uint16":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"mod_uint256":{"entryPoint":1407,"id":null,"parameterSlots":2,"returnSlots":1},"modifier_onlyOwner":{"entryPoint":1175,"id":3139,"parameterSlots":0,"returnSlots":0},"modifier_onlyOwner_2310":{"entryPoint":1093,"id":3139,"parameterSlots":0,"returnSlots":0},"panic_error_0x11":{"entryPoint":1253,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x12":{"entryPoint":1384,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":2022,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":413,"id":null,"parameterSlots":0,"returnSlots":0},"read_from_storage_split_offset_bool":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"read_from_storage_split_offset_int32":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"require_helper_stringliteral":{"entryPoint":1308,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_01d4":{"entryPoint":1429,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_4861":{"entryPoint":5822,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_5bc0":{"entryPoint":5566,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_6667":{"entryPoint":995,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_7141":{"entryPoint":5461,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_765a":{"entryPoint":1544,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_c860":{"entryPoint":5208,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_cc5f":{"entryPoint":5643,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_dc11":{"entryPoint":1681,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_eb90":{"entryPoint":5334,"id":null,"parameterSlots":1,"returnSlots":0},"revert_forward":{"entryPoint":5959,"id":null,"parameterSlots":0,"returnSlots":0},"shift_left_uint256_uint8":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"storage_array_index_access_address_dyn_ptr":{"entryPoint":4358,"id":null,"parameterSlots":2,"returnSlots":2},"storage_array_index_access_uint":{"entryPoint":2045,"id":null,"parameterSlots":1,"returnSlots":2},"update_storage_value_offsett_bool_to_bool":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":0},"update_storage_value_offsett_int32_to_int32":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":0},"update_storage_value_offsett_int32_to_int32_6115":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":0},"update_storage_value_offsett_uint256_to_uint256":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":0},"update_storage_value_offsett_uint64_to_uint64":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":0},"update_storage_value_uint32_to_uint32":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":0},"validator_revert_address_payable":{"entryPoint":720,"id":null,"parameterSlots":1,"returnSlots":0},"write_to_memory_uint16":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":0},"write_to_memory_uint8":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":0}},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"6040608081526004361015610015575b50600080fd5b600090813560e01c806327e665f71461015e5780634f9b09af1461014b5780635f592bb514610134578063672296dc1461011c5780636e283c3814610101578063bc956abb146100c2578063c3269df9146100a85763db75953b1461007a575061000f565b346100a4576100a0915061008d3661018f565b610095611c72565b905191829182610390565b0390f35b5080fd5b50346100a4576100b73661018f565b6100bf610497565b51f35b50346100a4576100a091506100d63661018f565b6001600160401b036100e733610845565b54915191166001600160401b031681529081906020820190565b50346100a4576100bf6101133661031d565b92919091611206565b50346100a4576100bf61012e366102e2565b91611754565b50346100a4576101433661018f565b6100bf610445565b506100bf6101583661028b565b90610968565b50503461018c575061016f3661018f565b600080516020611d4f83398151915254608052607f1960a0016080f35b80fd5b600090600319011261000f57565b50634e487b7160e01b600052604160045260246000fd5b61060081019081106001600160401b038211176101d057604052565b6101d861019d565b604052565b60405190606082018281106001600160401b038211176101d057604052565b81601f82011215610283578035906001600160401b0392838311610276575b60405193601f8401601f19908116603f0116850190811185821017610269575b6040528284526020838301011161026057816000926020809301838601378301015290565b50505050600080fd5b61027161019d565b61023b565b61027e61019d565b61021b565b505050600080fd5b9060406003198301126102c95760043561ffff81168114156102835791602435906001600160401b038211610260576102c6916004016101fc565b90565b5050600080fd5b6001600160a01b038116141561000f57565b606090600319011261000f576004356102fa816102d0565b9061ffff9060243582811681141561026057916044359081168114156102605790565b60806003198201126102c9576001600160401b03906004358281116102605781610349916004016101fc565b926024358015158114156103865792604435610364816102d0565b9260643591821161037b576102c6916004016101fc565b505050505050600080fd5b5050505050600080fd5b91909161064081019260408061ffff92838151168552602093848201511684860152015192016000905b603082106103c85750505050565b828060019263ffffffff8751168152019401910190926103ba565b156103ea57565b5060405162461bcd60e51b815260206004820152602c60248201527f4f6e6c79206f776e657220697320616c6c6f77656420746f20706572666f726d60448201526b103a3434b99030b1ba34b7b760a11b6064820152608490fd5b61047960018060a01b037fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c1320541633146103e3565b600080516020611d2f833981519152805461ff001916610100179055565b6104cb60018060a01b037fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c1320541633146103e3565b600080516020611d2f833981519152805461ff0019169055565b50634e487b7160e01b600052601160045260246000fd5b60ff166001811061050f575b6000190190565b6105176104e5565b610508565b1561052357565b50606460405162461bcd60e51b815260206004820152602060248201527f4f6e6c79207570746f203234206d6f6e74687320697320737570706f727465646044820152fd5b50634e487b7160e01b600052601260045260246000fd5b8115610589570690565b610591610568565b0690565b1561059c57565b5060405162461bcd60e51b815260206004820152603860248201527f506179656420616d6f756e74206d75737420626520646576696461626c65206260448201527f7920746865206469737472696275746564206d6f6e74687300000000000000006064820152608490fd5b1561060f57565b5060405162461bcd60e51b815260206004820152603a60248201527f4c657373207468616e20312066696e6e657928312f313030302045544829206660448201527f72616374696f6e7320617265206e6f7420737570706f727465640000000000006064820152608490fd5b8115610685570490565b61068d610568565b0490565b1561069857565b5060405162461bcd60e51b815260206004820152603c60248201527f446f6e6174696f6e73206c6172676572207468616e20315f3030305f3030305f60448201527f3030302066696e6e657920617265206e6f7420737570706f72746564000000006064820152608490fd5b600c9061ffff80911680910482118115151661071e570290565b6107266104e5565b0290565b9061ffff8080931691168092038111610741570190565b6107496104e5565b0190565b61ffff166107b28110610763575b6107b1190190565b61076b6104e5565b61075b565b61ffff166001811061050f576000190190565b61ffff9182169116818110610796570390565b61079e6104e5565b0390565b63ffffffff9182169116818110610796570390565b60019063ffffffff809116908114610741570190565b9063ffffffff8080931691168092038111610741570190565b50634e487b7160e01b600052603260045260246000fd5b906030821015610838575b601c8260031c7f033cb808a453240b3c9916e6d1ccc504e492e2b2453192ff241c73847a521d07019260021b1690565b6108406107e6565b610808565b6001600160a01b031660009081527f033cb808a453240b3c9916e6d1ccc504e492e2b2453192ff241c73847a521d126020526040902090565b6001600160401b036001911667fffffffffffffffe8111610741570190565b906001600160401b038080931691168092038111610741570190565b6001906001198111610741570190565b81198111610741570190565b91908251928382526000905b84821061090e575092806020939411610901575b601f01601f1916010190565b60008382840101526108f5565b906020908180828501015190828601015201906108e1565b93959490610950608094936001600160401b0360ff9316875260a0602088015260a08701906108d5565b9661ffff809416604087015216606085015216910152565b91909161097442610d53565b91602083019161099661099061098b855160ff1690565b6104fc565b60ff1690565b9461ffff8216946109a96019871061051c565b6109bc6109b6873461057f565b15610595565b66038d7ea4c680006109d081340615610608565b3404926109e3633b9aca00851115610691565b610aaa6109f9610a9a610a026109f98b8961067b565b63ffffffff1690565b9a610a2e7f033cb808a453240b3c9916e6d1ccc504e492e2b2453192ff241c73847a521d115460ff1690565b60009015610bfd5750610a95610a8e60ff610a6760059650919390929496505b610a62610a5d8a5161ffff1690565b610704565b61072a565b931692610a88600080516020611d2f8339815191525461ffff9060101c1690565b90610783565b61ffff1690565b6107a2565b96875b610aaa6109f9838b6107cd565b63ffffffff821690811015610b2a5791610b216109f992610b1c8d610afa610af46030610aaa990692610aef610adf856107fd565b905463ffffffff9160031b1c1690565b6107cd565b916107fd565b90919082549060031b9163ffffffff9283811b93849216901b16911916179055565b6107b7565b91509150610a9d565b505050610bf8939497507f6a7f8439932380592f144688013b66f9f08c6c8571bc599d1b18ceae2cf67ed39650610bea610be1610b9997610bda610bc8600a8a04610bb3610b7733610845565b6001600160401b039d8e8416610b9483546001600160401b031690565b61089d565b6001600160401b03166001600160401b0319825416179055565b600080516020611d4f833981519152546108c9565b600080516020611d4f83398151915255565b5160ff1690565b925161ffff1690565b926040519687961686610926565b0390a1565b610a8e60ff610a67610a9593965091939092949650610a4e565b6301e133808110610c2d575b6301e1337f190190565b610c356104e5565b610c23565b6301e285008110610c50575b6301e284ff190190565b610c586104e5565b610c46565b6101dd8110610c6f575b6101dc190190565b610c776104e5565b610c67565b818110610796570390565b7c87d206500cf71c7a443cd6c7ebe38ec0b59488f085555dd275ba5624c78111600116610cb8575b6301e285000290565b610cc06104e5565b610caf565b7c883148f5cb1270b85273b667ae1cfdf5d70ac5a1ecccd54fe15c297df38111600116610cf6575b6301e133800290565b610cfe6104e5565b610ced565b7dc22e450672894ab6cd8efb11d33f5617839a5bc7dea00c22e450672894ab8111600116610d34575b620151800290565b610d3c6104e5565b610d2c565b60ff6001911660ff8114610741570190565b9060405191604083018381106001600160401b03821117610e6c575b604052600083526020830192600084528093610d95610d8d84610ec1565b61ffff168352565b610dee610db7610db2610dad610a8e865161ffff1690565b610e79565b610c5d565b610de8610de3610dc683610c87565b92610dde610a8e610dd9895161ffff1690565b61074d565b610c7c565b610cc5565b906108c9565b906001915b600c60ff84161115610e07575b5050505050565b610e27610e22610990610e1c875161ffff1690565b86610fca565b610d03565b9085610e3382846108c9565b11610e5157610e4b91610e45916108c9565b92610d41565b91610df3565b505060ff909116905250610e629050565b3880808080610e00565b610e7461019d565b610d6f565b6102c69060018110610eb4575b600019018060021c906101906064820491828410610ea7575b0491036108c9565b610eaf6104e5565b610e9f565b610ebc6104e5565b610e86565b6301e13380810490610f256107b283198111610f84575b61ffff938491011692610de8610eed85610e79565b6101dd90818110610f77575b6101dc198101610f0881610c87565b94610f128961074d565b16908110610f6a575b9695960301610cc5565b828111610f325750905090565b610f5b90610f47610f4284610770565b610f91565b15610f6157610f5590610c3a565b91610770565b90610f25565b610f5590610c17565b610f726104e5565b610f1b565b610f7f6104e5565b610ef9565b610f8c6104e5565b610ed8565b60038116610fc45761ffff809116816064820616610fbd57610190900616610fb857600190565b600090565b5050600190565b50600090565b60ff16600181148015611098575b801561108e575b8015611084575b801561107a575b8015611070575b8015611066575b15611007575050601f90565b6004811490811561105b575b8115611050575b8115611045575b501561102d5750601e90565b61103690610f91565b1561104057601d90565b601c90565b600b91501438611021565b60098114915061101a565b600681149150611013565b50600c8114610ffb565b50600a8114610ff4565b5060088114610fed565b5060078114610fe6565b5060058114610fdf565b5060038114610fd8565b6000527f033cb808a453240b3c9916e6d1ccc504e492e2b2453192ff241c73847a521d0e602052604060002090565b63ffffffff166000527f033cb808a453240b3c9916e6d1ccc504e492e2b2453192ff241c73847a521d0d602052604060002090565b805482101561111f575b60005260206000200190600090565b6111276107e6565b611110565b805461114f9168010000000000000000821015611172575b600182018155611106565b819291549060031b9160018060a01b039283811b93849216901b16911916179055565b61117a61019d565b611144565b60030b637fffffff19811461050f576000190190565b60019060030b637fffffff8114610741570190565b9590936111e360ff9360c0979a99956111ce61ffff9860e08c5260e08c01906108d5565b91151560208b015289820360408b01526108d5565b6001600160a01b039182166060890152981660808701521660a085015216910152565b7fd88c393c3c90d3e614d54b41cd8bf24bc2cd20390af15081efe05c39aa4a155b9392610bf89161123642610d53565b906112a3610be16020840161125261099061098b835160ff1690565b61111160901b87811614156112b2575b5061128861126f33610845565b610b9961128382546001600160401b031690565b61087e565b610bda610bc8600080516020611d4f833981519152546108b9565b926040519687963393886111aa565b611306906112e17f033cb808a453240b3c9916e6d1ccc504e492e2b2453192ff241c73847a521d115460ff1690565b6000901561144a5750610a95610a8e60ff60055b1692610a62610a5d8b5161ffff1690565b61132563ffffffff8216601489901b62100000600160b41b03166108c9565b908761136b611367611360856000527f033cb808a453240b3c9916e6d1ccc504e492e2b2453192ff241c73847a521d0f602052604060002090565b5460ff1690565b1590565b6113d6575b505088156113b2576113846113ac916110a2565b611397611392825460030b90565b611195565b63ffffffff198254169063ffffffff16179055565b38611262565b6113be6113d1916110a2565b6113976113cc825460030b90565b61117f565b6113ac565b61143e61144392611420611413866000527f033cb808a453240b3c9916e6d1ccc504e492e2b2453192ff241c73847a521d0f602052604060002090565b805460ff19166001179055565b61143961142c866110a2565b805463ffffffff19169055565b6110d1565b61112c565b3887611370565b610a8e60ff610a95926112f5565b1561145f57565b5060405162461bcd60e51b815260206004820152604260248201527f596f75722063616e206f6e6c79207472616e7366657220796f7572207368617260448201527f6520666f72206d6f6e7468206265666f7265207468652063757272656e74206f6064820152616e6560f01b608482015260a490fd5b156114dd57565b5060405162461bcd60e51b815260206004820152604360248201527f596f75722063616e206f6e6c79207472616e7366657220796f7572207368617260448201527f6520666f72206d6f6e74687320616674657220646f6e6174696f6e20737461726064820152621d195960ea1b608482015260a490fd5b1561155c57565b5060405162461bcd60e51b815260206004820152603360248201527f596f75722063616e2774207472616e7366657220736861726573206d6f7265206044820152723a3430b710191a1036b7b73a34399030b3b79760691b6064820152608490fd5b156115c557565b5060405162461bcd60e51b815260206004820152601860248201527f536861726520616c7265616479207472616e73666572656400000000000000006044820152606490fd5b1561161257565b5060405162461bcd60e51b815260206004820152602a60248201527f596f752068617665206e6f7420656e6f756768207570766f74657320746f20626044820152696520656c696769626c6560b01b6064820152608490fd5b6001906000198114610741570190565b63ffffffff918280921691829116920482118115151661071e570290565b906001600160401b038091169182156116b157160490565b6116b9610568565b160490565b156116c557565b5060405162461bcd60e51b815260206004820152602f60248201527f4e6f7420656e6f75676820646f6e6174696f6e7320666f722074686174206d6f60448201526e373a34399030bb30b4b630b136329760891b6064820152608490fd5b66ffffffffffffff8091168066038d7ea4c68000920482118115151661071e570290565b506040513d6000823e3d90fd5b909161177f610a8e61176542610d53565b610a62610a5d610be161099061098b602086015160ff1690565b92611798610a8e61179383610a6286610704565b610770565b94859163ffffffff936117f16018866117ea8188169b8b6117bd8e85819f1611611458565b610a956117e1610a8e600080516020611d2f8339815191525461ffff9060101c1690565b809e10156114d6565b1610611555565b6117fe883360141b6108c9565b9161183e611838611360856000527f033cb808a453240b3c9916e6d1ccc504e492e2b2453192ff241c73847a521d10602052604060002090565b156115be565b60009661186188611858611851876110a2565b5460030b90565b60030b1361160b565b8796885b61186e886110d1565b54811015611917576118c58c6118c06118ba6118ae6118ae611899878f611894906110d1565b611106565b905460039190911b1c6001600160a01b031690565b6001600160a01b031690565b60141b90565b6108c9565b8a6118db6118d5611851846110a2565b60030b90565b136118f0575b506118eb9061166b565b611865565b6118eb919961190a6109f96109f9611851611910956110a2565b9061089d565b98906118e1565b50889989979993959894969b50908061193185938c6107a2565b603061ffff919091160695611945876107fd565b905460039190911b1c63ffffffff1661195d8c6110a2565b5460030b63ffffffff166119709161167b565b63ffffffff169061198091611699565b63ffffffff1699611990876107fd565b905460039190911b1c63ffffffff16828c169384911610156119b1906116be565b6119ba876107fd565b81548d90600383901b1c63ffffffff16906119d4916107a2565b825463ffffffff60039390931b83811b80199092169390921690911b16179055611a27906000527f033cb808a453240b3c9916e6d1ccc504e492e2b2453192ff241c73847a521d10602052604060002090565b805460ff19166001179055611a3b82611723565b839066ffffffffffffff169182159d610bf89b7fd60ef7047ec8bfc45d19c2ec01830d929258bf2a7ae675fde3dab44fa17f2f769f98611ae197611adc96610bc8967feb338d42e19428a462947fce4ff0c28c2ccae6f7ecdb16beb0dc981f98ae967c9c611b68575b6001600160a01b038c1690f115611b5b575b600a840416610bb3611ac733610845565b610b9983610b9483546001600160401b031690565b611723565b6040805166ffffffffffffff9290921682526001600160a01b0392909216602082015261ffff858116928201929092529085166060820152608090a16040519586958693919594909260809360a086019763ffffffff809216875216602086015261ffff9283809216604087015216606085015216910152565b611b63611747565b611ab6565b506108fc611aa4565b60408051919060007f033cb808a453240b3c9916e6d1ccc504e492e2b2453192ff241c73847a521d07845b60306007840110611bb65750505050611bb4826101b4565b565b6001610100600892611c668554611c5b63ffffffff611bdc8582851663ffffffff169052565b611bf360208285828901921c1663ffffffff169052565b63ffffffff838c1c821616858c0152611c1960608285828901921c1663ffffffff169052565b611c3060808285828901921c1663ffffffff169052565b611c4760a08285828901921c1663ffffffff169052565b60c09083828701921c1663ffffffff169052565b60e090811c90830152565b01920192019190611b9c565b604051606081018181106001600160401b03821117611d21575b60405260008152600060208201526040805191611ca8836101b4565b610600368437015261ffff611d04600c82600080516020611d2f8339815191525460101c1692818406169261fffe8411611d14575b611cf66001611cea6101dd565b9501859061ffff169052565b04602083019061ffff169052565b611d0c611b71565b604082015290565b611d1c6104e5565b611cdd565b611d2961019d565b611c8c56fe033cb808a453240b3c9916e6d1ccc504e492e2b2453192ff241c73847a521d06033cb808a453240b3c9916e6d1ccc504e492e2b2453192ff241c73847a521d14a3646970667358221220256698cabf0f4e0df521a2a56cb0f4f7b2317f83a7a4d60d6901dcae71db636e6c6578706572696d656e74616cf564736f6c634300080a0041","opcodes":"PUSH1 0x40 PUSH1 0x80 DUP2 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x15 JUMPI JUMPDEST POP PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP1 DUP2 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x27E665F7 EQ PUSH2 0x15E JUMPI DUP1 PUSH4 0x4F9B09AF EQ PUSH2 0x14B JUMPI DUP1 PUSH4 0x5F592BB5 EQ PUSH2 0x134 JUMPI DUP1 PUSH4 0x672296DC EQ PUSH2 0x11C JUMPI DUP1 PUSH4 0x6E283C38 EQ PUSH2 0x101 JUMPI DUP1 PUSH4 0xBC956ABB EQ PUSH2 0xC2 JUMPI DUP1 PUSH4 0xC3269DF9 EQ PUSH2 0xA8 JUMPI PUSH4 0xDB75953B EQ PUSH2 0x7A JUMPI POP PUSH2 0xF JUMP JUMPDEST CALLVALUE PUSH2 0xA4 JUMPI PUSH2 0xA0 SWAP2 POP PUSH2 0x8D CALLDATASIZE PUSH2 0x18F JUMP JUMPDEST PUSH2 0x95 PUSH2 0x1C72 JUMP JUMPDEST SWAP1 MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x390 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST POP DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0xA4 JUMPI PUSH2 0xB7 CALLDATASIZE PUSH2 0x18F JUMP JUMPDEST PUSH2 0xBF PUSH2 0x497 JUMP JUMPDEST MLOAD RETURN JUMPDEST POP CALLVALUE PUSH2 0xA4 JUMPI PUSH2 0xA0 SWAP2 POP PUSH2 0xD6 CALLDATASIZE PUSH2 0x18F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH2 0xE7 CALLER PUSH2 0x845 JUMP JUMPDEST SLOAD SWAP2 MLOAD SWAP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND DUP2 MSTORE SWAP1 DUP2 SWAP1 PUSH1 0x20 DUP3 ADD SWAP1 JUMP JUMPDEST POP CALLVALUE PUSH2 0xA4 JUMPI PUSH2 0xBF PUSH2 0x113 CALLDATASIZE PUSH2 0x31D JUMP JUMPDEST SWAP3 SWAP2 SWAP1 SWAP2 PUSH2 0x1206 JUMP JUMPDEST POP CALLVALUE PUSH2 0xA4 JUMPI PUSH2 0xBF PUSH2 0x12E CALLDATASIZE PUSH2 0x2E2 JUMP JUMPDEST SWAP2 PUSH2 0x1754 JUMP JUMPDEST POP CALLVALUE PUSH2 0xA4 JUMPI PUSH2 0x143 CALLDATASIZE PUSH2 0x18F JUMP JUMPDEST PUSH2 0xBF PUSH2 0x445 JUMP JUMPDEST POP PUSH2 0xBF PUSH2 0x158 CALLDATASIZE PUSH2 0x28B JUMP JUMPDEST SWAP1 PUSH2 0x968 JUMP JUMPDEST POP POP CALLVALUE PUSH2 0x18C JUMPI POP PUSH2 0x16F CALLDATASIZE PUSH2 0x18F JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1D4F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x80 MSTORE PUSH1 0x7F NOT PUSH1 0xA0 ADD PUSH1 0x80 RETURN JUMPDEST DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0xF JUMPI JUMP JUMPDEST POP PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x600 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x1D0 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x1D8 PUSH2 0x19D JUMP JUMPDEST PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0x60 DUP3 ADD DUP3 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x1D0 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST DUP2 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0x283 JUMPI DUP1 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP3 DUP4 DUP4 GT PUSH2 0x276 JUMPI JUMPDEST PUSH1 0x40 MLOAD SWAP4 PUSH1 0x1F DUP5 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP6 ADD SWAP1 DUP2 GT DUP6 DUP3 LT OR PUSH2 0x269 JUMPI JUMPDEST PUSH1 0x40 MSTORE DUP3 DUP5 MSTORE PUSH1 0x20 DUP4 DUP4 ADD ADD GT PUSH2 0x260 JUMPI DUP2 PUSH1 0x0 SWAP3 PUSH1 0x20 DUP1 SWAP4 ADD DUP4 DUP7 ADD CALLDATACOPY DUP4 ADD ADD MSTORE SWAP1 JUMP JUMPDEST POP POP POP POP PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x271 PUSH2 0x19D JUMP JUMPDEST PUSH2 0x23B JUMP JUMPDEST PUSH2 0x27E PUSH2 0x19D JUMP JUMPDEST PUSH2 0x21B JUMP JUMPDEST POP POP POP PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 PUSH1 0x40 PUSH1 0x3 NOT DUP4 ADD SLT PUSH2 0x2C9 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0xFFFF DUP2 AND DUP2 EQ ISZERO PUSH2 0x283 JUMPI SWAP2 PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x260 JUMPI PUSH2 0x2C6 SWAP2 PUSH1 0x4 ADD PUSH2 0x1FC JUMP JUMPDEST SWAP1 JUMP JUMPDEST POP POP PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND EQ ISZERO PUSH2 0xF JUMPI JUMP JUMPDEST PUSH1 0x60 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0xF JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x2FA DUP2 PUSH2 0x2D0 JUMP JUMPDEST SWAP1 PUSH2 0xFFFF SWAP1 PUSH1 0x24 CALLDATALOAD DUP3 DUP2 AND DUP2 EQ ISZERO PUSH2 0x260 JUMPI SWAP2 PUSH1 0x44 CALLDATALOAD SWAP1 DUP2 AND DUP2 EQ ISZERO PUSH2 0x260 JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x80 PUSH1 0x3 NOT DUP3 ADD SLT PUSH2 0x2C9 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP1 PUSH1 0x4 CALLDATALOAD DUP3 DUP2 GT PUSH2 0x260 JUMPI DUP2 PUSH2 0x349 SWAP2 PUSH1 0x4 ADD PUSH2 0x1FC JUMP JUMPDEST SWAP3 PUSH1 0x24 CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ ISZERO PUSH2 0x386 JUMPI SWAP3 PUSH1 0x44 CALLDATALOAD PUSH2 0x364 DUP2 PUSH2 0x2D0 JUMP JUMPDEST SWAP3 PUSH1 0x64 CALLDATALOAD SWAP2 DUP3 GT PUSH2 0x37B JUMPI PUSH2 0x2C6 SWAP2 PUSH1 0x4 ADD PUSH2 0x1FC JUMP JUMPDEST POP POP POP POP POP POP PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP POP POP POP PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0x640 DUP2 ADD SWAP3 PUSH1 0x40 DUP1 PUSH2 0xFFFF SWAP3 DUP4 DUP2 MLOAD AND DUP6 MSTORE PUSH1 0x20 SWAP4 DUP5 DUP3 ADD MLOAD AND DUP5 DUP7 ADD MSTORE ADD MLOAD SWAP3 ADD PUSH1 0x0 SWAP1 JUMPDEST PUSH1 0x30 DUP3 LT PUSH2 0x3C8 JUMPI POP POP POP POP JUMP JUMPDEST DUP3 DUP1 PUSH1 0x1 SWAP3 PUSH4 0xFFFFFFFF DUP8 MLOAD AND DUP2 MSTORE ADD SWAP5 ADD SWAP2 ADD SWAP1 SWAP3 PUSH2 0x3BA JUMP JUMPDEST ISZERO PUSH2 0x3EA JUMPI JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F6E6C79206F776E657220697320616C6C6F77656420746F20706572666F726D PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x103A3434B99030B1BA34B7B7 PUSH1 0xA1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH2 0x479 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH32 0xC8FCAD8DB84D3CC18B4C41D551EA0EE66DD599CDE068D998E57D5E09332C1320 SLOAD AND CALLER EQ PUSH2 0x3E3 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1D2F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x4CB PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH32 0xC8FCAD8DB84D3CC18B4C41D551EA0EE66DD599CDE068D998E57D5E09332C1320 SLOAD AND CALLER EQ PUSH2 0x3E3 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1D2F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE JUMP JUMPDEST POP PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0xFF AND PUSH1 0x1 DUP2 LT PUSH2 0x50F JUMPI JUMPDEST PUSH1 0x0 NOT ADD SWAP1 JUMP JUMPDEST PUSH2 0x517 PUSH2 0x4E5 JUMP JUMPDEST PUSH2 0x508 JUMP JUMPDEST ISZERO PUSH2 0x523 JUMPI JUMP JUMPDEST POP PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F6E6C79207570746F203234206D6F6E74687320697320737570706F72746564 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST POP PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 ISZERO PUSH2 0x589 JUMPI MOD SWAP1 JUMP JUMPDEST PUSH2 0x591 PUSH2 0x568 JUMP JUMPDEST MOD SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x59C JUMPI JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x38 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x506179656420616D6F756E74206D75737420626520646576696461626C652062 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7920746865206469737472696275746564206D6F6E7468730000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x60F JUMPI JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4C657373207468616E20312066696E6E657928312F3130303020455448292066 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x72616374696F6E7320617265206E6F7420737570706F72746564000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST DUP2 ISZERO PUSH2 0x685 JUMPI DIV SWAP1 JUMP JUMPDEST PUSH2 0x68D PUSH2 0x568 JUMP JUMPDEST DIV SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x698 JUMPI JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x446F6E6174696F6E73206C6172676572207468616E20315F3030305F3030305F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x3030302066696E6E657920617265206E6F7420737570706F7274656400000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0xC SWAP1 PUSH2 0xFFFF DUP1 SWAP2 AND DUP1 SWAP2 DIV DUP3 GT DUP2 ISZERO ISZERO AND PUSH2 0x71E JUMPI MUL SWAP1 JUMP JUMPDEST PUSH2 0x726 PUSH2 0x4E5 JUMP JUMPDEST MUL SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xFFFF DUP1 DUP1 SWAP4 AND SWAP2 AND DUP1 SWAP3 SUB DUP2 GT PUSH2 0x741 JUMPI ADD SWAP1 JUMP JUMPDEST PUSH2 0x749 PUSH2 0x4E5 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xFFFF AND PUSH2 0x7B2 DUP2 LT PUSH2 0x763 JUMPI JUMPDEST PUSH2 0x7B1 NOT ADD SWAP1 JUMP JUMPDEST PUSH2 0x76B PUSH2 0x4E5 JUMP JUMPDEST PUSH2 0x75B JUMP JUMPDEST PUSH2 0xFFFF AND PUSH1 0x1 DUP2 LT PUSH2 0x50F JUMPI PUSH1 0x0 NOT ADD SWAP1 JUMP JUMPDEST PUSH2 0xFFFF SWAP2 DUP3 AND SWAP2 AND DUP2 DUP2 LT PUSH2 0x796 JUMPI SUB SWAP1 JUMP JUMPDEST PUSH2 0x79E PUSH2 0x4E5 JUMP JUMPDEST SUB SWAP1 JUMP JUMPDEST PUSH4 0xFFFFFFFF SWAP2 DUP3 AND SWAP2 AND DUP2 DUP2 LT PUSH2 0x796 JUMPI SUB SWAP1 JUMP JUMPDEST PUSH1 0x1 SWAP1 PUSH4 0xFFFFFFFF DUP1 SWAP2 AND SWAP1 DUP2 EQ PUSH2 0x741 JUMPI ADD SWAP1 JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF DUP1 DUP1 SWAP4 AND SWAP2 AND DUP1 SWAP3 SUB DUP2 GT PUSH2 0x741 JUMPI ADD SWAP1 JUMP JUMPDEST POP PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x30 DUP3 LT ISZERO PUSH2 0x838 JUMPI JUMPDEST PUSH1 0x1C DUP3 PUSH1 0x3 SHR PUSH32 0x33CB808A453240B3C9916E6D1CCC504E492E2B2453192FF241C73847A521D07 ADD SWAP3 PUSH1 0x2 SHL AND SWAP1 JUMP JUMPDEST PUSH2 0x840 PUSH2 0x7E6 JUMP JUMPDEST PUSH2 0x808 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0x33CB808A453240B3C9916E6D1CCC504E492E2B2453192FF241C73847A521D12 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0x1 SWAP2 AND PUSH8 0xFFFFFFFFFFFFFFFE DUP2 GT PUSH2 0x741 JUMPI ADD SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP1 SWAP4 AND SWAP2 AND DUP1 SWAP3 SUB DUP2 GT PUSH2 0x741 JUMPI ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 SWAP1 PUSH1 0x1 NOT DUP2 GT PUSH2 0x741 JUMPI ADD SWAP1 JUMP JUMPDEST DUP2 NOT DUP2 GT PUSH2 0x741 JUMPI ADD SWAP1 JUMP JUMPDEST SWAP2 SWAP1 DUP3 MLOAD SWAP3 DUP4 DUP3 MSTORE PUSH1 0x0 SWAP1 JUMPDEST DUP5 DUP3 LT PUSH2 0x90E JUMPI POP SWAP3 DUP1 PUSH1 0x20 SWAP4 SWAP5 GT PUSH2 0x901 JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP3 DUP5 ADD ADD MSTORE PUSH2 0x8F5 JUMP JUMPDEST SWAP1 PUSH1 0x20 SWAP1 DUP2 DUP1 DUP3 DUP6 ADD ADD MLOAD SWAP1 DUP3 DUP7 ADD ADD MSTORE ADD SWAP1 PUSH2 0x8E1 JUMP JUMPDEST SWAP4 SWAP6 SWAP5 SWAP1 PUSH2 0x950 PUSH1 0x80 SWAP5 SWAP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0xFF SWAP4 AND DUP8 MSTORE PUSH1 0xA0 PUSH1 0x20 DUP9 ADD MSTORE PUSH1 0xA0 DUP8 ADD SWAP1 PUSH2 0x8D5 JUMP JUMPDEST SWAP7 PUSH2 0xFFFF DUP1 SWAP5 AND PUSH1 0x40 DUP8 ADD MSTORE AND PUSH1 0x60 DUP6 ADD MSTORE AND SWAP2 ADD MSTORE JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0x974 TIMESTAMP PUSH2 0xD53 JUMP JUMPDEST SWAP2 PUSH1 0x20 DUP4 ADD SWAP2 PUSH2 0x996 PUSH2 0x990 PUSH2 0x98B DUP6 MLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x4FC JUMP JUMPDEST PUSH1 0xFF AND SWAP1 JUMP JUMPDEST SWAP5 PUSH2 0xFFFF DUP3 AND SWAP5 PUSH2 0x9A9 PUSH1 0x19 DUP8 LT PUSH2 0x51C JUMP JUMPDEST PUSH2 0x9BC PUSH2 0x9B6 DUP8 CALLVALUE PUSH2 0x57F JUMP JUMPDEST ISZERO PUSH2 0x595 JUMP JUMPDEST PUSH7 0x38D7EA4C68000 PUSH2 0x9D0 DUP2 CALLVALUE MOD ISZERO PUSH2 0x608 JUMP JUMPDEST CALLVALUE DIV SWAP3 PUSH2 0x9E3 PUSH4 0x3B9ACA00 DUP6 GT ISZERO PUSH2 0x691 JUMP JUMPDEST PUSH2 0xAAA PUSH2 0x9F9 PUSH2 0xA9A PUSH2 0xA02 PUSH2 0x9F9 DUP12 DUP10 PUSH2 0x67B JUMP JUMPDEST PUSH4 0xFFFFFFFF AND SWAP1 JUMP JUMPDEST SWAP11 PUSH2 0xA2E PUSH32 0x33CB808A453240B3C9916E6D1CCC504E492E2B2453192FF241C73847A521D11 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 ISZERO PUSH2 0xBFD JUMPI POP PUSH2 0xA95 PUSH2 0xA8E PUSH1 0xFF PUSH2 0xA67 PUSH1 0x5 SWAP7 POP SWAP2 SWAP4 SWAP1 SWAP3 SWAP5 SWAP7 POP JUMPDEST PUSH2 0xA62 PUSH2 0xA5D DUP11 MLOAD PUSH2 0xFFFF AND SWAP1 JUMP JUMPDEST PUSH2 0x704 JUMP JUMPDEST PUSH2 0x72A JUMP JUMPDEST SWAP4 AND SWAP3 PUSH2 0xA88 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1D2F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH2 0xFFFF SWAP1 PUSH1 0x10 SHR AND SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x783 JUMP JUMPDEST PUSH2 0xFFFF AND SWAP1 JUMP JUMPDEST PUSH2 0x7A2 JUMP JUMPDEST SWAP7 DUP8 JUMPDEST PUSH2 0xAAA PUSH2 0x9F9 DUP4 DUP12 PUSH2 0x7CD JUMP JUMPDEST PUSH4 0xFFFFFFFF DUP3 AND SWAP1 DUP2 LT ISZERO PUSH2 0xB2A JUMPI SWAP2 PUSH2 0xB21 PUSH2 0x9F9 SWAP3 PUSH2 0xB1C DUP14 PUSH2 0xAFA PUSH2 0xAF4 PUSH1 0x30 PUSH2 0xAAA SWAP10 MOD SWAP3 PUSH2 0xAEF PUSH2 0xADF DUP6 PUSH2 0x7FD JUMP JUMPDEST SWAP1 SLOAD PUSH4 0xFFFFFFFF SWAP2 PUSH1 0x3 SHL SHR AND SWAP1 JUMP JUMPDEST PUSH2 0x7CD JUMP JUMPDEST SWAP2 PUSH2 0x7FD JUMP JUMPDEST SWAP1 SWAP2 SWAP1 DUP3 SLOAD SWAP1 PUSH1 0x3 SHL SWAP2 PUSH4 0xFFFFFFFF SWAP3 DUP4 DUP2 SHL SWAP4 DUP5 SWAP3 AND SWAP1 SHL AND SWAP2 NOT AND OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x7B7 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0xA9D JUMP JUMPDEST POP POP POP PUSH2 0xBF8 SWAP4 SWAP5 SWAP8 POP PUSH32 0x6A7F8439932380592F144688013B66F9F08C6C8571BC599D1B18CEAE2CF67ED3 SWAP7 POP PUSH2 0xBEA PUSH2 0xBE1 PUSH2 0xB99 SWAP8 PUSH2 0xBDA PUSH2 0xBC8 PUSH1 0xA DUP11 DIV PUSH2 0xBB3 PUSH2 0xB77 CALLER PUSH2 0x845 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP14 DUP15 DUP5 AND PUSH2 0xB94 DUP4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x89D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB NOT DUP3 SLOAD AND OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1D4F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH2 0x8C9 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1D4F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SSTORE JUMP JUMPDEST MLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST SWAP3 MLOAD PUSH2 0xFFFF AND SWAP1 JUMP JUMPDEST SWAP3 PUSH1 0x40 MLOAD SWAP7 DUP8 SWAP7 AND DUP7 PUSH2 0x926 JUMP JUMPDEST SUB SWAP1 LOG1 JUMP JUMPDEST PUSH2 0xA8E PUSH1 0xFF PUSH2 0xA67 PUSH2 0xA95 SWAP4 SWAP7 POP SWAP2 SWAP4 SWAP1 SWAP3 SWAP5 SWAP7 POP PUSH2 0xA4E JUMP JUMPDEST PUSH4 0x1E13380 DUP2 LT PUSH2 0xC2D JUMPI JUMPDEST PUSH4 0x1E1337F NOT ADD SWAP1 JUMP JUMPDEST PUSH2 0xC35 PUSH2 0x4E5 JUMP JUMPDEST PUSH2 0xC23 JUMP JUMPDEST PUSH4 0x1E28500 DUP2 LT PUSH2 0xC50 JUMPI JUMPDEST PUSH4 0x1E284FF NOT ADD SWAP1 JUMP JUMPDEST PUSH2 0xC58 PUSH2 0x4E5 JUMP JUMPDEST PUSH2 0xC46 JUMP JUMPDEST PUSH2 0x1DD DUP2 LT PUSH2 0xC6F JUMPI JUMPDEST PUSH2 0x1DC NOT ADD SWAP1 JUMP JUMPDEST PUSH2 0xC77 PUSH2 0x4E5 JUMP JUMPDEST PUSH2 0xC67 JUMP JUMPDEST DUP2 DUP2 LT PUSH2 0x796 JUMPI SUB SWAP1 JUMP JUMPDEST PUSH29 0x87D206500CF71C7A443CD6C7EBE38EC0B59488F085555DD275BA5624C7 DUP2 GT PUSH1 0x1 AND PUSH2 0xCB8 JUMPI JUMPDEST PUSH4 0x1E28500 MUL SWAP1 JUMP JUMPDEST PUSH2 0xCC0 PUSH2 0x4E5 JUMP JUMPDEST PUSH2 0xCAF JUMP JUMPDEST PUSH29 0x883148F5CB1270B85273B667AE1CFDF5D70AC5A1ECCCD54FE15C297DF3 DUP2 GT PUSH1 0x1 AND PUSH2 0xCF6 JUMPI JUMPDEST PUSH4 0x1E13380 MUL SWAP1 JUMP JUMPDEST PUSH2 0xCFE PUSH2 0x4E5 JUMP JUMPDEST PUSH2 0xCED JUMP JUMPDEST PUSH30 0xC22E450672894AB6CD8EFB11D33F5617839A5BC7DEA00C22E450672894AB DUP2 GT PUSH1 0x1 AND PUSH2 0xD34 JUMPI JUMPDEST PUSH3 0x15180 MUL SWAP1 JUMP JUMPDEST PUSH2 0xD3C PUSH2 0x4E5 JUMP JUMPDEST PUSH2 0xD2C JUMP JUMPDEST PUSH1 0xFF PUSH1 0x1 SWAP2 AND PUSH1 0xFF DUP2 EQ PUSH2 0x741 JUMPI ADD SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD SWAP2 PUSH1 0x40 DUP4 ADD DUP4 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0xE6C JUMPI JUMPDEST PUSH1 0x40 MSTORE PUSH1 0x0 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP3 PUSH1 0x0 DUP5 MSTORE DUP1 SWAP4 PUSH2 0xD95 PUSH2 0xD8D DUP5 PUSH2 0xEC1 JUMP JUMPDEST PUSH2 0xFFFF AND DUP4 MSTORE JUMP JUMPDEST PUSH2 0xDEE PUSH2 0xDB7 PUSH2 0xDB2 PUSH2 0xDAD PUSH2 0xA8E DUP7 MLOAD PUSH2 0xFFFF AND SWAP1 JUMP JUMPDEST PUSH2 0xE79 JUMP JUMPDEST PUSH2 0xC5D JUMP JUMPDEST PUSH2 0xDE8 PUSH2 0xDE3 PUSH2 0xDC6 DUP4 PUSH2 0xC87 JUMP JUMPDEST SWAP3 PUSH2 0xDDE PUSH2 0xA8E PUSH2 0xDD9 DUP10 MLOAD PUSH2 0xFFFF AND SWAP1 JUMP JUMPDEST PUSH2 0x74D JUMP JUMPDEST PUSH2 0xC7C JUMP JUMPDEST PUSH2 0xCC5 JUMP JUMPDEST SWAP1 PUSH2 0x8C9 JUMP JUMPDEST SWAP1 PUSH1 0x1 SWAP2 JUMPDEST PUSH1 0xC PUSH1 0xFF DUP5 AND GT ISZERO PUSH2 0xE07 JUMPI JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH2 0xE27 PUSH2 0xE22 PUSH2 0x990 PUSH2 0xE1C DUP8 MLOAD PUSH2 0xFFFF AND SWAP1 JUMP JUMPDEST DUP7 PUSH2 0xFCA JUMP JUMPDEST PUSH2 0xD03 JUMP JUMPDEST SWAP1 DUP6 PUSH2 0xE33 DUP3 DUP5 PUSH2 0x8C9 JUMP JUMPDEST GT PUSH2 0xE51 JUMPI PUSH2 0xE4B SWAP2 PUSH2 0xE45 SWAP2 PUSH2 0x8C9 JUMP JUMPDEST SWAP3 PUSH2 0xD41 JUMP JUMPDEST SWAP2 PUSH2 0xDF3 JUMP JUMPDEST POP POP PUSH1 0xFF SWAP1 SWAP2 AND SWAP1 MSTORE POP PUSH2 0xE62 SWAP1 POP JUMP JUMPDEST CODESIZE DUP1 DUP1 DUP1 DUP1 PUSH2 0xE00 JUMP JUMPDEST PUSH2 0xE74 PUSH2 0x19D JUMP JUMPDEST PUSH2 0xD6F JUMP JUMPDEST PUSH2 0x2C6 SWAP1 PUSH1 0x1 DUP2 LT PUSH2 0xEB4 JUMPI JUMPDEST PUSH1 0x0 NOT ADD DUP1 PUSH1 0x2 SHR SWAP1 PUSH2 0x190 PUSH1 0x64 DUP3 DIV SWAP2 DUP3 DUP5 LT PUSH2 0xEA7 JUMPI JUMPDEST DIV SWAP2 SUB PUSH2 0x8C9 JUMP JUMPDEST PUSH2 0xEAF PUSH2 0x4E5 JUMP JUMPDEST PUSH2 0xE9F JUMP JUMPDEST PUSH2 0xEBC PUSH2 0x4E5 JUMP JUMPDEST PUSH2 0xE86 JUMP JUMPDEST PUSH4 0x1E13380 DUP2 DIV SWAP1 PUSH2 0xF25 PUSH2 0x7B2 DUP4 NOT DUP2 GT PUSH2 0xF84 JUMPI JUMPDEST PUSH2 0xFFFF SWAP4 DUP5 SWAP2 ADD AND SWAP3 PUSH2 0xDE8 PUSH2 0xEED DUP6 PUSH2 0xE79 JUMP JUMPDEST PUSH2 0x1DD SWAP1 DUP2 DUP2 LT PUSH2 0xF77 JUMPI JUMPDEST PUSH2 0x1DC NOT DUP2 ADD PUSH2 0xF08 DUP2 PUSH2 0xC87 JUMP JUMPDEST SWAP5 PUSH2 0xF12 DUP10 PUSH2 0x74D JUMP JUMPDEST AND SWAP1 DUP2 LT PUSH2 0xF6A JUMPI JUMPDEST SWAP7 SWAP6 SWAP7 SUB ADD PUSH2 0xCC5 JUMP JUMPDEST DUP3 DUP2 GT PUSH2 0xF32 JUMPI POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xF5B SWAP1 PUSH2 0xF47 PUSH2 0xF42 DUP5 PUSH2 0x770 JUMP JUMPDEST PUSH2 0xF91 JUMP JUMPDEST ISZERO PUSH2 0xF61 JUMPI PUSH2 0xF55 SWAP1 PUSH2 0xC3A JUMP JUMPDEST SWAP2 PUSH2 0x770 JUMP JUMPDEST SWAP1 PUSH2 0xF25 JUMP JUMPDEST PUSH2 0xF55 SWAP1 PUSH2 0xC17 JUMP JUMPDEST PUSH2 0xF72 PUSH2 0x4E5 JUMP JUMPDEST PUSH2 0xF1B JUMP JUMPDEST PUSH2 0xF7F PUSH2 0x4E5 JUMP JUMPDEST PUSH2 0xEF9 JUMP JUMPDEST PUSH2 0xF8C PUSH2 0x4E5 JUMP JUMPDEST PUSH2 0xED8 JUMP JUMPDEST PUSH1 0x3 DUP2 AND PUSH2 0xFC4 JUMPI PUSH2 0xFFFF DUP1 SWAP2 AND DUP2 PUSH1 0x64 DUP3 MOD AND PUSH2 0xFBD JUMPI PUSH2 0x190 SWAP1 MOD AND PUSH2 0xFB8 JUMPI PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST POP POP PUSH1 0x1 SWAP1 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0xFF AND PUSH1 0x1 DUP2 EQ DUP1 ISZERO PUSH2 0x1098 JUMPI JUMPDEST DUP1 ISZERO PUSH2 0x108E JUMPI JUMPDEST DUP1 ISZERO PUSH2 0x1084 JUMPI JUMPDEST DUP1 ISZERO PUSH2 0x107A JUMPI JUMPDEST DUP1 ISZERO PUSH2 0x1070 JUMPI JUMPDEST DUP1 ISZERO PUSH2 0x1066 JUMPI JUMPDEST ISZERO PUSH2 0x1007 JUMPI POP POP PUSH1 0x1F SWAP1 JUMP JUMPDEST PUSH1 0x4 DUP2 EQ SWAP1 DUP2 ISZERO PUSH2 0x105B JUMPI JUMPDEST DUP2 ISZERO PUSH2 0x1050 JUMPI JUMPDEST DUP2 ISZERO PUSH2 0x1045 JUMPI JUMPDEST POP ISZERO PUSH2 0x102D JUMPI POP PUSH1 0x1E SWAP1 JUMP JUMPDEST PUSH2 0x1036 SWAP1 PUSH2 0xF91 JUMP JUMPDEST ISZERO PUSH2 0x1040 JUMPI PUSH1 0x1D SWAP1 JUMP JUMPDEST PUSH1 0x1C SWAP1 JUMP JUMPDEST PUSH1 0xB SWAP2 POP EQ CODESIZE PUSH2 0x1021 JUMP JUMPDEST PUSH1 0x9 DUP2 EQ SWAP2 POP PUSH2 0x101A JUMP JUMPDEST PUSH1 0x6 DUP2 EQ SWAP2 POP PUSH2 0x1013 JUMP JUMPDEST POP PUSH1 0xC DUP2 EQ PUSH2 0xFFB JUMP JUMPDEST POP PUSH1 0xA DUP2 EQ PUSH2 0xFF4 JUMP JUMPDEST POP PUSH1 0x8 DUP2 EQ PUSH2 0xFED JUMP JUMPDEST POP PUSH1 0x7 DUP2 EQ PUSH2 0xFE6 JUMP JUMPDEST POP PUSH1 0x5 DUP2 EQ PUSH2 0xFDF JUMP JUMPDEST POP PUSH1 0x3 DUP2 EQ PUSH2 0xFD8 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH32 0x33CB808A453240B3C9916E6D1CCC504E492E2B2453192FF241C73847A521D0E PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH4 0xFFFFFFFF AND PUSH1 0x0 MSTORE PUSH32 0x33CB808A453240B3C9916E6D1CCC504E492E2B2453192FF241C73847A521D0D PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST DUP1 SLOAD DUP3 LT ISZERO PUSH2 0x111F JUMPI JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x1127 PUSH2 0x7E6 JUMP JUMPDEST PUSH2 0x1110 JUMP JUMPDEST DUP1 SLOAD PUSH2 0x114F SWAP2 PUSH9 0x10000000000000000 DUP3 LT ISZERO PUSH2 0x1172 JUMPI JUMPDEST PUSH1 0x1 DUP3 ADD DUP2 SSTORE PUSH2 0x1106 JUMP JUMPDEST DUP2 SWAP3 SWAP2 SLOAD SWAP1 PUSH1 0x3 SHL SWAP2 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 DUP2 SHL SWAP4 DUP5 SWAP3 AND SWAP1 SHL AND SWAP2 NOT AND OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x117A PUSH2 0x19D JUMP JUMPDEST PUSH2 0x1144 JUMP JUMPDEST PUSH1 0x3 SIGNEXTEND PUSH4 0x7FFFFFFF NOT DUP2 EQ PUSH2 0x50F JUMPI PUSH1 0x0 NOT ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 SWAP1 PUSH1 0x3 SIGNEXTEND PUSH4 0x7FFFFFFF DUP2 EQ PUSH2 0x741 JUMPI ADD SWAP1 JUMP JUMPDEST SWAP6 SWAP1 SWAP4 PUSH2 0x11E3 PUSH1 0xFF SWAP4 PUSH1 0xC0 SWAP8 SWAP11 SWAP10 SWAP6 PUSH2 0x11CE PUSH2 0xFFFF SWAP9 PUSH1 0xE0 DUP13 MSTORE PUSH1 0xE0 DUP13 ADD SWAP1 PUSH2 0x8D5 JUMP JUMPDEST SWAP2 ISZERO ISZERO PUSH1 0x20 DUP12 ADD MSTORE DUP10 DUP3 SUB PUSH1 0x40 DUP12 ADD MSTORE PUSH2 0x8D5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x60 DUP10 ADD MSTORE SWAP9 AND PUSH1 0x80 DUP8 ADD MSTORE AND PUSH1 0xA0 DUP6 ADD MSTORE AND SWAP2 ADD MSTORE JUMP JUMPDEST PUSH32 0xD88C393C3C90D3E614D54B41CD8BF24BC2CD20390AF15081EFE05C39AA4A155B SWAP4 SWAP3 PUSH2 0xBF8 SWAP2 PUSH2 0x1236 TIMESTAMP PUSH2 0xD53 JUMP JUMPDEST SWAP1 PUSH2 0x12A3 PUSH2 0xBE1 PUSH1 0x20 DUP5 ADD PUSH2 0x1252 PUSH2 0x990 PUSH2 0x98B DUP4 MLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x1111 PUSH1 0x90 SHL DUP8 DUP2 AND EQ ISZERO PUSH2 0x12B2 JUMPI JUMPDEST POP PUSH2 0x1288 PUSH2 0x126F CALLER PUSH2 0x845 JUMP JUMPDEST PUSH2 0xB99 PUSH2 0x1283 DUP3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x87E JUMP JUMPDEST PUSH2 0xBDA PUSH2 0xBC8 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1D4F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH2 0x8B9 JUMP JUMPDEST SWAP3 PUSH1 0x40 MLOAD SWAP7 DUP8 SWAP7 CALLER SWAP4 DUP9 PUSH2 0x11AA JUMP JUMPDEST PUSH2 0x1306 SWAP1 PUSH2 0x12E1 PUSH32 0x33CB808A453240B3C9916E6D1CCC504E492E2B2453192FF241C73847A521D11 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 ISZERO PUSH2 0x144A JUMPI POP PUSH2 0xA95 PUSH2 0xA8E PUSH1 0xFF PUSH1 0x5 JUMPDEST AND SWAP3 PUSH2 0xA62 PUSH2 0xA5D DUP12 MLOAD PUSH2 0xFFFF AND SWAP1 JUMP JUMPDEST PUSH2 0x1325 PUSH4 0xFFFFFFFF DUP3 AND PUSH1 0x14 DUP10 SWAP1 SHL PUSH3 0x100000 PUSH1 0x1 PUSH1 0xB4 SHL SUB AND PUSH2 0x8C9 JUMP JUMPDEST SWAP1 DUP8 PUSH2 0x136B PUSH2 0x1367 PUSH2 0x1360 DUP6 PUSH1 0x0 MSTORE PUSH32 0x33CB808A453240B3C9916E6D1CCC504E492E2B2453192FF241C73847A521D0F PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST ISZERO SWAP1 JUMP JUMPDEST PUSH2 0x13D6 JUMPI JUMPDEST POP POP DUP9 ISZERO PUSH2 0x13B2 JUMPI PUSH2 0x1384 PUSH2 0x13AC SWAP2 PUSH2 0x10A2 JUMP JUMPDEST PUSH2 0x1397 PUSH2 0x1392 DUP3 SLOAD PUSH1 0x3 SIGNEXTEND SWAP1 JUMP JUMPDEST PUSH2 0x1195 JUMP JUMPDEST PUSH4 0xFFFFFFFF NOT DUP3 SLOAD AND SWAP1 PUSH4 0xFFFFFFFF AND OR SWAP1 SSTORE JUMP JUMPDEST CODESIZE PUSH2 0x1262 JUMP JUMPDEST PUSH2 0x13BE PUSH2 0x13D1 SWAP2 PUSH2 0x10A2 JUMP JUMPDEST PUSH2 0x1397 PUSH2 0x13CC DUP3 SLOAD PUSH1 0x3 SIGNEXTEND SWAP1 JUMP JUMPDEST PUSH2 0x117F JUMP JUMPDEST PUSH2 0x13AC JUMP JUMPDEST PUSH2 0x143E PUSH2 0x1443 SWAP3 PUSH2 0x1420 PUSH2 0x1413 DUP7 PUSH1 0x0 MSTORE PUSH32 0x33CB808A453240B3C9916E6D1CCC504E492E2B2453192FF241C73847A521D0F PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x1439 PUSH2 0x142C DUP7 PUSH2 0x10A2 JUMP JUMPDEST DUP1 SLOAD PUSH4 0xFFFFFFFF NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x10D1 JUMP JUMPDEST PUSH2 0x112C JUMP JUMPDEST CODESIZE DUP8 PUSH2 0x1370 JUMP JUMPDEST PUSH2 0xA8E PUSH1 0xFF PUSH2 0xA95 SWAP3 PUSH2 0x12F5 JUMP JUMPDEST ISZERO PUSH2 0x145F JUMPI JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x42 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x596F75722063616E206F6E6C79207472616E7366657220796F75722073686172 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6520666F72206D6F6E7468206265666F7265207468652063757272656E74206F PUSH1 0x64 DUP3 ADD MSTORE PUSH2 0x6E65 PUSH1 0xF0 SHL PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xA4 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x14DD JUMPI JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x43 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x596F75722063616E206F6E6C79207472616E7366657220796F75722073686172 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6520666F72206D6F6E74687320616674657220646F6E6174696F6E2073746172 PUSH1 0x64 DUP3 ADD MSTORE PUSH3 0x1D1959 PUSH1 0xEA SHL PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xA4 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x155C JUMPI JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x33 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x596F75722063616E2774207472616E7366657220736861726573206D6F726520 PUSH1 0x44 DUP3 ADD MSTORE PUSH19 0x3A3430B710191A1036B7B73A34399030B3B797 PUSH1 0x69 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x15C5 JUMPI JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536861726520616C7265616479207472616E7366657265640000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x1612 JUMPI JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x596F752068617665206E6F7420656E6F756768207570766F74657320746F2062 PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x6520656C696769626C65 PUSH1 0xB0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x1 SWAP1 PUSH1 0x0 NOT DUP2 EQ PUSH2 0x741 JUMPI ADD SWAP1 JUMP JUMPDEST PUSH4 0xFFFFFFFF SWAP2 DUP3 DUP1 SWAP3 AND SWAP2 DUP3 SWAP2 AND SWAP3 DIV DUP3 GT DUP2 ISZERO ISZERO AND PUSH2 0x71E JUMPI MUL SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 SWAP2 AND SWAP2 DUP3 ISZERO PUSH2 0x16B1 JUMPI AND DIV SWAP1 JUMP JUMPDEST PUSH2 0x16B9 PUSH2 0x568 JUMP JUMPDEST AND DIV SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x16C5 JUMPI JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F7420656E6F75676820646F6E6174696F6E7320666F722074686174206D6F PUSH1 0x44 DUP3 ADD MSTORE PUSH15 0x373A34399030BB30B4B630B1363297 PUSH1 0x89 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH7 0xFFFFFFFFFFFFFF DUP1 SWAP2 AND DUP1 PUSH7 0x38D7EA4C68000 SWAP3 DIV DUP3 GT DUP2 ISZERO ISZERO AND PUSH2 0x71E JUMPI MUL SWAP1 JUMP JUMPDEST POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP1 SWAP2 PUSH2 0x177F PUSH2 0xA8E PUSH2 0x1765 TIMESTAMP PUSH2 0xD53 JUMP JUMPDEST PUSH2 0xA62 PUSH2 0xA5D PUSH2 0xBE1 PUSH2 0x990 PUSH2 0x98B PUSH1 0x20 DUP7 ADD MLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST SWAP3 PUSH2 0x1798 PUSH2 0xA8E PUSH2 0x1793 DUP4 PUSH2 0xA62 DUP7 PUSH2 0x704 JUMP JUMPDEST PUSH2 0x770 JUMP JUMPDEST SWAP5 DUP6 SWAP2 PUSH4 0xFFFFFFFF SWAP4 PUSH2 0x17F1 PUSH1 0x18 DUP7 PUSH2 0x17EA DUP2 DUP9 AND SWAP12 DUP12 PUSH2 0x17BD DUP15 DUP6 DUP2 SWAP16 AND GT PUSH2 0x1458 JUMP JUMPDEST PUSH2 0xA95 PUSH2 0x17E1 PUSH2 0xA8E PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1D2F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH2 0xFFFF SWAP1 PUSH1 0x10 SHR AND SWAP1 JUMP JUMPDEST DUP1 SWAP15 LT ISZERO PUSH2 0x14D6 JUMP JUMPDEST AND LT PUSH2 0x1555 JUMP JUMPDEST PUSH2 0x17FE DUP9 CALLER PUSH1 0x14 SHL PUSH2 0x8C9 JUMP JUMPDEST SWAP2 PUSH2 0x183E PUSH2 0x1838 PUSH2 0x1360 DUP6 PUSH1 0x0 MSTORE PUSH32 0x33CB808A453240B3C9916E6D1CCC504E492E2B2453192FF241C73847A521D10 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x15BE JUMP JUMPDEST PUSH1 0x0 SWAP7 PUSH2 0x1861 DUP9 PUSH2 0x1858 PUSH2 0x1851 DUP8 PUSH2 0x10A2 JUMP JUMPDEST SLOAD PUSH1 0x3 SIGNEXTEND SWAP1 JUMP JUMPDEST PUSH1 0x3 SIGNEXTEND SGT PUSH2 0x160B JUMP JUMPDEST DUP8 SWAP7 DUP9 JUMPDEST PUSH2 0x186E DUP9 PUSH2 0x10D1 JUMP JUMPDEST SLOAD DUP2 LT ISZERO PUSH2 0x1917 JUMPI PUSH2 0x18C5 DUP13 PUSH2 0x18C0 PUSH2 0x18BA PUSH2 0x18AE PUSH2 0x18AE PUSH2 0x1899 DUP8 DUP16 PUSH2 0x1894 SWAP1 PUSH2 0x10D1 JUMP JUMPDEST PUSH2 0x1106 JUMP JUMPDEST SWAP1 SLOAD PUSH1 0x3 SWAP2 SWAP1 SWAP2 SHL SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x14 SHL SWAP1 JUMP JUMPDEST PUSH2 0x8C9 JUMP JUMPDEST DUP11 PUSH2 0x18DB PUSH2 0x18D5 PUSH2 0x1851 DUP5 PUSH2 0x10A2 JUMP JUMPDEST PUSH1 0x3 SIGNEXTEND SWAP1 JUMP JUMPDEST SGT PUSH2 0x18F0 JUMPI JUMPDEST POP PUSH2 0x18EB SWAP1 PUSH2 0x166B JUMP JUMPDEST PUSH2 0x1865 JUMP JUMPDEST PUSH2 0x18EB SWAP2 SWAP10 PUSH2 0x190A PUSH2 0x9F9 PUSH2 0x9F9 PUSH2 0x1851 PUSH2 0x1910 SWAP6 PUSH2 0x10A2 JUMP JUMPDEST SWAP1 PUSH2 0x89D JUMP JUMPDEST SWAP9 SWAP1 PUSH2 0x18E1 JUMP JUMPDEST POP DUP9 SWAP10 DUP10 SWAP8 SWAP10 SWAP4 SWAP6 SWAP9 SWAP5 SWAP7 SWAP12 POP SWAP1 DUP1 PUSH2 0x1931 DUP6 SWAP4 DUP13 PUSH2 0x7A2 JUMP JUMPDEST PUSH1 0x30 PUSH2 0xFFFF SWAP2 SWAP1 SWAP2 AND MOD SWAP6 PUSH2 0x1945 DUP8 PUSH2 0x7FD JUMP JUMPDEST SWAP1 SLOAD PUSH1 0x3 SWAP2 SWAP1 SWAP2 SHL SHR PUSH4 0xFFFFFFFF AND PUSH2 0x195D DUP13 PUSH2 0x10A2 JUMP JUMPDEST SLOAD PUSH1 0x3 SIGNEXTEND PUSH4 0xFFFFFFFF AND PUSH2 0x1970 SWAP2 PUSH2 0x167B JUMP JUMPDEST PUSH4 0xFFFFFFFF AND SWAP1 PUSH2 0x1980 SWAP2 PUSH2 0x1699 JUMP JUMPDEST PUSH4 0xFFFFFFFF AND SWAP10 PUSH2 0x1990 DUP8 PUSH2 0x7FD JUMP JUMPDEST SWAP1 SLOAD PUSH1 0x3 SWAP2 SWAP1 SWAP2 SHL SHR PUSH4 0xFFFFFFFF AND DUP3 DUP13 AND SWAP4 DUP5 SWAP2 AND LT ISZERO PUSH2 0x19B1 SWAP1 PUSH2 0x16BE JUMP JUMPDEST PUSH2 0x19BA DUP8 PUSH2 0x7FD JUMP JUMPDEST DUP2 SLOAD DUP14 SWAP1 PUSH1 0x3 DUP4 SWAP1 SHL SHR PUSH4 0xFFFFFFFF AND SWAP1 PUSH2 0x19D4 SWAP2 PUSH2 0x7A2 JUMP JUMPDEST DUP3 SLOAD PUSH4 0xFFFFFFFF PUSH1 0x3 SWAP4 SWAP1 SWAP4 SHL DUP4 DUP2 SHL DUP1 NOT SWAP1 SWAP3 AND SWAP4 SWAP1 SWAP3 AND SWAP1 SWAP2 SHL AND OR SWAP1 SSTORE PUSH2 0x1A27 SWAP1 PUSH1 0x0 MSTORE PUSH32 0x33CB808A453240B3C9916E6D1CCC504E492E2B2453192FF241C73847A521D10 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0x1A3B DUP3 PUSH2 0x1723 JUMP JUMPDEST DUP4 SWAP1 PUSH7 0xFFFFFFFFFFFFFF AND SWAP2 DUP3 ISZERO SWAP14 PUSH2 0xBF8 SWAP12 PUSH32 0xD60EF7047EC8BFC45D19C2EC01830D929258BF2A7AE675FDE3DAB44FA17F2F76 SWAP16 SWAP9 PUSH2 0x1AE1 SWAP8 PUSH2 0x1ADC SWAP7 PUSH2 0xBC8 SWAP7 PUSH32 0xEB338D42E19428A462947FCE4FF0C28C2CCAE6F7ECDB16BEB0DC981F98AE967C SWAP13 PUSH2 0x1B68 JUMPI JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP13 AND SWAP1 CALL ISZERO PUSH2 0x1B5B JUMPI JUMPDEST PUSH1 0xA DUP5 DIV AND PUSH2 0xBB3 PUSH2 0x1AC7 CALLER PUSH2 0x845 JUMP JUMPDEST PUSH2 0xB99 DUP4 PUSH2 0xB94 DUP4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x1723 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH7 0xFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0xFFFF DUP6 DUP2 AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP1 DUP6 AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 SWAP1 LOG1 PUSH1 0x40 MLOAD SWAP6 DUP7 SWAP6 DUP7 SWAP4 SWAP2 SWAP6 SWAP5 SWAP1 SWAP3 PUSH1 0x80 SWAP4 PUSH1 0xA0 DUP7 ADD SWAP8 PUSH4 0xFFFFFFFF DUP1 SWAP3 AND DUP8 MSTORE AND PUSH1 0x20 DUP7 ADD MSTORE PUSH2 0xFFFF SWAP3 DUP4 DUP1 SWAP3 AND PUSH1 0x40 DUP8 ADD MSTORE AND PUSH1 0x60 DUP6 ADD MSTORE AND SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x1B63 PUSH2 0x1747 JUMP JUMPDEST PUSH2 0x1AB6 JUMP JUMPDEST POP PUSH2 0x8FC PUSH2 0x1AA4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 SWAP1 PUSH1 0x0 PUSH32 0x33CB808A453240B3C9916E6D1CCC504E492E2B2453192FF241C73847A521D07 DUP5 JUMPDEST PUSH1 0x30 PUSH1 0x7 DUP5 ADD LT PUSH2 0x1BB6 JUMPI POP POP POP POP PUSH2 0x1BB4 DUP3 PUSH2 0x1B4 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x1 PUSH2 0x100 PUSH1 0x8 SWAP3 PUSH2 0x1C66 DUP6 SLOAD PUSH2 0x1C5B PUSH4 0xFFFFFFFF PUSH2 0x1BDC DUP6 DUP3 DUP6 AND PUSH4 0xFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH2 0x1BF3 PUSH1 0x20 DUP3 DUP6 DUP3 DUP10 ADD SWAP3 SHR AND PUSH4 0xFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH4 0xFFFFFFFF DUP4 DUP13 SHR DUP3 AND AND DUP6 DUP13 ADD MSTORE PUSH2 0x1C19 PUSH1 0x60 DUP3 DUP6 DUP3 DUP10 ADD SWAP3 SHR AND PUSH4 0xFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH2 0x1C30 PUSH1 0x80 DUP3 DUP6 DUP3 DUP10 ADD SWAP3 SHR AND PUSH4 0xFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH2 0x1C47 PUSH1 0xA0 DUP3 DUP6 DUP3 DUP10 ADD SWAP3 SHR AND PUSH4 0xFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0xC0 SWAP1 DUP4 DUP3 DUP8 ADD SWAP3 SHR AND PUSH4 0xFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0xE0 SWAP1 DUP2 SHR SWAP1 DUP4 ADD MSTORE JUMP JUMPDEST ADD SWAP3 ADD SWAP3 ADD SWAP2 SWAP1 PUSH2 0x1B9C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x60 DUP2 ADD DUP2 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x1D21 JUMPI JUMPDEST PUSH1 0x40 MSTORE PUSH1 0x0 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP1 MLOAD SWAP2 PUSH2 0x1CA8 DUP4 PUSH2 0x1B4 JUMP JUMPDEST PUSH2 0x600 CALLDATASIZE DUP5 CALLDATACOPY ADD MSTORE PUSH2 0xFFFF PUSH2 0x1D04 PUSH1 0xC DUP3 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1D2F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x10 SHR AND SWAP3 DUP2 DUP5 MOD AND SWAP3 PUSH2 0xFFFE DUP5 GT PUSH2 0x1D14 JUMPI JUMPDEST PUSH2 0x1CF6 PUSH1 0x1 PUSH2 0x1CEA PUSH2 0x1DD JUMP JUMPDEST SWAP6 ADD DUP6 SWAP1 PUSH2 0xFFFF AND SWAP1 MSTORE JUMP JUMPDEST DIV PUSH1 0x20 DUP4 ADD SWAP1 PUSH2 0xFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH2 0x1D0C PUSH2 0x1B71 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH2 0x1D1C PUSH2 0x4E5 JUMP JUMPDEST PUSH2 0x1CDD JUMP JUMPDEST PUSH2 0x1D29 PUSH2 0x19D JUMP JUMPDEST PUSH2 0x1C8C JUMP INVALID SUB EXTCODECOPY 0xB8 ADDMOD LOG4 MSTORE8 0x24 SIGNEXTEND EXTCODECOPY SWAP10 AND 0xE6 0xD1 0xCC 0xC5 DIV 0xE4 SWAP3 0xE2 0xB2 GASLIMIT BALANCE SWAP3 SELFDESTRUCT 0x24 SHR PUSH20 0x847A521D06033CB808A453240B3C9916E6D1CCC5 DIV 0xE4 SWAP3 0xE2 0xB2 GASLIMIT BALANCE SWAP3 SELFDESTRUCT 0x24 SHR PUSH20 0x847A521D14A3646970667358221220256698CABF 0xF 0x4E 0xD CREATE2 0x21 LOG2 0xA5 PUSH13 0xB0F4F7B2317F83A7A4D60D6901 0xDC 0xAE PUSH18 0xDB636E6C6578706572696D656E74616CF564 PUSH20 0x6F6C634300080A00410000000000000000000000 ","sourceMap":"696:7014:6:-:0;;;;;;;;;;-1:-1:-1;696:7014:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;:::i;:::-;1572:146;;:::i;:::-;696:7014;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;7669:28:6;7686:10;7669:28;:::i;:::-;696:7014;;;;;-1:-1:-1;;;;;696:7014:6;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;:::i;:::-;1421:143;;:::i;696:7014::-;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;;;;;;;696:7014:6;;;-1:-1:-1;;696:7014:6;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;696:7014:6;;;;;;;:::o;:::-;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;-1:-1:-1;;;;;696:7014:6;;;;;;;:::o;:::-;;;;;;;;;;;;-1:-1:-1;;;;;696:7014:6;;;;;;;;;;;;;-1:-1:-1;;696:7014:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;696:7014:6;;;;;;;;;;;;;;:::o;:::-;;;;;-1:-1:-1;696:7014:6;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;;696:7014:6;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;696:7014:6;;;;;;;;;:::i;:::-;;:::o;:::-;;;;;;;-1:-1:-1;;;;;696:7014:6;;;;;;:::o;:::-;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;-1:-1:-1;;696:7014:6;;;;;-1:-1:-1;;;;;696:7014:6;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;696:7014:6;;;;;;;;-1:-1:-1;696:7014:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;-1:-1:-1;696:7014:6;;-1:-1:-1;;;696:7014:6;;;;;;;;;;;;;;;;;-1:-1:-1;;;696:7014:6;;;;;;;128:212:8;235:87;696:7014:6;;;;;257:16:8;696:7014:6;;243:10:8;:30;235:87;:::i;:::-;-1:-1:-1;;;;;;;;;;;696:7014:6;;-1:-1:-1;;696:7014:6;;;;;128:212:8:o;:::-;235:87;696:7014:6;;;;;257:16:8;696:7014:6;;243:10:8;:30;235:87;:::i;:::-;-1:-1:-1;;;;;;;;;;;696:7014:6;;-1:-1:-1;;696:7014:6;;;128:212:8:o;696:7014:6:-;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;696:7014:6;;:::o;:::-;;;:::i;:::-;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;:::i;:::-;;;:::o;:::-;;;;:::o;:::-;-1:-1:-1;696:7014:6;;-1:-1:-1;;;696:7014:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;-1:-1:-1;696:7014:6;;-1:-1:-1;;;696:7014:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;:::i;:::-;;;:::o;:::-;;;;:::o;:::-;-1:-1:-1;696:7014:6;;-1:-1:-1;;;696:7014:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;:::o;:::-;;;:::i;:::-;;;:::o;:::-;;;;;;;;;-1:-1:-1;;696:7014:6;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;;696:7014:6;;:::o;:::-;;;;;;;;;;;;;;:::o;:::-;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;3001:19;696:7014;;;;;;:::o;:::-;;;:::i;:::-;;;;-1:-1:-1;;;;;696:7014:6;;;;;3079:16;696:7014;;;;;;:::o;:::-;-1:-1:-1;;;;;696:7014:6;;;;;;;;;;:::o;:::-;;-1:-1:-1;;;;;696:7014:6;;;;;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;696:7014:6;;;;;;:::o;:::-;;;;;;;;;:::o;:::-;;;;;;;;;-1:-1:-1;696:7014:6;;;;;;;;;;;;;;;;;;;-1:-1:-1;;696:7014:6;;;;:::o;:::-;-1:-1:-1;696:7014:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;696:7014:6;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;:::o;1726:1573::-;;;;1846:50;1880:15;1846:50;:::i;:::-;1935:10;;;;696:7014;1907:40;1935:12;696:7014;;;;;;;;1935:12;:::i;:::-;696:7014;;;;1907:40;696:7014;;;;1966:11;1958:56;1975:2;1966:11;;1958:56;:::i;:::-;2025:92;2033:18;:9;;:18;:::i;:::-;:23;2025:92;:::i;:::-;2148:21;2128:110;2033:9;;696:7014;2136:39;2128:110;:::i;:::-;2033:9;696:7014;2334:38;2326:112;2359:13;2334:38;;;2326:112;:::i;:::-;2846:35;2850:31;2660:65;2472:37;2479:29;;;;:::i;:::-;696:7014;;;;2472:37;696:7014;;2598:13;696:7014;;;;;;2055:1;;2598:17;;;;2660:65;:49;696:7014;2661:31;2612:1;2598:17;;;;;;;;;;2661:12;696:7014;;;;;;;;2661:12;:::i;:::-;:31;:::i;:::-;696:7014;;;;-1:-1:-1;;;;;;;;;;;696:7014:6;;;;;;;;;2660:49;;:::i;:::-;696:7014;;;;2660:65;;:::i;:::-;2811:33;;2883:3;2846:35;2850:31;;;;:::i;2846:35::-;696:7014;;;2846:35;;;;;;696:7014;2883:3;2850:31;696:7014;2962:91;696:7014;2962:38;3001:52;696:7014;2846:35;696:7014;;3001:38;696:7014;3001:38;;;:::i;:::-;696:7014;;;;;;;;;;;3001:52;:::i;:::-;2962:38;;:::i;:::-;:91;696:7014;;;;;;;;;;;;;;;;;;;;;;;;;;;2962:91;2883:3;:::i;:::-;2811:33;;;;;;2846:35;;;;3216:73;2846:35;;;;3216:73;2846:35;;696:7014;;3079:66;2846:35;3156:42;;3142:2;696:7014;;3079:66;:28;3096:10;3079:28;:::i;:::-;-1:-1:-1;;;;;696:7014:6;;;;;;;-1:-1:-1;;;;;696:7014:6;;;;3079:66;:::i;:::-;-1:-1:-1;;;;;696:7014:6;-1:-1:-1;;;;;696:7014:6;;;;;;;;3079:66;-1:-1:-1;;;;;;;;;;;696:7014:6;3156:42;:::i;:::-;-1:-1:-1;;;;;;;;;;;696:7014:6;;3156:42;696:7014;;;;;;;;;;;;;;;;;;;;3216:73;;:::i;:::-;;;;1726:1573::o;2598:17::-;2660:49;696:7014;2661:31;2660:65;2598:17;;;;;;;;;;;;715:4:5;512:8;715:4;;;;;-1:-1:-1;;715:4:5;;:::o;:::-;;;:::i;:::-;;;;568:8;715:4;;;;;-1:-1:-1;;715:4:5;;:::o;:::-;;;:::i;:::-;;;;696:7014:6;715:4:5;;;;;-1:-1:-1;;715:4:5;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;:::o;568:8::-;;;;;;;;;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;512;568;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;464:5;568:8;;:::o;:::-;;;:::i;:::-;;;512;696:7014:6;512:8:5;;696:7014:6;;512:8:5;;;;;;:::o;2164:987::-;;696:7014:6;;;;;;;;;-1:-1:-1;;;;;696:7014:6;;;;;2164:987:5;696:7014:6;;-1:-1:-1;696:7014:6;;;;;;-1:-1:-1;696:7014:6;;2227:19:5;2267:28;2394;2404:18;;;:::i;:::-;696:7014:6;;;;;2394:28:5;2591:70;2447:55;:24;;696:7014:6;;;;;;;2447:24:5;;:::i;:::-;:55;:::i;:::-;2614:47;2633:27;2546:26;;;:::i;:::-;696:7014:6;2633:27:5;:21;696:7014:6;;;;;;;;2633:21:5;:::i;:27::-;;:::i;:::-;2614:47;:::i;:::-;2591:70;;:::i;:::-;2751:5;2755:1;2746:392;2758:7;2763:2;696:7014:6;;;2758:7:5;;;;2746:392;2164:987;;;;;:::o;2767:3::-;2816:43;;2833:26;696:7014:6;;;;;;;;2833:26:5;;:::i;2816:43::-;;:::i;:::-;2890:36;;;;;;:::i;:::-;:48;2886:169;;2767:3;3081:37;;;;:::i;:::-;2767:3;;:::i;:::-;2751:5;;;2886:169;-1:-1:-1;;696:7014:6;;;;464:5:5;;-1:-1:-1;2975:12:5;;-1:-1:-1;464:5:5;2975:12;3022:5;;;;;;;696:7014:6;;;:::i;:::-;;;1993:163:5;2110:34;1993:163;2083:1;715:4;;;;1993:163;696:7014:6;;715:4:5;696:7014:6;;;;2141:3:5;2128;696:7014:6;;715:4:5;;;;;;1993:163;696:7014:6;715:4:5;;2110:34;:::i;715:4::-;;;:::i;:::-;;;;;;:::i;:::-;;;3159:993;512:8;696:7014:6;;;3620:76:5;696:7014:6;;;;;;;3159:993:5;696:7014:6;;;;;;3470:21:5;3643:53;3470:21;;;:::i;:::-;696:7014:6;715:4:5;;;;;;3159:993;-1:-1:-1;;715:4:5;;3566:35;715:4;3566:35;:::i;:::-;3662:18;;;;:::i;:::-;696:7014:6;715:4:5;;;;;3159:993;715:4;;;;;3643:53;:::i;3620:76::-;3724:31;;;;;4129:11;;;3159:993;:::o;3717:394::-;4082:9;3806:8;3788:28;3806:8;;;:::i;:::-;3788:28;:::i;:::-;3806:8;;;3853:43;;;:::i;:::-;3784:272;4082:9;:::i;:::-;3717:394;;;3784:272;3990:38;;;:::i;715:4::-;;;:::i;:::-;;;;;;:::i;:::-;;;696:7014:6;;;:::i;:::-;;;1588:393:5;696:7014:6;;;1667:78:5;;696:7014:6;;;;;;;;;1763:79:5;;696:7014:6;;;;1860:80:5;;1965:4;1588:393;:::o;1860:80::-;1683:1;1908:12;:::o;1763:79::-;1811:11;;1818:4;1811:11;:::o;1667:78::-;1713:12;1683:1;1713:12;:::o;4307:584::-;696:7014:6;;4417:1:5;4408:10;;:24;;;;4307:584;4408:38;;;;4307:584;4408:52;;;;4307:584;4408:66;;;;4307:584;4408:81;;;;4307:584;4408:96;;;;4307:584;4404:476;;;4533:9;;4540:2;4533:9;:::o;4404:476::-;4598:1;4589:10;;:24;;;;;4404:476;4589:38;;;;4404:476;4589:53;;;;4404:476;-1:-1:-1;4585:295:5;;;4671:9;4678:2;4671:9;:::o;4585:295::-;4727:16;;;:::i;:::-;;;;4779:2;4772:9;:::o;4723:157::-;4858:2;4851:9;:::o;4589:53::-;4640:2;4631:11;;;4589:53;;;:38;4626:1;4617:10;;;-1:-1:-1;4589:38:5;;:24;4612:1;4603:10;;;-1:-1:-1;4589:24:5;;4408:96;4493:11;4502:2;4493:11;;4408:96;;:81;4478:11;4487:2;4478:11;;4408:81;;:66;4464:10;4473:1;4464:10;;4408:66;;:52;4450:10;4459:1;4450:10;;4408:52;;:38;4436:10;4445:1;4436:10;;4408:38;;:24;4422:10;4431:1;4422:10;;4408:24;;696:7014:6;;;4186:27;696:7014;;;;;;:::o;:::-;;;;;4249:19;696:7014;;;;;;:::o;:::-;;;;;;;;;-1:-1:-1;696:7014:6;;-1:-1:-1;696:7014:6;;;-1:-1:-1;696:7014:6;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;:::i;:::-;;;;;;-1:-1:-1;;696:7014:6;;;;-1:-1:-1;;696:7014:6;;:::o;:::-;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;696:7014:6;;;;;;;;;;;;;;;;;;;;;;:::o;3307:1358::-;4596:61;3307:1358;;4596:61;3307:1358;3446:50;3480:15;3446:50;:::i;:::-;3535:10;696:7014;;3535:10;;;3507:40;3535:12;696:7014;;;;;;;3507:40;-1:-1:-1;;;3662:65:6;;;:120;;3659:847;;3307:1358;4533:10;4516:33;:28;4533:10;4516:28;:::i;:::-;:33;696:7014;;;-1:-1:-1;;;;;696:7014:6;;;;4516:33;:::i;:::-;4560:18;;-1:-1:-1;;;;;;;;;;;696:7014:6;4560:18;:::i;696:7014::-;;;;4533:10;;;;4596:61;;;:::i;3659:847::-;3899:51;696:7014;;3847:13;696:7014;;;;;;-1:-1:-1;;3847:17:6;;;;3899:51;:35;696:7014;3861:1;3847:17;696:7014;;3899:14;696:7014;;;;;;;3899:51;3989:40;696:7014;;;;;;;-1:-1:-1;;;;;696:7014:6;3989:40;:::i;:::-;4062;;4061:41;4062:40;;;696:7014;;4062:25;696:7014;;;;;;;4062:40;696:7014;;;;;4062:40;4061:41;;696:7014;4061:41;4058:253;;3847:17;-1:-1:-1;;4327:168:6;;;;4352:42;:44;:42;;:::i;:::-;:44;696:7014;;;;;;;;4352:44;:::i;:::-;696:7014;;;;;;;;;;;;4352:44;3659:847;;;4327:168;4435:42;:44;:42;;:::i;:::-;:44;696:7014;;;;;;;;4435:44;:::i;:::-;4327:168;;4058:253;4249:31;:46;4122:40;:45;:40;;696:7014;;4062:25;696:7014;;;;;;;4122:40;696:7014;;-1:-1:-1;;696:7014:6;3546:1;696:7014;;;;4122:45;4186:44;:42;;;:::i;:::-;696:7014;;-1:-1:-1;;696:7014:6;;;;4186:44;4249:31;:::i;:::-;:46;:::i;:::-;4058:253;;;;3847:17;3899:35;696:7014;3899:51;3847:17;;;696:7014;;;;:::o;:::-;-1:-1:-1;696:7014:6;;-1:-1:-1;;;696:7014:6;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;696:7014:6;;;;;;;;;;;:::o;:::-;-1:-1:-1;696:7014:6;;-1:-1:-1;;;696:7014:6;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;696:7014:6;;;;;;;;;;;:::o;:::-;-1:-1:-1;696:7014:6;;-1:-1:-1;;;696:7014:6;;;;;;;;;;;;;;;;;-1:-1:-1;;;696:7014:6;;;;;;;;;;;:::o;:::-;-1:-1:-1;696:7014:6;;-1:-1:-1;;;696:7014:6;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;-1:-1:-1;696:7014:6;;-1:-1:-1;;;696:7014:6;;;;;;;;;;;;;;;;;-1:-1:-1;;;696:7014:6;;;;;;;;;;-1:-1:-1;;696:7014:6;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;-1:-1:-1;;;;;696:7014:6;;;;;;;;;;;:::o;:::-;;;:::i;:::-;;;;:::o;:::-;;;;:::o;:::-;-1:-1:-1;696:7014:6;;-1:-1:-1;;;696:7014:6;;;;;;;;;;;;;;;;;-1:-1:-1;;;696:7014:6;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;4673:2483;;;4911:54;4930:35;4799:50;4833:15;4799:50;:::i;:::-;4930:14;696:7014;4860:40;4888:12;696:7014;4888:10;;;696:7014;;;;;4911:54;5056:9;5032:44;5056:20;:17;:9;;;;:::i;:17::-;:20;:::i;5032:44::-;696:7014;;;;;5376:94;5413:2;696:7014;5384:26;696:7014;;;;;5138:104;696:7014;;;;;-1:-1:-1;5138:104:6;:::i;:::-;5253:112;5261:33;696:7014;-1:-1:-1;;;;;;;;;;;696:7014:6;;;;;;;;5261:33;;;;;5253:112;:::i;5384:26::-;696:7014;5384:31;5376:94;:::i;:::-;5512:52;5529:10;;696:7014;;5512:52;:::i;:::-;5593:51;5585:94;5593:51;;;696:7014;;5593:29;696:7014;;;;;;;5593:51;696:7014;5585:94;:::i;:::-;-1:-1:-1;5698:49:6;5690:105;5698:49;;;;;:::i;:::-;696:7014;;;;;5698:49;696:7014;;5698:51;5690:105;:::i;:::-;5816:18;5850:8;;5906:3;5862:35;;;:::i;:::-;696:7014;5860:44;;;;;5949:81;5967:35;5950:63;:57;5959:47;696:7014;5967:38;:35;;;;;:::i;:::-;:38;:::i;:::-;696:7014;;;;;;;;-1:-1:-1;;;;;696:7014:6;;;;-1:-1:-1;;;;;696:7014:6;;;5950:57;696:7014;;;;5950:63;5949:81;:::i;:::-;6048:43;:45;:43;;;;:::i;:::-;696:7014;;;;6048:45;;6045:155;;5906:3;;;;;:::i;:::-;5850:8;;6045:155;5906:3;6140:43;;6123:61;6133:51;6140:43;;6123:61;6140:43;;:::i;6123:61::-;;;:::i;:::-;6045:155;;;;5860:44;;;;;;;;;;;;;;;;6291:32;5860:44;;6291:32;;:::i;:::-;696:7014;;;;;;;;6376:50;696:7014;6376:50;:::i;:::-;696:7014;;;;;;;;;;6437:49;;;:::i;:::-;696:7014;;;;;6376:111;;;:::i;:::-;696:7014;;6375:126;;;;:::i;:::-;696:7014;;6531:50;;;;:::i;:::-;696:7014;;;;;;;;;;;;;;;;;6531:65;;6523:124;;;:::i;:::-;6658:50;;;:::i;:::-;696:7014;;;;;;;;;;;6658:65;;;;:::i;:::-;696:7014;;;;;;;;;;;;;;;;;;;;;;;;;;;6734:51;;696:7014;;5593:29;696:7014;;;;;;;6734:51;696:7014;;-1:-1:-1;;696:7014:6;3546:1;696:7014;;;6813:33;;;:::i;:::-;6801:46;696:7014;;;6801:46;;;;7052:96;6801:46;7052:96;6801:46;;6986:33;6801:46;6917:33;6801:46;6917:33;6801:46;6966:70;6801:46;;;5845:380;-1:-1:-1;;;;;696:7014:6;;;6801:46;;;;5845:380;696:7014;;;;6858:48;:28;5529:10;6858:28;:::i;:::-;:48;696:7014;;;;-1:-1:-1;;;;;696:7014:6;;;6917:33;6986;:::i;:::-;696:7014;;;;;;;;;;-1:-1:-1;;;;;696:7014:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;6966:70;696:7014;;7052:96;;;;696:7014;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6801:46;;;:::i;:::-;;;;;;;;696:7014;;;;;;-1:-1:-1;7366:19:6;696:7014;;;;;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7164:232;696:7014;;;;;;;;-1:-1:-1;;;;;696:7014:6;;;;;7164:232;696:7014;;-1:-1:-1;696:7014:6;;-1:-1:-1;696:7014:6;;;;;;;;;;;:::i;:::-;;;;;;;;7304:82;696:7014;;-1:-1:-1;;;;;;;;;;;696:7014:6;;;;;;;;;;;;;;;7164:232;7304:82;696:7014;;;:::i;:::-;;;7304:82;696:7014;;;;;;7304:82;696:7014;;7304:82;;696:7014;;;;;;7304:82;696:7014;;:::i;:::-;;7304:82;;696:7014;7164:232;:::o;696:7014::-;;;:::i;:::-;;;;;;:::i;:::-;;"},"gasEstimates":{"creation":{"codeDepositCost":"1520400","executionCost":"1599","totalCost":"1521999"},"external":{"donate(uint16,string)":"infinite","donationBuckets()":"infinite","myFame()":"2588","setDonatingActive()":"26655","setDonatingInactive()":"26737","totalFame()":"2328","transfer(address,uint16,uint16)":"infinite","vote(string,bool,address,string)":"infinite"}},"methodIdentifiers":{"donate(uint16,string)":"4f9b09af","donationBuckets()":"db75953b","myFame()":"bc956abb","setDonatingActive()":"5f592bb5","setDonatingInactive()":"c3269df9","totalFame()":"27e665f7","transfer(address,uint16,uint16)":"672296dc","vote(string,bool,address,string)":"6e283c38"}},"metadata":"{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"donatedFinney\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"months\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"currentMonth\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"currentYear\",\"type\":\"uint16\"}],\"name\":\"Donated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"shareFinney\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"transferDateId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"transferFromDonationBucketPos\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"month\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"year\",\"type\":\"uint16\"}],\"name\":\"RemovedFromDonationBucket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"month\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"year\",\"type\":\"uint16\"}],\"name\":\"TransferedFairShare\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"up\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"month\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"year\",\"type\":\"uint16\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"months\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"donate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"donationBuckets\",\"outputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"startMonth\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"startYear\",\"type\":\"uint16\"},{\"internalType\":\"uint32[48]\",\"name\":\"donationBuckets\",\"type\":\"uint32[48]\"}],\"internalType\":\"struct SusuwatariFacet.DonationBuckets\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"myFame\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setDonatingActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setDonatingInactive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFame\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"month\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"year\",\"type\":\"uint16\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"up\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension, but not including the Enumerable extension, which is available separately as {ERC721Enumerable}.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SusuwatariFacet.sol\":\"SusuwatariFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/LibSusuwatari.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.10;\\r\\n\\r\\n\\r\\nimport {SusuwatariStorage,StorageHandler} from \\\"./SusuwatariStorage.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport \\\"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\\\";\\r\\n\\r\\n\\r\\nlibrary LibSusuwatari{\\r\\n    using Strings for uint256;\\r\\n\\r\\n    struct _DateTime {\\r\\n                uint16 year;\\r\\n                uint8 month;\\r\\n        }\\r\\n\\r\\nuint constant DAY_IN_SECONDS = 86400;\\r\\n        uint constant YEAR_IN_SECONDS = 31536000;\\r\\n        uint constant LEAP_YEAR_IN_SECONDS = 31622400;\\r\\n\\r\\n        uint constant HOUR_IN_SECONDS = 3600;\\r\\n        uint constant MINUTE_IN_SECONDS = 60;\\r\\n\\r\\n        uint16 constant ORIGIN_YEAR = 1970;\\r\\n    // A simple absolute value function for int16\\r\\n    function abs(int64 x) internal pure returns (uint64) {\\r\\n        if (x < 0) {\\r\\n            return uint64(-x);\\r\\n        }\\r\\n        return uint64(x);\\r\\n    }\\r\\n\\r\\n    function toAsciiString(address x) internal pure returns (string memory) {\\r\\n        bytes memory s = new bytes(40);\\r\\n        for (uint i = 0; i < 20; i++) {\\r\\n            bytes1 b = bytes1(uint8(uint(uint160(x)) / (2**(8*(19 - i)))));\\r\\n            bytes1 hi = bytes1(uint8(b) / 16);\\r\\n            bytes1 lo = bytes1(uint8(b) - 16 * uint8(hi));\\r\\n            s[2*i] = char(hi);\\r\\n            s[2*i+1] = char(lo);            \\r\\n        }\\r\\n        return string(s);\\r\\n    }\\r\\n\\r\\n    function char(bytes1 b) internal pure returns (bytes1 c) {\\r\\n        if (uint8(b) < 10) return bytes1(uint8(b) + 0x30);\\r\\n        else return bytes1(uint8(b) + 0x57);\\r\\n    }\\r\\n\\r\\n    function isLeapYear(uint16 year) public pure returns (bool) {\\r\\n                if (year % 4 != 0) {\\r\\n                        return false;\\r\\n                }\\r\\n                if (year % 100 != 0) {\\r\\n                        return true;\\r\\n                }\\r\\n                if (year % 400 != 0) {\\r\\n                        return false;\\r\\n                }\\r\\n                return true;\\r\\n        }\\r\\n\\r\\n        function leapYearsBefore(uint year) public pure returns (uint) {\\r\\n                year -= 1;\\r\\n                return year / 4 - year / 100 + year / 400;\\r\\n        }\\r\\n\\r\\n    function parseTimestamp(uint timestamp) internal pure returns (_DateTime memory dt) {\\r\\n                uint secondsAccountedFor = 0;\\r\\n                uint buf;\\r\\n                uint8 i;\\r\\n\\r\\n                // Year\\r\\n                dt.year = getYear(timestamp);\\r\\n                buf = leapYearsBefore(dt.year) - leapYearsBefore(ORIGIN_YEAR);\\r\\n\\r\\n                secondsAccountedFor += LEAP_YEAR_IN_SECONDS * buf;\\r\\n                secondsAccountedFor += YEAR_IN_SECONDS * (dt.year - ORIGIN_YEAR - buf);\\r\\n\\r\\n                // Month\\r\\n                uint secondsInMonth;\\r\\n                for (i = 1; i <= 12; i++) {\\r\\n                        secondsInMonth = DAY_IN_SECONDS * getDaysInMonth(i, dt.year);\\r\\n                        if (secondsInMonth + secondsAccountedFor > timestamp) {\\r\\n                                dt.month = i;\\r\\n                                break;\\r\\n                        }\\r\\n                        secondsAccountedFor += secondsInMonth;\\r\\n                }\\r\\n\\r\\n        }\\r\\n\\r\\n    function getYear(uint timestamp) public pure returns (uint16) {\\r\\n                uint secondsAccountedFor = 0;\\r\\n                uint16 year;\\r\\n                uint numLeapYears;\\r\\n\\r\\n                // Year\\r\\n                year = uint16(ORIGIN_YEAR + timestamp / YEAR_IN_SECONDS);\\r\\n                numLeapYears = leapYearsBefore(year) - leapYearsBefore(ORIGIN_YEAR);\\r\\n\\r\\n                secondsAccountedFor += LEAP_YEAR_IN_SECONDS * numLeapYears;\\r\\n                secondsAccountedFor += YEAR_IN_SECONDS * (year - ORIGIN_YEAR - numLeapYears);\\r\\n\\r\\n                while (secondsAccountedFor > timestamp) {\\r\\n                        if (isLeapYear(uint16(year - 1))) {\\r\\n                                secondsAccountedFor -= LEAP_YEAR_IN_SECONDS;\\r\\n                        }\\r\\n                        else {\\r\\n                                secondsAccountedFor -= YEAR_IN_SECONDS;\\r\\n                        }\\r\\n                        year -= 1;\\r\\n                }\\r\\n                return year;\\r\\n        }\\r\\n\\r\\n        function getMonth(uint timestamp) public pure returns (uint8) {\\r\\n                return parseTimestamp(timestamp).month;\\r\\n        }\\r\\n\\r\\n        function getDaysInMonth(uint8 month, uint16 year) public pure returns (uint8) {\\r\\n                if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\\r\\n                        return 31;\\r\\n                }\\r\\n                else if (month == 4 || month == 6 || month == 9 || month == 11) {\\r\\n                        return 30;\\r\\n                }\\r\\n                else if (isLeapYear(year)) {\\r\\n                        return 29;\\r\\n                }\\r\\n                else {\\r\\n                        return 28;\\r\\n                }\\r\\n        }\\r\\n}\",\"keccak256\":\"0xe5c469df7073b8ed3d1b3f0776aa1a4bb1cfa43918d2522f2d04b510c92a80b4\",\"license\":\"MIT\"},\"contracts/SusuwatariFacet.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.10;\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\n//import \\\"hardhat/console.sol\\\";\\r\\n\\r\\n\\r\\nimport {SusuwatariStorage,StorageHandler} from \\\"./SusuwatariStorage.sol\\\";\\r\\nimport {LibSusuwatari} from \\\"./LibSusuwatari.sol\\\";\\r\\nimport {UsingDiamondOwner} from \\\"hardhat-deploy/solc_0.8/diamond/UsingDiamondOwner.sol\\\";\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\r\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\r\\n * {ERC721Enumerable}.\\r\\n */\\r\\ncontract SusuwatariFacet is StorageHandler, UsingDiamondOwner {\\r\\n    using Address for address;\\r\\n    using Strings for uint256;\\r\\n\\r\\n    \\r\\n    event Voted(string url,bool up,string title,address receiver,address sender,uint8 month, uint16 year);\\r\\n    event Donated(uint64 donatedFinney, string name ,uint16 months,uint16 currentMonth,uint16 currentYear);\\r\\n    event TransferedFairShare(uint256 amount,address to,uint16 month,uint16 year);\\r\\n    event RemovedFromDonationBucket(uint32 shareFinney,uint32 transferDateId,uint16 transferFromDonationBucketPos, uint16 month, uint16 year);\\r\\n\\r\\n    struct DonationBuckets{\\r\\n        uint16 startMonth;\\r\\n        uint16 startYear;\\r\\n        uint32[48] donationBuckets;\\r\\n    }\\r\\n\\r\\n\\r\\n    function setDonatingActive() public onlyOwner {\\r\\n        SusuwatariStorage storage pp = susu();\\r\\n        susu._isDonatingActive = true;\\r\\n    }\\r\\n\\r\\n    function setDonatingInactive() public onlyOwner {\\r\\n        SusuwatariStorage storage pp = susu();\\r\\n        susu._isDonatingActive = false;\\r\\n    }\\r\\n\\r\\n    function donate(uint16 months, string memory name) public payable {\\r\\n        LibSusuwatari._DateTime memory date = LibSusuwatari.parseTimestamp(block.timestamp);\\r\\n        uint16 currentMonth0Based = date.month-1;\\r\\n        require(months < 25, \\\"Only upto 24 months is supported\\\");\\r\\n        require(msg.value % months == 0, \\\"Payed amount must be devidable by the distributed months\\\");\\r\\n        require(msg.value % 1_000_000_000_000_000  == 0, \\\"Less than 1 finney(1/1000 ETH) fractions are not supported\\\");\\r\\n\\r\\n        uint256 donatedValueInFinney = msg.value / 1_000_000_000_000_000;\\r\\n        require(donatedValueInFinney  <= 1_000_000_000 , \\\"Donations larger than 1_000_000_000 finney are not supported\\\");\\r\\n        uint32 perMonthValue = uint32(donatedValueInFinney / months);\\r\\n\\r\\n        SusuwatariStorage storage pp = susu();\\r\\n\\r\\n        uint32 testSubMonths = susu._isTesting?5:0;\\r\\n\\r\\n        uint32 donationRelativeDateId = (date.year*12+currentMonth0Based)-susu._startDateId - testSubMonths;\\r\\n\\r\\n        //require(false,Strings.toString(donationRelativeDateId));\\r\\n        for (uint32 i = donationRelativeDateId; i < donationRelativeDateId + months; i++) {\\r\\n         \\r\\n            uint32 donationBucketPos = i % 48;\\r\\n            susu._donationBuckets[donationBucketPos]=susu._donationBuckets[donationBucketPos]+perMonthValue;\\r\\n\\r\\n        }\\r\\n\\r\\n        susu._fameHoldings[msg.sender] += uint64( donatedValueInFinney / 10);\\r\\n        susu._totalFame += donatedValueInFinney / 10;\\r\\n\\r\\n        emit Donated(uint64(donatedValueInFinney),name, months, date.month, date.year);\\r\\n\\r\\n    }\\r\\n\\r\\n    function vote(string memory url, bool up,address receiver,string memory title) public{\\r\\n        LibSusuwatari._DateTime memory date = LibSusuwatari.parseTimestamp(block.timestamp);\\r\\n        uint16 currentMonth0Based = date.month-1;\\r\\n        uint160 uintAddress = uint160(receiver);\\r\\n        SusuwatariStorage storage pp = susu();\\r\\n        if(uintAddress & uint160(0x1111000000000000000000000000000000000000) != uint160(0x1111000000000000000000000000000000000000))\\r\\n        {\\r\\n            \\r\\n\\r\\n            uint32 testSubMonths = susu._isTesting?5:0;\\r\\n            uint32 voteDateId = date.year * 12 + currentMonth0Based - testSubMonths;\\r\\n            uint256 dateAddressId = (uint256(uintAddress) << 20) +voteDateId;\\r\\n            \\r\\n            if(!susu._dateAddressIdHasVotes[dateAddressId]){\\r\\n                susu._dateAddressIdHasVotes[dateAddressId]=true;\\r\\n                susu._dateAddressIdVoteValues[dateAddressId]=0;\\r\\n                susu._dateIdAddresses[voteDateId].push(receiver);\\r\\n            }\\r\\n\\r\\n            if(up){\\r\\n                susu._dateAddressIdVoteValues[dateAddressId]++;\\r\\n            }else{\\r\\n                susu._dateAddressIdVoteValues[dateAddressId]--;\\r\\n            }\\r\\n        }\\r\\n        susu._fameHoldings[msg.sender] += 1;\\r\\n        susu._totalFame += 1;\\r\\n\\r\\n        emit Voted(url, up,title,receiver,msg.sender,date.month,date.year);\\r\\n    }\\r\\n\\r\\n    function transfer(address payable to, uint16 month, uint16 year) public {\\r\\n        LibSusuwatari._DateTime memory date = LibSusuwatari.parseTimestamp(block.timestamp);\\r\\n        uint16 currentMonth0Based = date.month-1;\\r\\n        uint32 curDateId = date.year * 12 + currentMonth0Based;\\r\\n        //require(false,Strings.toString( curDateId));\\r\\n        uint32 transferDateId = year * 12 + month -1;\\r\\n        SusuwatariStorage storage pp = susu();\\r\\n        require(transferDateId < curDateId,\\\"Your can only transfer your share for month before the current one\\\");\\r\\n        require(transferDateId >= susu._startDateId,\\\"Your can only transfer your share for months after donation started\\\");\\r\\n        require(curDateId - transferDateId < 24,\\\"Your can't transfer shares more than 24 months ago.\\\");\\r\\n        uint256 monthSenderAddressId = (uint256(uint160(msg.sender)) << 20) +transferDateId;\\r\\n        \\r\\n        require(susu._monthAddressHasTransfered[monthSenderAddressId]==false,\\\"Share already transfered\\\");\\r\\n        require(susu._dateAddressIdVoteValues[monthSenderAddressId]>0,\\\"You have not enough upvotes to be eligible\\\");\\r\\n        \\r\\n        uint64 voteSum = 0;\\r\\n        for (uint i=0; i<susu._dateIdAddresses[transferDateId].length; i++) {\\r\\n            uint256 monthAddressId=(uint256( uint160(susu._dateIdAddresses[transferDateId][i])) << 20) +transferDateId;\\r\\n            if(susu._dateAddressIdVoteValues[monthAddressId]>0){\\r\\n                voteSum = voteSum + uint32(susu._dateAddressIdVoteValues[monthAddressId]);\\r\\n            }\\r\\n            \\r\\n        }\\r\\n        \\r\\n        uint16 transferFromDonationBucketPos = uint16(transferDateId - susu._startDateId) % 48;\\r\\n     \\r\\n        uint32 shareFinney =uint32( (susu._donationBuckets[transferFromDonationBucketPos] *  uint32(susu._dateAddressIdVoteValues[monthSenderAddressId])) / (voteSum ));\\r\\n        \\r\\n        require(susu._donationBuckets[transferFromDonationBucketPos] >= shareFinney,\\\"Not enough donations for that months available.\\\");\\r\\n        susu._donationBuckets[transferFromDonationBucketPos] -= shareFinney;\\r\\n        susu._monthAddressHasTransfered[monthSenderAddressId]=true;\\r\\n        to.transfer(shareFinney*1_000_000_000_000_000);\\r\\n        susu._fameHoldings[msg.sender] += shareFinney / 10;\\r\\n        susu._totalFame += shareFinney / 10;\\r\\n        emit TransferedFairShare(shareFinney*1_000_000_000_000_000, to,month, year);\\r\\n        emit RemovedFromDonationBucket(shareFinney,transferDateId,transferFromDonationBucketPos, month, year);\\r\\n    }\\r\\n\\r\\n    function donationBuckets() public view returns(DonationBuckets memory) {\\r\\n        SusuwatariStorage storage pp = susu();\\r\\n        return DonationBuckets(susu._startDateId % 12 + 1,susu._startDateId / 12,susu._donationBuckets);  \\r\\n    }\\r\\n\\r\\n    function totalFame() public view returns(uint256) {\\r\\n        SusuwatariStorage storage pp = susu();\\r\\n        return susu._totalFame;  \\r\\n    }\\r\\n\\r\\n    function myFame() public view returns(uint64) {\\r\\n        SusuwatariStorage storage pp = susu();\\r\\n        return susu._fameHoldings[msg.sender];  \\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x007107749d610b1e36d5d11b0f4b8fcb6a8b999a9ef74948ee9413392412e495\",\"license\":\"MIT\"},\"contracts/SusuwatariStorage.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nimport {LibDiamond} from \\\"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\\\";\\r\\n\\r\\nbytes32 constant SUSUWATARI_STORAGE_POSITION = keccak256(\\\"susuwatari.contract.storage\\\");\\r\\nbytes32 constant LEAFWALLET_STORAGE_POSITION = keccak256(\\\"leafwallet.contract.storage\\\");\\r\\n\\r\\nstruct OwnableStorage {\\r\\n\\r\\n    address _owner;\\r\\n}\\r\\n\\r\\nstruct SusuwatariStorage {\\r\\n    \\r\\n\\r\\n    bool isInitialized;\\r\\n    bool _isDonatingActive;\\r\\n    \\r\\n    uint16 _startDateId;\\r\\n\\r\\n    uint32[48] _donationBuckets ; \\r\\n    mapping(uint32 => address[]) _dateIdAddresses;\\r\\n    mapping(uint256 => int32) _dateAddressIdVoteValues;\\r\\n    mapping(uint256 => bool) _dateAddressIdHasVotes;\\r\\n    mapping(uint256 => bool) _monthAddressHasTransfered;\\r\\n\\r\\n    bool _isTesting;\\r\\n\\r\\n    mapping (address => uint64) _fameHoldings;\\r\\n    address[] _fameHolders;\\r\\n    uint256 _totalFame;\\r\\n}\\r\\n\\r\\ncontract StorageHandler {\\r\\n    function susu() internal pure returns (SusuwatariStorage storage cs) {\\r\\n        bytes32 position = SUSUWATARI_STORAGE_POSITION;\\r\\n        assembly {\\r\\n           cs.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function os() internal pure returns (OwnableStorage storage cs) {\\r\\n        bytes32 position = keccak256(\\\"ownable.contract.storage\\\");\\r\\n        assembly {\\r\\n           cs.slot := position\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function ds() internal pure returns (LibDiamond.DiamondStorage storage) {\\r\\n        return LibDiamond.diamondStorage();\\r\\n    }\\r\\n}\",\"keccak256\":\"0x1c1b64576006d7245f8b9ec09599b5e9213713b657b461fdbe71a4f0eed0f360\",\"license\":\"MIT\"},\"hardhat-deploy/solc_0.8/diamond/UsingDiamondOwner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./libraries/LibDiamond.sol\\\";\\n\\ncontract UsingDiamondOwner {\\n    modifier onlyOwner() {\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\n        require(msg.sender == ds.contractOwner, \\\"Only owner is allowed to perform this action\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x610145c6957708608f3d2c2626dbf3461f2886b0b304c2bdc0c332df981b82f8\",\"license\":\"MIT\"},\"hardhat-deploy/solc_0.8/diamond/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0xc00c16bfa30a3fa5f3dc684f7f8ba62c259962b25f647d9588739458989717fc\",\"license\":\"MIT\"},\"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);            \\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress != _facetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(_facetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n        enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }    \\n\\n\\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n        // an immutable function is a function defined directly in a diamond\\n        require(_facetAddress != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\");\\n        } else {\\n            require(_calldata.length > 0, \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\");\\n            if (_init != address(this)) {\\n                enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x2205345e83eb86f5281f159a9215a096cb6d404782619f9b8e9d7a4a46c32a37\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/SusuwatariStorage.sol":{"StorageHandler":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234601357604d9081601a8239f35b50600080fdfe6080604052600080fdfea3646970667358221220786c2aac54b7fe4b086b4bd510f0193da8642f49e87b67bd96743aa4d8fe1c126c6578706572696d656e74616cf564736f6c634300080a0041","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x13 JUMPI PUSH1 0x4D SWAP1 DUP2 PUSH1 0x1A DUP3 CODECOPY RETURN JUMPDEST POP PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG3 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH25 0x6C2AAC54B7FE4B086B4BD510F0193DA8642F49E87B67BD9674 GASPRICE LOG4 0xD8 INVALID SHR SLT PUSH13 0x6578706572696D656E74616CF5 PUSH5 0x736F6C6343 STOP ADDMOD EXP STOP COINBASE ","sourceMap":"914:586:7:-:0;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"6080604052600080fdfea3646970667358221220786c2aac54b7fe4b086b4bd510f0193da8642f49e87b67bd96743aa4d8fe1c126c6578706572696d656e74616cf564736f6c634300080a0041","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG3 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH25 0x6C2AAC54B7FE4B086B4BD510F0193DA8642F49E87B67BD9674 GASPRICE LOG4 0xD8 INVALID SHR SLT PUSH13 0x6578706572696D656E74616CF5 PUSH5 0x736F6C6343 STOP ADDMOD EXP STOP COINBASE ","sourceMap":"914:586:7:-:0;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"15400","executionCost":"75","totalCost":"15475"},"internal":{"ds()":"infinite","os()":"infinite","susu()":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SusuwatariStorage.sol\":\"StorageHandler\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/SusuwatariStorage.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nimport {LibDiamond} from \\\"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\\\";\\r\\n\\r\\nbytes32 constant SUSUWATARI_STORAGE_POSITION = keccak256(\\\"susuwatari.contract.storage\\\");\\r\\nbytes32 constant LEAFWALLET_STORAGE_POSITION = keccak256(\\\"leafwallet.contract.storage\\\");\\r\\n\\r\\nstruct OwnableStorage {\\r\\n\\r\\n    address _owner;\\r\\n}\\r\\n\\r\\nstruct SusuwatariStorage {\\r\\n    \\r\\n\\r\\n    bool isInitialized;\\r\\n    bool _isDonatingActive;\\r\\n    \\r\\n    uint16 _startDateId;\\r\\n\\r\\n    uint32[48] _donationBuckets ; \\r\\n    mapping(uint32 => address[]) _dateIdAddresses;\\r\\n    mapping(uint256 => int32) _dateAddressIdVoteValues;\\r\\n    mapping(uint256 => bool) _dateAddressIdHasVotes;\\r\\n    mapping(uint256 => bool) _monthAddressHasTransfered;\\r\\n\\r\\n    bool _isTesting;\\r\\n\\r\\n    mapping (address => uint64) _fameHoldings;\\r\\n    address[] _fameHolders;\\r\\n    uint256 _totalFame;\\r\\n}\\r\\n\\r\\ncontract StorageHandler {\\r\\n    function susu() internal pure returns (SusuwatariStorage storage cs) {\\r\\n        bytes32 position = SUSUWATARI_STORAGE_POSITION;\\r\\n        assembly {\\r\\n           cs.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function os() internal pure returns (OwnableStorage storage cs) {\\r\\n        bytes32 position = keccak256(\\\"ownable.contract.storage\\\");\\r\\n        assembly {\\r\\n           cs.slot := position\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function ds() internal pure returns (LibDiamond.DiamondStorage storage) {\\r\\n        return LibDiamond.diamondStorage();\\r\\n    }\\r\\n}\",\"keccak256\":\"0x1c1b64576006d7245f8b9ec09599b5e9213713b657b461fdbe71a4f0eed0f360\",\"license\":\"MIT\"},\"hardhat-deploy/solc_0.8/diamond/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0xc00c16bfa30a3fa5f3dc684f7f8ba62c259962b25f647d9588739458989717fc\",\"license\":\"MIT\"},\"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);            \\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress != _facetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(_facetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n        enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }    \\n\\n\\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n        // an immutable function is a function defined directly in a diamond\\n        require(_facetAddress != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\");\\n        } else {\\n            require(_calldata.length > 0, \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\");\\n            if (_init != address(this)) {\\n                enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x2205345e83eb86f5281f159a9215a096cb6d404782619f9b8e9d7a4a46c32a37\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"hardhat-deploy/solc_0.8/diamond/UsingDiamondOwner.sol":{"UsingDiamondOwner":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234601357604d9081601a8239f35b50600080fdfe6080604052600080fdfea36469706673582212204eb5e1cc24c0d0413c85d0577f7b73d84e05dac9b320dd2b404c8f7e02ce79426c6578706572696d656e74616cf564736f6c634300080a0041","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x13 JUMPI PUSH1 0x4D SWAP1 DUP2 PUSH1 0x1A DUP3 CODECOPY RETURN JUMPDEST POP PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG3 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4E 0xB5 0xE1 0xCC 0x24 0xC0 0xD0 COINBASE EXTCODECOPY DUP6 0xD0 JUMPI PUSH32 0x7B73D84E05DAC9B320DD2B404C8F7E02CE79426C6578706572696D656E74616C CREATE2 PUSH5 0x736F6C6343 STOP ADDMOD EXP STOP COINBASE ","sourceMap":"95:247:8:-:0;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"6080604052600080fdfea36469706673582212204eb5e1cc24c0d0413c85d0577f7b73d84e05dac9b320dd2b404c8f7e02ce79426c6578706572696d656e74616cf564736f6c634300080a0041","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG3 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4E 0xB5 0xE1 0xCC 0x24 0xC0 0xD0 COINBASE EXTCODECOPY DUP6 0xD0 JUMPI PUSH32 0x7B73D84E05DAC9B320DD2B404C8F7E02CE79426C6578706572696D656E74616C CREATE2 PUSH5 0x736F6C6343 STOP ADDMOD EXP STOP COINBASE ","sourceMap":"95:247:8:-:0;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"15400","executionCost":"75","totalCost":"15475"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"hardhat-deploy/solc_0.8/diamond/UsingDiamondOwner.sol\":\"UsingDiamondOwner\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"hardhat-deploy/solc_0.8/diamond/UsingDiamondOwner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./libraries/LibDiamond.sol\\\";\\n\\ncontract UsingDiamondOwner {\\n    modifier onlyOwner() {\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\n        require(msg.sender == ds.contractOwner, \\\"Only owner is allowed to perform this action\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x610145c6957708608f3d2c2626dbf3461f2886b0b304c2bdc0c332df981b82f8\",\"license\":\"MIT\"},\"hardhat-deploy/solc_0.8/diamond/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0xc00c16bfa30a3fa5f3dc684f7f8ba62c259962b25f647d9588739458989717fc\",\"license\":\"MIT\"},\"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);            \\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress != _facetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(_facetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n        enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }    \\n\\n\\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n        // an immutable function is a function defined directly in a diamond\\n        require(_facetAddress != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\");\\n        } else {\\n            require(_calldata.length > 0, \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\");\\n            if (_init != address(this)) {\\n                enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x2205345e83eb86f5281f159a9215a096cb6d404782619f9b8e9d7a4a46c32a37\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"hardhat-deploy/solc_0.8/diamond/interfaces/IDiamondCut.sol":{"IDiamondCut":{"abi":[{"anonymous":false,"inputs":[{"components":[{"internalType":"address","name":"facetAddress","type":"address"},{"internalType":"enum IDiamondCut.FacetCutAction","name":"action","type":"uint8"},{"internalType":"bytes4[]","name":"functionSelectors","type":"bytes4[]"}],"indexed":false,"internalType":"struct IDiamondCut.FacetCut[]","name":"_diamondCut","type":"tuple[]"},{"indexed":false,"internalType":"address","name":"_init","type":"address"},{"indexed":false,"internalType":"bytes","name":"_calldata","type":"bytes"}],"name":"DiamondCut","type":"event"},{"inputs":[{"components":[{"internalType":"address","name":"facetAddress","type":"address"},{"internalType":"enum IDiamondCut.FacetCutAction","name":"action","type":"uint8"},{"internalType":"bytes4[]","name":"functionSelectors","type":"bytes4[]"}],"internalType":"struct IDiamondCut.FacetCut[]","name":"_diamondCut","type":"tuple[]"},{"internalType":"address","name":"_init","type":"address"},{"internalType":"bytes","name":"_calldata","type":"bytes"}],"name":"diamondCut","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"diamondCut((address,uint8,bytes4[])[],address,bytes)":{"params":{"_calldata":"A function call, including function selector and arguments                  _calldata is executed with delegatecall on _init","_diamondCut":"Contains the facet addresses and function selectors","_init":"The address of the contract or facet to execute _calldata"}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"diamondCut((address,uint8,bytes4[])[],address,bytes)":"1f931c1c"}},"metadata":"{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondCut.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"indexed\":false,\"internalType\":\"struct IDiamondCut.FacetCut[]\",\"name\":\"_diamondCut\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_init\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"DiamondCut\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondCut.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IDiamondCut.FacetCut[]\",\"name\":\"_diamondCut\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"_init\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"diamondCut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"diamondCut((address,uint8,bytes4[])[],address,bytes)\":{\"params\":{\"_calldata\":\"A function call, including function selector and arguments                  _calldata is executed with delegatecall on _init\",\"_diamondCut\":\"Contains the facet addresses and function selectors\",\"_init\":\"The address of the contract or facet to execute _calldata\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"diamondCut((address,uint8,bytes4[])[],address,bytes)\":{\"notice\":\"Add/replace/remove any number of functions and optionally execute         a function with delegatecall\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"hardhat-deploy/solc_0.8/diamond/interfaces/IDiamondCut.sol\":\"IDiamondCut\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"hardhat-deploy/solc_0.8/diamond/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0xc00c16bfa30a3fa5f3dc684f7f8ba62c259962b25f647d9588739458989717fc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"diamondCut((address,uint8,bytes4[])[],address,bytes)":{"notice":"Add/replace/remove any number of functions and optionally execute         a function with delegatecall"}},"version":1}}},"hardhat-deploy/solc_0.8/diamond/interfaces/IDiamondLoupe.sol":{"IDiamondLoupe":{"abi":[{"inputs":[{"internalType":"bytes4","name":"_functionSelector","type":"bytes4"}],"name":"facetAddress","outputs":[{"internalType":"address","name":"facetAddress_","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"facetAddresses","outputs":[{"internalType":"address[]","name":"facetAddresses_","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_facet","type":"address"}],"name":"facetFunctionSelectors","outputs":[{"internalType":"bytes4[]","name":"facetFunctionSelectors_","type":"bytes4[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"facets","outputs":[{"components":[{"internalType":"address","name":"facetAddress","type":"address"},{"internalType":"bytes4[]","name":"functionSelectors","type":"bytes4[]"}],"internalType":"struct IDiamondLoupe.Facet[]","name":"facets_","type":"tuple[]"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"facetAddress(bytes4)":{"details":"If facet is not found return address(0).","params":{"_functionSelector":"The function selector."},"returns":{"facetAddress_":"The facet address."}},"facetAddresses()":{"returns":{"facetAddresses_":"facetAddresses_"}},"facetFunctionSelectors(address)":{"params":{"_facet":"The facet address."},"returns":{"facetFunctionSelectors_":"facetFunctionSelectors_"}},"facets()":{"returns":{"facets_":"Facet"}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"facetAddress(bytes4)":"cdffacc6","facetAddresses()":"52ef6b2c","facetFunctionSelectors(address)":"adfca15e","facets()":"7a0ed627"}},"metadata":"{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_functionSelector\",\"type\":\"bytes4\"}],\"name\":\"facetAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"facetAddress_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"facetAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"facetAddresses_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_facet\",\"type\":\"address\"}],\"name\":\"facetFunctionSelectors\",\"outputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"facetFunctionSelectors_\",\"type\":\"bytes4[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"facets\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IDiamondLoupe.Facet[]\",\"name\":\"facets_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"facetAddress(bytes4)\":{\"details\":\"If facet is not found return address(0).\",\"params\":{\"_functionSelector\":\"The function selector.\"},\"returns\":{\"facetAddress_\":\"The facet address.\"}},\"facetAddresses()\":{\"returns\":{\"facetAddresses_\":\"facetAddresses_\"}},\"facetFunctionSelectors(address)\":{\"params\":{\"_facet\":\"The facet address.\"},\"returns\":{\"facetFunctionSelectors_\":\"facetFunctionSelectors_\"}},\"facets()\":{\"returns\":{\"facets_\":\"Facet\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"facetAddress(bytes4)\":{\"notice\":\"Gets the facet that supports the given selector.\"},\"facetAddresses()\":{\"notice\":\"Get all the facet addresses used by a diamond.\"},\"facetFunctionSelectors(address)\":{\"notice\":\"Gets all the function selectors supported by a specific facet.\"},\"facets()\":{\"notice\":\"Gets all facet addresses and their four byte function selectors.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"hardhat-deploy/solc_0.8/diamond/interfaces/IDiamondLoupe.sol\":\"IDiamondLoupe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"hardhat-deploy/solc_0.8/diamond/interfaces/IDiamondLoupe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\n// A loupe is a small magnifying glass used to look at diamonds.\\n// These functions look at diamonds\\ninterface IDiamondLoupe {\\n    /// These functions are expected to be called frequently\\n    /// by tools.\\n\\n    struct Facet {\\n        address facetAddress;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Gets all facet addresses and their four byte function selectors.\\n    /// @return facets_ Facet\\n    function facets() external view returns (Facet[] memory facets_);\\n\\n    /// @notice Gets all the function selectors supported by a specific facet.\\n    /// @param _facet The facet address.\\n    /// @return facetFunctionSelectors_\\n    function facetFunctionSelectors(address _facet) external view returns (bytes4[] memory facetFunctionSelectors_);\\n\\n    /// @notice Get all the facet addresses used by a diamond.\\n    /// @return facetAddresses_\\n    function facetAddresses() external view returns (address[] memory facetAddresses_);\\n\\n    /// @notice Gets the facet that supports the given selector.\\n    /// @dev If facet is not found return address(0).\\n    /// @param _functionSelector The function selector.\\n    /// @return facetAddress_ The facet address.\\n    function facetAddress(bytes4 _functionSelector) external view returns (address facetAddress_);\\n}\\n\",\"keccak256\":\"0x10884024af2c0f7deca0fac4ddf84e76da5dba35b6e02fabeac8ea54c1a5c6f7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"facetAddress(bytes4)":{"notice":"Gets the facet that supports the given selector."},"facetAddresses()":{"notice":"Get all the facet addresses used by a diamond."},"facetFunctionSelectors(address)":{"notice":"Gets all the function selectors supported by a specific facet."},"facets()":{"notice":"Gets all facet addresses and their four byte function selectors."}},"version":1}}},"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol":{"LibDiamond":{"abi":[{"anonymous":false,"inputs":[{"components":[{"internalType":"address","name":"facetAddress","type":"address"},{"internalType":"enum IDiamondCut.FacetCutAction","name":"action","type":"uint8"},{"internalType":"bytes4[]","name":"functionSelectors","type":"bytes4[]"}],"indexed":false,"internalType":"struct IDiamondCut.FacetCut[]","name":"_diamondCut","type":"tuple[]"},{"indexed":false,"internalType":"address","name":"_init","type":"address"},{"indexed":false,"internalType":"bytes","name":"_calldata","type":"bytes"}],"name":"DiamondCut","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234601757604d9081601e823930815050f35b50600080fdfe6080604052600080fdfea3646970667358221220805a8912a3eb00fe5239b194fbfb37d584359f7d4d466623f343a9543d58314e6c6578706572696d656e74616cf564736f6c634300080a0041","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x4D SWAP1 DUP2 PUSH1 0x1E DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST POP PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG3 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP1 GAS DUP10 SLT LOG3 0xEB STOP INVALID MSTORE CODECOPY 0xB1 SWAP5 0xFB 0xFB CALLDATACOPY 0xD5 DUP5 CALLDATALOAD SWAP16 PUSH30 0x4D466623F343A9543D58314E6C6578706572696D656E74616CF564736F6C PUSH4 0x4300080A STOP COINBASE ","sourceMap":"423:10258:11:-:0;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"6080604052600080fdfea3646970667358221220805a8912a3eb00fe5239b194fbfb37d584359f7d4d466623f343a9543d58314e6c6578706572696d656e74616cf564736f6c634300080a0041","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG3 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP1 GAS DUP10 SLT LOG3 0xEB STOP INVALID MSTORE CODECOPY 0xB1 SWAP5 0xFB 0xFB CALLDATACOPY 0xD5 DUP5 CALLDATALOAD SWAP16 PUSH30 0x4D466623F343A9543D58314E6C6578706572696D656E74616CF564736F6C PUSH4 0x4300080A STOP COINBASE ","sourceMap":"423:10258:11:-:0;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"15400","executionCost":"infinite","totalCost":"infinite"},"internal":{"addFacet(struct LibDiamond.DiamondStorage storage pointer,address)":"infinite","addFunction(struct LibDiamond.DiamondStorage storage pointer,bytes4,uint96,address)":"infinite","addFunctions(address,bytes4[] memory)":"infinite","contractOwner()":"infinite","diamondCut(struct IDiamondCut.FacetCut memory[] memory,address,bytes memory)":"infinite","diamondStorage()":"infinite","enforceHasContractCode(address,string memory)":"infinite","enforceIsContractOwner()":"infinite","initializeDiamondCut(address,bytes memory)":"infinite","removeFunction(struct LibDiamond.DiamondStorage storage pointer,address,bytes4)":"infinite","removeFunctions(address,bytes4[] memory)":"infinite","replaceFunctions(address,bytes4[] memory)":"infinite","setContractOwner(address)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondCut.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"indexed\":false,\"internalType\":\"struct IDiamondCut.FacetCut[]\",\"name\":\"_diamondCut\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_init\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"DiamondCut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\":\"LibDiamond\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"hardhat-deploy/solc_0.8/diamond/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0xc00c16bfa30a3fa5f3dc684f7f8ba62c259962b25f647d9588739458989717fc\",\"license\":\"MIT\"},\"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);            \\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress != _facetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(_facetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n        enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }    \\n\\n\\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n        // an immutable function is a function defined directly in a diamond\\n        require(_facetAddress != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\");\\n        } else {\\n            require(_calldata.length > 0, \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\");\\n            if (_init != address(this)) {\\n                enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x2205345e83eb86f5281f159a9215a096cb6d404782619f9b8e9d7a4a46c32a37\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}