{"id":"4c000d78d044f3b20358668820c608f6","_format":"hh-sol-build-info-1","solcVersion":"0.8.18","solcLongVersion":"0.8.18+commit.87f61d96","input":{"language":"Solidity","sources":{"@openzeppelin/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"},"@openzeppelin/contracts/utils/math/Math.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Strings.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"},"contracts/ILeafWalletRegistryActivate.sol":{"content":"//SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.18;\r\n\r\nimport \"./ILeafWalletRegistryCore.sol\";\r\n\r\ninterface ILeafWalletRegistryActivate is ILeafWalletRegistryCore{\r\n    function assignActivatableAddressToSender(address assignee)  external;\r\n    function getActivationCodeOfSender() external view returns (uint256);\r\n}"},"contracts/ILeafWalletRegistryBasic.sol":{"content":"//SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.18;\r\n\r\nimport \"./ILeafWalletRegistryCore.sol\";\r\n\r\ninterface ILeafWalletRegistryBasic is ILeafWalletRegistryCore {\r\n    function assignAddressToSender(address assignee)  external;\r\n}\r\n"},"contracts/ILeafWalletRegistryCore.sol":{"content":"//SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.18;\r\n\r\ninterface ILeafWalletRegistryCore {\r\n    function isSenderRegistered() external view returns (bool);\r\n    function getDeviceOwner() external view returns (address);\r\n    function getRelatedDevices() external view returns (address[] memory);\r\n}"},"contracts/InitFacet.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.18;\r\n\r\nimport {IDiamondLoupe} from \"hardhat-deploy/solc_0.8/diamond/interfaces/IDiamondLoupe.sol\";\r\nimport {UsingDiamondOwner, IDiamondCut} from \"hardhat-deploy/solc_0.8/diamond/UsingDiamondOwner.sol\";\r\nimport \"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\";\r\nimport {SusuwatariStorage, StorageHandler} from \"./SusuwatariStorage.sol\";\r\nimport \"./ILeafWalletRegistryActivate.sol\";\r\n\r\n\r\ncontract InitFacet is UsingDiamondOwner, StorageHandler {\r\n  \r\n  constructor(){\r\n        LibDiamond.setContractOwner(msg.sender);\r\n        \r\n    }\r\n    \r\n    function init() external onlyOwner {\r\n\r\n        SusuwatariStorage storage susu = susu();\r\n\r\n\r\n        if (susu.isInitialized) return;\r\n\r\n        ds().supportedInterfaces[type(IDiamondCut).interfaceId] = true;\r\n        ds().supportedInterfaces[type(IDiamondLoupe).interfaceId] = true;\r\n        \r\n        ds().supportedInterfaces[type(ILeafWalletRegistryActivate).interfaceId] = true;\r\n\r\n        susu.isInitialized = true;\r\n    }\r\n}"},"contracts/LeafWalletRegistryActivate.sol":{"content":"//SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.18;\r\n\r\nimport \"./ILeafWalletRegistryActivate.sol\";\r\nimport \"./LeafWalletRegistryCore.sol\";\r\nimport {LeafWalletStorage,StorageHandler} from  \"./SusuwatariStorage.sol\";\r\n\r\ncontract LeafWalletRegistryActivate is ILeafWalletRegistryActivate, LeafWalletRegistryCore  {\r\n    event AssignActivatableAddressToSenderReturn(uint256);\r\n    \r\n\r\n    function assignActivatableAddressToSender(address assignee) public virtual override{\r\n        LeafWalletStorage storage lw = lw();\r\n        _assignAddressToSender(assignee);\r\n\r\n\r\n        uint256 activationCode = uint256(keccak256(abi.encodePacked(block.timestamp, block.prevrandao, msg.sender))) % 100;\r\n        if(activationCode<10){\r\n            activationCode = activationCode+10;\r\n        }\r\n        lw._deviceActivationCodes[assignee] = activationCode;\r\n\r\n\r\n        emit AssignActivatableAddressToSenderReturn(activationCode);\r\n    }\r\n\r\n    function getActivationCodeOfSender() public view override returns (uint256){\r\n        LeafWalletStorage storage lw = lw();\r\n        require(lw._deviceOwner[msg.sender] != address(0),\"Device not yet registered\");\r\n        return lw._deviceActivationCodes[msg.sender];\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\n    "},"contracts/LeafWalletRegistryBase.sol":{"content":"//SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.18;\r\n\r\nimport \"./ILeafWalletRegistryBasic.sol\";\r\nimport \"./LeafWalletRegistryCore.sol\";\r\n\r\ncontract LeafWalletRegistryBasic is ILeafWalletRegistryBasic,LeafWalletRegistryCore {\r\n    \r\n    function assignAddressToSender(address assignee) public override{\r\n        _assignAddressToSender(assignee);\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n    "},"contracts/LeafWalletRegistryCore.sol":{"content":"//SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.18;\r\n\r\nimport \"./ILeafWalletRegistryCore.sol\";\r\nimport {LeafWalletStorage,StorageHandler} from  \"./SusuwatariStorage.sol\";\r\n\r\ncontract LeafWalletRegistryCore is ILeafWalletRegistryCore,StorageHandler {\r\n\r\n    \r\n\r\n    function _assignAddressToSender(address assignee) internal{\r\n        LeafWalletStorage storage lw = lw();\r\n        require(lw._deviceOwner[assignee] == address(0) || lw._deviceOwner[assignee] == msg.sender,\"Device already registered\");\r\n     \r\n        if(lw._deviceOwner[assignee] == address(0)){\r\n            lw._ownerDevices[msg.sender].push(assignee);\r\n            lw._deviceOwner[assignee] = msg.sender;\r\n        }\r\n    }\r\n\r\n\r\n    function isSenderRegistered() public view override returns (bool) {\r\n        LeafWalletStorage storage lw = lw();\r\n        return lw._deviceOwner[msg.sender] != address(0);\r\n    }\r\n\r\n    function getDeviceOwner() public view override returns (address) {\r\n        LeafWalletStorage storage lw = lw();\r\n        return lw._deviceOwner[msg.sender];\r\n    }\r\n\r\n    function getRelatedDevices() public view override returns (address[] memory) {\r\n        LeafWalletStorage storage lw = lw();\r\n        return lw._ownerDevices[msg.sender];\r\n    }\r\n\r\n\r\n    \r\n\r\n\r\n}\r\n\r\n\r\n\r\n    "},"contracts/LibSusuwatari.sol":{"content":"//SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.18;\r\n\r\n\r\nimport {SusuwatariStorage, Susu} from \"./SusuwatariStorage.sol\";\r\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\r\nimport \"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\";\r\n\r\nlibrary LibSusuwatari{\r\n\r\n   \r\n\r\n    \r\n    modifier mustExistSusu(SusuwatariStorage storage sus, uint256 tokenId) {\r\n        require(tokenId > 0 && tokenId <= sus.susuOwners.length, \"The Susuwatari does not exist\");\r\n        _;\r\n    }\r\n\r\n    \r\n    modifier mustHaveSusu(SusuwatariStorage storage sus) {\r\n    bool hasSusu = false;\r\n    \r\n    for (uint256 i = 0; i < sus.susuOwners.length; i++) {\r\n        if (sus.susuOwners[i] == msg.sender) {\r\n            hasSusu = true;\r\n            break;\r\n        }\r\n    }\r\n    \r\n    require(hasSusu, \"Caller does not own any Susuwatari token\");\r\n    _;\r\n}\r\n\r\n\r\n\r\n    \r\n    \r\n\r\n    modifier mustCarrySusu(SusuwatariStorage storage sus, uint256 tokenId) {\r\n    Susu storage susuInstance = sus.tokenIdToSusu[tokenId];\r\n    require(susuInstance.carrier == msg.sender, \"Caller doesn't carry a Susuwatari Token!\");\r\n    _;\r\n}\r\n\r\n\r\n\r\nmodifier isUserRegistered(SusuwatariStorage storage sus){\r\n      require(sus.maxSlotCount[msg.sender] > 0, \"User is not registered\"); \r\n          _;\r\n}\r\n\r\n    modifier mustNotCarrySusu(SusuwatariStorage storage sus, uint256 tokenId) { \r\n\r\n    bool isCarrying = false;\r\n    \r\n\r\n    for (uint256 i = 0; i < sus.susuOwners.length; i++) {\r\n        if (sus.tokenIdToSusu[i].carrier == msg.sender) {\r\n            isCarrying = true;\r\n            break;\r\n        }\r\n    }\r\n    require(!isCarrying, \"Caller is already carry a Susuwatari Token!\");\r\n        _;\r\n    }\r\n\r\n\r\n\r\n \r\n\r\nmodifier isNotBeingCarriedSusu(SusuwatariStorage storage sus, uint256 tokenId) {\r\n    Susu storage su = sus.tokenIdToSusu[tokenId];\r\n    require(su.carrier == address(0), \"Susu is already being carried!\");\r\n    _;\r\n}\r\n\r\n\r\n\r\n        modifier mustHaveBagSpace(SusuwatariStorage storage sus) {\r\n\r\n    bool isCarrying = false;\r\n    \r\n    for (uint256 i = 0; i < sus.susuOwners.length; i++) {\r\n        if (sus.tokenIdToSusu[i].carrier == msg.sender) {\r\n            isCarrying = true;\r\n            break;\r\n        }\r\n    }\r\n    require(isCarrying == false, \"Caller is already overburdened\");\r\n        _;\r\n    }\r\n\r\n\r\n\r\n  modifier susuMustNotHaveBeenAimed(SusuwatariStorage storage sus, uint256 tokenId) {\r\n\r\n        \r\n    require(sus.susuOwners[tokenId] == msg.sender && sus.tokenIdToSusu[tokenId].carrier == msg.sender, \"Caller is not owner\");\r\n    \r\n        _;\r\n    }\r\n\r\n    \r\n\r\n\r\n    struct UserState {\r\n        uint256[] ownedTokens;\r\n        Slot slot;\r\n    }\r\n\r\n\r\n    struct Slot {\r\n        uint256 susuTokenId;\r\n        uint256 dropCooldownTime;\r\n        address ownerAddress;\r\n    }\r\n\r\n\r\nfunction getCurrentState(SusuwatariStorage storage sus) public view returns (UserState memory) {\r\n\r\n    uint256 ownedTokenCount = 0;\r\n    for (uint256 i = 0; i < sus.susuOwners.length; i++) {\r\n        if (msg.sender == sus.susuOwners[i]) {\r\n            ownedTokenCount++;\r\n        }\r\n    }\r\n\r\n    uint256[] memory ownedTokens = new uint256[](ownedTokenCount); //push geht nicht in memory arrays\r\n    uint256 index = 0;\r\n    for (uint256 i = 0; i < sus.susuOwners.length; i++) {\r\n        if (msg.sender == sus.susuOwners[i]) {\r\n            ownedTokens[index] = i;\r\n            index++;\r\n        }\r\n    }\r\n\r\n    Slot memory slot;\r\n    for (uint256 i = 0; i < ownedTokens.length; i++) {\r\n        uint256 tokenId = ownedTokens[i];\r\n        if (sus.tokenIdToSusu[tokenId].carrier == msg.sender) {\r\n            slot.susuTokenId = tokenId;\r\n            slot.dropCooldownTime = sus.tokenIdToSusu[tokenId].dropCooldownTime;\r\n            slot.ownerAddress = sus.susuOwners[tokenId];\r\n            break; //one slot per user!\r\n        }\r\n    }\r\n\r\n    UserState memory state = UserState({\r\n        ownedTokens: ownedTokens,\r\n        slot: slot\r\n    });\r\n    \r\n    return state;\r\n}\r\n\r\n\r\n\r\n    function registerMe(SusuwatariStorage storage sus) internal { \r\n        require(sus.maxSlotCount[msg.sender] == 0, \"User already registered\");\r\n\r\n        Susu memory newSusu = Susu({\r\n            tokenId: sus.susuOwners.length + 1,\r\n            dropCooldownTime: 0,\r\n            originLocation: \"\",\r\n            currentLocation: \"\",\r\n            destination: \"\",\r\n            message: \"\",\r\n            carrier: msg.sender\r\n        });\r\n\r\n        sus.maxSlotCount[msg.sender] = 1;\r\n        sus.susuOwners.push(msg.sender);\r\n        sus.tokenIdToSusu[newSusu.tokenId] = newSusu;\r\n        sus.baggedSusus[newSusu.tokenId] = msg.sender;\r\n    \r\n    }\r\n\r\nfunction aimInitialSusu(SusuwatariStorage storage sus, uint256 tokenId, string memory location, string memory destination, string memory message) internal isUserRegistered(sus) mustExistSusu(sus, tokenId) susuMustNotHaveBeenAimed(sus,tokenId) returns (uint256, string memory, string memory, string memory) {\r\n    \r\n       \r\n    Susu storage susu = sus.tokenIdToSusu[tokenId];\r\n    \r\n   \r\n    susu.dropCooldownTime = 300 + (uint256(keccak256(abi.encodePacked(block.timestamp, msg.sender, tokenId))) % 301);\r\n    susu.originLocation = location;\r\n    susu.currentLocation = location;\r\n    susu.destination = destination;\r\n    susu.message = message;\r\n    susu.carrier = msg.sender;\r\n    sus.baggedSusus[tokenId] = msg.sender;\r\n    \r\n}\r\n\r\n\r\n\r\n\r\n\r\nfunction dropSusu(SusuwatariStorage storage sus, uint256 tokenId, string memory location, string memory destination, string memory message) internal isUserRegistered(sus) mustExistSusu(sus, tokenId) mustCarrySusu(sus, tokenId) returns (uint256, string memory, string memory, string memory) {\r\n  \r\n    \r\n    Susu storage susu = sus.tokenIdToSusu[tokenId];\r\n    \r\n   \r\n    susu.dropCooldownTime = 300 + (uint256(keccak256(abi.encodePacked(block.timestamp, msg.sender, tokenId))) % 301);\r\n    susu.currentLocation = location;\r\n    susu.carrier = address(0);\r\n    sus.baggedSusus[tokenId] = msg.sender;\r\n    \r\n}\r\n\r\n \r\n\r\nfunction tryPickupSusu(SusuwatariStorage storage sus, uint256 tokenId, string memory location, string memory destination, string memory message) internal isUserRegistered(sus) mustExistSusu(sus, tokenId) mustNotCarrySusu(sus, tokenId) isNotBeingCarriedSusu(sus,tokenId) returns (uint256, string memory, string memory, string memory) {\r\n     \r\n    Susu storage susu = sus.tokenIdToSusu[tokenId];\r\n    \r\n     require(\r\n        keccak256(abi.encodePacked(susu.currentLocation)) == keccak256(abi.encodePacked(location)), \r\n        \"Caller is not in the correct location\"\r\n    );\r\n   \r\n    susu.dropCooldownTime = 300 + (uint256(keccak256(abi.encodePacked(block.timestamp, msg.sender, tokenId))) % 301);\r\n    susu.carrier = msg.sender;\r\n    sus.baggedSusus[tokenId] = msg.sender;\r\n    \r\n}\r\n\r\n\r\n}"},"contracts/SusuwatariFacet.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.18;\r\n\r\nimport \"@openzeppelin/contracts/utils/Address.sol\";\r\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\r\nimport {SusuwatariStorage, StorageHandler} from \"./SusuwatariStorage.sol\";\r\nimport {LibSusuwatari} from \"./LibSusuwatari.sol\";\r\nimport {UsingDiamondOwner} from \"hardhat-deploy/solc_0.8/diamond/UsingDiamondOwner.sol\";\r\n\r\n/**\r\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\r\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\r\n * {ERC721Enumerable}.\r\n */\r\ncontract SusuwatariFacet is StorageHandler, UsingDiamondOwner {\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    function registerMe() external {\r\n        LibSusuwatari.registerMe(susu());\r\n    }\r\n\r\n    function aimInitialSusu(uint256 tokenId, string memory location, string memory destination, string memory message) \r\n        external \r\n        returns (uint256, string memory, string memory, string memory) \r\n    {\r\n        return LibSusuwatari.aimInitialSusu(susu(), tokenId, location, destination, message);\r\n    }\r\n\r\n    function dropSusu(uint256 tokenId, string memory location, string memory destination, string memory message) \r\n        external \r\n        returns (uint256, string memory, string memory, string memory) \r\n    {\r\n        return LibSusuwatari.dropSusu(susu(), tokenId, location, destination, message);\r\n    }\r\n\r\n    function tryPickupSusu(uint256 tokenId, string memory location, string memory destination, string memory message) \r\n        external \r\n        returns (uint256, string memory, string memory, string memory) \r\n    {\r\n        return LibSusuwatari.tryPickupSusu(susu(), tokenId, location, destination, message);\r\n    }\r\n\r\n    function getCurrentState() \r\n        external \r\n        view \r\n        onlyOwner\r\n        returns (LibSusuwatari.UserState memory) \r\n    {\r\n        return LibSusuwatari.getCurrentState(susu());\r\n    }\r\n}\r\n"},"contracts/SusuwatariLeafWalletFacet.sol":{"content":"//SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.18;\r\n\r\nimport \"@openzeppelin/contracts/utils/Context.sol\";\r\nimport \"./LeafWalletRegistryActivate.sol\";\r\nimport {LibDiamond} from \"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\";\r\nimport {SusuwatariStorage} from \"./SusuwatariStorage.sol\";\r\n\r\n\r\ncontract SusuwatariLeafWalletFacet is LeafWalletRegistryActivate, Context  {\r\n    \r\n    function assignActivatableAddressToSender(address assignee) public override{\r\n        super.assignActivatableAddressToSender(assignee);\r\n    }\r\n}\r\n\r\n\r\n\r\n    "},"contracts/SusuwatariStorage.sol":{"content":"//SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.18;\r\n\r\nimport {LibDiamond} from \"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\";\r\n\r\nbytes32 constant SUSUWATARI_STORAGE_POSITION = keccak256(\"susuwatari.contract.storage\");\r\nbytes32 constant LEAFWALLET_STORAGE_POSITION = keccak256(\"leafwallet.contract.storage\");\r\n\r\nstruct OwnableStorage {\r\n\r\n    address _owner;\r\n}\r\n\r\n\r\nstruct LeafWalletStorage {\r\n    mapping(address => address) _deviceOwner;\r\n    mapping(address => address[]) _ownerDevices;\r\n    mapping(address => uint256) _deviceActivationCodes;\r\n}\r\n\r\n\r\n    struct Susu {\r\n        uint256 tokenId;\r\n        string originLocation;\r\n        string currentLocation;\r\n        string destination;\r\n        string message;\r\n        address carrier;\r\n        uint256 dropCooldownTime;\r\n    }\r\n    \r\n    //slotstate contains: 1. slot array, an element of slotarray has: [susutokenid, dropCooldownTime] 2. maxSlotCount(int) 3.  list of owned susus (nft)\r\n    struct SusuwatariStorage {\r\n        mapping(address => uint256) maxSlotCount;\r\n        address[] susuOwners;\r\n        mapping(uint256 => Susu) tokenIdToSusu;\r\n        bool isInitialized;\r\n        mapping(uint256 => address) baggedSusus; \r\n    }\r\n\r\n\r\n\r\n\r\ncontract StorageHandler {\r\n    \r\n    function susu() internal pure returns (SusuwatariStorage storage cs) {\r\n        bytes32 position = SUSUWATARI_STORAGE_POSITION;\r\n        assembly {\r\n           cs.slot := position\r\n        }\r\n    }\r\n\r\n    function os() internal pure returns (OwnableStorage storage cs) {\r\n        bytes32 position = keccak256(\"ownable.contract.storage\");\r\n        assembly {\r\n           cs.slot := position\r\n        }\r\n    }\r\n    \r\n    function ds() internal pure returns (LibDiamond.DiamondStorage storage) {\r\n        return LibDiamond.diamondStorage();\r\n    }\r\n\r\n    \r\n    function lw() internal pure returns (LeafWalletStorage storage cs) {\r\n        bytes32 position = keccak256(\"leafwallet.contract.storage\");\r\n        assembly {\r\n           cs.slot := position\r\n        }\r\n    }\r\n}"},"hardhat-deploy/solc_0.8/diamond/interfaces/IDiamondCut.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/******************************************************************************\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\n/******************************************************************************/\n\ninterface IDiamondCut {\n    enum FacetCutAction {Add, Replace, Remove}\n    // Add=0, Replace=1, Remove=2\n\n    struct FacetCut {\n        address facetAddress;\n        FacetCutAction action;\n        bytes4[] functionSelectors;\n    }\n\n    /// @notice Add/replace/remove any number of functions and optionally execute\n    ///         a function with delegatecall\n    /// @param _diamondCut Contains the facet addresses and function selectors\n    /// @param _init The address of the contract or facet to execute _calldata\n    /// @param _calldata A function call, including function selector and arguments\n    ///                  _calldata is executed with delegatecall on _init\n    function diamondCut(\n        FacetCut[] calldata _diamondCut,\n        address _init,\n        bytes calldata _calldata\n    ) external;\n\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\n}\n"},"hardhat-deploy/solc_0.8/diamond/interfaces/IDiamondLoupe.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/******************************************************************************\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\n/******************************************************************************/\n\n// A loupe is a small magnifying glass used to look at diamonds.\n// These functions look at diamonds\ninterface IDiamondLoupe {\n    /// These functions are expected to be called frequently\n    /// by tools.\n\n    struct Facet {\n        address facetAddress;\n        bytes4[] functionSelectors;\n    }\n\n    /// @notice Gets all facet addresses and their four byte function selectors.\n    /// @return facets_ Facet\n    function facets() external view returns (Facet[] memory facets_);\n\n    /// @notice Gets all the function selectors supported by a specific facet.\n    /// @param _facet The facet address.\n    /// @return facetFunctionSelectors_\n    function facetFunctionSelectors(address _facet) external view returns (bytes4[] memory facetFunctionSelectors_);\n\n    /// @notice Get all the facet addresses used by a diamond.\n    /// @return facetAddresses_\n    function facetAddresses() external view returns (address[] memory facetAddresses_);\n\n    /// @notice Gets the facet that supports the given selector.\n    /// @dev If facet is not found return address(0).\n    /// @param _functionSelector The function selector.\n    /// @return facetAddress_ The facet address.\n    function facetAddress(bytes4 _functionSelector) external view returns (address facetAddress_);\n}\n"},"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/******************************************************************************\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\n/******************************************************************************/\nimport { IDiamondCut } from \"../interfaces/IDiamondCut.sol\";\n\nlibrary LibDiamond {\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\"diamond.standard.diamond.storage\");\n\n    struct FacetAddressAndPosition {\n        address facetAddress;\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\n    }\n\n    struct FacetFunctionSelectors {\n        bytes4[] functionSelectors;\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\n    }\n\n    struct DiamondStorage {\n        // maps function selector to the facet address and\n        // the position of the selector in the facetFunctionSelectors.selectors array\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\n        // maps facet addresses to function selectors\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\n        // facet addresses\n        address[] facetAddresses;\n        // Used to query if a contract implements an interface.\n        // Used to implement ERC-165.\n        mapping(bytes4 => bool) supportedInterfaces;\n        // owner of the contract\n        address contractOwner;\n    }\n\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\n        bytes32 position = DIAMOND_STORAGE_POSITION;\n        assembly {\n            ds.slot := position\n        }\n    }\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    function setContractOwner(address _newOwner) internal {\n        DiamondStorage storage ds = diamondStorage();\n        address previousOwner = ds.contractOwner;\n        ds.contractOwner = _newOwner;\n        emit OwnershipTransferred(previousOwner, _newOwner);\n    }\n\n    function contractOwner() internal view returns (address contractOwner_) {\n        contractOwner_ = diamondStorage().contractOwner;\n    }\n\n    function enforceIsContractOwner() internal view {\n        require(msg.sender == diamondStorage().contractOwner, \"LibDiamond: Must be contract owner\");\n    }\n\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\n\n    // Internal function version of diamondCut\n    function diamondCut(\n        IDiamondCut.FacetCut[] memory _diamondCut,\n        address _init,\n        bytes memory _calldata\n    ) internal {\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\n            if (action == IDiamondCut.FacetCutAction.Add) {\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\n            } else {\n                revert(\"LibDiamondCut: Incorrect FacetCutAction\");\n            }\n        }\n        emit DiamondCut(_diamondCut, _init, _calldata);\n        initializeDiamondCut(_init, _calldata);\n    }\n\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\n        require(_functionSelectors.length > 0, \"LibDiamondCut: No selectors in facet to cut\");\n        DiamondStorage storage ds = diamondStorage();        \n        require(_facetAddress != address(0), \"LibDiamondCut: Add facet can't be address(0)\");\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\n        // add new facet address if it does not exist\n        if (selectorPosition == 0) {\n            addFacet(ds, _facetAddress);            \n        }\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\n            bytes4 selector = _functionSelectors[selectorIndex];\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\n            require(oldFacetAddress == address(0), \"LibDiamondCut: Can't add function that already exists\");\n            addFunction(ds, selector, selectorPosition, _facetAddress);\n            selectorPosition++;\n        }\n    }\n\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\n        require(_functionSelectors.length > 0, \"LibDiamondCut: No selectors in facet to cut\");\n        DiamondStorage storage ds = diamondStorage();\n        require(_facetAddress != address(0), \"LibDiamondCut: Add facet can't be address(0)\");\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\n        // add new facet address if it does not exist\n        if (selectorPosition == 0) {\n            addFacet(ds, _facetAddress);\n        }\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\n            bytes4 selector = _functionSelectors[selectorIndex];\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\n            require(oldFacetAddress != _facetAddress, \"LibDiamondCut: Can't replace function with same function\");\n            removeFunction(ds, oldFacetAddress, selector);\n            addFunction(ds, selector, selectorPosition, _facetAddress);\n            selectorPosition++;\n        }\n    }\n\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\n        require(_functionSelectors.length > 0, \"LibDiamondCut: No selectors in facet to cut\");\n        DiamondStorage storage ds = diamondStorage();\n        // if function does not exist then do nothing and return\n        require(_facetAddress == address(0), \"LibDiamondCut: Remove facet address must be address(0)\");\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\n            bytes4 selector = _functionSelectors[selectorIndex];\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\n            removeFunction(ds, oldFacetAddress, selector);\n        }\n    }\n\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\n        enforceHasContractCode(_facetAddress, \"LibDiamondCut: New facet has no code\");\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\n        ds.facetAddresses.push(_facetAddress);\n    }    \n\n\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\n    }\n\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {        \n        require(_facetAddress != address(0), \"LibDiamondCut: Can't remove function that doesn't exist\");\n        // an immutable function is a function defined directly in a diamond\n        require(_facetAddress != address(this), \"LibDiamondCut: Can't remove immutable function\");\n        // replace selector with last selector, then delete last selector\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\n        // if not the same then replace _selector with lastSelector\n        if (selectorPosition != lastSelectorPosition) {\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\n        }\n        // delete the last selector\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\n        delete ds.selectorToFacetAndPosition[_selector];\n\n        // if no more selectors for facet address then delete the facet address\n        if (lastSelectorPosition == 0) {\n            // replace facet address with last facet address and delete last facet address\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\n            if (facetAddressPosition != lastFacetAddressPosition) {\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\n            }\n            ds.facetAddresses.pop();\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\n        }\n    }\n\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\n        if (_init == address(0)) {\n            require(_calldata.length == 0, \"LibDiamondCut: _init is address(0) but_calldata is not empty\");\n        } else {\n            require(_calldata.length > 0, \"LibDiamondCut: _calldata is empty but _init is not address(0)\");\n            if (_init != address(this)) {\n                enforceHasContractCode(_init, \"LibDiamondCut: _init address has no code\");\n            }\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\n            if (!success) {\n                if (error.length > 0) {\n                    // bubble up the error\n                    revert(string(error));\n                } else {\n                    revert(\"LibDiamondCut: _init function reverted\");\n                }\n            }\n        }\n    }\n\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\n        uint256 contractSize;\n        assembly {\n            contractSize := extcodesize(_contract)\n        }\n        require(contractSize > 0, _errorMessage);\n    }\n}\n"},"hardhat-deploy/solc_0.8/diamond/UsingDiamondOwner.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./libraries/LibDiamond.sol\";\n\ncontract UsingDiamondOwner {\n    modifier onlyOwner() {\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\n        require(msg.sender == ds.contractOwner, \"Only owner is allowed to perform this action\");\n        _;\n    }\n}\n"}},"settings":{"optimizer":{"enabled":true,"runs":200},"viaIR":true,"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"errors":[{"component":"general","errorCode":"6321","formattedMessage":"Warning: Unnamed return variable can remain unassigned. Add an explicit return with value to all non-reverting code paths or name the variable.\n   --> contracts/LibSusuwatari.sol:179:253:\n    |\n179 |  ... aveBeenAimed(sus,tokenId) returns (uint256, string memory, string memory, str ...\n    |                                         ^^^^^^^\n\n","message":"Unnamed return variable can remain unassigned. Add an explicit return with value to all non-reverting code paths or name the variable.","severity":"warning","sourceLocation":{"end":4863,"file":"contracts/LibSusuwatari.sol","start":4856},"type":"Warning"},{"component":"general","errorCode":"6321","formattedMessage":"Warning: Unnamed return variable can remain unassigned. Add an explicit return with value to all non-reverting code paths or name the variable.\n   --> contracts/LibSusuwatari.sol:179:262:\n    |\n179 |  ... med(sus,tokenId) returns (uint256, string memory, string memory, string memory) {\n    |                                         ^^^^^^^^^^^^^\n\n","message":"Unnamed return variable can remain unassigned. Add an explicit return with value to all non-reverting code paths or name the variable.","severity":"warning","sourceLocation":{"end":4878,"file":"contracts/LibSusuwatari.sol","start":4865},"type":"Warning"},{"component":"general","errorCode":"6321","formattedMessage":"Warning: Unnamed return variable can remain unassigned. Add an explicit return with value to all non-reverting code paths or name the variable.\n   --> contracts/LibSusuwatari.sol:179:277:\n    |\n179 |  ... ) returns (uint256, string memory, string memory, string memory) {\n    |                                         ^^^^^^^^^^^^^\n\n","message":"Unnamed return variable can remain unassigned. Add an explicit return with value to all non-reverting code paths or name the variable.","severity":"warning","sourceLocation":{"end":4893,"file":"contracts/LibSusuwatari.sol","start":4880},"type":"Warning"},{"component":"general","errorCode":"6321","formattedMessage":"Warning: Unnamed return variable can remain unassigned. Add an explicit return with value to all non-reverting code paths or name the variable.\n   --> contracts/LibSusuwatari.sol:179:292:\n    |\n179 |  ... 256, string memory, string memory, string memory) {\n    |                                         ^^^^^^^^^^^^^\n\n","message":"Unnamed return variable can remain unassigned. Add an explicit return with value to all non-reverting code paths or name the variable.","severity":"warning","sourceLocation":{"end":4908,"file":"contracts/LibSusuwatari.sol","start":4895},"type":"Warning"},{"component":"general","errorCode":"6321","formattedMessage":"Warning: Unnamed return variable can remain unassigned. Add an explicit return with value to all non-reverting code paths or name the variable.\n   --> contracts/LibSusuwatari.sol:199:237:\n    |\n199 |  ... stCarrySusu(sus, tokenId) returns (uint256, string memory, string memory, str ...\n    |                                         ^^^^^^^\n\n","message":"Unnamed return variable can remain unassigned. Add an explicit return with value to all non-reverting code paths or name the variable.","severity":"warning","sourceLocation":{"end":5590,"file":"contracts/LibSusuwatari.sol","start":5583},"type":"Warning"},{"component":"general","errorCode":"6321","formattedMessage":"Warning: Unnamed return variable can remain unassigned. Add an explicit return with value to all non-reverting code paths or name the variable.\n   --> contracts/LibSusuwatari.sol:199:246:\n    |\n199 |  ... su(sus, tokenId) returns (uint256, string memory, string memory, string memory) {\n    |                                         ^^^^^^^^^^^^^\n\n","message":"Unnamed return variable can remain unassigned. Add an explicit return with value to all non-reverting code paths or name the variable.","severity":"warning","sourceLocation":{"end":5605,"file":"contracts/LibSusuwatari.sol","start":5592},"type":"Warning"},{"component":"general","errorCode":"6321","formattedMessage":"Warning: Unnamed return variable can remain unassigned. Add an explicit return with value to all non-reverting code paths or name the variable.\n   --> contracts/LibSusuwatari.sol:199:261:\n    |\n199 |  ... ) returns (uint256, string memory, string memory, string memory) {\n    |                                         ^^^^^^^^^^^^^\n\n","message":"Unnamed return variable can remain unassigned. Add an explicit return with value to all non-reverting code paths or name the variable.","severity":"warning","sourceLocation":{"end":5620,"file":"contracts/LibSusuwatari.sol","start":5607},"type":"Warning"},{"component":"general","errorCode":"6321","formattedMessage":"Warning: Unnamed return variable can remain unassigned. Add an explicit return with value to all non-reverting code paths or name the variable.\n   --> contracts/LibSusuwatari.sol:199:276:\n    |\n199 |  ... 256, string memory, string memory, string memory) {\n    |                                         ^^^^^^^^^^^^^\n\n","message":"Unnamed return variable can remain unassigned. Add an explicit return with value to all non-reverting code paths or name the variable.","severity":"warning","sourceLocation":{"end":5635,"file":"contracts/LibSusuwatari.sol","start":5622},"type":"Warning"},{"component":"general","errorCode":"6321","formattedMessage":"Warning: Unnamed return variable can remain unassigned. Add an explicit return with value to all non-reverting code paths or name the variable.\n   --> contracts/LibSusuwatari.sol:214:280:\n    |\n214 |  ... gCarriedSusu(sus,tokenId) returns (uint256, string memory, string memory, str ...\n    |                                         ^^^^^^^\n\n","message":"Unnamed return variable can remain unassigned. Add an explicit return with value to all non-reverting code paths or name the variable.","severity":"warning","sourceLocation":{"end":6249,"file":"contracts/LibSusuwatari.sol","start":6242},"type":"Warning"},{"component":"general","errorCode":"6321","formattedMessage":"Warning: Unnamed return variable can remain unassigned. Add an explicit return with value to all non-reverting code paths or name the variable.\n   --> contracts/LibSusuwatari.sol:214:289:\n    |\n214 |  ... usu(sus,tokenId) returns (uint256, string memory, string memory, string memory) {\n    |                                         ^^^^^^^^^^^^^\n\n","message":"Unnamed return variable can remain unassigned. Add an explicit return with value to all non-reverting code paths or name the variable.","severity":"warning","sourceLocation":{"end":6264,"file":"contracts/LibSusuwatari.sol","start":6251},"type":"Warning"},{"component":"general","errorCode":"6321","formattedMessage":"Warning: Unnamed return variable can remain unassigned. Add an explicit return with value to all non-reverting code paths or name the variable.\n   --> contracts/LibSusuwatari.sol:214:304:\n    |\n214 |  ... ) returns (uint256, string memory, string memory, string memory) {\n    |                                         ^^^^^^^^^^^^^\n\n","message":"Unnamed return variable can remain unassigned. Add an explicit return with value to all non-reverting code paths or name the variable.","severity":"warning","sourceLocation":{"end":6279,"file":"contracts/LibSusuwatari.sol","start":6266},"type":"Warning"},{"component":"general","errorCode":"6321","formattedMessage":"Warning: Unnamed return variable can remain unassigned. Add an explicit return with value to all non-reverting code paths or name the variable.\n   --> contracts/LibSusuwatari.sol:214:319:\n    |\n214 |  ... 256, string memory, string memory, string memory) {\n    |                                         ^^^^^^^^^^^^^\n\n","message":"Unnamed return variable can remain unassigned. Add an explicit return with value to all non-reverting code paths or name the variable.","severity":"warning","sourceLocation":{"end":6294,"file":"contracts/LibSusuwatari.sol","start":6281},"type":"Warning"},{"component":"general","errorCode":"5667","formattedMessage":"Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n   --> contracts/LibSusuwatari.sol:199:91:\n    |\n199 |  ... 6 tokenId, string memory location, string memory destination, string memory message) internal i ...\n    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^\n\n","message":"Unused function parameter. Remove or comment out the variable name to silence this warning.","severity":"warning","sourceLocation":{"end":5462,"file":"contracts/LibSusuwatari.sol","start":5437},"type":"Warning"},{"component":"general","errorCode":"5667","formattedMessage":"Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n   --> contracts/LibSusuwatari.sol:199:118:\n    |\n199 |  ... cation, string memory destination, string memory message) internal isUserRegistered(sus) mu ...\n    |                                         ^^^^^^^^^^^^^^^^^^^^^\n\n","message":"Unused function parameter. Remove or comment out the variable name to silence this warning.","severity":"warning","sourceLocation":{"end":5485,"file":"contracts/LibSusuwatari.sol","start":5464},"type":"Warning"},{"component":"general","errorCode":"5667","formattedMessage":"Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n   --> contracts/LibSusuwatari.sol:214:96:\n    |\n214 |  ... 6 tokenId, string memory location, string memory destination, string memory message) internal i ...\n    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^\n\n","message":"Unused function parameter. Remove or comment out the variable name to silence this warning.","severity":"warning","sourceLocation":{"end":6083,"file":"contracts/LibSusuwatari.sol","start":6058},"type":"Warning"},{"component":"general","errorCode":"5667","formattedMessage":"Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n   --> contracts/LibSusuwatari.sol:214:123:\n    |\n214 |  ... cation, string memory destination, string memory message) internal isUserRegistered(sus) mu ...\n    |                                         ^^^^^^^^^^^^^^^^^^^^^\n\n","message":"Unused function parameter. Remove or comment out the variable name to silence this warning.","severity":"warning","sourceLocation":{"end":6106,"file":"contracts/LibSusuwatari.sol","start":6085},"type":"Warning"}],"sources":{"@openzeppelin/contracts/utils/Address.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","exportedSymbols":{"Address":[329]},"id":330,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".1"],"nodeType":"PragmaDirective","src":"101:23:0"},{"abstract":false,"baseContracts":[],"canonicalName":"Address","contractDependencies":[],"contractKind":"library","documentation":{"id":2,"nodeType":"StructuredDocumentation","src":"126:67:0","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":329,"linearizedBaseContracts":[329],"name":"Address","nameLocation":"202:7:0","nodeType":"ContractDefinition","nodes":[{"body":{"id":16,"nodeType":"Block","src":"1478:254:0","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":14,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":10,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5,"src":"1702:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":11,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1710:4:0","memberName":"code","nodeType":"MemberAccess","src":"1702:12:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":12,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1715:6:0","memberName":"length","nodeType":"MemberAccess","src":"1702:19:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":13,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1724:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1702:23:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":9,"id":15,"nodeType":"Return","src":"1695:30:0"}]},"documentation":{"id":3,"nodeType":"StructuredDocumentation","src":"216:1191:0","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n Furthermore, `isContract` will also return true if the target contract within\n the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n which only has an effect at the end of a transaction.\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"id":17,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"1421:10:0","nodeType":"FunctionDefinition","parameters":{"id":6,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5,"mutability":"mutable","name":"account","nameLocation":"1440:7:0","nodeType":"VariableDeclaration","scope":17,"src":"1432:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4,"name":"address","nodeType":"ElementaryTypeName","src":"1432:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1431:17:0"},"returnParameters":{"id":9,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":17,"src":"1472:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":7,"name":"bool","nodeType":"ElementaryTypeName","src":"1472:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1471:6:0"},"scope":329,"src":"1412:320:0","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":50,"nodeType":"Block","src":"2718:241:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":32,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":28,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2744:4:0","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$329","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$329","typeString":"library Address"}],"id":27,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2736:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":26,"name":"address","nodeType":"ElementaryTypeName","src":"2736:7:0","typeDescriptions":{}}},"id":29,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2736:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":30,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2750:7:0","memberName":"balance","nodeType":"MemberAccess","src":"2736:21:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":31,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":22,"src":"2761:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2736:31:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":33,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2769:31:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":25,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2728:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":34,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2728:73:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":35,"nodeType":"ExpressionStatement","src":"2728:73:0"},{"assignments":[37,null],"declarations":[{"constant":false,"id":37,"mutability":"mutable","name":"success","nameLocation":"2818:7:0","nodeType":"VariableDeclaration","scope":50,"src":"2813:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":36,"name":"bool","nodeType":"ElementaryTypeName","src":"2813:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":44,"initialValue":{"arguments":[{"hexValue":"","id":42,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2861:2:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":38,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":20,"src":"2831:9:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":39,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2841:4:0","memberName":"call","nodeType":"MemberAccess","src":"2831:14:0","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":41,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":40,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":22,"src":"2853:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2831:29:0","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":43,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2831:33:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2812:52:0"},{"expression":{"arguments":[{"id":46,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":37,"src":"2882:7:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":47,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2891:60:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":45,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2874:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":48,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2874:78:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":49,"nodeType":"ExpressionStatement","src":"2874:78:0"}]},"documentation":{"id":18,"nodeType":"StructuredDocumentation","src":"1738:904:0","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":51,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2656:9:0","nodeType":"FunctionDefinition","parameters":{"id":23,"nodeType":"ParameterList","parameters":[{"constant":false,"id":20,"mutability":"mutable","name":"recipient","nameLocation":"2682:9:0","nodeType":"VariableDeclaration","scope":51,"src":"2666:25:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":19,"name":"address","nodeType":"ElementaryTypeName","src":"2666:15:0","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":22,"mutability":"mutable","name":"amount","nameLocation":"2701:6:0","nodeType":"VariableDeclaration","scope":51,"src":"2693:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":21,"name":"uint256","nodeType":"ElementaryTypeName","src":"2693:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2665:43:0"},"returnParameters":{"id":24,"nodeType":"ParameterList","parameters":[],"src":"2718:0:0"},"scope":329,"src":"2647:312:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":68,"nodeType":"Block","src":"3790:96:0","statements":[{"expression":{"arguments":[{"id":62,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":54,"src":"3829:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":63,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":56,"src":"3837:4:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":64,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3843:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":65,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3846:32:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":61,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[109,153],"referencedDeclaration":153,"src":"3807:21:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":66,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3807:72:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":60,"id":67,"nodeType":"Return","src":"3800:79:0"}]},"documentation":{"id":52,"nodeType":"StructuredDocumentation","src":"2965:731:0","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":69,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3710:12:0","nodeType":"FunctionDefinition","parameters":{"id":57,"nodeType":"ParameterList","parameters":[{"constant":false,"id":54,"mutability":"mutable","name":"target","nameLocation":"3731:6:0","nodeType":"VariableDeclaration","scope":69,"src":"3723:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":53,"name":"address","nodeType":"ElementaryTypeName","src":"3723:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":56,"mutability":"mutable","name":"data","nameLocation":"3752:4:0","nodeType":"VariableDeclaration","scope":69,"src":"3739:17:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":55,"name":"bytes","nodeType":"ElementaryTypeName","src":"3739:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3722:35:0"},"returnParameters":{"id":60,"nodeType":"ParameterList","parameters":[{"constant":false,"id":59,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":69,"src":"3776:12:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":58,"name":"bytes","nodeType":"ElementaryTypeName","src":"3776:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3775:14:0"},"scope":329,"src":"3701:185:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":88,"nodeType":"Block","src":"4255:76:0","statements":[{"expression":{"arguments":[{"id":82,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":72,"src":"4294:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":83,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":74,"src":"4302:4:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":84,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4308:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":85,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":76,"src":"4311:12:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":81,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[109,153],"referencedDeclaration":153,"src":"4272:21:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":86,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4272:52:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":80,"id":87,"nodeType":"Return","src":"4265:59:0"}]},"documentation":{"id":70,"nodeType":"StructuredDocumentation","src":"3892:211:0","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":89,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"4117:12:0","nodeType":"FunctionDefinition","parameters":{"id":77,"nodeType":"ParameterList","parameters":[{"constant":false,"id":72,"mutability":"mutable","name":"target","nameLocation":"4147:6:0","nodeType":"VariableDeclaration","scope":89,"src":"4139:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":71,"name":"address","nodeType":"ElementaryTypeName","src":"4139:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":74,"mutability":"mutable","name":"data","nameLocation":"4176:4:0","nodeType":"VariableDeclaration","scope":89,"src":"4163:17:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":73,"name":"bytes","nodeType":"ElementaryTypeName","src":"4163:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":76,"mutability":"mutable","name":"errorMessage","nameLocation":"4204:12:0","nodeType":"VariableDeclaration","scope":89,"src":"4190:26:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":75,"name":"string","nodeType":"ElementaryTypeName","src":"4190:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4129:93:0"},"returnParameters":{"id":80,"nodeType":"ParameterList","parameters":[{"constant":false,"id":79,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":89,"src":"4241:12:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":78,"name":"bytes","nodeType":"ElementaryTypeName","src":"4241:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4240:14:0"},"scope":329,"src":"4108:223:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":108,"nodeType":"Block","src":"4806:111:0","statements":[{"expression":{"arguments":[{"id":102,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":92,"src":"4845:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":103,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"4853:4:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":104,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":96,"src":"4859:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":105,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4866:43:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":101,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[109,153],"referencedDeclaration":153,"src":"4823:21:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":106,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4823:87:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":100,"id":107,"nodeType":"Return","src":"4816:94:0"}]},"documentation":{"id":90,"nodeType":"StructuredDocumentation","src":"4337:351:0","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":109,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4702:21:0","nodeType":"FunctionDefinition","parameters":{"id":97,"nodeType":"ParameterList","parameters":[{"constant":false,"id":92,"mutability":"mutable","name":"target","nameLocation":"4732:6:0","nodeType":"VariableDeclaration","scope":109,"src":"4724:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":91,"name":"address","nodeType":"ElementaryTypeName","src":"4724:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":94,"mutability":"mutable","name":"data","nameLocation":"4753:4:0","nodeType":"VariableDeclaration","scope":109,"src":"4740:17:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":93,"name":"bytes","nodeType":"ElementaryTypeName","src":"4740:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":96,"mutability":"mutable","name":"value","nameLocation":"4767:5:0","nodeType":"VariableDeclaration","scope":109,"src":"4759:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":95,"name":"uint256","nodeType":"ElementaryTypeName","src":"4759:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4723:50:0"},"returnParameters":{"id":100,"nodeType":"ParameterList","parameters":[{"constant":false,"id":99,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":109,"src":"4792:12:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":98,"name":"bytes","nodeType":"ElementaryTypeName","src":"4792:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4791:14:0"},"scope":329,"src":"4693:224:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":152,"nodeType":"Block","src":"5344:267:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":130,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":126,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5370:4:0","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$329","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$329","typeString":"library Address"}],"id":125,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5362:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":124,"name":"address","nodeType":"ElementaryTypeName","src":"5362:7:0","typeDescriptions":{}}},"id":127,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5362:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":128,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5376:7:0","memberName":"balance","nodeType":"MemberAccess","src":"5362:21:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":129,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":116,"src":"5387:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5362:30:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":131,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5394:40:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":123,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5354:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":132,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5354:81:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":133,"nodeType":"ExpressionStatement","src":"5354:81:0"},{"assignments":[135,137],"declarations":[{"constant":false,"id":135,"mutability":"mutable","name":"success","nameLocation":"5451:7:0","nodeType":"VariableDeclaration","scope":152,"src":"5446:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":134,"name":"bool","nodeType":"ElementaryTypeName","src":"5446:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":137,"mutability":"mutable","name":"returndata","nameLocation":"5473:10:0","nodeType":"VariableDeclaration","scope":152,"src":"5460:23:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":136,"name":"bytes","nodeType":"ElementaryTypeName","src":"5460:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":144,"initialValue":{"arguments":[{"id":142,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":114,"src":"5513:4:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":138,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112,"src":"5487:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":139,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5494:4:0","memberName":"call","nodeType":"MemberAccess","src":"5487:11:0","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":141,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":140,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":116,"src":"5506:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5487:25:0","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":143,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5487:31:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5445:73:0"},{"expression":{"arguments":[{"id":146,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112,"src":"5562:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":147,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":135,"src":"5570:7:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":148,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":137,"src":"5579:10:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":149,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":118,"src":"5591:12:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":145,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":284,"src":"5535:26:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":150,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5535:69:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":122,"id":151,"nodeType":"Return","src":"5528:76:0"}]},"documentation":{"id":110,"nodeType":"StructuredDocumentation","src":"4923:237:0","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":153,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"5174:21:0","nodeType":"FunctionDefinition","parameters":{"id":119,"nodeType":"ParameterList","parameters":[{"constant":false,"id":112,"mutability":"mutable","name":"target","nameLocation":"5213:6:0","nodeType":"VariableDeclaration","scope":153,"src":"5205:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":111,"name":"address","nodeType":"ElementaryTypeName","src":"5205:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":114,"mutability":"mutable","name":"data","nameLocation":"5242:4:0","nodeType":"VariableDeclaration","scope":153,"src":"5229:17:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":113,"name":"bytes","nodeType":"ElementaryTypeName","src":"5229:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":116,"mutability":"mutable","name":"value","nameLocation":"5264:5:0","nodeType":"VariableDeclaration","scope":153,"src":"5256:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":115,"name":"uint256","nodeType":"ElementaryTypeName","src":"5256:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":118,"mutability":"mutable","name":"errorMessage","nameLocation":"5293:12:0","nodeType":"VariableDeclaration","scope":153,"src":"5279:26:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":117,"name":"string","nodeType":"ElementaryTypeName","src":"5279:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5195:116:0"},"returnParameters":{"id":122,"nodeType":"ParameterList","parameters":[{"constant":false,"id":121,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":153,"src":"5330:12:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":120,"name":"bytes","nodeType":"ElementaryTypeName","src":"5330:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5329:14:0"},"scope":329,"src":"5165:446:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":169,"nodeType":"Block","src":"5888:97:0","statements":[{"expression":{"arguments":[{"id":164,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":156,"src":"5924:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":165,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":158,"src":"5932:4:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":166,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5938:39:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":163,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[170,199],"referencedDeclaration":199,"src":"5905:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":167,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5905:73:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":162,"id":168,"nodeType":"Return","src":"5898:80:0"}]},"documentation":{"id":154,"nodeType":"StructuredDocumentation","src":"5617:166:0","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":170,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5797:18:0","nodeType":"FunctionDefinition","parameters":{"id":159,"nodeType":"ParameterList","parameters":[{"constant":false,"id":156,"mutability":"mutable","name":"target","nameLocation":"5824:6:0","nodeType":"VariableDeclaration","scope":170,"src":"5816:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":155,"name":"address","nodeType":"ElementaryTypeName","src":"5816:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":158,"mutability":"mutable","name":"data","nameLocation":"5845:4:0","nodeType":"VariableDeclaration","scope":170,"src":"5832:17:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":157,"name":"bytes","nodeType":"ElementaryTypeName","src":"5832:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5815:35:0"},"returnParameters":{"id":162,"nodeType":"ParameterList","parameters":[{"constant":false,"id":161,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":170,"src":"5874:12:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":160,"name":"bytes","nodeType":"ElementaryTypeName","src":"5874:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5873:14:0"},"scope":329,"src":"5788:197:0","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":198,"nodeType":"Block","src":"6327:168:0","statements":[{"assignments":[183,185],"declarations":[{"constant":false,"id":183,"mutability":"mutable","name":"success","nameLocation":"6343:7:0","nodeType":"VariableDeclaration","scope":198,"src":"6338:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":182,"name":"bool","nodeType":"ElementaryTypeName","src":"6338:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":185,"mutability":"mutable","name":"returndata","nameLocation":"6365:10:0","nodeType":"VariableDeclaration","scope":198,"src":"6352:23:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":184,"name":"bytes","nodeType":"ElementaryTypeName","src":"6352:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":190,"initialValue":{"arguments":[{"id":188,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":175,"src":"6397:4:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":186,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":173,"src":"6379:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":187,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6386:10:0","memberName":"staticcall","nodeType":"MemberAccess","src":"6379:17:0","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":189,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6379:23:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6337:65:0"},{"expression":{"arguments":[{"id":192,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":173,"src":"6446:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":193,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":183,"src":"6454:7:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":194,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":185,"src":"6463:10:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":195,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":177,"src":"6475:12:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":191,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":284,"src":"6419:26:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":196,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6419:69:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":181,"id":197,"nodeType":"Return","src":"6412:76:0"}]},"documentation":{"id":171,"nodeType":"StructuredDocumentation","src":"5991:173:0","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":199,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"6178:18:0","nodeType":"FunctionDefinition","parameters":{"id":178,"nodeType":"ParameterList","parameters":[{"constant":false,"id":173,"mutability":"mutable","name":"target","nameLocation":"6214:6:0","nodeType":"VariableDeclaration","scope":199,"src":"6206:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":172,"name":"address","nodeType":"ElementaryTypeName","src":"6206:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":175,"mutability":"mutable","name":"data","nameLocation":"6243:4:0","nodeType":"VariableDeclaration","scope":199,"src":"6230:17:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":174,"name":"bytes","nodeType":"ElementaryTypeName","src":"6230:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":177,"mutability":"mutable","name":"errorMessage","nameLocation":"6271:12:0","nodeType":"VariableDeclaration","scope":199,"src":"6257:26:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":176,"name":"string","nodeType":"ElementaryTypeName","src":"6257:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6196:93:0"},"returnParameters":{"id":181,"nodeType":"ParameterList","parameters":[{"constant":false,"id":180,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":199,"src":"6313:12:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":179,"name":"bytes","nodeType":"ElementaryTypeName","src":"6313:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6312:14:0"},"scope":329,"src":"6169:326:0","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":215,"nodeType":"Block","src":"6771:101:0","statements":[{"expression":{"arguments":[{"id":210,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":202,"src":"6809:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":211,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":204,"src":"6817:4:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564","id":212,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6823:41:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""},"value":"Address: low-level delegate call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""}],"id":209,"name":"functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[216,245],"referencedDeclaration":245,"src":"6788:20:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":213,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6788:77:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":208,"id":214,"nodeType":"Return","src":"6781:84:0"}]},"documentation":{"id":200,"nodeType":"StructuredDocumentation","src":"6501:168:0","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":216,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6683:20:0","nodeType":"FunctionDefinition","parameters":{"id":205,"nodeType":"ParameterList","parameters":[{"constant":false,"id":202,"mutability":"mutable","name":"target","nameLocation":"6712:6:0","nodeType":"VariableDeclaration","scope":216,"src":"6704:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":201,"name":"address","nodeType":"ElementaryTypeName","src":"6704:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":204,"mutability":"mutable","name":"data","nameLocation":"6733:4:0","nodeType":"VariableDeclaration","scope":216,"src":"6720:17:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":203,"name":"bytes","nodeType":"ElementaryTypeName","src":"6720:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6703:35:0"},"returnParameters":{"id":208,"nodeType":"ParameterList","parameters":[{"constant":false,"id":207,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":216,"src":"6757:12:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":206,"name":"bytes","nodeType":"ElementaryTypeName","src":"6757:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6756:14:0"},"scope":329,"src":"6674:198:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":244,"nodeType":"Block","src":"7213:170:0","statements":[{"assignments":[229,231],"declarations":[{"constant":false,"id":229,"mutability":"mutable","name":"success","nameLocation":"7229:7:0","nodeType":"VariableDeclaration","scope":244,"src":"7224:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":228,"name":"bool","nodeType":"ElementaryTypeName","src":"7224:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":231,"mutability":"mutable","name":"returndata","nameLocation":"7251:10:0","nodeType":"VariableDeclaration","scope":244,"src":"7238:23:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":230,"name":"bytes","nodeType":"ElementaryTypeName","src":"7238:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":236,"initialValue":{"arguments":[{"id":234,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":221,"src":"7285:4:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":232,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":219,"src":"7265:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":233,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7272:12:0","memberName":"delegatecall","nodeType":"MemberAccess","src":"7265:19:0","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":235,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7265:25:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"7223:67:0"},{"expression":{"arguments":[{"id":238,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":219,"src":"7334:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":239,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":229,"src":"7342:7:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":240,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":231,"src":"7351:10:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":241,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":223,"src":"7363:12:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":237,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":284,"src":"7307:26:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":242,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7307:69:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":227,"id":243,"nodeType":"Return","src":"7300:76:0"}]},"documentation":{"id":217,"nodeType":"StructuredDocumentation","src":"6878:175:0","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":245,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"7067:20:0","nodeType":"FunctionDefinition","parameters":{"id":224,"nodeType":"ParameterList","parameters":[{"constant":false,"id":219,"mutability":"mutable","name":"target","nameLocation":"7105:6:0","nodeType":"VariableDeclaration","scope":245,"src":"7097:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":218,"name":"address","nodeType":"ElementaryTypeName","src":"7097:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":221,"mutability":"mutable","name":"data","nameLocation":"7134:4:0","nodeType":"VariableDeclaration","scope":245,"src":"7121:17:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":220,"name":"bytes","nodeType":"ElementaryTypeName","src":"7121:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":223,"mutability":"mutable","name":"errorMessage","nameLocation":"7162:12:0","nodeType":"VariableDeclaration","scope":245,"src":"7148:26:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":222,"name":"string","nodeType":"ElementaryTypeName","src":"7148:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7087:93:0"},"returnParameters":{"id":227,"nodeType":"ParameterList","parameters":[{"constant":false,"id":226,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":245,"src":"7199:12:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":225,"name":"bytes","nodeType":"ElementaryTypeName","src":"7199:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7198:14:0"},"scope":329,"src":"7058:325:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":283,"nodeType":"Block","src":"7865:434:0","statements":[{"condition":{"id":259,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":250,"src":"7879:7:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":281,"nodeType":"Block","src":"8235:58:0","statements":[{"expression":{"arguments":[{"id":277,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":252,"src":"8257:10:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":278,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":254,"src":"8269:12:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":276,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":328,"src":"8249:7:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":279,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8249:33:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":280,"nodeType":"ExpressionStatement","src":"8249:33:0"}]},"id":282,"nodeType":"IfStatement","src":"7875:418:0","trueBody":{"id":275,"nodeType":"Block","src":"7888:341:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":263,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":260,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":252,"src":"7906:10:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":261,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7917:6:0","memberName":"length","nodeType":"MemberAccess","src":"7906:17:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":262,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7927:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7906:22:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":272,"nodeType":"IfStatement","src":"7902:286:0","trueBody":{"id":271,"nodeType":"Block","src":"7930:258:0","statements":[{"expression":{"arguments":[{"arguments":[{"id":266,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":248,"src":"8132:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":265,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":17,"src":"8121:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":267,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8121:18:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":268,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8141:31:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":264,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8113:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":269,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8113:60:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":270,"nodeType":"ExpressionStatement","src":"8113:60:0"}]}},{"expression":{"id":273,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":252,"src":"8208:10:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":258,"id":274,"nodeType":"Return","src":"8201:17:0"}]}}]},"documentation":{"id":246,"nodeType":"StructuredDocumentation","src":"7389:277:0","text":" @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"},"id":284,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"7680:26:0","nodeType":"FunctionDefinition","parameters":{"id":255,"nodeType":"ParameterList","parameters":[{"constant":false,"id":248,"mutability":"mutable","name":"target","nameLocation":"7724:6:0","nodeType":"VariableDeclaration","scope":284,"src":"7716:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":247,"name":"address","nodeType":"ElementaryTypeName","src":"7716:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":250,"mutability":"mutable","name":"success","nameLocation":"7745:7:0","nodeType":"VariableDeclaration","scope":284,"src":"7740:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":249,"name":"bool","nodeType":"ElementaryTypeName","src":"7740:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":252,"mutability":"mutable","name":"returndata","nameLocation":"7775:10:0","nodeType":"VariableDeclaration","scope":284,"src":"7762:23:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":251,"name":"bytes","nodeType":"ElementaryTypeName","src":"7762:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":254,"mutability":"mutable","name":"errorMessage","nameLocation":"7809:12:0","nodeType":"VariableDeclaration","scope":284,"src":"7795:26:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":253,"name":"string","nodeType":"ElementaryTypeName","src":"7795:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7706:121:0"},"returnParameters":{"id":258,"nodeType":"ParameterList","parameters":[{"constant":false,"id":257,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":284,"src":"7851:12:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":256,"name":"bytes","nodeType":"ElementaryTypeName","src":"7851:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7850:14:0"},"scope":329,"src":"7671:628:0","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":307,"nodeType":"Block","src":"8680:135:0","statements":[{"condition":{"id":296,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":287,"src":"8694:7:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":305,"nodeType":"Block","src":"8751:58:0","statements":[{"expression":{"arguments":[{"id":301,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":289,"src":"8773:10:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":302,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":291,"src":"8785:12:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":300,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":328,"src":"8765:7:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":303,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8765:33:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":304,"nodeType":"ExpressionStatement","src":"8765:33:0"}]},"id":306,"nodeType":"IfStatement","src":"8690:119:0","trueBody":{"id":299,"nodeType":"Block","src":"8703:42:0","statements":[{"expression":{"id":297,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":289,"src":"8724:10:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":295,"id":298,"nodeType":"Return","src":"8717:17:0"}]}}]},"documentation":{"id":285,"nodeType":"StructuredDocumentation","src":"8305:210:0","text":" @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"},"id":308,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"8529:16:0","nodeType":"FunctionDefinition","parameters":{"id":292,"nodeType":"ParameterList","parameters":[{"constant":false,"id":287,"mutability":"mutable","name":"success","nameLocation":"8560:7:0","nodeType":"VariableDeclaration","scope":308,"src":"8555:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":286,"name":"bool","nodeType":"ElementaryTypeName","src":"8555:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":289,"mutability":"mutable","name":"returndata","nameLocation":"8590:10:0","nodeType":"VariableDeclaration","scope":308,"src":"8577:23:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":288,"name":"bytes","nodeType":"ElementaryTypeName","src":"8577:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":291,"mutability":"mutable","name":"errorMessage","nameLocation":"8624:12:0","nodeType":"VariableDeclaration","scope":308,"src":"8610:26:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":290,"name":"string","nodeType":"ElementaryTypeName","src":"8610:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8545:97:0"},"returnParameters":{"id":295,"nodeType":"ParameterList","parameters":[{"constant":false,"id":294,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":308,"src":"8666:12:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":293,"name":"bytes","nodeType":"ElementaryTypeName","src":"8666:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8665:14:0"},"scope":329,"src":"8520:295:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":327,"nodeType":"Block","src":"8904:457:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":318,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":315,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":310,"src":"8980:10:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":316,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8991:6:0","memberName":"length","nodeType":"MemberAccess","src":"8980:17:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":317,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9000:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8980:21:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":325,"nodeType":"Block","src":"9310:45:0","statements":[{"expression":{"arguments":[{"id":322,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":312,"src":"9331:12:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":321,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"9324:6:0","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":323,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9324:20:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":324,"nodeType":"ExpressionStatement","src":"9324:20:0"}]},"id":326,"nodeType":"IfStatement","src":"8976:379:0","trueBody":{"id":320,"nodeType":"Block","src":"9003:301:0","statements":[{"AST":{"nodeType":"YulBlock","src":"9161:133:0","statements":[{"nodeType":"YulVariableDeclaration","src":"9179:40:0","value":{"arguments":[{"name":"returndata","nodeType":"YulIdentifier","src":"9208:10:0"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9202:5:0"},"nodeType":"YulFunctionCall","src":"9202:17:0"},"variables":[{"name":"returndata_size","nodeType":"YulTypedName","src":"9183:15:0","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9247:2:0","type":"","value":"32"},{"name":"returndata","nodeType":"YulIdentifier","src":"9251:10:0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9243:3:0"},"nodeType":"YulFunctionCall","src":"9243:19:0"},{"name":"returndata_size","nodeType":"YulIdentifier","src":"9264:15:0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9236:6:0"},"nodeType":"YulFunctionCall","src":"9236:44:0"},"nodeType":"YulExpressionStatement","src":"9236:44:0"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":310,"isOffset":false,"isSlot":false,"src":"9208:10:0","valueSize":1},{"declaration":310,"isOffset":false,"isSlot":false,"src":"9251:10:0","valueSize":1}],"id":319,"nodeType":"InlineAssembly","src":"9152:142:0"}]}}]},"id":328,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"8830:7:0","nodeType":"FunctionDefinition","parameters":{"id":313,"nodeType":"ParameterList","parameters":[{"constant":false,"id":310,"mutability":"mutable","name":"returndata","nameLocation":"8851:10:0","nodeType":"VariableDeclaration","scope":328,"src":"8838:23:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":309,"name":"bytes","nodeType":"ElementaryTypeName","src":"8838:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":312,"mutability":"mutable","name":"errorMessage","nameLocation":"8877:12:0","nodeType":"VariableDeclaration","scope":328,"src":"8863:26:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":311,"name":"string","nodeType":"ElementaryTypeName","src":"8863:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8837:53:0"},"returnParameters":{"id":314,"nodeType":"ParameterList","parameters":[],"src":"8904:0:0"},"scope":329,"src":"8821:540:0","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":330,"src":"194:9169:0","usedErrors":[]}],"src":"101:9263:0"},"id":0},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[359]},"id":360,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":331,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"101:23:1"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":332,"nodeType":"StructuredDocumentation","src":"126:496:1","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":359,"linearizedBaseContracts":[359],"name":"Context","nameLocation":"641:7:1","nodeType":"ContractDefinition","nodes":[{"body":{"id":340,"nodeType":"Block","src":"717:34:1","statements":[{"expression":{"expression":{"id":337,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"734:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":338,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"738:6:1","memberName":"sender","nodeType":"MemberAccess","src":"734:10:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":336,"id":339,"nodeType":"Return","src":"727:17:1"}]},"id":341,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"664:10:1","nodeType":"FunctionDefinition","parameters":{"id":333,"nodeType":"ParameterList","parameters":[],"src":"674:2:1"},"returnParameters":{"id":336,"nodeType":"ParameterList","parameters":[{"constant":false,"id":335,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":341,"src":"708:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":334,"name":"address","nodeType":"ElementaryTypeName","src":"708:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"707:9:1"},"scope":359,"src":"655:96:1","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":349,"nodeType":"Block","src":"824:32:1","statements":[{"expression":{"expression":{"id":346,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"841:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":347,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"845:4:1","memberName":"data","nodeType":"MemberAccess","src":"841:8:1","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":345,"id":348,"nodeType":"Return","src":"834:15:1"}]},"id":350,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"766:8:1","nodeType":"FunctionDefinition","parameters":{"id":342,"nodeType":"ParameterList","parameters":[],"src":"774:2:1"},"returnParameters":{"id":345,"nodeType":"ParameterList","parameters":[{"constant":false,"id":344,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":350,"src":"808:14:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":343,"name":"bytes","nodeType":"ElementaryTypeName","src":"808:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"807:16:1"},"scope":359,"src":"757:99:1","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":357,"nodeType":"Block","src":"934:25:1","statements":[{"expression":{"hexValue":"30","id":355,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"951:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":354,"id":356,"nodeType":"Return","src":"944:8:1"}]},"id":358,"implemented":true,"kind":"function","modifiers":[],"name":"_contextSuffixLength","nameLocation":"871:20:1","nodeType":"FunctionDefinition","parameters":{"id":351,"nodeType":"ParameterList","parameters":[],"src":"891:2:1"},"returnParameters":{"id":354,"nodeType":"ParameterList","parameters":[{"constant":false,"id":353,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":358,"src":"925:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":352,"name":"uint256","nodeType":"ElementaryTypeName","src":"925:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"924:9:1"},"scope":359,"src":"862:97:1","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":360,"src":"623:338:1","usedErrors":[]}],"src":"101:861:1"},"id":1},"@openzeppelin/contracts/utils/Strings.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","exportedSymbols":{"Math":[1454],"SignedMath":[1559],"Strings":[588]},"id":589,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":361,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"101:23:2"},{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","file":"./math/Math.sol","id":362,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":589,"sourceUnit":1455,"src":"126:25:2","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/math/SignedMath.sol","file":"./math/SignedMath.sol","id":363,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":589,"sourceUnit":1560,"src":"152:31:2","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"Strings","contractDependencies":[],"contractKind":"library","documentation":{"id":364,"nodeType":"StructuredDocumentation","src":"185:34:2","text":" @dev String operations."},"fullyImplemented":true,"id":588,"linearizedBaseContracts":[588],"name":"Strings","nameLocation":"228:7:2","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":367,"mutability":"constant","name":"_SYMBOLS","nameLocation":"267:8:2","nodeType":"VariableDeclaration","scope":588,"src":"242:54:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"},"typeName":{"id":365,"name":"bytes16","nodeType":"ElementaryTypeName","src":"242:7:2","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"value":{"hexValue":"30313233343536373839616263646566","id":366,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"278:18:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f","typeString":"literal_string \"0123456789abcdef\""},"value":"0123456789abcdef"},"visibility":"private"},{"constant":true,"id":370,"mutability":"constant","name":"_ADDRESS_LENGTH","nameLocation":"325:15:2","nodeType":"VariableDeclaration","scope":588,"src":"302:43:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":368,"name":"uint8","nodeType":"ElementaryTypeName","src":"302:5:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3230","id":369,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"343:2:2","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"visibility":"private"},{"body":{"id":417,"nodeType":"Block","src":"518:625:2","statements":[{"id":416,"nodeType":"UncheckedBlock","src":"528:609:2","statements":[{"assignments":[379],"declarations":[{"constant":false,"id":379,"mutability":"mutable","name":"length","nameLocation":"560:6:2","nodeType":"VariableDeclaration","scope":416,"src":"552:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":378,"name":"uint256","nodeType":"ElementaryTypeName","src":"552:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":386,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":385,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":382,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":373,"src":"580:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":380,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1454,"src":"569:4:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$1454_$","typeString":"type(library Math)"}},"id":381,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"574:5:2","memberName":"log10","nodeType":"MemberAccess","referencedDeclaration":1291,"src":"569:10:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":383,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"569:17:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":384,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"589:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"569:21:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"552:38:2"},{"assignments":[388],"declarations":[{"constant":false,"id":388,"mutability":"mutable","name":"buffer","nameLocation":"618:6:2","nodeType":"VariableDeclaration","scope":416,"src":"604:20:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":387,"name":"string","nodeType":"ElementaryTypeName","src":"604:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":393,"initialValue":{"arguments":[{"id":391,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":379,"src":"638:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":390,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"627:10:2","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":389,"name":"string","nodeType":"ElementaryTypeName","src":"631:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":392,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"627:18:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"604:41:2"},{"assignments":[395],"declarations":[{"constant":false,"id":395,"mutability":"mutable","name":"ptr","nameLocation":"667:3:2","nodeType":"VariableDeclaration","scope":416,"src":"659:11:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":394,"name":"uint256","nodeType":"ElementaryTypeName","src":"659:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":396,"nodeType":"VariableDeclarationStatement","src":"659:11:2"},{"AST":{"nodeType":"YulBlock","src":"740:67:2","statements":[{"nodeType":"YulAssignment","src":"758:35:2","value":{"arguments":[{"name":"buffer","nodeType":"YulIdentifier","src":"769:6:2"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"781:2:2","type":"","value":"32"},{"name":"length","nodeType":"YulIdentifier","src":"785:6:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"777:3:2"},"nodeType":"YulFunctionCall","src":"777:15:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"765:3:2"},"nodeType":"YulFunctionCall","src":"765:28:2"},"variableNames":[{"name":"ptr","nodeType":"YulIdentifier","src":"758:3:2"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":388,"isOffset":false,"isSlot":false,"src":"769:6:2","valueSize":1},{"declaration":379,"isOffset":false,"isSlot":false,"src":"785:6:2","valueSize":1},{"declaration":395,"isOffset":false,"isSlot":false,"src":"758:3:2","valueSize":1}],"id":397,"nodeType":"InlineAssembly","src":"731:76:2"},{"body":{"id":412,"nodeType":"Block","src":"833:267:2","statements":[{"expression":{"id":400,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"851:5:2","subExpression":{"id":399,"name":"ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":395,"src":"851:3:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":401,"nodeType":"ExpressionStatement","src":"851:5:2"},{"AST":{"nodeType":"YulBlock","src":"934:84:2","statements":[{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"964:3:2"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"978:5:2"},{"kind":"number","nodeType":"YulLiteral","src":"985:2:2","type":"","value":"10"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"974:3:2"},"nodeType":"YulFunctionCall","src":"974:14:2"},{"name":"_SYMBOLS","nodeType":"YulIdentifier","src":"990:8:2"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"969:4:2"},"nodeType":"YulFunctionCall","src":"969:30:2"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"956:7:2"},"nodeType":"YulFunctionCall","src":"956:44:2"},"nodeType":"YulExpressionStatement","src":"956:44:2"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":367,"isOffset":false,"isSlot":false,"src":"990:8:2","valueSize":1},{"declaration":395,"isOffset":false,"isSlot":false,"src":"964:3:2","valueSize":1},{"declaration":373,"isOffset":false,"isSlot":false,"src":"978:5:2","valueSize":1}],"id":402,"nodeType":"InlineAssembly","src":"925:93:2"},{"expression":{"id":405,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":403,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":373,"src":"1035:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":404,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1044:2:2","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"1035:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":406,"nodeType":"ExpressionStatement","src":"1035:11:2"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":409,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":407,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":373,"src":"1068:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":408,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1077:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1068:10:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":411,"nodeType":"IfStatement","src":"1064:21:2","trueBody":{"id":410,"nodeType":"Break","src":"1080:5:2"}}]},"condition":{"hexValue":"74727565","id":398,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"827:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"id":413,"nodeType":"WhileStatement","src":"820:280:2"},{"expression":{"id":414,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":388,"src":"1120:6:2","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":377,"id":415,"nodeType":"Return","src":"1113:13:2"}]}]},"documentation":{"id":371,"nodeType":"StructuredDocumentation","src":"352:90:2","text":" @dev Converts a `uint256` to its ASCII `string` decimal representation."},"id":418,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"456:8:2","nodeType":"FunctionDefinition","parameters":{"id":374,"nodeType":"ParameterList","parameters":[{"constant":false,"id":373,"mutability":"mutable","name":"value","nameLocation":"473:5:2","nodeType":"VariableDeclaration","scope":418,"src":"465:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":372,"name":"uint256","nodeType":"ElementaryTypeName","src":"465:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"464:15:2"},"returnParameters":{"id":377,"nodeType":"ParameterList","parameters":[{"constant":false,"id":376,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":418,"src":"503:13:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":375,"name":"string","nodeType":"ElementaryTypeName","src":"503:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"502:15:2"},"scope":588,"src":"447:696:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":445,"nodeType":"Block","src":"1313:103:2","statements":[{"expression":{"arguments":[{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":432,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":430,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":421,"src":"1354:5:2","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30","id":431,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1362:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1354:9:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"","id":434,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1372:2:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"id":435,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1354:20:2","trueExpression":{"hexValue":"2d","id":433,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1366:3:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_d3b8281179950f98149eefdb158d0e1acb56f56e8e343aa9fefafa7e36959561","typeString":"literal_string \"-\""},"value":"-"},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[{"arguments":[{"id":439,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":421,"src":"1400:5:2","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"expression":{"id":437,"name":"SignedMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1559,"src":"1385:10:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SignedMath_$1559_$","typeString":"type(library SignedMath)"}},"id":438,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1396:3:2","memberName":"abs","nodeType":"MemberAccess","referencedDeclaration":1558,"src":"1385:14:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$returns$_t_uint256_$","typeString":"function (int256) pure returns (uint256)"}},"id":440,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1385:21:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":436,"name":"toString","nodeType":"Identifier","overloadedDeclarations":[418,446],"referencedDeclaration":418,"src":"1376:8:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":441,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1376:31:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":428,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1337:3:2","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":429,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1341:12:2","memberName":"encodePacked","nodeType":"MemberAccess","src":"1337:16:2","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":442,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1337:71:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":427,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1330:6:2","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":426,"name":"string","nodeType":"ElementaryTypeName","src":"1330:6:2","typeDescriptions":{}}},"id":443,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1330:79:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":425,"id":444,"nodeType":"Return","src":"1323:86:2"}]},"documentation":{"id":419,"nodeType":"StructuredDocumentation","src":"1149:89:2","text":" @dev Converts a `int256` to its ASCII `string` decimal representation."},"id":446,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"1252:8:2","nodeType":"FunctionDefinition","parameters":{"id":422,"nodeType":"ParameterList","parameters":[{"constant":false,"id":421,"mutability":"mutable","name":"value","nameLocation":"1268:5:2","nodeType":"VariableDeclaration","scope":446,"src":"1261:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":420,"name":"int256","nodeType":"ElementaryTypeName","src":"1261:6:2","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1260:14:2"},"returnParameters":{"id":425,"nodeType":"ParameterList","parameters":[{"constant":false,"id":424,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":446,"src":"1298:13:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":423,"name":"string","nodeType":"ElementaryTypeName","src":"1298:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1297:15:2"},"scope":588,"src":"1243:173:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":465,"nodeType":"Block","src":"1595:100:2","statements":[{"id":464,"nodeType":"UncheckedBlock","src":"1605:84:2","statements":[{"expression":{"arguments":[{"id":455,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":449,"src":"1648:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":461,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":458,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":449,"src":"1667:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":456,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1454,"src":"1655:4:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$1454_$","typeString":"type(library Math)"}},"id":457,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1660:6:2","memberName":"log256","nodeType":"MemberAccess","referencedDeclaration":1414,"src":"1655:11:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":459,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1655:18:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":460,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1676:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1655:22:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":454,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[466,542,562],"referencedDeclaration":542,"src":"1636:11:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":462,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1636:42:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":453,"id":463,"nodeType":"Return","src":"1629:49:2"}]}]},"documentation":{"id":447,"nodeType":"StructuredDocumentation","src":"1422:94:2","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."},"id":466,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1530:11:2","nodeType":"FunctionDefinition","parameters":{"id":450,"nodeType":"ParameterList","parameters":[{"constant":false,"id":449,"mutability":"mutable","name":"value","nameLocation":"1550:5:2","nodeType":"VariableDeclaration","scope":466,"src":"1542:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":448,"name":"uint256","nodeType":"ElementaryTypeName","src":"1542:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1541:15:2"},"returnParameters":{"id":453,"nodeType":"ParameterList","parameters":[{"constant":false,"id":452,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":466,"src":"1580:13:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":451,"name":"string","nodeType":"ElementaryTypeName","src":"1580:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1579:15:2"},"scope":588,"src":"1521:174:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":541,"nodeType":"Block","src":"1908:347:2","statements":[{"assignments":[477],"declarations":[{"constant":false,"id":477,"mutability":"mutable","name":"buffer","nameLocation":"1931:6:2","nodeType":"VariableDeclaration","scope":541,"src":"1918:19:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":476,"name":"bytes","nodeType":"ElementaryTypeName","src":"1918:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":486,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":484,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":482,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":480,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1950:1:2","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":481,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":471,"src":"1954:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1950:10:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":483,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1963:1:2","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"1950:14:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":479,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1940:9:2","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":478,"name":"bytes","nodeType":"ElementaryTypeName","src":"1944:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":485,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1940:25:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1918:47:2"},{"expression":{"id":491,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":487,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":477,"src":"1975:6:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":489,"indexExpression":{"hexValue":"30","id":488,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1982:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1975:9:2","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":490,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1987:3:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"src":"1975:15:2","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":492,"nodeType":"ExpressionStatement","src":"1975:15:2"},{"expression":{"id":497,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":493,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":477,"src":"2000:6:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":495,"indexExpression":{"hexValue":"31","id":494,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2007:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2000:9:2","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"78","id":496,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2012:3:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83","typeString":"literal_string \"x\""},"value":"x"},"src":"2000:15:2","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":498,"nodeType":"ExpressionStatement","src":"2000:15:2"},{"body":{"id":527,"nodeType":"Block","src":"2070:83:2","statements":[{"expression":{"id":521,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":513,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":477,"src":"2084:6:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":515,"indexExpression":{"id":514,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":500,"src":"2091:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2084:9:2","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":516,"name":"_SYMBOLS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":367,"src":"2096:8:2","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"id":520,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":519,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":517,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":469,"src":"2105:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":518,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2113:3:2","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"2105:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2096:21:2","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"2084:33:2","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":522,"nodeType":"ExpressionStatement","src":"2084:33:2"},{"expression":{"id":525,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":523,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":469,"src":"2131:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":524,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2141:1:2","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"2131:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":526,"nodeType":"ExpressionStatement","src":"2131:11:2"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":509,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":507,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":500,"src":"2058:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":508,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2062:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2058:5:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":528,"initializationExpression":{"assignments":[500],"declarations":[{"constant":false,"id":500,"mutability":"mutable","name":"i","nameLocation":"2038:1:2","nodeType":"VariableDeclaration","scope":528,"src":"2030:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":499,"name":"uint256","nodeType":"ElementaryTypeName","src":"2030:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":506,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":505,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":503,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":501,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2042:1:2","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":502,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":471,"src":"2046:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2042:10:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":504,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2055:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2042:14:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2030:26:2"},"loopExpression":{"expression":{"id":511,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"2065:3:2","subExpression":{"id":510,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":500,"src":"2067:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":512,"nodeType":"ExpressionStatement","src":"2065:3:2"},"nodeType":"ForStatement","src":"2025:128:2"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":532,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":530,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":469,"src":"2170:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":531,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2179:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2170:10:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","id":533,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2182:34:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""},"value":"Strings: hex length insufficient"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""}],"id":529,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2162:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":534,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2162:55:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":535,"nodeType":"ExpressionStatement","src":"2162:55:2"},{"expression":{"arguments":[{"id":538,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":477,"src":"2241:6:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":537,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2234:6:2","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":536,"name":"string","nodeType":"ElementaryTypeName","src":"2234:6:2","typeDescriptions":{}}},"id":539,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2234:14:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":475,"id":540,"nodeType":"Return","src":"2227:21:2"}]},"documentation":{"id":467,"nodeType":"StructuredDocumentation","src":"1701:112:2","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."},"id":542,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1827:11:2","nodeType":"FunctionDefinition","parameters":{"id":472,"nodeType":"ParameterList","parameters":[{"constant":false,"id":469,"mutability":"mutable","name":"value","nameLocation":"1847:5:2","nodeType":"VariableDeclaration","scope":542,"src":"1839:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":468,"name":"uint256","nodeType":"ElementaryTypeName","src":"1839:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":471,"mutability":"mutable","name":"length","nameLocation":"1862:6:2","nodeType":"VariableDeclaration","scope":542,"src":"1854:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":470,"name":"uint256","nodeType":"ElementaryTypeName","src":"1854:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1838:31:2"},"returnParameters":{"id":475,"nodeType":"ParameterList","parameters":[{"constant":false,"id":474,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":542,"src":"1893:13:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":473,"name":"string","nodeType":"ElementaryTypeName","src":"1893:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1892:15:2"},"scope":588,"src":"1818:437:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":561,"nodeType":"Block","src":"2480:76:2","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":555,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":545,"src":"2525:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":554,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2517:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":553,"name":"uint160","nodeType":"ElementaryTypeName","src":"2517:7:2","typeDescriptions":{}}},"id":556,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2517:13:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":552,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2509:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":551,"name":"uint256","nodeType":"ElementaryTypeName","src":"2509:7:2","typeDescriptions":{}}},"id":557,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2509:22:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":558,"name":"_ADDRESS_LENGTH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":370,"src":"2533:15:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":550,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[466,542,562],"referencedDeclaration":542,"src":"2497:11:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":559,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2497:52:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":549,"id":560,"nodeType":"Return","src":"2490:59:2"}]},"documentation":{"id":543,"nodeType":"StructuredDocumentation","src":"2261:141:2","text":" @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation."},"id":562,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2416:11:2","nodeType":"FunctionDefinition","parameters":{"id":546,"nodeType":"ParameterList","parameters":[{"constant":false,"id":545,"mutability":"mutable","name":"addr","nameLocation":"2436:4:2","nodeType":"VariableDeclaration","scope":562,"src":"2428:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":544,"name":"address","nodeType":"ElementaryTypeName","src":"2428:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2427:14:2"},"returnParameters":{"id":549,"nodeType":"ParameterList","parameters":[{"constant":false,"id":548,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":562,"src":"2465:13:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":547,"name":"string","nodeType":"ElementaryTypeName","src":"2465:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2464:15:2"},"scope":588,"src":"2407:149:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":586,"nodeType":"Block","src":"2711:66:2","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":584,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":575,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":565,"src":"2744:1:2","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":574,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2738:5:2","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":573,"name":"bytes","nodeType":"ElementaryTypeName","src":"2738:5:2","typeDescriptions":{}}},"id":576,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2738:8:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":572,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2728:9:2","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":577,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2728:19:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"arguments":[{"id":581,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":567,"src":"2767:1:2","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":580,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2761:5:2","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":579,"name":"bytes","nodeType":"ElementaryTypeName","src":"2761:5:2","typeDescriptions":{}}},"id":582,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2761:8:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":578,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2751:9:2","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":583,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2751:19:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2728:42:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":571,"id":585,"nodeType":"Return","src":"2721:49:2"}]},"documentation":{"id":563,"nodeType":"StructuredDocumentation","src":"2562:66:2","text":" @dev Returns true if the two strings are equal."},"id":587,"implemented":true,"kind":"function","modifiers":[],"name":"equal","nameLocation":"2642:5:2","nodeType":"FunctionDefinition","parameters":{"id":568,"nodeType":"ParameterList","parameters":[{"constant":false,"id":565,"mutability":"mutable","name":"a","nameLocation":"2662:1:2","nodeType":"VariableDeclaration","scope":587,"src":"2648:15:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":564,"name":"string","nodeType":"ElementaryTypeName","src":"2648:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":567,"mutability":"mutable","name":"b","nameLocation":"2679:1:2","nodeType":"VariableDeclaration","scope":587,"src":"2665:15:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":566,"name":"string","nodeType":"ElementaryTypeName","src":"2665:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2647:34:2"},"returnParameters":{"id":571,"nodeType":"ParameterList","parameters":[{"constant":false,"id":570,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":587,"src":"2705:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":569,"name":"bool","nodeType":"ElementaryTypeName","src":"2705:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2704:6:2"},"scope":588,"src":"2633:144:2","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":589,"src":"220:2559:2","usedErrors":[]}],"src":"101:2679:2"},"id":2},"@openzeppelin/contracts/utils/math/Math.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","exportedSymbols":{"Math":[1454]},"id":1455,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":590,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"103:23:3"},{"abstract":false,"baseContracts":[],"canonicalName":"Math","contractDependencies":[],"contractKind":"library","documentation":{"id":591,"nodeType":"StructuredDocumentation","src":"128:73:3","text":" @dev Standard math utilities missing in the Solidity language."},"fullyImplemented":true,"id":1454,"linearizedBaseContracts":[1454],"name":"Math","nameLocation":"210:4:3","nodeType":"ContractDefinition","nodes":[{"canonicalName":"Math.Rounding","id":595,"members":[{"id":592,"name":"Down","nameLocation":"245:4:3","nodeType":"EnumValue","src":"245:4:3"},{"id":593,"name":"Up","nameLocation":"287:2:3","nodeType":"EnumValue","src":"287:2:3"},{"id":594,"name":"Zero","nameLocation":"318:4:3","nodeType":"EnumValue","src":"318:4:3"}],"name":"Rounding","nameLocation":"226:8:3","nodeType":"EnumDefinition","src":"221:122:3"},{"body":{"id":612,"nodeType":"Block","src":"480:37:3","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":607,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":605,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":598,"src":"497:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":606,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":600,"src":"501:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"497:5:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":609,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":600,"src":"509:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":610,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"497:13:3","trueExpression":{"id":608,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":598,"src":"505:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":604,"id":611,"nodeType":"Return","src":"490:20:3"}]},"documentation":{"id":596,"nodeType":"StructuredDocumentation","src":"349:59:3","text":" @dev Returns the largest of two numbers."},"id":613,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"422:3:3","nodeType":"FunctionDefinition","parameters":{"id":601,"nodeType":"ParameterList","parameters":[{"constant":false,"id":598,"mutability":"mutable","name":"a","nameLocation":"434:1:3","nodeType":"VariableDeclaration","scope":613,"src":"426:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":597,"name":"uint256","nodeType":"ElementaryTypeName","src":"426:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":600,"mutability":"mutable","name":"b","nameLocation":"445:1:3","nodeType":"VariableDeclaration","scope":613,"src":"437:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":599,"name":"uint256","nodeType":"ElementaryTypeName","src":"437:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"425:22:3"},"returnParameters":{"id":604,"nodeType":"ParameterList","parameters":[{"constant":false,"id":603,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":613,"src":"471:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":602,"name":"uint256","nodeType":"ElementaryTypeName","src":"471:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"470:9:3"},"scope":1454,"src":"413:104:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":630,"nodeType":"Block","src":"655:37:3","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":625,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":623,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":616,"src":"672:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":624,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":618,"src":"676:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"672:5:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":627,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":618,"src":"684:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":628,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"672:13:3","trueExpression":{"id":626,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":616,"src":"680:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":622,"id":629,"nodeType":"Return","src":"665:20:3"}]},"documentation":{"id":614,"nodeType":"StructuredDocumentation","src":"523:60:3","text":" @dev Returns the smallest of two numbers."},"id":631,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"597:3:3","nodeType":"FunctionDefinition","parameters":{"id":619,"nodeType":"ParameterList","parameters":[{"constant":false,"id":616,"mutability":"mutable","name":"a","nameLocation":"609:1:3","nodeType":"VariableDeclaration","scope":631,"src":"601:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":615,"name":"uint256","nodeType":"ElementaryTypeName","src":"601:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":618,"mutability":"mutable","name":"b","nameLocation":"620:1:3","nodeType":"VariableDeclaration","scope":631,"src":"612:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":617,"name":"uint256","nodeType":"ElementaryTypeName","src":"612:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"600:22:3"},"returnParameters":{"id":622,"nodeType":"ParameterList","parameters":[{"constant":false,"id":621,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":631,"src":"646:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":620,"name":"uint256","nodeType":"ElementaryTypeName","src":"646:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"645:9:3"},"scope":1454,"src":"588:104:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":653,"nodeType":"Block","src":"876:82:3","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":651,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":643,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":641,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":634,"src":"931:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":642,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":636,"src":"935:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"931:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":644,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"930:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":650,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":647,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":645,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":634,"src":"941:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":646,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":636,"src":"945:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"941:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":648,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"940:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":649,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"950:1:3","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"940:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"930:21:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":640,"id":652,"nodeType":"Return","src":"923:28:3"}]},"documentation":{"id":632,"nodeType":"StructuredDocumentation","src":"698:102:3","text":" @dev Returns the average of two numbers. The result is rounded towards\n zero."},"id":654,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"814:7:3","nodeType":"FunctionDefinition","parameters":{"id":637,"nodeType":"ParameterList","parameters":[{"constant":false,"id":634,"mutability":"mutable","name":"a","nameLocation":"830:1:3","nodeType":"VariableDeclaration","scope":654,"src":"822:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":633,"name":"uint256","nodeType":"ElementaryTypeName","src":"822:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":636,"mutability":"mutable","name":"b","nameLocation":"841:1:3","nodeType":"VariableDeclaration","scope":654,"src":"833:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":635,"name":"uint256","nodeType":"ElementaryTypeName","src":"833:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"821:22:3"},"returnParameters":{"id":640,"nodeType":"ParameterList","parameters":[{"constant":false,"id":639,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":654,"src":"867:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":638,"name":"uint256","nodeType":"ElementaryTypeName","src":"867:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"866:9:3"},"scope":1454,"src":"805:153:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":678,"nodeType":"Block","src":"1228:123:3","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":666,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":664,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":657,"src":"1316:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":665,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1321:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1316:6:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":675,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":673,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":670,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":668,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":657,"src":"1330:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":669,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1334:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1330:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":671,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1329:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":672,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":659,"src":"1339:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1329:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":674,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1343:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1329:15:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":676,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1316:28:3","trueExpression":{"hexValue":"30","id":667,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1325:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":663,"id":677,"nodeType":"Return","src":"1309:35:3"}]},"documentation":{"id":655,"nodeType":"StructuredDocumentation","src":"964:188:3","text":" @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds up instead\n of rounding down."},"id":679,"implemented":true,"kind":"function","modifiers":[],"name":"ceilDiv","nameLocation":"1166:7:3","nodeType":"FunctionDefinition","parameters":{"id":660,"nodeType":"ParameterList","parameters":[{"constant":false,"id":657,"mutability":"mutable","name":"a","nameLocation":"1182:1:3","nodeType":"VariableDeclaration","scope":679,"src":"1174:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":656,"name":"uint256","nodeType":"ElementaryTypeName","src":"1174:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":659,"mutability":"mutable","name":"b","nameLocation":"1193:1:3","nodeType":"VariableDeclaration","scope":679,"src":"1185:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":658,"name":"uint256","nodeType":"ElementaryTypeName","src":"1185:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1173:22:3"},"returnParameters":{"id":663,"nodeType":"ParameterList","parameters":[{"constant":false,"id":662,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":679,"src":"1219:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":661,"name":"uint256","nodeType":"ElementaryTypeName","src":"1219:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1218:9:3"},"scope":1454,"src":"1157:194:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":801,"nodeType":"Block","src":"1765:4115:3","statements":[{"id":800,"nodeType":"UncheckedBlock","src":"1775:4099:3","statements":[{"assignments":[692],"declarations":[{"constant":false,"id":692,"mutability":"mutable","name":"prod0","nameLocation":"2104:5:3","nodeType":"VariableDeclaration","scope":800,"src":"2096:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":691,"name":"uint256","nodeType":"ElementaryTypeName","src":"2096:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":693,"nodeType":"VariableDeclarationStatement","src":"2096:13:3"},{"assignments":[695],"declarations":[{"constant":false,"id":695,"mutability":"mutable","name":"prod1","nameLocation":"2176:5:3","nodeType":"VariableDeclaration","scope":800,"src":"2168:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":694,"name":"uint256","nodeType":"ElementaryTypeName","src":"2168:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":696,"nodeType":"VariableDeclarationStatement","src":"2168:13:3"},{"AST":{"nodeType":"YulBlock","src":"2248:157:3","statements":[{"nodeType":"YulVariableDeclaration","src":"2266:30:3","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2283:1:3"},{"name":"y","nodeType":"YulIdentifier","src":"2286:1:3"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2293:1:3","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2289:3:3"},"nodeType":"YulFunctionCall","src":"2289:6:3"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"2276:6:3"},"nodeType":"YulFunctionCall","src":"2276:20:3"},"variables":[{"name":"mm","nodeType":"YulTypedName","src":"2270:2:3","type":""}]},{"nodeType":"YulAssignment","src":"2313:18:3","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2326:1:3"},{"name":"y","nodeType":"YulIdentifier","src":"2329:1:3"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"2322:3:3"},"nodeType":"YulFunctionCall","src":"2322:9:3"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"2313:5:3"}]},{"nodeType":"YulAssignment","src":"2348:43:3","value":{"arguments":[{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2365:2:3"},{"name":"prod0","nodeType":"YulIdentifier","src":"2369:5:3"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2361:3:3"},"nodeType":"YulFunctionCall","src":"2361:14:3"},{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2380:2:3"},{"name":"prod0","nodeType":"YulIdentifier","src":"2384:5:3"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2377:2:3"},"nodeType":"YulFunctionCall","src":"2377:13:3"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2357:3:3"},"nodeType":"YulFunctionCall","src":"2357:34:3"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"2348:5:3"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":692,"isOffset":false,"isSlot":false,"src":"2313:5:3","valueSize":1},{"declaration":692,"isOffset":false,"isSlot":false,"src":"2369:5:3","valueSize":1},{"declaration":692,"isOffset":false,"isSlot":false,"src":"2384:5:3","valueSize":1},{"declaration":695,"isOffset":false,"isSlot":false,"src":"2348:5:3","valueSize":1},{"declaration":682,"isOffset":false,"isSlot":false,"src":"2283:1:3","valueSize":1},{"declaration":682,"isOffset":false,"isSlot":false,"src":"2326:1:3","valueSize":1},{"declaration":684,"isOffset":false,"isSlot":false,"src":"2286:1:3","valueSize":1},{"declaration":684,"isOffset":false,"isSlot":false,"src":"2329:1:3","valueSize":1}],"id":697,"nodeType":"InlineAssembly","src":"2239:166:3"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":700,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":698,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":695,"src":"2486:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":699,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2495:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2486:10:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":706,"nodeType":"IfStatement","src":"2482:368:3","trueBody":{"id":705,"nodeType":"Block","src":"2498:352:3","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":703,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":701,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":692,"src":"2816:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":702,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":686,"src":"2824:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2816:19:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":690,"id":704,"nodeType":"Return","src":"2809:26:3"}]}},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":710,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":708,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":686,"src":"2960:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":709,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":695,"src":"2974:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2960:19:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d6174683a206d756c446976206f766572666c6f77","id":711,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2981:23:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_d87093691d63b122ac2c14d1b11554b287e2431cf2b03550b3be7cffb0f86851","typeString":"literal_string \"Math: mulDiv overflow\""},"value":"Math: mulDiv overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d87093691d63b122ac2c14d1b11554b287e2431cf2b03550b3be7cffb0f86851","typeString":"literal_string \"Math: mulDiv overflow\""}],"id":707,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2952:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":712,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2952:53:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":713,"nodeType":"ExpressionStatement","src":"2952:53:3"},{"assignments":[715],"declarations":[{"constant":false,"id":715,"mutability":"mutable","name":"remainder","nameLocation":"3269:9:3","nodeType":"VariableDeclaration","scope":800,"src":"3261:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":714,"name":"uint256","nodeType":"ElementaryTypeName","src":"3261:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":716,"nodeType":"VariableDeclarationStatement","src":"3261:17:3"},{"AST":{"nodeType":"YulBlock","src":"3301:291:3","statements":[{"nodeType":"YulAssignment","src":"3370:38:3","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"3390:1:3"},{"name":"y","nodeType":"YulIdentifier","src":"3393:1:3"},{"name":"denominator","nodeType":"YulIdentifier","src":"3396:11:3"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"3383:6:3"},"nodeType":"YulFunctionCall","src":"3383:25:3"},"variableNames":[{"name":"remainder","nodeType":"YulIdentifier","src":"3370:9:3"}]},{"nodeType":"YulAssignment","src":"3490:41:3","value":{"arguments":[{"name":"prod1","nodeType":"YulIdentifier","src":"3503:5:3"},{"arguments":[{"name":"remainder","nodeType":"YulIdentifier","src":"3513:9:3"},{"name":"prod0","nodeType":"YulIdentifier","src":"3524:5:3"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3510:2:3"},"nodeType":"YulFunctionCall","src":"3510:20:3"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3499:3:3"},"nodeType":"YulFunctionCall","src":"3499:32:3"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"3490:5:3"}]},{"nodeType":"YulAssignment","src":"3548:30:3","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"3561:5:3"},{"name":"remainder","nodeType":"YulIdentifier","src":"3568:9:3"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3557:3:3"},"nodeType":"YulFunctionCall","src":"3557:21:3"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"3548:5:3"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":686,"isOffset":false,"isSlot":false,"src":"3396:11:3","valueSize":1},{"declaration":692,"isOffset":false,"isSlot":false,"src":"3524:5:3","valueSize":1},{"declaration":692,"isOffset":false,"isSlot":false,"src":"3548:5:3","valueSize":1},{"declaration":692,"isOffset":false,"isSlot":false,"src":"3561:5:3","valueSize":1},{"declaration":695,"isOffset":false,"isSlot":false,"src":"3490:5:3","valueSize":1},{"declaration":695,"isOffset":false,"isSlot":false,"src":"3503:5:3","valueSize":1},{"declaration":715,"isOffset":false,"isSlot":false,"src":"3370:9:3","valueSize":1},{"declaration":715,"isOffset":false,"isSlot":false,"src":"3513:9:3","valueSize":1},{"declaration":715,"isOffset":false,"isSlot":false,"src":"3568:9:3","valueSize":1},{"declaration":682,"isOffset":false,"isSlot":false,"src":"3390:1:3","valueSize":1},{"declaration":684,"isOffset":false,"isSlot":false,"src":"3393:1:3","valueSize":1}],"id":717,"nodeType":"InlineAssembly","src":"3292:300:3"},{"assignments":[719],"declarations":[{"constant":false,"id":719,"mutability":"mutable","name":"twos","nameLocation":"3907:4:3","nodeType":"VariableDeclaration","scope":800,"src":"3899:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":718,"name":"uint256","nodeType":"ElementaryTypeName","src":"3899:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":727,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":726,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":720,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":686,"src":"3914:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":724,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":722,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"~","prefix":true,"src":"3929:12:3","subExpression":{"id":721,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":686,"src":"3930:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":723,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3944:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3929:16:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":725,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3928:18:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3914:32:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3899:47:3"},{"AST":{"nodeType":"YulBlock","src":"3969:362:3","statements":[{"nodeType":"YulAssignment","src":"4034:37:3","value":{"arguments":[{"name":"denominator","nodeType":"YulIdentifier","src":"4053:11:3"},{"name":"twos","nodeType":"YulIdentifier","src":"4066:4:3"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4049:3:3"},"nodeType":"YulFunctionCall","src":"4049:22:3"},"variableNames":[{"name":"denominator","nodeType":"YulIdentifier","src":"4034:11:3"}]},{"nodeType":"YulAssignment","src":"4138:25:3","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"4151:5:3"},{"name":"twos","nodeType":"YulIdentifier","src":"4158:4:3"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4147:3:3"},"nodeType":"YulFunctionCall","src":"4147:16:3"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"4138:5:3"}]},{"nodeType":"YulAssignment","src":"4278:39:3","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4298:1:3","type":"","value":"0"},{"name":"twos","nodeType":"YulIdentifier","src":"4301:4:3"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4294:3:3"},"nodeType":"YulFunctionCall","src":"4294:12:3"},{"name":"twos","nodeType":"YulIdentifier","src":"4308:4:3"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4290:3:3"},"nodeType":"YulFunctionCall","src":"4290:23:3"},{"kind":"number","nodeType":"YulLiteral","src":"4315:1:3","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4286:3:3"},"nodeType":"YulFunctionCall","src":"4286:31:3"},"variableNames":[{"name":"twos","nodeType":"YulIdentifier","src":"4278:4:3"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":686,"isOffset":false,"isSlot":false,"src":"4034:11:3","valueSize":1},{"declaration":686,"isOffset":false,"isSlot":false,"src":"4053:11:3","valueSize":1},{"declaration":692,"isOffset":false,"isSlot":false,"src":"4138:5:3","valueSize":1},{"declaration":692,"isOffset":false,"isSlot":false,"src":"4151:5:3","valueSize":1},{"declaration":719,"isOffset":false,"isSlot":false,"src":"4066:4:3","valueSize":1},{"declaration":719,"isOffset":false,"isSlot":false,"src":"4158:4:3","valueSize":1},{"declaration":719,"isOffset":false,"isSlot":false,"src":"4278:4:3","valueSize":1},{"declaration":719,"isOffset":false,"isSlot":false,"src":"4301:4:3","valueSize":1},{"declaration":719,"isOffset":false,"isSlot":false,"src":"4308:4:3","valueSize":1}],"id":728,"nodeType":"InlineAssembly","src":"3960:371:3"},{"expression":{"id":733,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":729,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":692,"src":"4397:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":732,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":730,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":695,"src":"4406:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":731,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":719,"src":"4414:4:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4406:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4397:21:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":734,"nodeType":"ExpressionStatement","src":"4397:21:3"},{"assignments":[736],"declarations":[{"constant":false,"id":736,"mutability":"mutable","name":"inverse","nameLocation":"4744:7:3","nodeType":"VariableDeclaration","scope":800,"src":"4736:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":735,"name":"uint256","nodeType":"ElementaryTypeName","src":"4736:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":743,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":742,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":739,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":737,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4755:1:3","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":738,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":686,"src":"4759:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4755:15:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":740,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4754:17:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":741,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4774:1:3","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"4754:21:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4736:39:3"},{"expression":{"id":750,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":744,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":736,"src":"4992:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":749,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":745,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5003:1:3","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":748,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":746,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":686,"src":"5007:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":747,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":736,"src":"5021:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5007:21:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5003:25:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4992:36:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":751,"nodeType":"ExpressionStatement","src":"4992:36:3"},{"expression":{"id":758,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":752,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":736,"src":"5061:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":757,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":753,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5072:1:3","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":756,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":754,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":686,"src":"5076:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":755,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":736,"src":"5090:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5076:21:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5072:25:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5061:36:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":759,"nodeType":"ExpressionStatement","src":"5061:36:3"},{"expression":{"id":766,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":760,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":736,"src":"5131:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":765,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":761,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5142:1:3","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":764,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":762,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":686,"src":"5146:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":763,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":736,"src":"5160:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5146:21:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5142:25:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5131:36:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":767,"nodeType":"ExpressionStatement","src":"5131:36:3"},{"expression":{"id":774,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":768,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":736,"src":"5201:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":773,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":769,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5212:1:3","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":772,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":770,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":686,"src":"5216:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":771,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":736,"src":"5230:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5216:21:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5212:25:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5201:36:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":775,"nodeType":"ExpressionStatement","src":"5201:36:3"},{"expression":{"id":782,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":776,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":736,"src":"5271:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":781,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":777,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5282:1:3","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":780,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":778,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":686,"src":"5286:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":779,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":736,"src":"5300:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5286:21:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5282:25:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5271:36:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":783,"nodeType":"ExpressionStatement","src":"5271:36:3"},{"expression":{"id":790,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":784,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":736,"src":"5342:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":789,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":785,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5353:1:3","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":788,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":786,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":686,"src":"5357:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":787,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":736,"src":"5371:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5357:21:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5353:25:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5342:36:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":791,"nodeType":"ExpressionStatement","src":"5342:36:3"},{"expression":{"id":796,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":792,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":689,"src":"5812:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":795,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":793,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":692,"src":"5821:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":794,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":736,"src":"5829:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5821:15:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5812:24:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":797,"nodeType":"ExpressionStatement","src":"5812:24:3"},{"expression":{"id":798,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":689,"src":"5857:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":690,"id":799,"nodeType":"Return","src":"5850:13:3"}]}]},"documentation":{"id":680,"nodeType":"StructuredDocumentation","src":"1357:305:3","text":" @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n with further edits by Uniswap Labs also under MIT license."},"id":802,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"1676:6:3","nodeType":"FunctionDefinition","parameters":{"id":687,"nodeType":"ParameterList","parameters":[{"constant":false,"id":682,"mutability":"mutable","name":"x","nameLocation":"1691:1:3","nodeType":"VariableDeclaration","scope":802,"src":"1683:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":681,"name":"uint256","nodeType":"ElementaryTypeName","src":"1683:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":684,"mutability":"mutable","name":"y","nameLocation":"1702:1:3","nodeType":"VariableDeclaration","scope":802,"src":"1694:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":683,"name":"uint256","nodeType":"ElementaryTypeName","src":"1694:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":686,"mutability":"mutable","name":"denominator","nameLocation":"1713:11:3","nodeType":"VariableDeclaration","scope":802,"src":"1705:19:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":685,"name":"uint256","nodeType":"ElementaryTypeName","src":"1705:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1682:43:3"},"returnParameters":{"id":690,"nodeType":"ParameterList","parameters":[{"constant":false,"id":689,"mutability":"mutable","name":"result","nameLocation":"1757:6:3","nodeType":"VariableDeclaration","scope":802,"src":"1749:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":688,"name":"uint256","nodeType":"ElementaryTypeName","src":"1749:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1748:16:3"},"scope":1454,"src":"1667:4213:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":845,"nodeType":"Block","src":"6122:189:3","statements":[{"assignments":[818],"declarations":[{"constant":false,"id":818,"mutability":"mutable","name":"result","nameLocation":"6140:6:3","nodeType":"VariableDeclaration","scope":845,"src":"6132:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":817,"name":"uint256","nodeType":"ElementaryTypeName","src":"6132:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":824,"initialValue":{"arguments":[{"id":820,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":805,"src":"6156:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":821,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":807,"src":"6159:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":822,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":809,"src":"6162:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":819,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[802,846],"referencedDeclaration":802,"src":"6149:6:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":823,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6149:25:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6132:42:3"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":836,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$595","typeString":"enum Math.Rounding"},"id":828,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":825,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":812,"src":"6188:8:3","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$595","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":826,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":595,"src":"6200:8:3","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$595_$","typeString":"type(enum Math.Rounding)"}},"id":827,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6209:2:3","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":593,"src":"6200:11:3","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$595","typeString":"enum Math.Rounding"}},"src":"6188:23:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":835,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":830,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":805,"src":"6222:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":831,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":807,"src":"6225:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":832,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":809,"src":"6228:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":829,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"6215:6:3","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":833,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6215:25:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":834,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6243:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6215:29:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6188:56:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":842,"nodeType":"IfStatement","src":"6184:98:3","trueBody":{"id":841,"nodeType":"Block","src":"6246:36:3","statements":[{"expression":{"id":839,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":837,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":818,"src":"6260:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":838,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6270:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6260:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":840,"nodeType":"ExpressionStatement","src":"6260:11:3"}]}},{"expression":{"id":843,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":818,"src":"6298:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":816,"id":844,"nodeType":"Return","src":"6291:13:3"}]},"documentation":{"id":803,"nodeType":"StructuredDocumentation","src":"5886:121:3","text":" @notice Calculates x * y / denominator with full precision, following the selected rounding direction."},"id":846,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"6021:6:3","nodeType":"FunctionDefinition","parameters":{"id":813,"nodeType":"ParameterList","parameters":[{"constant":false,"id":805,"mutability":"mutable","name":"x","nameLocation":"6036:1:3","nodeType":"VariableDeclaration","scope":846,"src":"6028:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":804,"name":"uint256","nodeType":"ElementaryTypeName","src":"6028:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":807,"mutability":"mutable","name":"y","nameLocation":"6047:1:3","nodeType":"VariableDeclaration","scope":846,"src":"6039:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":806,"name":"uint256","nodeType":"ElementaryTypeName","src":"6039:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":809,"mutability":"mutable","name":"denominator","nameLocation":"6058:11:3","nodeType":"VariableDeclaration","scope":846,"src":"6050:19:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":808,"name":"uint256","nodeType":"ElementaryTypeName","src":"6050:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":812,"mutability":"mutable","name":"rounding","nameLocation":"6080:8:3","nodeType":"VariableDeclaration","scope":846,"src":"6071:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$595","typeString":"enum Math.Rounding"},"typeName":{"id":811,"nodeType":"UserDefinedTypeName","pathNode":{"id":810,"name":"Rounding","nameLocations":["6071:8:3"],"nodeType":"IdentifierPath","referencedDeclaration":595,"src":"6071:8:3"},"referencedDeclaration":595,"src":"6071:8:3","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$595","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"6027:62:3"},"returnParameters":{"id":816,"nodeType":"ParameterList","parameters":[{"constant":false,"id":815,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":846,"src":"6113:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":814,"name":"uint256","nodeType":"ElementaryTypeName","src":"6113:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6112:9:3"},"scope":1454,"src":"6012:299:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":957,"nodeType":"Block","src":"6587:1585:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":856,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":854,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":849,"src":"6601:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":855,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6606:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6601:6:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":860,"nodeType":"IfStatement","src":"6597:45:3","trueBody":{"id":859,"nodeType":"Block","src":"6609:33:3","statements":[{"expression":{"hexValue":"30","id":857,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6630:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":853,"id":858,"nodeType":"Return","src":"6623:8:3"}]}},{"assignments":[862],"declarations":[{"constant":false,"id":862,"mutability":"mutable","name":"result","nameLocation":"7329:6:3","nodeType":"VariableDeclaration","scope":957,"src":"7321:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":861,"name":"uint256","nodeType":"ElementaryTypeName","src":"7321:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":871,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":870,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":863,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7338:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":868,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":865,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":849,"src":"7349:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":864,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[1126,1162],"referencedDeclaration":1126,"src":"7344:4:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":866,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7344:7:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":867,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7355:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7344:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":869,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7343:14:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7338:19:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7321:36:3"},{"id":956,"nodeType":"UncheckedBlock","src":"7758:408:3","statements":[{"expression":{"id":881,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":872,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":862,"src":"7782:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":880,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":877,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":873,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":862,"src":"7792:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":876,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":874,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":849,"src":"7801:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":875,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":862,"src":"7805:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7801:10:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7792:19:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":878,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7791:21:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":879,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7816:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7791:26:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7782:35:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":882,"nodeType":"ExpressionStatement","src":"7782:35:3"},{"expression":{"id":892,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":883,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":862,"src":"7831:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":891,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":888,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":884,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":862,"src":"7841:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":887,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":885,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":849,"src":"7850:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":886,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":862,"src":"7854:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7850:10:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7841:19:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":889,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7840:21:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":890,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7865:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7840:26:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7831:35:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":893,"nodeType":"ExpressionStatement","src":"7831:35:3"},{"expression":{"id":903,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":894,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":862,"src":"7880:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":902,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":899,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":895,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":862,"src":"7890:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":898,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":896,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":849,"src":"7899:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":897,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":862,"src":"7903:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7899:10:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7890:19:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":900,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7889:21:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":901,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7914:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7889:26:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7880:35:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":904,"nodeType":"ExpressionStatement","src":"7880:35:3"},{"expression":{"id":914,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":905,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":862,"src":"7929:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":913,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":910,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":906,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":862,"src":"7939:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":909,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":907,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":849,"src":"7948:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":908,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":862,"src":"7952:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7948:10:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7939:19:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":911,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7938:21:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":912,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7963:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7938:26:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7929:35:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":915,"nodeType":"ExpressionStatement","src":"7929:35:3"},{"expression":{"id":925,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":916,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":862,"src":"7978:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":924,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":921,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":917,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":862,"src":"7988:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":920,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":918,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":849,"src":"7997:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":919,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":862,"src":"8001:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7997:10:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7988:19:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":922,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7987:21:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":923,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8012:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7987:26:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7978:35:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":926,"nodeType":"ExpressionStatement","src":"7978:35:3"},{"expression":{"id":936,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":927,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":862,"src":"8027:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":935,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":932,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":928,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":862,"src":"8037:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":931,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":929,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":849,"src":"8046:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":930,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":862,"src":"8050:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8046:10:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8037:19:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":933,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8036:21:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":934,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8061:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8036:26:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8027:35:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":937,"nodeType":"ExpressionStatement","src":"8027:35:3"},{"expression":{"id":947,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":938,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":862,"src":"8076:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":946,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":943,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":939,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":862,"src":"8086:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":942,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":940,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":849,"src":"8095:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":941,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":862,"src":"8099:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8095:10:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8086:19:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":944,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8085:21:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":945,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8110:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8085:26:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8076:35:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":948,"nodeType":"ExpressionStatement","src":"8076:35:3"},{"expression":{"arguments":[{"id":950,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":862,"src":"8136:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":953,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":951,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":849,"src":"8144:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":952,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":862,"src":"8148:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8144:10:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":949,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":631,"src":"8132:3:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":954,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8132:23:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":853,"id":955,"nodeType":"Return","src":"8125:30:3"}]}]},"documentation":{"id":847,"nodeType":"StructuredDocumentation","src":"6317:208:3","text":" @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."},"id":958,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"6539:4:3","nodeType":"FunctionDefinition","parameters":{"id":850,"nodeType":"ParameterList","parameters":[{"constant":false,"id":849,"mutability":"mutable","name":"a","nameLocation":"6552:1:3","nodeType":"VariableDeclaration","scope":958,"src":"6544:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":848,"name":"uint256","nodeType":"ElementaryTypeName","src":"6544:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6543:11:3"},"returnParameters":{"id":853,"nodeType":"ParameterList","parameters":[{"constant":false,"id":852,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":958,"src":"6578:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":851,"name":"uint256","nodeType":"ElementaryTypeName","src":"6578:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6577:9:3"},"scope":1454,"src":"6530:1642:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":993,"nodeType":"Block","src":"8348:161:3","statements":[{"id":992,"nodeType":"UncheckedBlock","src":"8358:145:3","statements":[{"assignments":[970],"declarations":[{"constant":false,"id":970,"mutability":"mutable","name":"result","nameLocation":"8390:6:3","nodeType":"VariableDeclaration","scope":992,"src":"8382:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":969,"name":"uint256","nodeType":"ElementaryTypeName","src":"8382:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":974,"initialValue":{"arguments":[{"id":972,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":961,"src":"8404:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":971,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[958,994],"referencedDeclaration":958,"src":"8399:4:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":973,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8399:7:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8382:24:3"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":990,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":975,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":970,"src":"8427:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":985,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$595","typeString":"enum Math.Rounding"},"id":979,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":976,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":964,"src":"8437:8:3","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$595","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":977,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":595,"src":"8449:8:3","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$595_$","typeString":"type(enum Math.Rounding)"}},"id":978,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8458:2:3","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":593,"src":"8449:11:3","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$595","typeString":"enum Math.Rounding"}},"src":"8437:23:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":984,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":982,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":980,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":970,"src":"8464:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":981,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":970,"src":"8473:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8464:15:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":983,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":961,"src":"8482:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8464:19:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8437:46:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":987,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8490:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":988,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8437:54:3","trueExpression":{"hexValue":"31","id":986,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8486:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":989,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8436:56:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"8427:65:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":968,"id":991,"nodeType":"Return","src":"8420:72:3"}]}]},"documentation":{"id":959,"nodeType":"StructuredDocumentation","src":"8178:89:3","text":" @notice Calculates sqrt(a), following the selected rounding direction."},"id":994,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"8281:4:3","nodeType":"FunctionDefinition","parameters":{"id":965,"nodeType":"ParameterList","parameters":[{"constant":false,"id":961,"mutability":"mutable","name":"a","nameLocation":"8294:1:3","nodeType":"VariableDeclaration","scope":994,"src":"8286:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":960,"name":"uint256","nodeType":"ElementaryTypeName","src":"8286:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":964,"mutability":"mutable","name":"rounding","nameLocation":"8306:8:3","nodeType":"VariableDeclaration","scope":994,"src":"8297:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$595","typeString":"enum Math.Rounding"},"typeName":{"id":963,"nodeType":"UserDefinedTypeName","pathNode":{"id":962,"name":"Rounding","nameLocations":["8297:8:3"],"nodeType":"IdentifierPath","referencedDeclaration":595,"src":"8297:8:3"},"referencedDeclaration":595,"src":"8297:8:3","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$595","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"8285:30:3"},"returnParameters":{"id":968,"nodeType":"ParameterList","parameters":[{"constant":false,"id":967,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":994,"src":"8339:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":966,"name":"uint256","nodeType":"ElementaryTypeName","src":"8339:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8338:9:3"},"scope":1454,"src":"8272:237:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1125,"nodeType":"Block","src":"8694:922:3","statements":[{"assignments":[1003],"declarations":[{"constant":false,"id":1003,"mutability":"mutable","name":"result","nameLocation":"8712:6:3","nodeType":"VariableDeclaration","scope":1125,"src":"8704:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1002,"name":"uint256","nodeType":"ElementaryTypeName","src":"8704:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1005,"initialValue":{"hexValue":"30","id":1004,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8721:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8704:18:3"},{"id":1122,"nodeType":"UncheckedBlock","src":"8732:855:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1010,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1008,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1006,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":997,"src":"8760:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":1007,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8769:3:3","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8760:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1009,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8775:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8760:16:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1020,"nodeType":"IfStatement","src":"8756:99:3","trueBody":{"id":1019,"nodeType":"Block","src":"8778:77:3","statements":[{"expression":{"id":1013,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1011,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":997,"src":"8796:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":1012,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8806:3:3","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8796:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1014,"nodeType":"ExpressionStatement","src":"8796:13:3"},{"expression":{"id":1017,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1015,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1003,"src":"8827:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"313238","id":1016,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8837:3:3","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8827:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1018,"nodeType":"ExpressionStatement","src":"8827:13:3"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1025,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1023,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1021,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":997,"src":"8872:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":1022,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8881:2:3","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8872:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1024,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8886:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8872:15:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1035,"nodeType":"IfStatement","src":"8868:96:3","trueBody":{"id":1034,"nodeType":"Block","src":"8889:75:3","statements":[{"expression":{"id":1028,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1026,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":997,"src":"8907:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":1027,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8917:2:3","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8907:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1029,"nodeType":"ExpressionStatement","src":"8907:12:3"},{"expression":{"id":1032,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1030,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1003,"src":"8937:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":1031,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8947:2:3","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8937:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1033,"nodeType":"ExpressionStatement","src":"8937:12:3"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1040,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1038,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1036,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":997,"src":"8981:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":1037,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8990:2:3","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8981:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1039,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8995:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8981:15:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1050,"nodeType":"IfStatement","src":"8977:96:3","trueBody":{"id":1049,"nodeType":"Block","src":"8998:75:3","statements":[{"expression":{"id":1043,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1041,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":997,"src":"9016:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":1042,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9026:2:3","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"9016:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1044,"nodeType":"ExpressionStatement","src":"9016:12:3"},{"expression":{"id":1047,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1045,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1003,"src":"9046:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":1046,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9056:2:3","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"9046:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1048,"nodeType":"ExpressionStatement","src":"9046:12:3"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1055,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1053,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1051,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":997,"src":"9090:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":1052,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9099:2:3","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9090:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1054,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9104:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9090:15:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1065,"nodeType":"IfStatement","src":"9086:96:3","trueBody":{"id":1064,"nodeType":"Block","src":"9107:75:3","statements":[{"expression":{"id":1058,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1056,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":997,"src":"9125:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":1057,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9135:2:3","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9125:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1059,"nodeType":"ExpressionStatement","src":"9125:12:3"},{"expression":{"id":1062,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1060,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1003,"src":"9155:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":1061,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9165:2:3","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9155:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1063,"nodeType":"ExpressionStatement","src":"9155:12:3"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1070,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1068,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1066,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":997,"src":"9199:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":1067,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9208:1:3","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9199:10:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1069,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9212:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9199:14:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1080,"nodeType":"IfStatement","src":"9195:93:3","trueBody":{"id":1079,"nodeType":"Block","src":"9215:73:3","statements":[{"expression":{"id":1073,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1071,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":997,"src":"9233:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":1072,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9243:1:3","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9233:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1074,"nodeType":"ExpressionStatement","src":"9233:11:3"},{"expression":{"id":1077,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1075,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1003,"src":"9262:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":1076,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9272:1:3","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9262:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1078,"nodeType":"ExpressionStatement","src":"9262:11:3"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1085,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1083,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1081,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":997,"src":"9305:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"34","id":1082,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9314:1:3","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9305:10:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1084,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9318:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9305:14:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1095,"nodeType":"IfStatement","src":"9301:93:3","trueBody":{"id":1094,"nodeType":"Block","src":"9321:73:3","statements":[{"expression":{"id":1088,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1086,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":997,"src":"9339:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":1087,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9349:1:3","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9339:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1089,"nodeType":"ExpressionStatement","src":"9339:11:3"},{"expression":{"id":1092,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1090,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1003,"src":"9368:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":1091,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9378:1:3","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9368:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1093,"nodeType":"ExpressionStatement","src":"9368:11:3"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1100,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1098,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1096,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":997,"src":"9411:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"32","id":1097,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9420:1:3","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9411:10:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1099,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9424:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9411:14:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1110,"nodeType":"IfStatement","src":"9407:93:3","trueBody":{"id":1109,"nodeType":"Block","src":"9427:73:3","statements":[{"expression":{"id":1103,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1101,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":997,"src":"9445:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"32","id":1102,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9455:1:3","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9445:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1104,"nodeType":"ExpressionStatement","src":"9445:11:3"},{"expression":{"id":1107,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1105,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1003,"src":"9474:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":1106,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9484:1:3","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9474:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1108,"nodeType":"ExpressionStatement","src":"9474:11:3"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1115,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1113,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1111,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":997,"src":"9517:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1112,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9526:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9517:10:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1114,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9530:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9517:14:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1121,"nodeType":"IfStatement","src":"9513:64:3","trueBody":{"id":1120,"nodeType":"Block","src":"9533:44:3","statements":[{"expression":{"id":1118,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1116,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1003,"src":"9551:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":1117,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9561:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9551:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1119,"nodeType":"ExpressionStatement","src":"9551:11:3"}]}}]},{"expression":{"id":1123,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1003,"src":"9603:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1001,"id":1124,"nodeType":"Return","src":"9596:13:3"}]},"documentation":{"id":995,"nodeType":"StructuredDocumentation","src":"8515:113:3","text":" @dev Return the log in base 2, rounded down, of a positive value.\n Returns 0 if given 0."},"id":1126,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"8642:4:3","nodeType":"FunctionDefinition","parameters":{"id":998,"nodeType":"ParameterList","parameters":[{"constant":false,"id":997,"mutability":"mutable","name":"value","nameLocation":"8655:5:3","nodeType":"VariableDeclaration","scope":1126,"src":"8647:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":996,"name":"uint256","nodeType":"ElementaryTypeName","src":"8647:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8646:15:3"},"returnParameters":{"id":1001,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1000,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1126,"src":"8685:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":999,"name":"uint256","nodeType":"ElementaryTypeName","src":"8685:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8684:9:3"},"scope":1454,"src":"8633:983:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1161,"nodeType":"Block","src":"9849:165:3","statements":[{"id":1160,"nodeType":"UncheckedBlock","src":"9859:149:3","statements":[{"assignments":[1138],"declarations":[{"constant":false,"id":1138,"mutability":"mutable","name":"result","nameLocation":"9891:6:3","nodeType":"VariableDeclaration","scope":1160,"src":"9883:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1137,"name":"uint256","nodeType":"ElementaryTypeName","src":"9883:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1142,"initialValue":{"arguments":[{"id":1140,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1129,"src":"9905:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1139,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[1126,1162],"referencedDeclaration":1126,"src":"9900:4:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1141,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9900:11:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9883:28:3"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1158,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1143,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1138,"src":"9932:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1153,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$595","typeString":"enum Math.Rounding"},"id":1147,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1144,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1132,"src":"9942:8:3","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$595","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1145,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":595,"src":"9954:8:3","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$595_$","typeString":"type(enum Math.Rounding)"}},"id":1146,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9963:2:3","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":593,"src":"9954:11:3","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$595","typeString":"enum Math.Rounding"}},"src":"9942:23:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1152,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1150,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":1148,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9969:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":1149,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1138,"src":"9974:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9969:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1151,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1129,"src":"9983:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9969:19:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9942:46:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":1155,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9995:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":1156,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9942:54:3","trueExpression":{"hexValue":"31","id":1154,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9991:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":1157,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9941:56:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"9932:65:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1136,"id":1159,"nodeType":"Return","src":"9925:72:3"}]}]},"documentation":{"id":1127,"nodeType":"StructuredDocumentation","src":"9622:142:3","text":" @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":1162,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"9778:4:3","nodeType":"FunctionDefinition","parameters":{"id":1133,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1129,"mutability":"mutable","name":"value","nameLocation":"9791:5:3","nodeType":"VariableDeclaration","scope":1162,"src":"9783:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1128,"name":"uint256","nodeType":"ElementaryTypeName","src":"9783:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1132,"mutability":"mutable","name":"rounding","nameLocation":"9807:8:3","nodeType":"VariableDeclaration","scope":1162,"src":"9798:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$595","typeString":"enum Math.Rounding"},"typeName":{"id":1131,"nodeType":"UserDefinedTypeName","pathNode":{"id":1130,"name":"Rounding","nameLocations":["9798:8:3"],"nodeType":"IdentifierPath","referencedDeclaration":595,"src":"9798:8:3"},"referencedDeclaration":595,"src":"9798:8:3","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$595","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"9782:34:3"},"returnParameters":{"id":1136,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1135,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1162,"src":"9840:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1134,"name":"uint256","nodeType":"ElementaryTypeName","src":"9840:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9839:9:3"},"scope":1454,"src":"9769:245:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1290,"nodeType":"Block","src":"10201:854:3","statements":[{"assignments":[1171],"declarations":[{"constant":false,"id":1171,"mutability":"mutable","name":"result","nameLocation":"10219:6:3","nodeType":"VariableDeclaration","scope":1290,"src":"10211:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1170,"name":"uint256","nodeType":"ElementaryTypeName","src":"10211:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1173,"initialValue":{"hexValue":"30","id":1172,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10228:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10211:18:3"},{"id":1287,"nodeType":"UncheckedBlock","src":"10239:787:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1178,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1174,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1165,"src":"10267:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":1177,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1175,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10276:2:3","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":1176,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10282:2:3","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10276:8:3","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10267:17:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1190,"nodeType":"IfStatement","src":"10263:103:3","trueBody":{"id":1189,"nodeType":"Block","src":"10286:80:3","statements":[{"expression":{"id":1183,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1179,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1165,"src":"10304:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":1182,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1180,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10313:2:3","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":1181,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10319:2:3","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10313:8:3","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10304:17:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1184,"nodeType":"ExpressionStatement","src":"10304:17:3"},{"expression":{"id":1187,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1185,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1171,"src":"10339:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":1186,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10349:2:3","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10339:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1188,"nodeType":"ExpressionStatement","src":"10339:12:3"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1195,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1191,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1165,"src":"10383:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":1194,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1192,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10392:2:3","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":1193,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10398:2:3","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10392:8:3","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10383:17:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1207,"nodeType":"IfStatement","src":"10379:103:3","trueBody":{"id":1206,"nodeType":"Block","src":"10402:80:3","statements":[{"expression":{"id":1200,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1196,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1165,"src":"10420:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":1199,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1197,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10429:2:3","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":1198,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10435:2:3","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10429:8:3","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10420:17:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1201,"nodeType":"ExpressionStatement","src":"10420:17:3"},{"expression":{"id":1204,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1202,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1171,"src":"10455:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":1203,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10465:2:3","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10455:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1205,"nodeType":"ExpressionStatement","src":"10455:12:3"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1212,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1208,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1165,"src":"10499:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":1211,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1209,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10508:2:3","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":1210,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10514:2:3","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10508:8:3","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10499:17:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1224,"nodeType":"IfStatement","src":"10495:103:3","trueBody":{"id":1223,"nodeType":"Block","src":"10518:80:3","statements":[{"expression":{"id":1217,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1213,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1165,"src":"10536:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":1216,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1214,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10545:2:3","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":1215,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10551:2:3","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10545:8:3","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10536:17:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1218,"nodeType":"ExpressionStatement","src":"10536:17:3"},{"expression":{"id":1221,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1219,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1171,"src":"10571:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":1220,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10581:2:3","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10571:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1222,"nodeType":"ExpressionStatement","src":"10571:12:3"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1229,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1225,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1165,"src":"10615:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":1228,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1226,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10624:2:3","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":1227,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10630:1:3","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10624:7:3","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10615:16:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1241,"nodeType":"IfStatement","src":"10611:100:3","trueBody":{"id":1240,"nodeType":"Block","src":"10633:78:3","statements":[{"expression":{"id":1234,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1230,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1165,"src":"10651:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":1233,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1231,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10660:2:3","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":1232,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10666:1:3","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10660:7:3","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10651:16:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1235,"nodeType":"ExpressionStatement","src":"10651:16:3"},{"expression":{"id":1238,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1236,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1171,"src":"10685:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":1237,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10695:1:3","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10685:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1239,"nodeType":"ExpressionStatement","src":"10685:11:3"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1246,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1242,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1165,"src":"10728:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":1245,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1243,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10737:2:3","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":1244,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10743:1:3","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10737:7:3","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10728:16:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1258,"nodeType":"IfStatement","src":"10724:100:3","trueBody":{"id":1257,"nodeType":"Block","src":"10746:78:3","statements":[{"expression":{"id":1251,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1247,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1165,"src":"10764:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":1250,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1248,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10773:2:3","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":1249,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10779:1:3","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10773:7:3","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10764:16:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1252,"nodeType":"ExpressionStatement","src":"10764:16:3"},{"expression":{"id":1255,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1253,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1171,"src":"10798:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":1254,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10808:1:3","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10798:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1256,"nodeType":"ExpressionStatement","src":"10798:11:3"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1263,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1259,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1165,"src":"10841:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":1262,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1260,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10850:2:3","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":1261,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10856:1:3","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10850:7:3","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10841:16:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1275,"nodeType":"IfStatement","src":"10837:100:3","trueBody":{"id":1274,"nodeType":"Block","src":"10859:78:3","statements":[{"expression":{"id":1268,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1264,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1165,"src":"10877:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":1267,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1265,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10886:2:3","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":1266,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10892:1:3","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10886:7:3","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10877:16:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1269,"nodeType":"ExpressionStatement","src":"10877:16:3"},{"expression":{"id":1272,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1270,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1171,"src":"10911:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":1271,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10921:1:3","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10911:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1273,"nodeType":"ExpressionStatement","src":"10911:11:3"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1280,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1276,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1165,"src":"10954:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"id":1279,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1277,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10963:2:3","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"31","id":1278,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10969:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10963:7:3","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}},"src":"10954:16:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1286,"nodeType":"IfStatement","src":"10950:66:3","trueBody":{"id":1285,"nodeType":"Block","src":"10972:44:3","statements":[{"expression":{"id":1283,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1281,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1171,"src":"10990:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":1282,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11000:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10990:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1284,"nodeType":"ExpressionStatement","src":"10990:11:3"}]}}]},{"expression":{"id":1288,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1171,"src":"11042:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1169,"id":1289,"nodeType":"Return","src":"11035:13:3"}]},"documentation":{"id":1163,"nodeType":"StructuredDocumentation","src":"10020:114:3","text":" @dev Return the log in base 10, rounded down, of a positive value.\n Returns 0 if given 0."},"id":1291,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"10148:5:3","nodeType":"FunctionDefinition","parameters":{"id":1166,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1165,"mutability":"mutable","name":"value","nameLocation":"10162:5:3","nodeType":"VariableDeclaration","scope":1291,"src":"10154:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1164,"name":"uint256","nodeType":"ElementaryTypeName","src":"10154:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10153:15:3"},"returnParameters":{"id":1169,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1168,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1291,"src":"10192:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1167,"name":"uint256","nodeType":"ElementaryTypeName","src":"10192:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10191:9:3"},"scope":1454,"src":"10139:916:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1326,"nodeType":"Block","src":"11290:167:3","statements":[{"id":1325,"nodeType":"UncheckedBlock","src":"11300:151:3","statements":[{"assignments":[1303],"declarations":[{"constant":false,"id":1303,"mutability":"mutable","name":"result","nameLocation":"11332:6:3","nodeType":"VariableDeclaration","scope":1325,"src":"11324:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1302,"name":"uint256","nodeType":"ElementaryTypeName","src":"11324:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1307,"initialValue":{"arguments":[{"id":1305,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1294,"src":"11347:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1304,"name":"log10","nodeType":"Identifier","overloadedDeclarations":[1291,1327],"referencedDeclaration":1291,"src":"11341:5:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1306,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11341:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11324:29:3"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1323,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1308,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1303,"src":"11374:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1318,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$595","typeString":"enum Math.Rounding"},"id":1312,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1309,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1297,"src":"11384:8:3","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$595","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1310,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":595,"src":"11396:8:3","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$595_$","typeString":"type(enum Math.Rounding)"}},"id":1311,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11405:2:3","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":593,"src":"11396:11:3","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$595","typeString":"enum Math.Rounding"}},"src":"11384:23:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1317,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1315,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1313,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11411:2:3","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":1314,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1303,"src":"11417:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11411:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1316,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1294,"src":"11426:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11411:20:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"11384:47:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":1320,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11438:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":1321,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"11384:55:3","trueExpression":{"hexValue":"31","id":1319,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11434:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":1322,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11383:57:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11374:66:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1301,"id":1324,"nodeType":"Return","src":"11367:73:3"}]}]},"documentation":{"id":1292,"nodeType":"StructuredDocumentation","src":"11061:143:3","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":1327,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"11218:5:3","nodeType":"FunctionDefinition","parameters":{"id":1298,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1294,"mutability":"mutable","name":"value","nameLocation":"11232:5:3","nodeType":"VariableDeclaration","scope":1327,"src":"11224:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1293,"name":"uint256","nodeType":"ElementaryTypeName","src":"11224:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1297,"mutability":"mutable","name":"rounding","nameLocation":"11248:8:3","nodeType":"VariableDeclaration","scope":1327,"src":"11239:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$595","typeString":"enum Math.Rounding"},"typeName":{"id":1296,"nodeType":"UserDefinedTypeName","pathNode":{"id":1295,"name":"Rounding","nameLocations":["11239:8:3"],"nodeType":"IdentifierPath","referencedDeclaration":595,"src":"11239:8:3"},"referencedDeclaration":595,"src":"11239:8:3","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$595","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"11223:34:3"},"returnParameters":{"id":1301,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1300,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1327,"src":"11281:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1299,"name":"uint256","nodeType":"ElementaryTypeName","src":"11281:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11280:9:3"},"scope":1454,"src":"11209:248:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1413,"nodeType":"Block","src":"11771:600:3","statements":[{"assignments":[1336],"declarations":[{"constant":false,"id":1336,"mutability":"mutable","name":"result","nameLocation":"11789:6:3","nodeType":"VariableDeclaration","scope":1413,"src":"11781:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1335,"name":"uint256","nodeType":"ElementaryTypeName","src":"11781:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1338,"initialValue":{"hexValue":"30","id":1337,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11798:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"11781:18:3"},{"id":1410,"nodeType":"UncheckedBlock","src":"11809:533:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1343,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1341,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1339,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1330,"src":"11837:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":1340,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11846:3:3","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11837:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1342,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11852:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11837:16:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1353,"nodeType":"IfStatement","src":"11833:98:3","trueBody":{"id":1352,"nodeType":"Block","src":"11855:76:3","statements":[{"expression":{"id":1346,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1344,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1330,"src":"11873:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":1345,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11883:3:3","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11873:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1347,"nodeType":"ExpressionStatement","src":"11873:13:3"},{"expression":{"id":1350,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1348,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1336,"src":"11904:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":1349,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11914:2:3","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11904:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1351,"nodeType":"ExpressionStatement","src":"11904:12:3"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1358,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1356,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1354,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1330,"src":"11948:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":1355,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11957:2:3","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11948:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1357,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11962:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11948:15:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1368,"nodeType":"IfStatement","src":"11944:95:3","trueBody":{"id":1367,"nodeType":"Block","src":"11965:74:3","statements":[{"expression":{"id":1361,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1359,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1330,"src":"11983:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":1360,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11993:2:3","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11983:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1362,"nodeType":"ExpressionStatement","src":"11983:12:3"},{"expression":{"id":1365,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1363,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1336,"src":"12013:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":1364,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12023:1:3","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12013:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1366,"nodeType":"ExpressionStatement","src":"12013:11:3"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1373,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1371,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1369,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1330,"src":"12056:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":1370,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12065:2:3","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12056:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1372,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12070:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12056:15:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1383,"nodeType":"IfStatement","src":"12052:95:3","trueBody":{"id":1382,"nodeType":"Block","src":"12073:74:3","statements":[{"expression":{"id":1376,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1374,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1330,"src":"12091:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":1375,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12101:2:3","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12091:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1377,"nodeType":"ExpressionStatement","src":"12091:12:3"},{"expression":{"id":1380,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1378,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1336,"src":"12121:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":1379,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12131:1:3","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"12121:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1381,"nodeType":"ExpressionStatement","src":"12121:11:3"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1388,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1386,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1384,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1330,"src":"12164:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":1385,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12173:2:3","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12164:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1387,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12178:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12164:15:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1398,"nodeType":"IfStatement","src":"12160:95:3","trueBody":{"id":1397,"nodeType":"Block","src":"12181:74:3","statements":[{"expression":{"id":1391,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1389,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1330,"src":"12199:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":1390,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12209:2:3","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12199:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1392,"nodeType":"ExpressionStatement","src":"12199:12:3"},{"expression":{"id":1395,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1393,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1336,"src":"12229:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":1394,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12239:1:3","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12229:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1396,"nodeType":"ExpressionStatement","src":"12229:11:3"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1403,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1401,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1399,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1330,"src":"12272:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":1400,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12281:1:3","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12272:10:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1402,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12285:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12272:14:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1409,"nodeType":"IfStatement","src":"12268:64:3","trueBody":{"id":1408,"nodeType":"Block","src":"12288:44:3","statements":[{"expression":{"id":1406,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1404,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1336,"src":"12306:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":1405,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12316:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12306:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1407,"nodeType":"ExpressionStatement","src":"12306:11:3"}]}}]},{"expression":{"id":1411,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1336,"src":"12358:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1334,"id":1412,"nodeType":"Return","src":"12351:13:3"}]},"documentation":{"id":1328,"nodeType":"StructuredDocumentation","src":"11463:240:3","text":" @dev Return the log in base 256, rounded down, of a positive value.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."},"id":1414,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"11717:6:3","nodeType":"FunctionDefinition","parameters":{"id":1331,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1330,"mutability":"mutable","name":"value","nameLocation":"11732:5:3","nodeType":"VariableDeclaration","scope":1414,"src":"11724:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1329,"name":"uint256","nodeType":"ElementaryTypeName","src":"11724:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11723:15:3"},"returnParameters":{"id":1334,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1333,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1414,"src":"11762:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1332,"name":"uint256","nodeType":"ElementaryTypeName","src":"11762:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11761:9:3"},"scope":1454,"src":"11708:663:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1452,"nodeType":"Block","src":"12608:174:3","statements":[{"id":1451,"nodeType":"UncheckedBlock","src":"12618:158:3","statements":[{"assignments":[1426],"declarations":[{"constant":false,"id":1426,"mutability":"mutable","name":"result","nameLocation":"12650:6:3","nodeType":"VariableDeclaration","scope":1451,"src":"12642:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1425,"name":"uint256","nodeType":"ElementaryTypeName","src":"12642:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1430,"initialValue":{"arguments":[{"id":1428,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1417,"src":"12666:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1427,"name":"log256","nodeType":"Identifier","overloadedDeclarations":[1414,1453],"referencedDeclaration":1414,"src":"12659:6:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1429,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12659:13:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12642:30:3"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1449,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1431,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1426,"src":"12693:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1444,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$595","typeString":"enum Math.Rounding"},"id":1435,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1432,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1420,"src":"12703:8:3","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$595","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1433,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":595,"src":"12715:8:3","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$595_$","typeString":"type(enum Math.Rounding)"}},"id":1434,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"12724:2:3","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":593,"src":"12715:11:3","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$595","typeString":"enum Math.Rounding"}},"src":"12703:23:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1443,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1441,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":1436,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12730:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1439,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1437,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1426,"src":"12736:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"33","id":1438,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12746:1:3","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"12736:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1440,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12735:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12730:18:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1442,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1417,"src":"12751:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12730:26:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12703:53:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":1446,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12763:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":1447,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"12703:61:3","trueExpression":{"hexValue":"31","id":1445,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12759:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":1448,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12702:63:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"12693:72:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1424,"id":1450,"nodeType":"Return","src":"12686:79:3"}]}]},"documentation":{"id":1415,"nodeType":"StructuredDocumentation","src":"12377:144:3","text":" @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":1453,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"12535:6:3","nodeType":"FunctionDefinition","parameters":{"id":1421,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1417,"mutability":"mutable","name":"value","nameLocation":"12550:5:3","nodeType":"VariableDeclaration","scope":1453,"src":"12542:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1416,"name":"uint256","nodeType":"ElementaryTypeName","src":"12542:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1420,"mutability":"mutable","name":"rounding","nameLocation":"12566:8:3","nodeType":"VariableDeclaration","scope":1453,"src":"12557:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$595","typeString":"enum Math.Rounding"},"typeName":{"id":1419,"nodeType":"UserDefinedTypeName","pathNode":{"id":1418,"name":"Rounding","nameLocations":["12557:8:3"],"nodeType":"IdentifierPath","referencedDeclaration":595,"src":"12557:8:3"},"referencedDeclaration":595,"src":"12557:8:3","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$595","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"12541:34:3"},"returnParameters":{"id":1424,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1423,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1453,"src":"12599:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1422,"name":"uint256","nodeType":"ElementaryTypeName","src":"12599:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12598:9:3"},"scope":1454,"src":"12526:256:3","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1455,"src":"202:12582:3","usedErrors":[]}],"src":"103:12682:3"},"id":3},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/SignedMath.sol","exportedSymbols":{"SignedMath":[1559]},"id":1560,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1456,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"109:23:4"},{"abstract":false,"baseContracts":[],"canonicalName":"SignedMath","contractDependencies":[],"contractKind":"library","documentation":{"id":1457,"nodeType":"StructuredDocumentation","src":"134:80:4","text":" @dev Standard signed math utilities missing in the Solidity language."},"fullyImplemented":true,"id":1559,"linearizedBaseContracts":[1559],"name":"SignedMath","nameLocation":"223:10:4","nodeType":"ContractDefinition","nodes":[{"body":{"id":1474,"nodeType":"Block","src":"375:37:4","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1469,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1467,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1460,"src":"392:1:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1468,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1462,"src":"396:1:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"392:5:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":1471,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1462,"src":"404:1:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":1472,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"392:13:4","trueExpression":{"id":1470,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1460,"src":"400:1:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":1466,"id":1473,"nodeType":"Return","src":"385:20:4"}]},"documentation":{"id":1458,"nodeType":"StructuredDocumentation","src":"240:66:4","text":" @dev Returns the largest of two signed numbers."},"id":1475,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"320:3:4","nodeType":"FunctionDefinition","parameters":{"id":1463,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1460,"mutability":"mutable","name":"a","nameLocation":"331:1:4","nodeType":"VariableDeclaration","scope":1475,"src":"324:8:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1459,"name":"int256","nodeType":"ElementaryTypeName","src":"324:6:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":1462,"mutability":"mutable","name":"b","nameLocation":"341:1:4","nodeType":"VariableDeclaration","scope":1475,"src":"334:8:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1461,"name":"int256","nodeType":"ElementaryTypeName","src":"334:6:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"323:20:4"},"returnParameters":{"id":1466,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1465,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1475,"src":"367:6:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1464,"name":"int256","nodeType":"ElementaryTypeName","src":"367:6:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"366:8:4"},"scope":1559,"src":"311:101:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1492,"nodeType":"Block","src":"554:37:4","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1487,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1485,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1478,"src":"571:1:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1486,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1480,"src":"575:1:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"571:5:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":1489,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1480,"src":"583:1:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":1490,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"571:13:4","trueExpression":{"id":1488,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1478,"src":"579:1:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":1484,"id":1491,"nodeType":"Return","src":"564:20:4"}]},"documentation":{"id":1476,"nodeType":"StructuredDocumentation","src":"418:67:4","text":" @dev Returns the smallest of two signed numbers."},"id":1493,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"499:3:4","nodeType":"FunctionDefinition","parameters":{"id":1481,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1478,"mutability":"mutable","name":"a","nameLocation":"510:1:4","nodeType":"VariableDeclaration","scope":1493,"src":"503:8:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1477,"name":"int256","nodeType":"ElementaryTypeName","src":"503:6:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":1480,"mutability":"mutable","name":"b","nameLocation":"520:1:4","nodeType":"VariableDeclaration","scope":1493,"src":"513:8:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1479,"name":"int256","nodeType":"ElementaryTypeName","src":"513:6:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"502:20:4"},"returnParameters":{"id":1484,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1483,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1493,"src":"546:6:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1482,"name":"int256","nodeType":"ElementaryTypeName","src":"546:6:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"545:8:4"},"scope":1559,"src":"490:101:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1536,"nodeType":"Block","src":"796:162:4","statements":[{"assignments":[1504],"declarations":[{"constant":false,"id":1504,"mutability":"mutable","name":"x","nameLocation":"865:1:4","nodeType":"VariableDeclaration","scope":1536,"src":"858:8:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1503,"name":"int256","nodeType":"ElementaryTypeName","src":"858:6:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":1517,"initialValue":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1516,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1507,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1505,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1496,"src":"870:1:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":1506,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1498,"src":"874:1:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"870:5:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":1508,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"869:7:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1514,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1511,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1509,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1496,"src":"881:1:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":1510,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1498,"src":"885:1:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"881:5:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":1512,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"880:7:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1513,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"891:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"880:12:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":1515,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"879:14:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"869:24:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"858:35:4"},{"expression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1534,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1518,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1504,"src":"910:1:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1532,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1526,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1523,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1504,"src":"930:1:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":1522,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"922:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1521,"name":"uint256","nodeType":"ElementaryTypeName","src":"922:7:4","typeDescriptions":{}}},"id":1524,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"922:10:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":1525,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"936:3:4","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"922:17:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1520,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"915:6:4","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":1519,"name":"int256","nodeType":"ElementaryTypeName","src":"915:6:4","typeDescriptions":{}}},"id":1527,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"915:25:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1530,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1528,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1496,"src":"944:1:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":1529,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1498,"src":"948:1:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"944:5:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":1531,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"943:7:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"915:35:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":1533,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"914:37:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"910:41:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":1502,"id":1535,"nodeType":"Return","src":"903:48:4"}]},"documentation":{"id":1494,"nodeType":"StructuredDocumentation","src":"597:126:4","text":" @dev Returns the average of two signed numbers without overflow.\n The result is rounded towards zero."},"id":1537,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"737:7:4","nodeType":"FunctionDefinition","parameters":{"id":1499,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1496,"mutability":"mutable","name":"a","nameLocation":"752:1:4","nodeType":"VariableDeclaration","scope":1537,"src":"745:8:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1495,"name":"int256","nodeType":"ElementaryTypeName","src":"745:6:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":1498,"mutability":"mutable","name":"b","nameLocation":"762:1:4","nodeType":"VariableDeclaration","scope":1537,"src":"755:8:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1497,"name":"int256","nodeType":"ElementaryTypeName","src":"755:6:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"744:20:4"},"returnParameters":{"id":1502,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1501,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1537,"src":"788:6:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1500,"name":"int256","nodeType":"ElementaryTypeName","src":"788:6:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"787:8:4"},"scope":1559,"src":"728:230:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1557,"nodeType":"Block","src":"1102:158:4","statements":[{"id":1556,"nodeType":"UncheckedBlock","src":"1112:142:4","statements":[{"expression":{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1549,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1547,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1540,"src":"1227:1:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"30","id":1548,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1232:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1227:6:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":1552,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"1240:2:4","subExpression":{"id":1551,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1540,"src":"1241:1:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":1553,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1227:15:4","trueExpression":{"id":1550,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1540,"src":"1236:1:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":1546,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1219:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1545,"name":"uint256","nodeType":"ElementaryTypeName","src":"1219:7:4","typeDescriptions":{}}},"id":1554,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1219:24:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1544,"id":1555,"nodeType":"Return","src":"1212:31:4"}]}]},"documentation":{"id":1538,"nodeType":"StructuredDocumentation","src":"964:78:4","text":" @dev Returns the absolute unsigned value of a signed value."},"id":1558,"implemented":true,"kind":"function","modifiers":[],"name":"abs","nameLocation":"1056:3:4","nodeType":"FunctionDefinition","parameters":{"id":1541,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1540,"mutability":"mutable","name":"n","nameLocation":"1067:1:4","nodeType":"VariableDeclaration","scope":1558,"src":"1060:8:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1539,"name":"int256","nodeType":"ElementaryTypeName","src":"1060:6:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1059:10:4"},"returnParameters":{"id":1544,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1543,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1558,"src":"1093:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1542,"name":"uint256","nodeType":"ElementaryTypeName","src":"1093:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1092:9:4"},"scope":1559,"src":"1047:213:4","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1560,"src":"215:1047:4","usedErrors":[]}],"src":"109:1154:4"},"id":4},"contracts/ILeafWalletRegistryActivate.sol":{"ast":{"absolutePath":"contracts/ILeafWalletRegistryActivate.sol","exportedSymbols":{"ILeafWalletRegistryActivate":[1575],"ILeafWalletRegistryCore":[1605]},"id":1576,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1561,"literals":["solidity","^","0.8",".18"],"nodeType":"PragmaDirective","src":"34:24:5"},{"absolutePath":"contracts/ILeafWalletRegistryCore.sol","file":"./ILeafWalletRegistryCore.sol","id":1562,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1576,"sourceUnit":1606,"src":"62:39:5","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1563,"name":"ILeafWalletRegistryCore","nameLocations":["146:23:5"],"nodeType":"IdentifierPath","referencedDeclaration":1605,"src":"146:23:5"},"id":1564,"nodeType":"InheritanceSpecifier","src":"146:23:5"}],"canonicalName":"ILeafWalletRegistryActivate","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":1575,"linearizedBaseContracts":[1575,1605],"name":"ILeafWalletRegistryActivate","nameLocation":"115:27:5","nodeType":"ContractDefinition","nodes":[{"functionSelector":"ec949297","id":1569,"implemented":false,"kind":"function","modifiers":[],"name":"assignActivatableAddressToSender","nameLocation":"185:32:5","nodeType":"FunctionDefinition","parameters":{"id":1567,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1566,"mutability":"mutable","name":"assignee","nameLocation":"226:8:5","nodeType":"VariableDeclaration","scope":1569,"src":"218:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1565,"name":"address","nodeType":"ElementaryTypeName","src":"218:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"217:18:5"},"returnParameters":{"id":1568,"nodeType":"ParameterList","parameters":[],"src":"245:0:5"},"scope":1575,"src":"176:70:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"58944eb8","id":1574,"implemented":false,"kind":"function","modifiers":[],"name":"getActivationCodeOfSender","nameLocation":"261:25:5","nodeType":"FunctionDefinition","parameters":{"id":1570,"nodeType":"ParameterList","parameters":[],"src":"286:2:5"},"returnParameters":{"id":1573,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1572,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1574,"src":"312:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1571,"name":"uint256","nodeType":"ElementaryTypeName","src":"312:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"311:9:5"},"scope":1575,"src":"252:69:5","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1576,"src":"105:219:5","usedErrors":[]}],"src":"34:290:5"},"id":5},"contracts/ILeafWalletRegistryBasic.sol":{"ast":{"absolutePath":"contracts/ILeafWalletRegistryBasic.sol","exportedSymbols":{"ILeafWalletRegistryBasic":[1586],"ILeafWalletRegistryCore":[1605]},"id":1587,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1577,"literals":["solidity","^","0.8",".18"],"nodeType":"PragmaDirective","src":"34:24:6"},{"absolutePath":"contracts/ILeafWalletRegistryCore.sol","file":"./ILeafWalletRegistryCore.sol","id":1578,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1587,"sourceUnit":1606,"src":"62:39:6","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1579,"name":"ILeafWalletRegistryCore","nameLocations":["143:23:6"],"nodeType":"IdentifierPath","referencedDeclaration":1605,"src":"143:23:6"},"id":1580,"nodeType":"InheritanceSpecifier","src":"143:23:6"}],"canonicalName":"ILeafWalletRegistryBasic","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":1586,"linearizedBaseContracts":[1586,1605],"name":"ILeafWalletRegistryBasic","nameLocation":"115:24:6","nodeType":"ContractDefinition","nodes":[{"functionSelector":"56a593e3","id":1585,"implemented":false,"kind":"function","modifiers":[],"name":"assignAddressToSender","nameLocation":"183:21:6","nodeType":"FunctionDefinition","parameters":{"id":1583,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1582,"mutability":"mutable","name":"assignee","nameLocation":"213:8:6","nodeType":"VariableDeclaration","scope":1585,"src":"205:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1581,"name":"address","nodeType":"ElementaryTypeName","src":"205:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"204:18:6"},"returnParameters":{"id":1584,"nodeType":"ParameterList","parameters":[],"src":"232:0:6"},"scope":1586,"src":"174:59:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1587,"src":"105:131:6","usedErrors":[]}],"src":"34:204:6"},"id":6},"contracts/ILeafWalletRegistryCore.sol":{"ast":{"absolutePath":"contracts/ILeafWalletRegistryCore.sol","exportedSymbols":{"ILeafWalletRegistryCore":[1605]},"id":1606,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1588,"literals":["solidity","^","0.8",".18"],"nodeType":"PragmaDirective","src":"34:24:7"},{"abstract":false,"baseContracts":[],"canonicalName":"ILeafWalletRegistryCore","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":1605,"linearizedBaseContracts":[1605],"name":"ILeafWalletRegistryCore","nameLocation":"72:23:7","nodeType":"ContractDefinition","nodes":[{"functionSelector":"3aafa388","id":1593,"implemented":false,"kind":"function","modifiers":[],"name":"isSenderRegistered","nameLocation":"112:18:7","nodeType":"FunctionDefinition","parameters":{"id":1589,"nodeType":"ParameterList","parameters":[],"src":"130:2:7"},"returnParameters":{"id":1592,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1591,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1593,"src":"156:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1590,"name":"bool","nodeType":"ElementaryTypeName","src":"156:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"155:6:7"},"scope":1605,"src":"103:59:7","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"9b8ae375","id":1598,"implemented":false,"kind":"function","modifiers":[],"name":"getDeviceOwner","nameLocation":"177:14:7","nodeType":"FunctionDefinition","parameters":{"id":1594,"nodeType":"ParameterList","parameters":[],"src":"191:2:7"},"returnParameters":{"id":1597,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1596,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1598,"src":"217:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1595,"name":"address","nodeType":"ElementaryTypeName","src":"217:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"216:9:7"},"scope":1605,"src":"168:58:7","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"e0f64efc","id":1604,"implemented":false,"kind":"function","modifiers":[],"name":"getRelatedDevices","nameLocation":"241:17:7","nodeType":"FunctionDefinition","parameters":{"id":1599,"nodeType":"ParameterList","parameters":[],"src":"258:2:7"},"returnParameters":{"id":1603,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1602,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1604,"src":"284:16:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":1600,"name":"address","nodeType":"ElementaryTypeName","src":"284:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1601,"nodeType":"ArrayTypeName","src":"284:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"283:18:7"},"scope":1605,"src":"232:70:7","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1606,"src":"62:243:7","usedErrors":[]}],"src":"34:271:7"},"id":7},"contracts/InitFacet.sol":{"ast":{"absolutePath":"contracts/InitFacet.sol","exportedSymbols":{"IDiamondCut":[3109],"IDiamondLoupe":[3150],"ILeafWalletRegistryActivate":[1575],"ILeafWalletRegistryCore":[1605],"InitFacet":[1688],"LibDiamond":[3984],"StorageHandler":[3045],"SusuwatariStorage":[2993],"UsingDiamondOwner":[3071]},"id":1689,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1607,"literals":["solidity","^","0.8",".18"],"nodeType":"PragmaDirective","src":"33:24:8"},{"absolutePath":"hardhat-deploy/solc_0.8/diamond/interfaces/IDiamondLoupe.sol","file":"hardhat-deploy/solc_0.8/diamond/interfaces/IDiamondLoupe.sol","id":1609,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1689,"sourceUnit":3151,"src":"61:91:8","symbolAliases":[{"foreign":{"id":1608,"name":"IDiamondLoupe","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3150,"src":"69:13:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"hardhat-deploy/solc_0.8/diamond/UsingDiamondOwner.sol","file":"hardhat-deploy/solc_0.8/diamond/UsingDiamondOwner.sol","id":1612,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1689,"sourceUnit":3072,"src":"154:101:8","symbolAliases":[{"foreign":{"id":1610,"name":"UsingDiamondOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3071,"src":"162:17:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":1611,"name":"IDiamondCut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3109,"src":"181:11:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol","file":"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol","id":1613,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1689,"sourceUnit":3985,"src":"257:66:8","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/SusuwatariStorage.sol","file":"./SusuwatariStorage.sol","id":1616,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1689,"sourceUnit":3046,"src":"325:74:8","symbolAliases":[{"foreign":{"id":1614,"name":"SusuwatariStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2993,"src":"333:17:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":1615,"name":"StorageHandler","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3045,"src":"352:14:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/ILeafWalletRegistryActivate.sol","file":"./ILeafWalletRegistryActivate.sol","id":1617,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1689,"sourceUnit":1576,"src":"401:43:8","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1618,"name":"UsingDiamondOwner","nameLocations":["472:17:8"],"nodeType":"IdentifierPath","referencedDeclaration":3071,"src":"472:17:8"},"id":1619,"nodeType":"InheritanceSpecifier","src":"472:17:8"},{"baseName":{"id":1620,"name":"StorageHandler","nameLocations":["491:14:8"],"nodeType":"IdentifierPath","referencedDeclaration":3045,"src":"491:14:8"},"id":1621,"nodeType":"InheritanceSpecifier","src":"491:14:8"}],"canonicalName":"InitFacet","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":1688,"linearizedBaseContracts":[1688,3045,3071],"name":"InitFacet","nameLocation":"459:9:8","nodeType":"ContractDefinition","nodes":[{"body":{"id":1631,"nodeType":"Block","src":"528:68:8","statements":[{"expression":{"arguments":[{"expression":{"id":1627,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"567:3:8","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1628,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"571:6:8","memberName":"sender","nodeType":"MemberAccess","src":"567:10:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1624,"name":"LibDiamond","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3984,"src":"539:10:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_LibDiamond_$3984_$","typeString":"type(library LibDiamond)"}},"id":1626,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"550:16:8","memberName":"setContractOwner","nodeType":"MemberAccess","referencedDeclaration":3236,"src":"539:27:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1629,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"539:39:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1630,"nodeType":"ExpressionStatement","src":"539:39:8"}]},"id":1632,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1622,"nodeType":"ParameterList","parameters":[],"src":"526:2:8"},"returnParameters":{"id":1623,"nodeType":"ParameterList","parameters":[],"src":"528:0:8"},"scope":1688,"src":"515:81:8","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":1686,"nodeType":"Block","src":"643:392:8","statements":[{"assignments":[1639],"declarations":[{"constant":false,"id":1639,"mutability":"mutable","name":"susu","nameLocation":"682:4:8","nodeType":"VariableDeclaration","scope":1686,"src":"656:30:8","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$2993_storage_ptr","typeString":"struct SusuwatariStorage"},"typeName":{"id":1638,"nodeType":"UserDefinedTypeName","pathNode":{"id":1637,"name":"SusuwatariStorage","nameLocations":["656:17:8"],"nodeType":"IdentifierPath","referencedDeclaration":2993,"src":"656:17:8"},"referencedDeclaration":2993,"src":"656:17:8","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$2993_storage_ptr","typeString":"struct SusuwatariStorage"}},"visibility":"internal"}],"id":1642,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1640,"name":"susu","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3005,"src":"689:4:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_SusuwatariStorage_$2993_storage_ptr_$","typeString":"function () pure returns (struct SusuwatariStorage storage pointer)"}},"id":1641,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"689:6:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$2993_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"656:39:8"},{"condition":{"expression":{"id":1643,"name":"susu","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1639,"src":"714:4:8","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$2993_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},"id":1644,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"719:13:8","memberName":"isInitialized","nodeType":"MemberAccess","referencedDeclaration":2988,"src":"714:18:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1646,"nodeType":"IfStatement","src":"710:31:8","trueBody":{"functionReturnParameters":1636,"id":1645,"nodeType":"Return","src":"734:7:8"}},{"expression":{"id":1656,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":1647,"name":"ds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3030,"src":"753:2:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_DiamondStorage_$3190_storage_ptr_$","typeString":"function () pure returns (struct LibDiamond.DiamondStorage storage pointer)"}},"id":1648,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"753:4:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3190_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"}},"id":1649,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"758:19:8","memberName":"supportedInterfaces","nodeType":"MemberAccess","referencedDeclaration":3187,"src":"753:24:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"}},"id":1654,"indexExpression":{"expression":{"arguments":[{"id":1651,"name":"IDiamondCut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3109,"src":"783:11:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IDiamondCut_$3109_$","typeString":"type(contract IDiamondCut)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IDiamondCut_$3109_$","typeString":"type(contract IDiamondCut)"}],"id":1650,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"778:4:8","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1652,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"778:17:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IDiamondCut_$3109","typeString":"type(contract IDiamondCut)"}},"id":1653,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"796:11:8","memberName":"interfaceId","nodeType":"MemberAccess","src":"778:29:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"753:55:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":1655,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"811:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"753:62:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1657,"nodeType":"ExpressionStatement","src":"753:62:8"},{"expression":{"id":1667,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":1658,"name":"ds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3030,"src":"826:2:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_DiamondStorage_$3190_storage_ptr_$","typeString":"function () pure returns (struct LibDiamond.DiamondStorage storage pointer)"}},"id":1659,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"826:4:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3190_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"}},"id":1660,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"831:19:8","memberName":"supportedInterfaces","nodeType":"MemberAccess","referencedDeclaration":3187,"src":"826:24:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"}},"id":1665,"indexExpression":{"expression":{"arguments":[{"id":1662,"name":"IDiamondLoupe","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3150,"src":"856:13:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IDiamondLoupe_$3150_$","typeString":"type(contract IDiamondLoupe)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IDiamondLoupe_$3150_$","typeString":"type(contract IDiamondLoupe)"}],"id":1661,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"851:4:8","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1663,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"851:19:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IDiamondLoupe_$3150","typeString":"type(contract IDiamondLoupe)"}},"id":1664,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"871:11:8","memberName":"interfaceId","nodeType":"MemberAccess","src":"851:31:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"826:57:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":1666,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"886:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"826:64:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1668,"nodeType":"ExpressionStatement","src":"826:64:8"},{"expression":{"id":1678,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":1669,"name":"ds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3030,"src":"911:2:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_DiamondStorage_$3190_storage_ptr_$","typeString":"function () pure returns (struct LibDiamond.DiamondStorage storage pointer)"}},"id":1670,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"911:4:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3190_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"}},"id":1671,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"916:19:8","memberName":"supportedInterfaces","nodeType":"MemberAccess","referencedDeclaration":3187,"src":"911:24:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"}},"id":1676,"indexExpression":{"expression":{"arguments":[{"id":1673,"name":"ILeafWalletRegistryActivate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1575,"src":"941:27:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ILeafWalletRegistryActivate_$1575_$","typeString":"type(contract ILeafWalletRegistryActivate)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_ILeafWalletRegistryActivate_$1575_$","typeString":"type(contract ILeafWalletRegistryActivate)"}],"id":1672,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"936:4:8","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1674,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"936:33:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_ILeafWalletRegistryActivate_$1575","typeString":"type(contract ILeafWalletRegistryActivate)"}},"id":1675,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"970:11:8","memberName":"interfaceId","nodeType":"MemberAccess","src":"936:45:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"911:71:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":1677,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"985:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"911:78:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1679,"nodeType":"ExpressionStatement","src":"911:78:8"},{"expression":{"id":1684,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1680,"name":"susu","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1639,"src":"1002:4:8","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$2993_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},"id":1682,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1007:13:8","memberName":"isInitialized","nodeType":"MemberAccess","referencedDeclaration":2988,"src":"1002:18:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":1683,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1023:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"1002:25:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1685,"nodeType":"ExpressionStatement","src":"1002:25:8"}]},"functionSelector":"e1c7392a","id":1687,"implemented":true,"kind":"function","modifiers":[{"id":1635,"kind":"modifierInvocation","modifierName":{"id":1634,"name":"onlyOwner","nameLocations":["633:9:8"],"nodeType":"IdentifierPath","referencedDeclaration":3070,"src":"633:9:8"},"nodeType":"ModifierInvocation","src":"633:9:8"}],"name":"init","nameLocation":"617:4:8","nodeType":"FunctionDefinition","parameters":{"id":1633,"nodeType":"ParameterList","parameters":[],"src":"621:2:8"},"returnParameters":{"id":1636,"nodeType":"ParameterList","parameters":[],"src":"643:0:8"},"scope":1688,"src":"608:427:8","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1689,"src":"450:588:8","usedErrors":[]}],"src":"33:1005:8"},"id":8},"contracts/LeafWalletRegistryActivate.sol":{"ast":{"absolutePath":"contracts/LeafWalletRegistryActivate.sol","exportedSymbols":{"ILeafWalletRegistryActivate":[1575],"ILeafWalletRegistryCore":[1605],"LeafWalletRegistryActivate":[1796],"LeafWalletRegistryCore":[1953],"LeafWalletStorage":[2959],"StorageHandler":[3045]},"id":1797,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1690,"literals":["solidity","^","0.8",".18"],"nodeType":"PragmaDirective","src":"34:24:9"},{"absolutePath":"contracts/ILeafWalletRegistryActivate.sol","file":"./ILeafWalletRegistryActivate.sol","id":1691,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1797,"sourceUnit":1576,"src":"62:43:9","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/LeafWalletRegistryCore.sol","file":"./LeafWalletRegistryCore.sol","id":1692,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1797,"sourceUnit":1954,"src":"107:38:9","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/SusuwatariStorage.sol","file":"./SusuwatariStorage.sol","id":1695,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1797,"sourceUnit":3046,"src":"147:74:9","symbolAliases":[{"foreign":{"id":1693,"name":"LeafWalletStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2959,"src":"155:17:9","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":1694,"name":"StorageHandler","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3045,"src":"173:14:9","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1696,"name":"ILeafWalletRegistryActivate","nameLocations":["264:27:9"],"nodeType":"IdentifierPath","referencedDeclaration":1575,"src":"264:27:9"},"id":1697,"nodeType":"InheritanceSpecifier","src":"264:27:9"},{"baseName":{"id":1698,"name":"LeafWalletRegistryCore","nameLocations":["293:22:9"],"nodeType":"IdentifierPath","referencedDeclaration":1953,"src":"293:22:9"},"id":1699,"nodeType":"InheritanceSpecifier","src":"293:22:9"}],"canonicalName":"LeafWalletRegistryActivate","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":1796,"linearizedBaseContracts":[1796,1953,3045,1575,1605],"name":"LeafWalletRegistryActivate","nameLocation":"234:26:9","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"4194273a0171865880e1d7a0089dcb6cfe51ce239b09acde0bf6cc5e071210b0","id":1703,"name":"AssignActivatableAddressToSenderReturn","nameLocation":"330:38:9","nodeType":"EventDefinition","parameters":{"id":1702,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1701,"indexed":false,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1703,"src":"369:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1700,"name":"uint256","nodeType":"ElementaryTypeName","src":"369:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"368:9:9"},"src":"324:54:9"},{"baseFunctions":[1569],"body":{"id":1761,"nodeType":"Block","src":"475:455:9","statements":[{"assignments":[1711],"declarations":[{"constant":false,"id":1711,"mutability":"mutable","name":"lw","nameLocation":"512:2:9","nodeType":"VariableDeclaration","scope":1761,"src":"486:28:9","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_LeafWalletStorage_$2959_storage_ptr","typeString":"struct LeafWalletStorage"},"typeName":{"id":1710,"nodeType":"UserDefinedTypeName","pathNode":{"id":1709,"name":"LeafWalletStorage","nameLocations":["486:17:9"],"nodeType":"IdentifierPath","referencedDeclaration":2959,"src":"486:17:9"},"referencedDeclaration":2959,"src":"486:17:9","typeDescriptions":{"typeIdentifier":"t_struct$_LeafWalletStorage_$2959_storage_ptr","typeString":"struct LeafWalletStorage"}},"visibility":"internal"}],"id":1714,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1712,"name":"lw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3044,"src":"517:2:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_LeafWalletStorage_$2959_storage_ptr_$","typeString":"function () pure returns (struct LeafWalletStorage storage pointer)"}},"id":1713,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"517:4:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_LeafWalletStorage_$2959_storage_ptr","typeString":"struct LeafWalletStorage storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"486:35:9"},{"expression":{"arguments":[{"id":1716,"name":"assignee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1705,"src":"555:8:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1715,"name":"_assignAddressToSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1889,"src":"532:22:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1717,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"532:32:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1718,"nodeType":"ExpressionStatement","src":"532:32:9"},{"assignments":[1720],"declarations":[{"constant":false,"id":1720,"mutability":"mutable","name":"activationCode","nameLocation":"587:14:9","nodeType":"VariableDeclaration","scope":1761,"src":"579:22:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1719,"name":"uint256","nodeType":"ElementaryTypeName","src":"579:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1737,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1736,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"arguments":[{"expression":{"id":1726,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"639:5:9","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":1727,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"645:9:9","memberName":"timestamp","nodeType":"MemberAccess","src":"639:15:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":1728,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"656:5:9","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":1729,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"662:10:9","memberName":"prevrandao","nodeType":"MemberAccess","src":"656:16:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":1730,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"674:3:9","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1731,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"678:6:9","memberName":"sender","nodeType":"MemberAccess","src":"674:10:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1724,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"622:3:9","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1725,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"626:12:9","memberName":"encodePacked","nodeType":"MemberAccess","src":"622:16:9","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1732,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"622:63:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1723,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"612:9:9","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1733,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"612:74:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1722,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"604:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1721,"name":"uint256","nodeType":"ElementaryTypeName","src":"604:7:9","typeDescriptions":{}}},"id":1734,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"604:83:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"hexValue":"313030","id":1735,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"690:3:9","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"value":"100"},"src":"604:89:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"579:114:9"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1740,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1738,"name":"activationCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1720,"src":"707:14:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"3130","id":1739,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"722:2:9","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"707:17:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1748,"nodeType":"IfStatement","src":"704:82:9","trueBody":{"id":1747,"nodeType":"Block","src":"725:61:9","statements":[{"expression":{"id":1745,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1741,"name":"activationCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1720,"src":"740:14:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1744,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1742,"name":"activationCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1720,"src":"757:14:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3130","id":1743,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"772:2:9","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"757:17:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"740:34:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1746,"nodeType":"ExpressionStatement","src":"740:34:9"}]}},{"expression":{"id":1755,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":1749,"name":"lw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1711,"src":"796:2:9","typeDescriptions":{"typeIdentifier":"t_struct$_LeafWalletStorage_$2959_storage_ptr","typeString":"struct LeafWalletStorage storage pointer"}},"id":1752,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"799:22:9","memberName":"_deviceActivationCodes","nodeType":"MemberAccess","referencedDeclaration":2958,"src":"796:25:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1753,"indexExpression":{"id":1751,"name":"assignee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1705,"src":"822:8:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"796:35:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1754,"name":"activationCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1720,"src":"834:14:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"796:52:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1756,"nodeType":"ExpressionStatement","src":"796:52:9"},{"eventCall":{"arguments":[{"id":1758,"name":"activationCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1720,"src":"907:14:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1757,"name":"AssignActivatableAddressToSenderReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1703,"src":"868:38:9","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":1759,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"868:54:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1760,"nodeType":"EmitStatement","src":"863:59:9"}]},"functionSelector":"ec949297","id":1762,"implemented":true,"kind":"function","modifiers":[],"name":"assignActivatableAddressToSender","nameLocation":"401:32:9","nodeType":"FunctionDefinition","overrides":{"id":1707,"nodeType":"OverrideSpecifier","overrides":[],"src":"467:8:9"},"parameters":{"id":1706,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1705,"mutability":"mutable","name":"assignee","nameLocation":"442:8:9","nodeType":"VariableDeclaration","scope":1762,"src":"434:16:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1704,"name":"address","nodeType":"ElementaryTypeName","src":"434:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"433:18:9"},"returnParameters":{"id":1708,"nodeType":"ParameterList","parameters":[],"src":"475:0:9"},"scope":1796,"src":"392:538:9","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1574],"body":{"id":1794,"nodeType":"Block","src":"1013:198:9","statements":[{"assignments":[1770],"declarations":[{"constant":false,"id":1770,"mutability":"mutable","name":"lw","nameLocation":"1050:2:9","nodeType":"VariableDeclaration","scope":1794,"src":"1024:28:9","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_LeafWalletStorage_$2959_storage_ptr","typeString":"struct LeafWalletStorage"},"typeName":{"id":1769,"nodeType":"UserDefinedTypeName","pathNode":{"id":1768,"name":"LeafWalletStorage","nameLocations":["1024:17:9"],"nodeType":"IdentifierPath","referencedDeclaration":2959,"src":"1024:17:9"},"referencedDeclaration":2959,"src":"1024:17:9","typeDescriptions":{"typeIdentifier":"t_struct$_LeafWalletStorage_$2959_storage_ptr","typeString":"struct LeafWalletStorage"}},"visibility":"internal"}],"id":1773,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1771,"name":"lw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3044,"src":"1055:2:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_LeafWalletStorage_$2959_storage_ptr_$","typeString":"function () pure returns (struct LeafWalletStorage storage pointer)"}},"id":1772,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1055:4:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_LeafWalletStorage_$2959_storage_ptr","typeString":"struct LeafWalletStorage storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"1024:35:9"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1784,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"expression":{"id":1775,"name":"lw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1770,"src":"1078:2:9","typeDescriptions":{"typeIdentifier":"t_struct$_LeafWalletStorage_$2959_storage_ptr","typeString":"struct LeafWalletStorage storage pointer"}},"id":1776,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1081:12:9","memberName":"_deviceOwner","nodeType":"MemberAccess","referencedDeclaration":2949,"src":"1078:15:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":1779,"indexExpression":{"expression":{"id":1777,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1094:3:9","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1778,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1098:6:9","memberName":"sender","nodeType":"MemberAccess","src":"1094:10:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1078:27:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1782,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1117:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1781,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1109:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1780,"name":"address","nodeType":"ElementaryTypeName","src":"1109:7:9","typeDescriptions":{}}},"id":1783,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1109:10:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1078:41:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"446576696365206e6f74207965742072656769737465726564","id":1785,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1120:27:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_9898a18bfac4fb07bc794666327c612959e5c409b4b45d5ad738f31955a2bd44","typeString":"literal_string \"Device not yet registered\""},"value":"Device not yet registered"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9898a18bfac4fb07bc794666327c612959e5c409b4b45d5ad738f31955a2bd44","typeString":"literal_string \"Device not yet registered\""}],"id":1774,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1070:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1786,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1070:78:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1787,"nodeType":"ExpressionStatement","src":"1070:78:9"},{"expression":{"baseExpression":{"expression":{"id":1788,"name":"lw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1770,"src":"1166:2:9","typeDescriptions":{"typeIdentifier":"t_struct$_LeafWalletStorage_$2959_storage_ptr","typeString":"struct LeafWalletStorage storage pointer"}},"id":1789,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1169:22:9","memberName":"_deviceActivationCodes","nodeType":"MemberAccess","referencedDeclaration":2958,"src":"1166:25:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1792,"indexExpression":{"expression":{"id":1790,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1192:3:9","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1791,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1196:6:9","memberName":"sender","nodeType":"MemberAccess","src":"1192:10:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1166:37:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1767,"id":1793,"nodeType":"Return","src":"1159:44:9"}]},"functionSelector":"58944eb8","id":1795,"implemented":true,"kind":"function","modifiers":[],"name":"getActivationCodeOfSender","nameLocation":"947:25:9","nodeType":"FunctionDefinition","overrides":{"id":1764,"nodeType":"OverrideSpecifier","overrides":[],"src":"987:8:9"},"parameters":{"id":1763,"nodeType":"ParameterList","parameters":[],"src":"972:2:9"},"returnParameters":{"id":1767,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1766,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1795,"src":"1005:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1765,"name":"uint256","nodeType":"ElementaryTypeName","src":"1005:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1004:9:9"},"scope":1796,"src":"938:273:9","stateMutability":"view","virtual":false,"visibility":"public"}],"scope":1797,"src":"225:993:9","usedErrors":[]}],"src":"34:1196:9"},"id":9},"contracts/LeafWalletRegistryBase.sol":{"ast":{"absolutePath":"contracts/LeafWalletRegistryBase.sol","exportedSymbols":{"ILeafWalletRegistryBasic":[1586],"ILeafWalletRegistryCore":[1605],"LeafWalletRegistryBasic":[1816],"LeafWalletRegistryCore":[1953],"LeafWalletStorage":[2959],"StorageHandler":[3045]},"id":1817,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1798,"literals":["solidity","^","0.8",".18"],"nodeType":"PragmaDirective","src":"34:24:10"},{"absolutePath":"contracts/ILeafWalletRegistryBasic.sol","file":"./ILeafWalletRegistryBasic.sol","id":1799,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1817,"sourceUnit":1587,"src":"62:40:10","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/LeafWalletRegistryCore.sol","file":"./LeafWalletRegistryCore.sol","id":1800,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1817,"sourceUnit":1954,"src":"104:38:10","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1801,"name":"ILeafWalletRegistryBasic","nameLocations":["182:24:10"],"nodeType":"IdentifierPath","referencedDeclaration":1586,"src":"182:24:10"},"id":1802,"nodeType":"InheritanceSpecifier","src":"182:24:10"},{"baseName":{"id":1803,"name":"LeafWalletRegistryCore","nameLocations":["207:22:10"],"nodeType":"IdentifierPath","referencedDeclaration":1953,"src":"207:22:10"},"id":1804,"nodeType":"InheritanceSpecifier","src":"207:22:10"}],"canonicalName":"LeafWalletRegistryBasic","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":1816,"linearizedBaseContracts":[1816,1953,3045,1586,1605],"name":"LeafWalletRegistryBasic","nameLocation":"155:23:10","nodeType":"ContractDefinition","nodes":[{"baseFunctions":[1585],"body":{"id":1814,"nodeType":"Block","src":"307:51:10","statements":[{"expression":{"arguments":[{"id":1811,"name":"assignee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1806,"src":"341:8:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1810,"name":"_assignAddressToSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1889,"src":"318:22:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1812,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"318:32:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1813,"nodeType":"ExpressionStatement","src":"318:32:10"}]},"functionSelector":"56a593e3","id":1815,"implemented":true,"kind":"function","modifiers":[],"name":"assignAddressToSender","nameLocation":"252:21:10","nodeType":"FunctionDefinition","overrides":{"id":1808,"nodeType":"OverrideSpecifier","overrides":[],"src":"299:8:10"},"parameters":{"id":1807,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1806,"mutability":"mutable","name":"assignee","nameLocation":"282:8:10","nodeType":"VariableDeclaration","scope":1815,"src":"274:16:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1805,"name":"address","nodeType":"ElementaryTypeName","src":"274:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"273:18:10"},"returnParameters":{"id":1809,"nodeType":"ParameterList","parameters":[],"src":"307:0:10"},"scope":1816,"src":"243:115:10","stateMutability":"nonpayable","virtual":false,"visibility":"public"}],"scope":1817,"src":"146:221:10","usedErrors":[]}],"src":"34:345:10"},"id":10},"contracts/LeafWalletRegistryCore.sol":{"ast":{"absolutePath":"contracts/LeafWalletRegistryCore.sol","exportedSymbols":{"ILeafWalletRegistryCore":[1605],"LeafWalletRegistryCore":[1953],"LeafWalletStorage":[2959],"StorageHandler":[3045]},"id":1954,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1818,"literals":["solidity","^","0.8",".18"],"nodeType":"PragmaDirective","src":"34:24:11"},{"absolutePath":"contracts/ILeafWalletRegistryCore.sol","file":"./ILeafWalletRegistryCore.sol","id":1819,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1954,"sourceUnit":1606,"src":"62:39:11","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/SusuwatariStorage.sol","file":"./SusuwatariStorage.sol","id":1822,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1954,"sourceUnit":3046,"src":"103:74:11","symbolAliases":[{"foreign":{"id":1820,"name":"LeafWalletStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2959,"src":"111:17:11","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":1821,"name":"StorageHandler","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3045,"src":"129:14:11","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1823,"name":"ILeafWalletRegistryCore","nameLocations":["216:23:11"],"nodeType":"IdentifierPath","referencedDeclaration":1605,"src":"216:23:11"},"id":1824,"nodeType":"InheritanceSpecifier","src":"216:23:11"},{"baseName":{"id":1825,"name":"StorageHandler","nameLocations":["240:14:11"],"nodeType":"IdentifierPath","referencedDeclaration":3045,"src":"240:14:11"},"id":1826,"nodeType":"InheritanceSpecifier","src":"240:14:11"}],"canonicalName":"LeafWalletRegistryCore","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":1953,"linearizedBaseContracts":[1953,3045,1605],"name":"LeafWalletRegistryCore","nameLocation":"190:22:11","nodeType":"ContractDefinition","nodes":[{"body":{"id":1888,"nodeType":"Block","src":"330:367:11","statements":[{"assignments":[1833],"declarations":[{"constant":false,"id":1833,"mutability":"mutable","name":"lw","nameLocation":"367:2:11","nodeType":"VariableDeclaration","scope":1888,"src":"341:28:11","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_LeafWalletStorage_$2959_storage_ptr","typeString":"struct LeafWalletStorage"},"typeName":{"id":1832,"nodeType":"UserDefinedTypeName","pathNode":{"id":1831,"name":"LeafWalletStorage","nameLocations":["341:17:11"],"nodeType":"IdentifierPath","referencedDeclaration":2959,"src":"341:17:11"},"referencedDeclaration":2959,"src":"341:17:11","typeDescriptions":{"typeIdentifier":"t_struct$_LeafWalletStorage_$2959_storage_ptr","typeString":"struct LeafWalletStorage"}},"visibility":"internal"}],"id":1836,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1834,"name":"lw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3044,"src":"372:2:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_LeafWalletStorage_$2959_storage_ptr_$","typeString":"function () pure returns (struct LeafWalletStorage storage pointer)"}},"id":1835,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"372:4:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_LeafWalletStorage_$2959_storage_ptr","typeString":"struct LeafWalletStorage storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"341:35:11"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1854,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1846,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"expression":{"id":1838,"name":"lw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1833,"src":"395:2:11","typeDescriptions":{"typeIdentifier":"t_struct$_LeafWalletStorage_$2959_storage_ptr","typeString":"struct LeafWalletStorage storage pointer"}},"id":1839,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"398:12:11","memberName":"_deviceOwner","nodeType":"MemberAccess","referencedDeclaration":2949,"src":"395:15:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":1841,"indexExpression":{"id":1840,"name":"assignee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1828,"src":"411:8:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"395:25:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1844,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"432:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1843,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"424:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1842,"name":"address","nodeType":"ElementaryTypeName","src":"424:7:11","typeDescriptions":{}}},"id":1845,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"424:10:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"395:39:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1853,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"expression":{"id":1847,"name":"lw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1833,"src":"438:2:11","typeDescriptions":{"typeIdentifier":"t_struct$_LeafWalletStorage_$2959_storage_ptr","typeString":"struct LeafWalletStorage storage pointer"}},"id":1848,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"441:12:11","memberName":"_deviceOwner","nodeType":"MemberAccess","referencedDeclaration":2949,"src":"438:15:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":1850,"indexExpression":{"id":1849,"name":"assignee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1828,"src":"454:8:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"438:25:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1851,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"467:3:11","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1852,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"471:6:11","memberName":"sender","nodeType":"MemberAccess","src":"467:10:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"438:39:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"395:82:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"44657669636520616c72656164792072656769737465726564","id":1855,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"478:27:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_fb4001482305a88cc3313aebfc58d5cbc2cfd0fa781b8f11bcb791672d54dd1d","typeString":"literal_string \"Device already registered\""},"value":"Device already registered"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_fb4001482305a88cc3313aebfc58d5cbc2cfd0fa781b8f11bcb791672d54dd1d","typeString":"literal_string \"Device already registered\""}],"id":1837,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"387:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1856,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"387:119:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1857,"nodeType":"ExpressionStatement","src":"387:119:11"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1866,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"expression":{"id":1858,"name":"lw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1833,"src":"527:2:11","typeDescriptions":{"typeIdentifier":"t_struct$_LeafWalletStorage_$2959_storage_ptr","typeString":"struct LeafWalletStorage storage pointer"}},"id":1859,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"530:12:11","memberName":"_deviceOwner","nodeType":"MemberAccess","referencedDeclaration":2949,"src":"527:15:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":1861,"indexExpression":{"id":1860,"name":"assignee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1828,"src":"543:8:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"527:25:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1864,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"564:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1863,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"556:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1862,"name":"address","nodeType":"ElementaryTypeName","src":"556:7:11","typeDescriptions":{}}},"id":1865,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"556:10:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"527:39:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1887,"nodeType":"IfStatement","src":"524:166:11","trueBody":{"id":1886,"nodeType":"Block","src":"567:123:11","statements":[{"expression":{"arguments":[{"id":1874,"name":"assignee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1828,"src":"616:8:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"baseExpression":{"expression":{"id":1867,"name":"lw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1833,"src":"582:2:11","typeDescriptions":{"typeIdentifier":"t_struct$_LeafWalletStorage_$2959_storage_ptr","typeString":"struct LeafWalletStorage storage pointer"}},"id":1871,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"585:13:11","memberName":"_ownerDevices","nodeType":"MemberAccess","referencedDeclaration":2954,"src":"582:16:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_address_$dyn_storage_$","typeString":"mapping(address => address[] storage ref)"}},"id":1872,"indexExpression":{"expression":{"id":1869,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"599:3:11","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1870,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"603:6:11","memberName":"sender","nodeType":"MemberAccess","src":"599:10:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"582:28:11","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":1873,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"611:4:11","memberName":"push","nodeType":"MemberAccess","src":"582:33:11","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_address_$dyn_storage_ptr_$_t_address_$returns$__$attached_to$_t_array$_t_address_$dyn_storage_ptr_$","typeString":"function (address[] storage pointer,address)"}},"id":1875,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"582:43:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1876,"nodeType":"ExpressionStatement","src":"582:43:11"},{"expression":{"id":1884,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":1877,"name":"lw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1833,"src":"640:2:11","typeDescriptions":{"typeIdentifier":"t_struct$_LeafWalletStorage_$2959_storage_ptr","typeString":"struct LeafWalletStorage storage pointer"}},"id":1880,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"643:12:11","memberName":"_deviceOwner","nodeType":"MemberAccess","referencedDeclaration":2949,"src":"640:15:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":1881,"indexExpression":{"id":1879,"name":"assignee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1828,"src":"656:8:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"640:25:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":1882,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"668:3:11","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1883,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"672:6:11","memberName":"sender","nodeType":"MemberAccess","src":"668:10:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"640:38:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1885,"nodeType":"ExpressionStatement","src":"640:38:11"}]}}]},"id":1889,"implemented":true,"kind":"function","modifiers":[],"name":"_assignAddressToSender","nameLocation":"281:22:11","nodeType":"FunctionDefinition","parameters":{"id":1829,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1828,"mutability":"mutable","name":"assignee","nameLocation":"312:8:11","nodeType":"VariableDeclaration","scope":1889,"src":"304:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1827,"name":"address","nodeType":"ElementaryTypeName","src":"304:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"303:18:11"},"returnParameters":{"id":1830,"nodeType":"ParameterList","parameters":[],"src":"330:0:11"},"scope":1953,"src":"272:425:11","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[1593],"body":{"id":1912,"nodeType":"Block","src":"773:113:11","statements":[{"assignments":[1897],"declarations":[{"constant":false,"id":1897,"mutability":"mutable","name":"lw","nameLocation":"810:2:11","nodeType":"VariableDeclaration","scope":1912,"src":"784:28:11","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_LeafWalletStorage_$2959_storage_ptr","typeString":"struct LeafWalletStorage"},"typeName":{"id":1896,"nodeType":"UserDefinedTypeName","pathNode":{"id":1895,"name":"LeafWalletStorage","nameLocations":["784:17:11"],"nodeType":"IdentifierPath","referencedDeclaration":2959,"src":"784:17:11"},"referencedDeclaration":2959,"src":"784:17:11","typeDescriptions":{"typeIdentifier":"t_struct$_LeafWalletStorage_$2959_storage_ptr","typeString":"struct LeafWalletStorage"}},"visibility":"internal"}],"id":1900,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1898,"name":"lw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3044,"src":"815:2:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_LeafWalletStorage_$2959_storage_ptr_$","typeString":"function () pure returns (struct LeafWalletStorage storage pointer)"}},"id":1899,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"815:4:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_LeafWalletStorage_$2959_storage_ptr","typeString":"struct LeafWalletStorage storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"784:35:11"},{"expression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1910,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"expression":{"id":1901,"name":"lw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1897,"src":"837:2:11","typeDescriptions":{"typeIdentifier":"t_struct$_LeafWalletStorage_$2959_storage_ptr","typeString":"struct LeafWalletStorage storage pointer"}},"id":1902,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"840:12:11","memberName":"_deviceOwner","nodeType":"MemberAccess","referencedDeclaration":2949,"src":"837:15:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":1905,"indexExpression":{"expression":{"id":1903,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"853:3:11","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1904,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"857:6:11","memberName":"sender","nodeType":"MemberAccess","src":"853:10:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"837:27:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1908,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"876:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1907,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"868:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1906,"name":"address","nodeType":"ElementaryTypeName","src":"868:7:11","typeDescriptions":{}}},"id":1909,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"868:10:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"837:41:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1894,"id":1911,"nodeType":"Return","src":"830:48:11"}]},"functionSelector":"3aafa388","id":1913,"implemented":true,"kind":"function","modifiers":[],"name":"isSenderRegistered","nameLocation":"716:18:11","nodeType":"FunctionDefinition","overrides":{"id":1891,"nodeType":"OverrideSpecifier","overrides":[],"src":"749:8:11"},"parameters":{"id":1890,"nodeType":"ParameterList","parameters":[],"src":"734:2:11"},"returnParameters":{"id":1894,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1893,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1913,"src":"767:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1892,"name":"bool","nodeType":"ElementaryTypeName","src":"767:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"766:6:11"},"scope":1953,"src":"707:179:11","stateMutability":"view","virtual":false,"visibility":"public"},{"baseFunctions":[1598],"body":{"id":1931,"nodeType":"Block","src":"959:99:11","statements":[{"assignments":[1921],"declarations":[{"constant":false,"id":1921,"mutability":"mutable","name":"lw","nameLocation":"996:2:11","nodeType":"VariableDeclaration","scope":1931,"src":"970:28:11","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_LeafWalletStorage_$2959_storage_ptr","typeString":"struct LeafWalletStorage"},"typeName":{"id":1920,"nodeType":"UserDefinedTypeName","pathNode":{"id":1919,"name":"LeafWalletStorage","nameLocations":["970:17:11"],"nodeType":"IdentifierPath","referencedDeclaration":2959,"src":"970:17:11"},"referencedDeclaration":2959,"src":"970:17:11","typeDescriptions":{"typeIdentifier":"t_struct$_LeafWalletStorage_$2959_storage_ptr","typeString":"struct LeafWalletStorage"}},"visibility":"internal"}],"id":1924,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1922,"name":"lw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3044,"src":"1001:2:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_LeafWalletStorage_$2959_storage_ptr_$","typeString":"function () pure returns (struct LeafWalletStorage storage pointer)"}},"id":1923,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1001:4:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_LeafWalletStorage_$2959_storage_ptr","typeString":"struct LeafWalletStorage storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"970:35:11"},{"expression":{"baseExpression":{"expression":{"id":1925,"name":"lw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1921,"src":"1023:2:11","typeDescriptions":{"typeIdentifier":"t_struct$_LeafWalletStorage_$2959_storage_ptr","typeString":"struct LeafWalletStorage storage pointer"}},"id":1926,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1026:12:11","memberName":"_deviceOwner","nodeType":"MemberAccess","referencedDeclaration":2949,"src":"1023:15:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":1929,"indexExpression":{"expression":{"id":1927,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1039:3:11","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1928,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1043:6:11","memberName":"sender","nodeType":"MemberAccess","src":"1039:10:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1023:27:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1918,"id":1930,"nodeType":"Return","src":"1016:34:11"}]},"functionSelector":"9b8ae375","id":1932,"implemented":true,"kind":"function","modifiers":[],"name":"getDeviceOwner","nameLocation":"903:14:11","nodeType":"FunctionDefinition","overrides":{"id":1915,"nodeType":"OverrideSpecifier","overrides":[],"src":"932:8:11"},"parameters":{"id":1914,"nodeType":"ParameterList","parameters":[],"src":"917:2:11"},"returnParameters":{"id":1918,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1917,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1932,"src":"950:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1916,"name":"address","nodeType":"ElementaryTypeName","src":"950:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"949:9:11"},"scope":1953,"src":"894:164:11","stateMutability":"view","virtual":false,"visibility":"public"},{"baseFunctions":[1604],"body":{"id":1951,"nodeType":"Block","src":"1143:100:11","statements":[{"assignments":[1941],"declarations":[{"constant":false,"id":1941,"mutability":"mutable","name":"lw","nameLocation":"1180:2:11","nodeType":"VariableDeclaration","scope":1951,"src":"1154:28:11","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_LeafWalletStorage_$2959_storage_ptr","typeString":"struct LeafWalletStorage"},"typeName":{"id":1940,"nodeType":"UserDefinedTypeName","pathNode":{"id":1939,"name":"LeafWalletStorage","nameLocations":["1154:17:11"],"nodeType":"IdentifierPath","referencedDeclaration":2959,"src":"1154:17:11"},"referencedDeclaration":2959,"src":"1154:17:11","typeDescriptions":{"typeIdentifier":"t_struct$_LeafWalletStorage_$2959_storage_ptr","typeString":"struct LeafWalletStorage"}},"visibility":"internal"}],"id":1944,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1942,"name":"lw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3044,"src":"1185:2:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_LeafWalletStorage_$2959_storage_ptr_$","typeString":"function () pure returns (struct LeafWalletStorage storage pointer)"}},"id":1943,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1185:4:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_LeafWalletStorage_$2959_storage_ptr","typeString":"struct LeafWalletStorage storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"1154:35:11"},{"expression":{"baseExpression":{"expression":{"id":1945,"name":"lw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1941,"src":"1207:2:11","typeDescriptions":{"typeIdentifier":"t_struct$_LeafWalletStorage_$2959_storage_ptr","typeString":"struct LeafWalletStorage storage pointer"}},"id":1946,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1210:13:11","memberName":"_ownerDevices","nodeType":"MemberAccess","referencedDeclaration":2954,"src":"1207:16:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_address_$dyn_storage_$","typeString":"mapping(address => address[] storage ref)"}},"id":1949,"indexExpression":{"expression":{"id":1947,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1224:3:11","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1948,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1228:6:11","memberName":"sender","nodeType":"MemberAccess","src":"1224:10:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1207:28:11","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"functionReturnParameters":1938,"id":1950,"nodeType":"Return","src":"1200:35:11"}]},"functionSelector":"e0f64efc","id":1952,"implemented":true,"kind":"function","modifiers":[],"name":"getRelatedDevices","nameLocation":"1075:17:11","nodeType":"FunctionDefinition","overrides":{"id":1934,"nodeType":"OverrideSpecifier","overrides":[],"src":"1107:8:11"},"parameters":{"id":1933,"nodeType":"ParameterList","parameters":[],"src":"1092:2:11"},"returnParameters":{"id":1938,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1937,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1952,"src":"1125:16:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":1935,"name":"address","nodeType":"ElementaryTypeName","src":"1125:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1936,"nodeType":"ArrayTypeName","src":"1125:9:11","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"1124:18:11"},"scope":1953,"src":"1066:177:11","stateMutability":"view","virtual":false,"visibility":"public"}],"scope":1954,"src":"181:1079:11","usedErrors":[]}],"src":"34:1238:11"},"id":11},"contracts/LibSusuwatari.sol":{"ast":{"absolutePath":"contracts/LibSusuwatari.sol","exportedSymbols":{"IDiamondCut":[3109],"LibDiamond":[3984],"LibSusuwatari":[2763],"Math":[1454],"SignedMath":[1559],"Strings":[588],"Susu":[2974],"SusuwatariStorage":[2993]},"id":2764,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1955,"literals":["solidity","^","0.8",".18"],"nodeType":"PragmaDirective","src":"34:24:12"},{"absolutePath":"contracts/SusuwatariStorage.sol","file":"./SusuwatariStorage.sol","id":1958,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2764,"sourceUnit":3046,"src":"64:64:12","symbolAliases":[{"foreign":{"id":1956,"name":"SusuwatariStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2993,"src":"72:17:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":1957,"name":"Susu","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2974,"src":"91:4:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","file":"@openzeppelin/contracts/utils/Strings.sol","id":1959,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2764,"sourceUnit":589,"src":"130:51:12","symbolAliases":[],"unitAlias":""},{"absolutePath":"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol","file":"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol","id":1960,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2764,"sourceUnit":3985,"src":"183:66:12","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"LibSusuwatari","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":2763,"linearizedBaseContracts":[2763],"name":"LibSusuwatari","nameLocation":"261:13:12","nodeType":"ContractDefinition","nodes":[{"body":{"id":1981,"nodeType":"Block","src":"367:120:12","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1976,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1970,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1968,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1965,"src":"386:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1969,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"396:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"386:11:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1975,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1971,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1965,"src":"401:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"expression":{"id":1972,"name":"sus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1963,"src":"412:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$2993_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},"id":1973,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"416:10:12","memberName":"susuOwners","nodeType":"MemberAccess","referencedDeclaration":2981,"src":"412:14:12","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":1974,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"427:6:12","memberName":"length","nodeType":"MemberAccess","src":"412:21:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"401:32:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"386:47:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"546865205375737577617461726920646f6573206e6f74206578697374","id":1977,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"435:31:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_4d1afb24398d8796913ae06909817b006842179addf107888011a2e9a8f839dc","typeString":"literal_string \"The Susuwatari does not exist\""},"value":"The Susuwatari does not exist"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_4d1afb24398d8796913ae06909817b006842179addf107888011a2e9a8f839dc","typeString":"literal_string \"The Susuwatari does not exist\""}],"id":1967,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"378:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1978,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"378:89:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1979,"nodeType":"ExpressionStatement","src":"378:89:12"},{"id":1980,"nodeType":"PlaceholderStatement","src":"478:1:12"}]},"id":1982,"name":"mustExistSusu","nameLocation":"305:13:12","nodeType":"ModifierDefinition","parameters":{"id":1966,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1963,"mutability":"mutable","name":"sus","nameLocation":"345:3:12","nodeType":"VariableDeclaration","scope":1982,"src":"319:29:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$2993_storage_ptr","typeString":"struct SusuwatariStorage"},"typeName":{"id":1962,"nodeType":"UserDefinedTypeName","pathNode":{"id":1961,"name":"SusuwatariStorage","nameLocations":["319:17:12"],"nodeType":"IdentifierPath","referencedDeclaration":2993,"src":"319:17:12"},"referencedDeclaration":2993,"src":"319:17:12","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$2993_storage_ptr","typeString":"struct SusuwatariStorage"}},"visibility":"internal"},{"constant":false,"id":1965,"mutability":"mutable","name":"tokenId","nameLocation":"358:7:12","nodeType":"VariableDeclaration","scope":1982,"src":"350:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1964,"name":"uint256","nodeType":"ElementaryTypeName","src":"350:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"318:48:12"},"src":"296:191:12","virtual":false,"visibility":"internal"},{"body":{"id":2025,"nodeType":"Block","src":"554:292:12","statements":[{"assignments":[1988],"declarations":[{"constant":false,"id":1988,"mutability":"mutable","name":"hasSusu","nameLocation":"566:7:12","nodeType":"VariableDeclaration","scope":2025,"src":"561:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1987,"name":"bool","nodeType":"ElementaryTypeName","src":"561:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":1990,"initialValue":{"hexValue":"66616c7365","id":1989,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"576:5:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"nodeType":"VariableDeclarationStatement","src":"561:20:12"},{"body":{"id":2017,"nodeType":"Block","src":"646:116:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2009,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"expression":{"id":2003,"name":"sus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1985,"src":"661:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$2993_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},"id":2004,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"665:10:12","memberName":"susuOwners","nodeType":"MemberAccess","referencedDeclaration":2981,"src":"661:14:12","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":2006,"indexExpression":{"id":2005,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1992,"src":"676:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"661:17:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2007,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"682:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2008,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"686:6:12","memberName":"sender","nodeType":"MemberAccess","src":"682:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"661:31:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2016,"nodeType":"IfStatement","src":"657:98:12","trueBody":{"id":2015,"nodeType":"Block","src":"694:61:12","statements":[{"expression":{"id":2012,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2010,"name":"hasSusu","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1988,"src":"709:7:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":2011,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"719:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"709:14:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2013,"nodeType":"ExpressionStatement","src":"709:14:12"},{"id":2014,"nodeType":"Break","src":"738:5:12"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1999,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1995,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1992,"src":"614:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"expression":{"id":1996,"name":"sus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1985,"src":"618:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$2993_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},"id":1997,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"622:10:12","memberName":"susuOwners","nodeType":"MemberAccess","referencedDeclaration":2981,"src":"618:14:12","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":1998,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"633:6:12","memberName":"length","nodeType":"MemberAccess","src":"618:21:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"614:25:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2018,"initializationExpression":{"assignments":[1992],"declarations":[{"constant":false,"id":1992,"mutability":"mutable","name":"i","nameLocation":"607:1:12","nodeType":"VariableDeclaration","scope":2018,"src":"599:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1991,"name":"uint256","nodeType":"ElementaryTypeName","src":"599:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1994,"initialValue":{"hexValue":"30","id":1993,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"611:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"599:13:12"},"loopExpression":{"expression":{"id":2001,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"641:3:12","subExpression":{"id":2000,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1992,"src":"641:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2002,"nodeType":"ExpressionStatement","src":"641:3:12"},"nodeType":"ForStatement","src":"594:168:12"},{"expression":{"arguments":[{"id":2020,"name":"hasSusu","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1988,"src":"782:7:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"43616c6c657220646f6573206e6f74206f776e20616e79205375737577617461726920746f6b656e","id":2021,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"791:42:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_6c5763863ad503ca0efe42edc780c189cc60b5f9f4e9c6f436c8278270aa51fa","typeString":"literal_string \"Caller does not own any Susuwatari token\""},"value":"Caller does not own any Susuwatari token"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_6c5763863ad503ca0efe42edc780c189cc60b5f9f4e9c6f436c8278270aa51fa","typeString":"literal_string \"Caller does not own any Susuwatari token\""}],"id":2019,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"774:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2022,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"774:60:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2023,"nodeType":"ExpressionStatement","src":"774:60:12"},{"id":2024,"nodeType":"PlaceholderStatement","src":"841:1:12"}]},"id":2026,"name":"mustHaveSusu","nameLocation":"510:12:12","nodeType":"ModifierDefinition","parameters":{"id":1986,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1985,"mutability":"mutable","name":"sus","nameLocation":"549:3:12","nodeType":"VariableDeclaration","scope":2026,"src":"523:29:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$2993_storage_ptr","typeString":"struct SusuwatariStorage"},"typeName":{"id":1984,"nodeType":"UserDefinedTypeName","pathNode":{"id":1983,"name":"SusuwatariStorage","nameLocations":["523:17:12"],"nodeType":"IdentifierPath","referencedDeclaration":2993,"src":"523:17:12"},"referencedDeclaration":2993,"src":"523:17:12","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$2993_storage_ptr","typeString":"struct SusuwatariStorage"}},"visibility":"internal"}],"src":"522:31:12"},"src":"501:345:12","virtual":false,"visibility":"internal"},{"body":{"id":2051,"nodeType":"Block","src":"943:167:12","statements":[{"assignments":[2035],"declarations":[{"constant":false,"id":2035,"mutability":"mutable","name":"susuInstance","nameLocation":"963:12:12","nodeType":"VariableDeclaration","scope":2051,"src":"950:25:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Susu_$2974_storage_ptr","typeString":"struct Susu"},"typeName":{"id":2034,"nodeType":"UserDefinedTypeName","pathNode":{"id":2033,"name":"Susu","nameLocations":["950:4:12"],"nodeType":"IdentifierPath","referencedDeclaration":2974,"src":"950:4:12"},"referencedDeclaration":2974,"src":"950:4:12","typeDescriptions":{"typeIdentifier":"t_struct$_Susu_$2974_storage_ptr","typeString":"struct Susu"}},"visibility":"internal"}],"id":2040,"initialValue":{"baseExpression":{"expression":{"id":2036,"name":"sus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2029,"src":"978:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$2993_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},"id":2037,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"982:13:12","memberName":"tokenIdToSusu","nodeType":"MemberAccess","referencedDeclaration":2986,"src":"978:17:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Susu_$2974_storage_$","typeString":"mapping(uint256 => struct Susu storage ref)"}},"id":2039,"indexExpression":{"id":2038,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2031,"src":"996:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"978:26:12","typeDescriptions":{"typeIdentifier":"t_struct$_Susu_$2974_storage","typeString":"struct Susu storage ref"}},"nodeType":"VariableDeclarationStatement","src":"950:54:12"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2046,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2042,"name":"susuInstance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2035,"src":"1019:12:12","typeDescriptions":{"typeIdentifier":"t_struct$_Susu_$2974_storage_ptr","typeString":"struct Susu storage pointer"}},"id":2043,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1032:7:12","memberName":"carrier","nodeType":"MemberAccess","referencedDeclaration":2971,"src":"1019:20:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2044,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1043:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2045,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1047:6:12","memberName":"sender","nodeType":"MemberAccess","src":"1043:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1019:34:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"43616c6c657220646f65736e27742063617272792061205375737577617461726920546f6b656e21","id":2047,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1055:42:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_798f5856a707dc0adc182b677328113a6ad1d352f0ee560283a8165464fbd68c","typeString":"literal_string \"Caller doesn't carry a Susuwatari Token!\""},"value":"Caller doesn't carry a Susuwatari Token!"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_798f5856a707dc0adc182b677328113a6ad1d352f0ee560283a8165464fbd68c","typeString":"literal_string \"Caller doesn't carry a Susuwatari Token!\""}],"id":2041,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1011:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2048,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1011:87:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2049,"nodeType":"ExpressionStatement","src":"1011:87:12"},{"id":2050,"nodeType":"PlaceholderStatement","src":"1105:1:12"}]},"id":2052,"name":"mustCarrySusu","nameLocation":"881:13:12","nodeType":"ModifierDefinition","parameters":{"id":2032,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2029,"mutability":"mutable","name":"sus","nameLocation":"921:3:12","nodeType":"VariableDeclaration","scope":2052,"src":"895:29:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$2993_storage_ptr","typeString":"struct SusuwatariStorage"},"typeName":{"id":2028,"nodeType":"UserDefinedTypeName","pathNode":{"id":2027,"name":"SusuwatariStorage","nameLocations":["895:17:12"],"nodeType":"IdentifierPath","referencedDeclaration":2993,"src":"895:17:12"},"referencedDeclaration":2993,"src":"895:17:12","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$2993_storage_ptr","typeString":"struct SusuwatariStorage"}},"visibility":"internal"},{"constant":false,"id":2031,"mutability":"mutable","name":"tokenId","nameLocation":"934:7:12","nodeType":"VariableDeclaration","scope":2052,"src":"926:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2030,"name":"uint256","nodeType":"ElementaryTypeName","src":"926:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"894:48:12"},"src":"872:238:12","virtual":false,"visibility":"internal"},{"body":{"id":2069,"nodeType":"Block","src":"1174:95:12","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2064,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"expression":{"id":2058,"name":"sus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2055,"src":"1191:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$2993_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},"id":2059,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1195:12:12","memberName":"maxSlotCount","nodeType":"MemberAccess","referencedDeclaration":2978,"src":"1191:16:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2062,"indexExpression":{"expression":{"id":2060,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1208:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2061,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1212:6:12","memberName":"sender","nodeType":"MemberAccess","src":"1208:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1191:28:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2063,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1222:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1191:32:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"55736572206973206e6f742072656769737465726564","id":2065,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1225:24:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_7407ae7c87c72ed4ff3e96e9a39d169b4f6f4c248ff3f4ac2723be024c6c567b","typeString":"literal_string \"User is not registered\""},"value":"User is not registered"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7407ae7c87c72ed4ff3e96e9a39d169b4f6f4c248ff3f4ac2723be024c6c567b","typeString":"literal_string \"User is not registered\""}],"id":2057,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1183:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2066,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1183:67:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2067,"nodeType":"ExpressionStatement","src":"1183:67:12"},{"id":2068,"nodeType":"PlaceholderStatement","src":"1264:1:12"}]},"id":2070,"name":"isUserRegistered","nameLocation":"1127:16:12","nodeType":"ModifierDefinition","parameters":{"id":2056,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2055,"mutability":"mutable","name":"sus","nameLocation":"1170:3:12","nodeType":"VariableDeclaration","scope":2070,"src":"1144:29:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$2993_storage_ptr","typeString":"struct SusuwatariStorage"},"typeName":{"id":2054,"nodeType":"UserDefinedTypeName","pathNode":{"id":2053,"name":"SusuwatariStorage","nameLocations":["1144:17:12"],"nodeType":"IdentifierPath","referencedDeclaration":2993,"src":"1144:17:12"},"referencedDeclaration":2993,"src":"1144:17:12","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$2993_storage_ptr","typeString":"struct SusuwatariStorage"}},"visibility":"internal"}],"src":"1143:31:12"},"src":"1118:151:12","virtual":false,"visibility":"internal"},{"body":{"id":2117,"nodeType":"Block","src":"1351:323:12","statements":[{"assignments":[2078],"declarations":[{"constant":false,"id":2078,"mutability":"mutable","name":"isCarrying","nameLocation":"1366:10:12","nodeType":"VariableDeclaration","scope":2117,"src":"1361:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2077,"name":"bool","nodeType":"ElementaryTypeName","src":"1361:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":2080,"initialValue":{"hexValue":"66616c7365","id":2079,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1379:5:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"nodeType":"VariableDeclarationStatement","src":"1361:23:12"},{"body":{"id":2108,"nodeType":"Block","src":"1451:130:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2100,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"expression":{"id":2093,"name":"sus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2073,"src":"1466:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$2993_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},"id":2094,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1470:13:12","memberName":"tokenIdToSusu","nodeType":"MemberAccess","referencedDeclaration":2986,"src":"1466:17:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Susu_$2974_storage_$","typeString":"mapping(uint256 => struct Susu storage ref)"}},"id":2096,"indexExpression":{"id":2095,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2082,"src":"1484:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1466:20:12","typeDescriptions":{"typeIdentifier":"t_struct$_Susu_$2974_storage","typeString":"struct Susu storage ref"}},"id":2097,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1487:7:12","memberName":"carrier","nodeType":"MemberAccess","referencedDeclaration":2971,"src":"1466:28:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2098,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1498:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2099,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1502:6:12","memberName":"sender","nodeType":"MemberAccess","src":"1498:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1466:42:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2107,"nodeType":"IfStatement","src":"1462:112:12","trueBody":{"id":2106,"nodeType":"Block","src":"1510:64:12","statements":[{"expression":{"id":2103,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2101,"name":"isCarrying","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2078,"src":"1525:10:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":2102,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1538:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"1525:17:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2104,"nodeType":"ExpressionStatement","src":"1525:17:12"},{"id":2105,"nodeType":"Break","src":"1557:5:12"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2089,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2085,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2082,"src":"1419:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"expression":{"id":2086,"name":"sus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2073,"src":"1423:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$2993_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},"id":2087,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1427:10:12","memberName":"susuOwners","nodeType":"MemberAccess","referencedDeclaration":2981,"src":"1423:14:12","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":2088,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1438:6:12","memberName":"length","nodeType":"MemberAccess","src":"1423:21:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1419:25:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2109,"initializationExpression":{"assignments":[2082],"declarations":[{"constant":false,"id":2082,"mutability":"mutable","name":"i","nameLocation":"1412:1:12","nodeType":"VariableDeclaration","scope":2109,"src":"1404:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2081,"name":"uint256","nodeType":"ElementaryTypeName","src":"1404:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2084,"initialValue":{"hexValue":"30","id":2083,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1416:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"1404:13:12"},"loopExpression":{"expression":{"id":2091,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"1446:3:12","subExpression":{"id":2090,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2082,"src":"1446:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2092,"nodeType":"ExpressionStatement","src":"1446:3:12"},"nodeType":"ForStatement","src":"1399:182:12"},{"expression":{"arguments":[{"id":2112,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"1595:11:12","subExpression":{"id":2111,"name":"isCarrying","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2078,"src":"1596:10:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"43616c6c657220697320616c72656164792063617272792061205375737577617461726920546f6b656e21","id":2113,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1608:45:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_3d36960ed3323252384919502d9702e8d755a40cf26c5bcb370306436c57e631","typeString":"literal_string \"Caller is already carry a Susuwatari Token!\""},"value":"Caller is already carry a Susuwatari Token!"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3d36960ed3323252384919502d9702e8d755a40cf26c5bcb370306436c57e631","typeString":"literal_string \"Caller is already carry a Susuwatari Token!\""}],"id":2110,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1587:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2114,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1587:67:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2115,"nodeType":"ExpressionStatement","src":"1587:67:12"},{"id":2116,"nodeType":"PlaceholderStatement","src":"1665:1:12"}]},"id":2118,"name":"mustNotCarrySusu","nameLocation":"1286:16:12","nodeType":"ModifierDefinition","parameters":{"id":2076,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2073,"mutability":"mutable","name":"sus","nameLocation":"1329:3:12","nodeType":"VariableDeclaration","scope":2118,"src":"1303:29:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$2993_storage_ptr","typeString":"struct SusuwatariStorage"},"typeName":{"id":2072,"nodeType":"UserDefinedTypeName","pathNode":{"id":2071,"name":"SusuwatariStorage","nameLocations":["1303:17:12"],"nodeType":"IdentifierPath","referencedDeclaration":2993,"src":"1303:17:12"},"referencedDeclaration":2993,"src":"1303:17:12","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$2993_storage_ptr","typeString":"struct SusuwatariStorage"}},"visibility":"internal"},{"constant":false,"id":2075,"mutability":"mutable","name":"tokenId","nameLocation":"1342:7:12","nodeType":"VariableDeclaration","scope":2118,"src":"1334:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2074,"name":"uint256","nodeType":"ElementaryTypeName","src":"1334:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1302:48:12"},"src":"1277:397:12","virtual":false,"visibility":"internal"},{"body":{"id":2145,"nodeType":"Block","src":"1766:137:12","statements":[{"assignments":[2127],"declarations":[{"constant":false,"id":2127,"mutability":"mutable","name":"su","nameLocation":"1786:2:12","nodeType":"VariableDeclaration","scope":2145,"src":"1773:15:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Susu_$2974_storage_ptr","typeString":"struct Susu"},"typeName":{"id":2126,"nodeType":"UserDefinedTypeName","pathNode":{"id":2125,"name":"Susu","nameLocations":["1773:4:12"],"nodeType":"IdentifierPath","referencedDeclaration":2974,"src":"1773:4:12"},"referencedDeclaration":2974,"src":"1773:4:12","typeDescriptions":{"typeIdentifier":"t_struct$_Susu_$2974_storage_ptr","typeString":"struct Susu"}},"visibility":"internal"}],"id":2132,"initialValue":{"baseExpression":{"expression":{"id":2128,"name":"sus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2121,"src":"1791:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$2993_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},"id":2129,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1795:13:12","memberName":"tokenIdToSusu","nodeType":"MemberAccess","referencedDeclaration":2986,"src":"1791:17:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Susu_$2974_storage_$","typeString":"mapping(uint256 => struct Susu storage ref)"}},"id":2131,"indexExpression":{"id":2130,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2123,"src":"1809:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1791:26:12","typeDescriptions":{"typeIdentifier":"t_struct$_Susu_$2974_storage","typeString":"struct Susu storage ref"}},"nodeType":"VariableDeclarationStatement","src":"1773:44:12"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2140,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2134,"name":"su","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2127,"src":"1832:2:12","typeDescriptions":{"typeIdentifier":"t_struct$_Susu_$2974_storage_ptr","typeString":"struct Susu storage pointer"}},"id":2135,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1835:7:12","memberName":"carrier","nodeType":"MemberAccess","referencedDeclaration":2971,"src":"1832:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2138,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1854:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2137,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1846:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2136,"name":"address","nodeType":"ElementaryTypeName","src":"1846:7:12","typeDescriptions":{}}},"id":2139,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1846:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1832:24:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5375737520697320616c7265616479206265696e67206361727269656421","id":2141,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1858:32:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_4bf678e026b2a583a7d0a053dad875fb3627eb881b97552c4ebffafd4cb3bcf1","typeString":"literal_string \"Susu is already being carried!\""},"value":"Susu is already being carried!"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_4bf678e026b2a583a7d0a053dad875fb3627eb881b97552c4ebffafd4cb3bcf1","typeString":"literal_string \"Susu is already being carried!\""}],"id":2133,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1824:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2142,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1824:67:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2143,"nodeType":"ExpressionStatement","src":"1824:67:12"},{"id":2144,"nodeType":"PlaceholderStatement","src":"1898:1:12"}]},"id":2146,"name":"isNotBeingCarriedSusu","nameLocation":"1696:21:12","nodeType":"ModifierDefinition","parameters":{"id":2124,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2121,"mutability":"mutable","name":"sus","nameLocation":"1744:3:12","nodeType":"VariableDeclaration","scope":2146,"src":"1718:29:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$2993_storage_ptr","typeString":"struct SusuwatariStorage"},"typeName":{"id":2120,"nodeType":"UserDefinedTypeName","pathNode":{"id":2119,"name":"SusuwatariStorage","nameLocations":["1718:17:12"],"nodeType":"IdentifierPath","referencedDeclaration":2993,"src":"1718:17:12"},"referencedDeclaration":2993,"src":"1718:17:12","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$2993_storage_ptr","typeString":"struct SusuwatariStorage"}},"visibility":"internal"},{"constant":false,"id":2123,"mutability":"mutable","name":"tokenId","nameLocation":"1757:7:12","nodeType":"VariableDeclaration","scope":2146,"src":"1749:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2122,"name":"uint256","nodeType":"ElementaryTypeName","src":"1749:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1717:48:12"},"src":"1687:216:12","virtual":false,"visibility":"internal"},{"body":{"id":2192,"nodeType":"Block","src":"1976:315:12","statements":[{"assignments":[2152],"declarations":[{"constant":false,"id":2152,"mutability":"mutable","name":"isCarrying","nameLocation":"1990:10:12","nodeType":"VariableDeclaration","scope":2192,"src":"1985:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2151,"name":"bool","nodeType":"ElementaryTypeName","src":"1985:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":2154,"initialValue":{"hexValue":"66616c7365","id":2153,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2003:5:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"nodeType":"VariableDeclarationStatement","src":"1985:23:12"},{"body":{"id":2182,"nodeType":"Block","src":"2073:130:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2174,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"expression":{"id":2167,"name":"sus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2149,"src":"2088:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$2993_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},"id":2168,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2092:13:12","memberName":"tokenIdToSusu","nodeType":"MemberAccess","referencedDeclaration":2986,"src":"2088:17:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Susu_$2974_storage_$","typeString":"mapping(uint256 => struct Susu storage ref)"}},"id":2170,"indexExpression":{"id":2169,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2156,"src":"2106:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2088:20:12","typeDescriptions":{"typeIdentifier":"t_struct$_Susu_$2974_storage","typeString":"struct Susu storage ref"}},"id":2171,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2109:7:12","memberName":"carrier","nodeType":"MemberAccess","referencedDeclaration":2971,"src":"2088:28:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2172,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2120:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2173,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2124:6:12","memberName":"sender","nodeType":"MemberAccess","src":"2120:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2088:42:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2181,"nodeType":"IfStatement","src":"2084:112:12","trueBody":{"id":2180,"nodeType":"Block","src":"2132:64:12","statements":[{"expression":{"id":2177,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2175,"name":"isCarrying","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2152,"src":"2147:10:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":2176,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2160:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"2147:17:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2178,"nodeType":"ExpressionStatement","src":"2147:17:12"},{"id":2179,"nodeType":"Break","src":"2179:5:12"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2163,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2159,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2156,"src":"2041:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"expression":{"id":2160,"name":"sus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2149,"src":"2045:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$2993_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},"id":2161,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2049:10:12","memberName":"susuOwners","nodeType":"MemberAccess","referencedDeclaration":2981,"src":"2045:14:12","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":2162,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2060:6:12","memberName":"length","nodeType":"MemberAccess","src":"2045:21:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2041:25:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2183,"initializationExpression":{"assignments":[2156],"declarations":[{"constant":false,"id":2156,"mutability":"mutable","name":"i","nameLocation":"2034:1:12","nodeType":"VariableDeclaration","scope":2183,"src":"2026:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2155,"name":"uint256","nodeType":"ElementaryTypeName","src":"2026:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2158,"initialValue":{"hexValue":"30","id":2157,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2038:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"2026:13:12"},"loopExpression":{"expression":{"id":2165,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2068:3:12","subExpression":{"id":2164,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2156,"src":"2068:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2166,"nodeType":"ExpressionStatement","src":"2068:3:12"},"nodeType":"ForStatement","src":"2021:182:12"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2187,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2185,"name":"isCarrying","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2152,"src":"2217:10:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"66616c7365","id":2186,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2231:5:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"2217:19:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"43616c6c657220697320616c7265616479206f76657262757264656e6564","id":2188,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2238:32:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_70132b4f3ba390c9e97fdec31d6ca7192fdd636708b513d7c2b65395cdd9a94e","typeString":"literal_string \"Caller is already overburdened\""},"value":"Caller is already overburdened"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_70132b4f3ba390c9e97fdec31d6ca7192fdd636708b513d7c2b65395cdd9a94e","typeString":"literal_string \"Caller is already overburdened\""}],"id":2184,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2209:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2189,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2209:62:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2190,"nodeType":"ExpressionStatement","src":"2209:62:12"},{"id":2191,"nodeType":"PlaceholderStatement","src":"2282:1:12"}]},"id":2193,"name":"mustHaveBagSpace","nameLocation":"1928:16:12","nodeType":"ModifierDefinition","parameters":{"id":2150,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2149,"mutability":"mutable","name":"sus","nameLocation":"1971:3:12","nodeType":"VariableDeclaration","scope":2193,"src":"1945:29:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$2993_storage_ptr","typeString":"struct SusuwatariStorage"},"typeName":{"id":2148,"nodeType":"UserDefinedTypeName","pathNode":{"id":2147,"name":"SusuwatariStorage","nameLocations":["1945:17:12"],"nodeType":"IdentifierPath","referencedDeclaration":2993,"src":"1945:17:12"},"referencedDeclaration":2993,"src":"1945:17:12","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$2993_storage_ptr","typeString":"struct SusuwatariStorage"}},"visibility":"internal"}],"src":"1944:31:12"},"src":"1919:372:12","virtual":false,"visibility":"internal"},{"body":{"id":2221,"nodeType":"Block","src":"2383:166:12","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2216,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2207,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"expression":{"id":2201,"name":"sus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2196,"src":"2410:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$2993_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},"id":2202,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2414:10:12","memberName":"susuOwners","nodeType":"MemberAccess","referencedDeclaration":2981,"src":"2410:14:12","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":2204,"indexExpression":{"id":2203,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2198,"src":"2425:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2410:23:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2205,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2437:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2206,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2441:6:12","memberName":"sender","nodeType":"MemberAccess","src":"2437:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2410:37:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2215,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"expression":{"id":2208,"name":"sus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2196,"src":"2451:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$2993_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},"id":2209,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2455:13:12","memberName":"tokenIdToSusu","nodeType":"MemberAccess","referencedDeclaration":2986,"src":"2451:17:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Susu_$2974_storage_$","typeString":"mapping(uint256 => struct Susu storage ref)"}},"id":2211,"indexExpression":{"id":2210,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2198,"src":"2469:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2451:26:12","typeDescriptions":{"typeIdentifier":"t_struct$_Susu_$2974_storage","typeString":"struct Susu storage ref"}},"id":2212,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2478:7:12","memberName":"carrier","nodeType":"MemberAccess","referencedDeclaration":2971,"src":"2451:34:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2213,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2489:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2214,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2493:6:12","memberName":"sender","nodeType":"MemberAccess","src":"2489:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2451:48:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2410:89:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"43616c6c6572206973206e6f74206f776e6572","id":2217,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2501:21:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_2d10247a65709fdb3c0696b0ed760a0c246e12f8c496efb56291dd2fe3b0275d","typeString":"literal_string \"Caller is not owner\""},"value":"Caller is not owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2d10247a65709fdb3c0696b0ed760a0c246e12f8c496efb56291dd2fe3b0275d","typeString":"literal_string \"Caller is not owner\""}],"id":2200,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2402:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2218,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2402:121:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2219,"nodeType":"ExpressionStatement","src":"2402:121:12"},{"id":2220,"nodeType":"PlaceholderStatement","src":"2540:1:12"}]},"id":2222,"name":"susuMustNotHaveBeenAimed","nameLocation":"2310:24:12","nodeType":"ModifierDefinition","parameters":{"id":2199,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2196,"mutability":"mutable","name":"sus","nameLocation":"2361:3:12","nodeType":"VariableDeclaration","scope":2222,"src":"2335:29:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$2993_storage_ptr","typeString":"struct SusuwatariStorage"},"typeName":{"id":2195,"nodeType":"UserDefinedTypeName","pathNode":{"id":2194,"name":"SusuwatariStorage","nameLocations":["2335:17:12"],"nodeType":"IdentifierPath","referencedDeclaration":2993,"src":"2335:17:12"},"referencedDeclaration":2993,"src":"2335:17:12","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$2993_storage_ptr","typeString":"struct SusuwatariStorage"}},"visibility":"internal"},{"constant":false,"id":2198,"mutability":"mutable","name":"tokenId","nameLocation":"2374:7:12","nodeType":"VariableDeclaration","scope":2222,"src":"2366:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2197,"name":"uint256","nodeType":"ElementaryTypeName","src":"2366:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2334:48:12"},"src":"2301:248:12","virtual":false,"visibility":"internal"},{"canonicalName":"LibSusuwatari.UserState","id":2229,"members":[{"constant":false,"id":2225,"mutability":"mutable","name":"ownedTokens","nameLocation":"2605:11:12","nodeType":"VariableDeclaration","scope":2229,"src":"2595:21:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2223,"name":"uint256","nodeType":"ElementaryTypeName","src":"2595:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2224,"nodeType":"ArrayTypeName","src":"2595:9:12","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2228,"mutability":"mutable","name":"slot","nameLocation":"2632:4:12","nodeType":"VariableDeclaration","scope":2229,"src":"2627:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Slot_$2236_storage_ptr","typeString":"struct LibSusuwatari.Slot"},"typeName":{"id":2227,"nodeType":"UserDefinedTypeName","pathNode":{"id":2226,"name":"Slot","nameLocations":["2627:4:12"],"nodeType":"IdentifierPath","referencedDeclaration":2236,"src":"2627:4:12"},"referencedDeclaration":2236,"src":"2627:4:12","typeDescriptions":{"typeIdentifier":"t_struct$_Slot_$2236_storage_ptr","typeString":"struct LibSusuwatari.Slot"}},"visibility":"internal"}],"name":"UserState","nameLocation":"2574:9:12","nodeType":"StructDefinition","scope":2763,"src":"2567:77:12","visibility":"public"},{"canonicalName":"LibSusuwatari.Slot","id":2236,"members":[{"constant":false,"id":2231,"mutability":"mutable","name":"susuTokenId","nameLocation":"2685:11:12","nodeType":"VariableDeclaration","scope":2236,"src":"2677:19:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2230,"name":"uint256","nodeType":"ElementaryTypeName","src":"2677:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2233,"mutability":"mutable","name":"dropCooldownTime","nameLocation":"2715:16:12","nodeType":"VariableDeclaration","scope":2236,"src":"2707:24:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2232,"name":"uint256","nodeType":"ElementaryTypeName","src":"2707:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2235,"mutability":"mutable","name":"ownerAddress","nameLocation":"2750:12:12","nodeType":"VariableDeclaration","scope":2236,"src":"2742:20:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2234,"name":"address","nodeType":"ElementaryTypeName","src":"2742:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"Slot","nameLocation":"2661:4:12","nodeType":"StructDefinition","scope":2763,"src":"2654:116:12","visibility":"public"},{"body":{"id":2391,"nodeType":"Block","src":"2871:1072:12","statements":[{"assignments":[2246],"declarations":[{"constant":false,"id":2246,"mutability":"mutable","name":"ownedTokenCount","nameLocation":"2888:15:12","nodeType":"VariableDeclaration","scope":2391,"src":"2880:23:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2245,"name":"uint256","nodeType":"ElementaryTypeName","src":"2880:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2248,"initialValue":{"hexValue":"30","id":2247,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2906:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"2880:27:12"},{"body":{"id":2273,"nodeType":"Block","src":"2966:99:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2267,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2261,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2981:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2262,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2985:6:12","memberName":"sender","nodeType":"MemberAccess","src":"2981:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"baseExpression":{"expression":{"id":2263,"name":"sus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2239,"src":"2995:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$2993_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},"id":2264,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2999:10:12","memberName":"susuOwners","nodeType":"MemberAccess","referencedDeclaration":2981,"src":"2995:14:12","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":2266,"indexExpression":{"id":2265,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2250,"src":"3010:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2995:17:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2981:31:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2272,"nodeType":"IfStatement","src":"2977:81:12","trueBody":{"id":2271,"nodeType":"Block","src":"3014:44:12","statements":[{"expression":{"id":2269,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"3029:17:12","subExpression":{"id":2268,"name":"ownedTokenCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2246,"src":"3029:15:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2270,"nodeType":"ExpressionStatement","src":"3029:17:12"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2257,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2253,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2250,"src":"2934:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"expression":{"id":2254,"name":"sus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2239,"src":"2938:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$2993_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},"id":2255,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2942:10:12","memberName":"susuOwners","nodeType":"MemberAccess","referencedDeclaration":2981,"src":"2938:14:12","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":2256,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2953:6:12","memberName":"length","nodeType":"MemberAccess","src":"2938:21:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2934:25:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2274,"initializationExpression":{"assignments":[2250],"declarations":[{"constant":false,"id":2250,"mutability":"mutable","name":"i","nameLocation":"2927:1:12","nodeType":"VariableDeclaration","scope":2274,"src":"2919:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2249,"name":"uint256","nodeType":"ElementaryTypeName","src":"2919:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2252,"initialValue":{"hexValue":"30","id":2251,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2931:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"2919:13:12"},"loopExpression":{"expression":{"id":2259,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2961:3:12","subExpression":{"id":2258,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2250,"src":"2961:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2260,"nodeType":"ExpressionStatement","src":"2961:3:12"},"nodeType":"ForStatement","src":"2914:151:12"},{"assignments":[2279],"declarations":[{"constant":false,"id":2279,"mutability":"mutable","name":"ownedTokens","nameLocation":"3090:11:12","nodeType":"VariableDeclaration","scope":2391,"src":"3073:28:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2277,"name":"uint256","nodeType":"ElementaryTypeName","src":"3073:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2278,"nodeType":"ArrayTypeName","src":"3073:9:12","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":2285,"initialValue":{"arguments":[{"id":2283,"name":"ownedTokenCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2246,"src":"3118:15:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2282,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"3104:13:12","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"},"typeName":{"baseType":{"id":2280,"name":"uint256","nodeType":"ElementaryTypeName","src":"3108:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2281,"nodeType":"ArrayTypeName","src":"3108:9:12","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}}},"id":2284,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3104:30:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"3073:61:12"},{"assignments":[2287],"declarations":[{"constant":false,"id":2287,"mutability":"mutable","name":"index","nameLocation":"3184:5:12","nodeType":"VariableDeclaration","scope":2391,"src":"3176:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2286,"name":"uint256","nodeType":"ElementaryTypeName","src":"3176:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2289,"initialValue":{"hexValue":"30","id":2288,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3192:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"3176:17:12"},{"body":{"id":2320,"nodeType":"Block","src":"3252:126:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2308,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2302,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3267:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2303,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3271:6:12","memberName":"sender","nodeType":"MemberAccess","src":"3267:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"baseExpression":{"expression":{"id":2304,"name":"sus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2239,"src":"3281:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$2993_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},"id":2305,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3285:10:12","memberName":"susuOwners","nodeType":"MemberAccess","referencedDeclaration":2981,"src":"3281:14:12","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":2307,"indexExpression":{"id":2306,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2291,"src":"3296:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3281:17:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3267:31:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2319,"nodeType":"IfStatement","src":"3263:108:12","trueBody":{"id":2318,"nodeType":"Block","src":"3300:71:12","statements":[{"expression":{"id":2313,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2309,"name":"ownedTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2279,"src":"3315:11:12","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":2311,"indexExpression":{"id":2310,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2287,"src":"3327:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3315:18:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2312,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2291,"src":"3336:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3315:22:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2314,"nodeType":"ExpressionStatement","src":"3315:22:12"},{"expression":{"id":2316,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"3352:7:12","subExpression":{"id":2315,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2287,"src":"3352:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2317,"nodeType":"ExpressionStatement","src":"3352:7:12"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2298,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2294,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2291,"src":"3220:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"expression":{"id":2295,"name":"sus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2239,"src":"3224:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$2993_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},"id":2296,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3228:10:12","memberName":"susuOwners","nodeType":"MemberAccess","referencedDeclaration":2981,"src":"3224:14:12","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":2297,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3239:6:12","memberName":"length","nodeType":"MemberAccess","src":"3224:21:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3220:25:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2321,"initializationExpression":{"assignments":[2291],"declarations":[{"constant":false,"id":2291,"mutability":"mutable","name":"i","nameLocation":"3213:1:12","nodeType":"VariableDeclaration","scope":2321,"src":"3205:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2290,"name":"uint256","nodeType":"ElementaryTypeName","src":"3205:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2293,"initialValue":{"hexValue":"30","id":2292,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3217:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"3205:13:12"},"loopExpression":{"expression":{"id":2300,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"3247:3:12","subExpression":{"id":2299,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2291,"src":"3247:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2301,"nodeType":"ExpressionStatement","src":"3247:3:12"},"nodeType":"ForStatement","src":"3200:178:12"},{"assignments":[2324],"declarations":[{"constant":false,"id":2324,"mutability":"mutable","name":"slot","nameLocation":"3398:4:12","nodeType":"VariableDeclaration","scope":2391,"src":"3386:16:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Slot_$2236_memory_ptr","typeString":"struct LibSusuwatari.Slot"},"typeName":{"id":2323,"nodeType":"UserDefinedTypeName","pathNode":{"id":2322,"name":"Slot","nameLocations":["3386:4:12"],"nodeType":"IdentifierPath","referencedDeclaration":2236,"src":"3386:4:12"},"referencedDeclaration":2236,"src":"3386:4:12","typeDescriptions":{"typeIdentifier":"t_struct$_Slot_$2236_storage_ptr","typeString":"struct LibSusuwatari.Slot"}},"visibility":"internal"}],"id":2325,"nodeType":"VariableDeclarationStatement","src":"3386:16:12"},{"body":{"id":2379,"nodeType":"Block","src":"3458:349:12","statements":[{"assignments":[2338],"declarations":[{"constant":false,"id":2338,"mutability":"mutable","name":"tokenId","nameLocation":"3477:7:12","nodeType":"VariableDeclaration","scope":2379,"src":"3469:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2337,"name":"uint256","nodeType":"ElementaryTypeName","src":"3469:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2342,"initialValue":{"baseExpression":{"id":2339,"name":"ownedTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2279,"src":"3487:11:12","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":2341,"indexExpression":{"id":2340,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2327,"src":"3499:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3487:14:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3469:32:12"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2350,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"expression":{"id":2343,"name":"sus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2239,"src":"3516:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$2993_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},"id":2344,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3520:13:12","memberName":"tokenIdToSusu","nodeType":"MemberAccess","referencedDeclaration":2986,"src":"3516:17:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Susu_$2974_storage_$","typeString":"mapping(uint256 => struct Susu storage ref)"}},"id":2346,"indexExpression":{"id":2345,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2338,"src":"3534:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3516:26:12","typeDescriptions":{"typeIdentifier":"t_struct$_Susu_$2974_storage","typeString":"struct Susu storage ref"}},"id":2347,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3543:7:12","memberName":"carrier","nodeType":"MemberAccess","referencedDeclaration":2971,"src":"3516:34:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2348,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3554:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2349,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3558:6:12","memberName":"sender","nodeType":"MemberAccess","src":"3554:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3516:48:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2378,"nodeType":"IfStatement","src":"3512:288:12","trueBody":{"id":2377,"nodeType":"Block","src":"3566:234:12","statements":[{"expression":{"id":2355,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2351,"name":"slot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2324,"src":"3581:4:12","typeDescriptions":{"typeIdentifier":"t_struct$_Slot_$2236_memory_ptr","typeString":"struct LibSusuwatari.Slot memory"}},"id":2353,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3586:11:12","memberName":"susuTokenId","nodeType":"MemberAccess","referencedDeclaration":2231,"src":"3581:16:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2354,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2338,"src":"3600:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3581:26:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2356,"nodeType":"ExpressionStatement","src":"3581:26:12"},{"expression":{"id":2365,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2357,"name":"slot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2324,"src":"3622:4:12","typeDescriptions":{"typeIdentifier":"t_struct$_Slot_$2236_memory_ptr","typeString":"struct LibSusuwatari.Slot memory"}},"id":2359,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3627:16:12","memberName":"dropCooldownTime","nodeType":"MemberAccess","referencedDeclaration":2233,"src":"3622:21:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"baseExpression":{"expression":{"id":2360,"name":"sus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2239,"src":"3646:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$2993_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},"id":2361,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3650:13:12","memberName":"tokenIdToSusu","nodeType":"MemberAccess","referencedDeclaration":2986,"src":"3646:17:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Susu_$2974_storage_$","typeString":"mapping(uint256 => struct Susu storage ref)"}},"id":2363,"indexExpression":{"id":2362,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2338,"src":"3664:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3646:26:12","typeDescriptions":{"typeIdentifier":"t_struct$_Susu_$2974_storage","typeString":"struct Susu storage ref"}},"id":2364,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3673:16:12","memberName":"dropCooldownTime","nodeType":"MemberAccess","referencedDeclaration":2973,"src":"3646:43:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3622:67:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2366,"nodeType":"ExpressionStatement","src":"3622:67:12"},{"expression":{"id":2374,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2367,"name":"slot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2324,"src":"3704:4:12","typeDescriptions":{"typeIdentifier":"t_struct$_Slot_$2236_memory_ptr","typeString":"struct LibSusuwatari.Slot memory"}},"id":2369,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3709:12:12","memberName":"ownerAddress","nodeType":"MemberAccess","referencedDeclaration":2235,"src":"3704:17:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"expression":{"id":2370,"name":"sus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2239,"src":"3724:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$2993_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},"id":2371,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3728:10:12","memberName":"susuOwners","nodeType":"MemberAccess","referencedDeclaration":2981,"src":"3724:14:12","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":2373,"indexExpression":{"id":2372,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2338,"src":"3739:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3724:23:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3704:43:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2375,"nodeType":"ExpressionStatement","src":"3704:43:12"},{"id":2376,"nodeType":"Break","src":"3762:5:12"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2333,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2330,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2327,"src":"3429:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":2331,"name":"ownedTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2279,"src":"3433:11:12","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":2332,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3445:6:12","memberName":"length","nodeType":"MemberAccess","src":"3433:18:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3429:22:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2380,"initializationExpression":{"assignments":[2327],"declarations":[{"constant":false,"id":2327,"mutability":"mutable","name":"i","nameLocation":"3422:1:12","nodeType":"VariableDeclaration","scope":2380,"src":"3414:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2326,"name":"uint256","nodeType":"ElementaryTypeName","src":"3414:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2329,"initialValue":{"hexValue":"30","id":2328,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3426:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"3414:13:12"},"loopExpression":{"expression":{"id":2335,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"3453:3:12","subExpression":{"id":2334,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2327,"src":"3453:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2336,"nodeType":"ExpressionStatement","src":"3453:3:12"},"nodeType":"ForStatement","src":"3409:398:12"},{"assignments":[2383],"declarations":[{"constant":false,"id":2383,"mutability":"mutable","name":"state","nameLocation":"3832:5:12","nodeType":"VariableDeclaration","scope":2391,"src":"3815:22:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_UserState_$2229_memory_ptr","typeString":"struct LibSusuwatari.UserState"},"typeName":{"id":2382,"nodeType":"UserDefinedTypeName","pathNode":{"id":2381,"name":"UserState","nameLocations":["3815:9:12"],"nodeType":"IdentifierPath","referencedDeclaration":2229,"src":"3815:9:12"},"referencedDeclaration":2229,"src":"3815:9:12","typeDescriptions":{"typeIdentifier":"t_struct$_UserState_$2229_storage_ptr","typeString":"struct LibSusuwatari.UserState"}},"visibility":"internal"}],"id":2388,"initialValue":{"arguments":[{"id":2385,"name":"ownedTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2279,"src":"3874:11:12","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":2386,"name":"slot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2324,"src":"3902:4:12","typeDescriptions":{"typeIdentifier":"t_struct$_Slot_$2236_memory_ptr","typeString":"struct LibSusuwatari.Slot memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_struct$_Slot_$2236_memory_ptr","typeString":"struct LibSusuwatari.Slot memory"}],"id":2384,"name":"UserState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2229,"src":"3840:9:12","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_UserState_$2229_storage_ptr_$","typeString":"type(struct LibSusuwatari.UserState storage pointer)"}},"id":2387,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["3861:11:12","3896:4:12"],"names":["ownedTokens","slot"],"nodeType":"FunctionCall","src":"3840:74:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_UserState_$2229_memory_ptr","typeString":"struct LibSusuwatari.UserState memory"}},"nodeType":"VariableDeclarationStatement","src":"3815:99:12"},{"expression":{"id":2389,"name":"state","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2383,"src":"3934:5:12","typeDescriptions":{"typeIdentifier":"t_struct$_UserState_$2229_memory_ptr","typeString":"struct LibSusuwatari.UserState memory"}},"functionReturnParameters":2244,"id":2390,"nodeType":"Return","src":"3927:12:12"}]},"functionSelector":"a2a29856","id":2392,"implemented":true,"kind":"function","modifiers":[],"name":"getCurrentState","nameLocation":"2785:15:12","nodeType":"FunctionDefinition","parameters":{"id":2240,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2239,"mutability":"mutable","name":"sus","nameLocation":"2827:3:12","nodeType":"VariableDeclaration","scope":2392,"src":"2801:29:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$2993_storage_ptr","typeString":"struct SusuwatariStorage"},"typeName":{"id":2238,"nodeType":"UserDefinedTypeName","pathNode":{"id":2237,"name":"SusuwatariStorage","nameLocations":["2801:17:12"],"nodeType":"IdentifierPath","referencedDeclaration":2993,"src":"2801:17:12"},"referencedDeclaration":2993,"src":"2801:17:12","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$2993_storage_ptr","typeString":"struct SusuwatariStorage"}},"visibility":"internal"}],"src":"2800:31:12"},"returnParameters":{"id":2244,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2243,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2392,"src":"2853:16:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_UserState_$2229_memory_ptr","typeString":"struct LibSusuwatari.UserState"},"typeName":{"id":2242,"nodeType":"UserDefinedTypeName","pathNode":{"id":2241,"name":"UserState","nameLocations":["2853:9:12"],"nodeType":"IdentifierPath","referencedDeclaration":2229,"src":"2853:9:12"},"referencedDeclaration":2229,"src":"2853:9:12","typeDescriptions":{"typeIdentifier":"t_struct$_UserState_$2229_storage_ptr","typeString":"struct LibSusuwatari.UserState"}},"visibility":"internal"}],"src":"2852:18:12"},"scope":2763,"src":"2776:1167:12","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":2464,"nodeType":"Block","src":"4015:585:12","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2405,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"expression":{"id":2399,"name":"sus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2395,"src":"4035:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$2993_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},"id":2400,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4039:12:12","memberName":"maxSlotCount","nodeType":"MemberAccess","referencedDeclaration":2978,"src":"4035:16:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2403,"indexExpression":{"expression":{"id":2401,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4052:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2402,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4056:6:12","memberName":"sender","nodeType":"MemberAccess","src":"4052:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4035:28:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2404,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4067:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4035:33:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5573657220616c72656164792072656769737465726564","id":2406,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4070:25:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_a08d66f010282343c63a2adfb2fb2eae7af36c2d0e7cd9b2008665789fb65b40","typeString":"literal_string \"User already registered\""},"value":"User already registered"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a08d66f010282343c63a2adfb2fb2eae7af36c2d0e7cd9b2008665789fb65b40","typeString":"literal_string \"User already registered\""}],"id":2398,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4027:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2407,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4027:69:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2408,"nodeType":"ExpressionStatement","src":"4027:69:12"},{"assignments":[2411],"declarations":[{"constant":false,"id":2411,"mutability":"mutable","name":"newSusu","nameLocation":"4121:7:12","nodeType":"VariableDeclaration","scope":2464,"src":"4109:19:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Susu_$2974_memory_ptr","typeString":"struct Susu"},"typeName":{"id":2410,"nodeType":"UserDefinedTypeName","pathNode":{"id":2409,"name":"Susu","nameLocations":["4109:4:12"],"nodeType":"IdentifierPath","referencedDeclaration":2974,"src":"4109:4:12"},"referencedDeclaration":2974,"src":"4109:4:12","typeDescriptions":{"typeIdentifier":"t_struct$_Susu_$2974_storage_ptr","typeString":"struct Susu"}},"visibility":"internal"}],"id":2426,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2417,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":2413,"name":"sus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2395,"src":"4160:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$2993_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},"id":2414,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4164:10:12","memberName":"susuOwners","nodeType":"MemberAccess","referencedDeclaration":2981,"src":"4160:14:12","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":2415,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4175:6:12","memberName":"length","nodeType":"MemberAccess","src":"4160:21:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2416,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4184:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"4160:25:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"30","id":2418,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4218:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"","id":2419,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4250:2:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},{"hexValue":"","id":2420,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4284:2:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},{"hexValue":"","id":2421,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4314:2:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},{"hexValue":"","id":2422,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4340:2:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},{"expression":{"id":2423,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4366:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2424,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4370:6:12","memberName":"sender","nodeType":"MemberAccess","src":"4366:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},{"typeIdentifier":"t_address","typeString":"address"}],"id":2412,"name":"Susu","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2974,"src":"4131:4:12","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Susu_$2974_storage_ptr_$","typeString":"type(struct Susu storage pointer)"}},"id":2425,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["4151:7:12","4200:16:12","4234:14:12","4267:15:12","4301:11:12","4331:7:12","4357:7:12"],"names":["tokenId","dropCooldownTime","originLocation","currentLocation","destination","message","carrier"],"nodeType":"FunctionCall","src":"4131:257:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Susu_$2974_memory_ptr","typeString":"struct Susu memory"}},"nodeType":"VariableDeclarationStatement","src":"4109:279:12"},{"expression":{"id":2434,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":2427,"name":"sus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2395,"src":"4401:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$2993_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},"id":2431,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4405:12:12","memberName":"maxSlotCount","nodeType":"MemberAccess","referencedDeclaration":2978,"src":"4401:16:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2432,"indexExpression":{"expression":{"id":2429,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4418:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2430,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4422:6:12","memberName":"sender","nodeType":"MemberAccess","src":"4418:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4401:28:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"31","id":2433,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4432:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"4401:32:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2435,"nodeType":"ExpressionStatement","src":"4401:32:12"},{"expression":{"arguments":[{"expression":{"id":2441,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4464:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2442,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4468:6:12","memberName":"sender","nodeType":"MemberAccess","src":"4464:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"expression":{"id":2436,"name":"sus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2395,"src":"4444:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$2993_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},"id":2439,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4448:10:12","memberName":"susuOwners","nodeType":"MemberAccess","referencedDeclaration":2981,"src":"4444:14:12","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":2440,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4459:4:12","memberName":"push","nodeType":"MemberAccess","src":"4444:19:12","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_address_$dyn_storage_ptr_$_t_address_$returns$__$attached_to$_t_array$_t_address_$dyn_storage_ptr_$","typeString":"function (address[] storage pointer,address)"}},"id":2443,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4444:31:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2444,"nodeType":"ExpressionStatement","src":"4444:31:12"},{"expression":{"id":2452,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":2445,"name":"sus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2395,"src":"4486:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$2993_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},"id":2449,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4490:13:12","memberName":"tokenIdToSusu","nodeType":"MemberAccess","referencedDeclaration":2986,"src":"4486:17:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Susu_$2974_storage_$","typeString":"mapping(uint256 => struct Susu storage ref)"}},"id":2450,"indexExpression":{"expression":{"id":2447,"name":"newSusu","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2411,"src":"4504:7:12","typeDescriptions":{"typeIdentifier":"t_struct$_Susu_$2974_memory_ptr","typeString":"struct Susu memory"}},"id":2448,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4512:7:12","memberName":"tokenId","nodeType":"MemberAccess","referencedDeclaration":2961,"src":"4504:15:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4486:34:12","typeDescriptions":{"typeIdentifier":"t_struct$_Susu_$2974_storage","typeString":"struct Susu storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2451,"name":"newSusu","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2411,"src":"4523:7:12","typeDescriptions":{"typeIdentifier":"t_struct$_Susu_$2974_memory_ptr","typeString":"struct Susu memory"}},"src":"4486:44:12","typeDescriptions":{"typeIdentifier":"t_struct$_Susu_$2974_storage","typeString":"struct Susu storage ref"}},"id":2453,"nodeType":"ExpressionStatement","src":"4486:44:12"},{"expression":{"id":2462,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":2454,"name":"sus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2395,"src":"4541:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$2993_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},"id":2458,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4545:11:12","memberName":"baggedSusus","nodeType":"MemberAccess","referencedDeclaration":2992,"src":"4541:15:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":2459,"indexExpression":{"expression":{"id":2456,"name":"newSusu","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2411,"src":"4557:7:12","typeDescriptions":{"typeIdentifier":"t_struct$_Susu_$2974_memory_ptr","typeString":"struct Susu memory"}},"id":2457,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4565:7:12","memberName":"tokenId","nodeType":"MemberAccess","referencedDeclaration":2961,"src":"4557:15:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4541:32:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":2460,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4576:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2461,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4580:6:12","memberName":"sender","nodeType":"MemberAccess","src":"4576:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4541:45:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2463,"nodeType":"ExpressionStatement","src":"4541:45:12"}]},"id":2465,"implemented":true,"kind":"function","modifiers":[],"name":"registerMe","nameLocation":"3964:10:12","nodeType":"FunctionDefinition","parameters":{"id":2396,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2395,"mutability":"mutable","name":"sus","nameLocation":"4001:3:12","nodeType":"VariableDeclaration","scope":2465,"src":"3975:29:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$2993_storage_ptr","typeString":"struct SusuwatariStorage"},"typeName":{"id":2394,"nodeType":"UserDefinedTypeName","pathNode":{"id":2393,"name":"SusuwatariStorage","nameLocations":["3975:17:12"],"nodeType":"IdentifierPath","referencedDeclaration":2993,"src":"3975:17:12"},"referencedDeclaration":2993,"src":"3975:17:12","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$2993_storage_ptr","typeString":"struct SusuwatariStorage"}},"visibility":"internal"}],"src":"3974:31:12"},"returnParameters":{"id":2397,"nodeType":"ParameterList","parameters":[],"src":"4015:0:12"},"scope":2763,"src":"3955:645:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2569,"nodeType":"Block","src":"4910:425:12","statements":[{"assignments":[2500],"declarations":[{"constant":false,"id":2500,"mutability":"mutable","name":"susu","nameLocation":"4945:4:12","nodeType":"VariableDeclaration","scope":2569,"src":"4932:17:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Susu_$2974_storage_ptr","typeString":"struct Susu"},"typeName":{"id":2499,"nodeType":"UserDefinedTypeName","pathNode":{"id":2498,"name":"Susu","nameLocations":["4932:4:12"],"nodeType":"IdentifierPath","referencedDeclaration":2974,"src":"4932:4:12"},"referencedDeclaration":2974,"src":"4932:4:12","typeDescriptions":{"typeIdentifier":"t_struct$_Susu_$2974_storage_ptr","typeString":"struct Susu"}},"visibility":"internal"}],"id":2505,"initialValue":{"baseExpression":{"expression":{"id":2501,"name":"sus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2468,"src":"4952:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$2993_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},"id":2502,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4956:13:12","memberName":"tokenIdToSusu","nodeType":"MemberAccess","referencedDeclaration":2986,"src":"4952:17:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Susu_$2974_storage_$","typeString":"mapping(uint256 => struct Susu storage ref)"}},"id":2504,"indexExpression":{"id":2503,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2470,"src":"4970:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4952:26:12","typeDescriptions":{"typeIdentifier":"t_struct$_Susu_$2974_storage","typeString":"struct Susu storage ref"}},"nodeType":"VariableDeclarationStatement","src":"4932:46:12"},{"expression":{"id":2527,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2506,"name":"susu","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2500,"src":"4996:4:12","typeDescriptions":{"typeIdentifier":"t_struct$_Susu_$2974_storage_ptr","typeString":"struct Susu storage pointer"}},"id":2508,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"5001:16:12","memberName":"dropCooldownTime","nodeType":"MemberAccess","referencedDeclaration":2973,"src":"4996:21:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2526,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"333030","id":2509,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5020:3:12","typeDescriptions":{"typeIdentifier":"t_rational_300_by_1","typeString":"int_const 300"},"value":"300"},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2524,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"arguments":[{"expression":{"id":2515,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"5062:5:12","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2516,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5068:9:12","memberName":"timestamp","nodeType":"MemberAccess","src":"5062:15:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":2517,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"5079:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2518,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5083:6:12","memberName":"sender","nodeType":"MemberAccess","src":"5079:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2519,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2470,"src":"5091:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2513,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"5045:3:12","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2514,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5049:12:12","memberName":"encodePacked","nodeType":"MemberAccess","src":"5045:16:12","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2520,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5045:54:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2512,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"5035:9:12","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2521,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5035:65:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2511,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5027:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2510,"name":"uint256","nodeType":"ElementaryTypeName","src":"5027:7:12","typeDescriptions":{}}},"id":2522,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5027:74:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"hexValue":"333031","id":2523,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5104:3:12","typeDescriptions":{"typeIdentifier":"t_rational_301_by_1","typeString":"int_const 301"},"value":"301"},"src":"5027:80:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2525,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5026:82:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5020:88:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4996:112:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2528,"nodeType":"ExpressionStatement","src":"4996:112:12"},{"expression":{"id":2533,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2529,"name":"susu","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2500,"src":"5115:4:12","typeDescriptions":{"typeIdentifier":"t_struct$_Susu_$2974_storage_ptr","typeString":"struct Susu storage pointer"}},"id":2531,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"5120:14:12","memberName":"originLocation","nodeType":"MemberAccess","referencedDeclaration":2963,"src":"5115:19:12","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2532,"name":"location","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2472,"src":"5137:8:12","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"5115:30:12","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":2534,"nodeType":"ExpressionStatement","src":"5115:30:12"},{"expression":{"id":2539,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2535,"name":"susu","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2500,"src":"5152:4:12","typeDescriptions":{"typeIdentifier":"t_struct$_Susu_$2974_storage_ptr","typeString":"struct Susu storage pointer"}},"id":2537,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"5157:15:12","memberName":"currentLocation","nodeType":"MemberAccess","referencedDeclaration":2965,"src":"5152:20:12","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2538,"name":"location","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2472,"src":"5175:8:12","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"5152:31:12","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":2540,"nodeType":"ExpressionStatement","src":"5152:31:12"},{"expression":{"id":2545,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2541,"name":"susu","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2500,"src":"5190:4:12","typeDescriptions":{"typeIdentifier":"t_struct$_Susu_$2974_storage_ptr","typeString":"struct Susu storage pointer"}},"id":2543,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"5195:11:12","memberName":"destination","nodeType":"MemberAccess","referencedDeclaration":2967,"src":"5190:16:12","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2544,"name":"destination","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2474,"src":"5209:11:12","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"5190:30:12","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":2546,"nodeType":"ExpressionStatement","src":"5190:30:12"},{"expression":{"id":2551,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2547,"name":"susu","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2500,"src":"5227:4:12","typeDescriptions":{"typeIdentifier":"t_struct$_Susu_$2974_storage_ptr","typeString":"struct Susu storage pointer"}},"id":2549,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"5232:7:12","memberName":"message","nodeType":"MemberAccess","referencedDeclaration":2969,"src":"5227:12:12","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2550,"name":"message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2476,"src":"5242:7:12","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"5227:22:12","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":2552,"nodeType":"ExpressionStatement","src":"5227:22:12"},{"expression":{"id":2558,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2553,"name":"susu","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2500,"src":"5256:4:12","typeDescriptions":{"typeIdentifier":"t_struct$_Susu_$2974_storage_ptr","typeString":"struct Susu storage pointer"}},"id":2555,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"5261:7:12","memberName":"carrier","nodeType":"MemberAccess","referencedDeclaration":2971,"src":"5256:12:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":2556,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"5271:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2557,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5275:6:12","memberName":"sender","nodeType":"MemberAccess","src":"5271:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5256:25:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2559,"nodeType":"ExpressionStatement","src":"5256:25:12"},{"expression":{"id":2567,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":2560,"name":"sus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2468,"src":"5288:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$2993_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},"id":2563,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5292:11:12","memberName":"baggedSusus","nodeType":"MemberAccess","referencedDeclaration":2992,"src":"5288:15:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":2564,"indexExpression":{"id":2562,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2470,"src":"5304:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5288:24:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":2565,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"5315:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2566,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5319:6:12","memberName":"sender","nodeType":"MemberAccess","src":"5315:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5288:37:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2568,"nodeType":"ExpressionStatement","src":"5288:37:12"}]},"id":2570,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":2479,"name":"sus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2468,"src":"4776:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$2993_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}}],"id":2480,"kind":"modifierInvocation","modifierName":{"id":2478,"name":"isUserRegistered","nameLocations":["4759:16:12"],"nodeType":"IdentifierPath","referencedDeclaration":2070,"src":"4759:16:12"},"nodeType":"ModifierInvocation","src":"4759:21:12"},{"arguments":[{"id":2482,"name":"sus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2468,"src":"4795:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$2993_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},{"id":2483,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2470,"src":"4800:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2484,"kind":"modifierInvocation","modifierName":{"id":2481,"name":"mustExistSusu","nameLocations":["4781:13:12"],"nodeType":"IdentifierPath","referencedDeclaration":1982,"src":"4781:13:12"},"nodeType":"ModifierInvocation","src":"4781:27:12"},{"arguments":[{"id":2486,"name":"sus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2468,"src":"4834:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$2993_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},{"id":2487,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2470,"src":"4838:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2488,"kind":"modifierInvocation","modifierName":{"id":2485,"name":"susuMustNotHaveBeenAimed","nameLocations":["4809:24:12"],"nodeType":"IdentifierPath","referencedDeclaration":2222,"src":"4809:24:12"},"nodeType":"ModifierInvocation","src":"4809:37:12"}],"name":"aimInitialSusu","nameLocation":"4613:14:12","nodeType":"FunctionDefinition","parameters":{"id":2477,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2468,"mutability":"mutable","name":"sus","nameLocation":"4654:3:12","nodeType":"VariableDeclaration","scope":2570,"src":"4628:29:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$2993_storage_ptr","typeString":"struct SusuwatariStorage"},"typeName":{"id":2467,"nodeType":"UserDefinedTypeName","pathNode":{"id":2466,"name":"SusuwatariStorage","nameLocations":["4628:17:12"],"nodeType":"IdentifierPath","referencedDeclaration":2993,"src":"4628:17:12"},"referencedDeclaration":2993,"src":"4628:17:12","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$2993_storage_ptr","typeString":"struct SusuwatariStorage"}},"visibility":"internal"},{"constant":false,"id":2470,"mutability":"mutable","name":"tokenId","nameLocation":"4667:7:12","nodeType":"VariableDeclaration","scope":2570,"src":"4659:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2469,"name":"uint256","nodeType":"ElementaryTypeName","src":"4659:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2472,"mutability":"mutable","name":"location","nameLocation":"4690:8:12","nodeType":"VariableDeclaration","scope":2570,"src":"4676:22:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2471,"name":"string","nodeType":"ElementaryTypeName","src":"4676:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2474,"mutability":"mutable","name":"destination","nameLocation":"4714:11:12","nodeType":"VariableDeclaration","scope":2570,"src":"4700:25:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2473,"name":"string","nodeType":"ElementaryTypeName","src":"4700:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2476,"mutability":"mutable","name":"message","nameLocation":"4741:7:12","nodeType":"VariableDeclaration","scope":2570,"src":"4727:21:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2475,"name":"string","nodeType":"ElementaryTypeName","src":"4727:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4627:122:12"},"returnParameters":{"id":2497,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2490,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2570,"src":"4856:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2489,"name":"uint256","nodeType":"ElementaryTypeName","src":"4856:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2492,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2570,"src":"4865:13:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2491,"name":"string","nodeType":"ElementaryTypeName","src":"4865:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2494,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2570,"src":"4880:13:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2493,"name":"string","nodeType":"ElementaryTypeName","src":"4880:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2496,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2570,"src":"4895:13:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2495,"name":"string","nodeType":"ElementaryTypeName","src":"4895:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4855:54:12"},"scope":2763,"src":"4604:731:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2658,"nodeType":"Block","src":"5637:317:12","statements":[{"assignments":[2605],"declarations":[{"constant":false,"id":2605,"mutability":"mutable","name":"susu","nameLocation":"5667:4:12","nodeType":"VariableDeclaration","scope":2658,"src":"5654:17:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Susu_$2974_storage_ptr","typeString":"struct Susu"},"typeName":{"id":2604,"nodeType":"UserDefinedTypeName","pathNode":{"id":2603,"name":"Susu","nameLocations":["5654:4:12"],"nodeType":"IdentifierPath","referencedDeclaration":2974,"src":"5654:4:12"},"referencedDeclaration":2974,"src":"5654:4:12","typeDescriptions":{"typeIdentifier":"t_struct$_Susu_$2974_storage_ptr","typeString":"struct Susu"}},"visibility":"internal"}],"id":2610,"initialValue":{"baseExpression":{"expression":{"id":2606,"name":"sus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2573,"src":"5674:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$2993_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},"id":2607,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5678:13:12","memberName":"tokenIdToSusu","nodeType":"MemberAccess","referencedDeclaration":2986,"src":"5674:17:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Susu_$2974_storage_$","typeString":"mapping(uint256 => struct Susu storage ref)"}},"id":2609,"indexExpression":{"id":2608,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2575,"src":"5692:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5674:26:12","typeDescriptions":{"typeIdentifier":"t_struct$_Susu_$2974_storage","typeString":"struct Susu storage ref"}},"nodeType":"VariableDeclarationStatement","src":"5654:46:12"},{"expression":{"id":2632,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2611,"name":"susu","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2605,"src":"5718:4:12","typeDescriptions":{"typeIdentifier":"t_struct$_Susu_$2974_storage_ptr","typeString":"struct Susu storage pointer"}},"id":2613,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"5723:16:12","memberName":"dropCooldownTime","nodeType":"MemberAccess","referencedDeclaration":2973,"src":"5718:21:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2631,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"333030","id":2614,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5742:3:12","typeDescriptions":{"typeIdentifier":"t_rational_300_by_1","typeString":"int_const 300"},"value":"300"},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2629,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"arguments":[{"expression":{"id":2620,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"5784:5:12","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2621,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5790:9:12","memberName":"timestamp","nodeType":"MemberAccess","src":"5784:15:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":2622,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"5801:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2623,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5805:6:12","memberName":"sender","nodeType":"MemberAccess","src":"5801:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2624,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2575,"src":"5813:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2618,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"5767:3:12","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2619,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5771:12:12","memberName":"encodePacked","nodeType":"MemberAccess","src":"5767:16:12","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2625,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5767:54:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2617,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"5757:9:12","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2626,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5757:65:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2616,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5749:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2615,"name":"uint256","nodeType":"ElementaryTypeName","src":"5749:7:12","typeDescriptions":{}}},"id":2627,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5749:74:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"hexValue":"333031","id":2628,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5826:3:12","typeDescriptions":{"typeIdentifier":"t_rational_301_by_1","typeString":"int_const 301"},"value":"301"},"src":"5749:80:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2630,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5748:82:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5742:88:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5718:112:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2633,"nodeType":"ExpressionStatement","src":"5718:112:12"},{"expression":{"id":2638,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2634,"name":"susu","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2605,"src":"5837:4:12","typeDescriptions":{"typeIdentifier":"t_struct$_Susu_$2974_storage_ptr","typeString":"struct Susu storage pointer"}},"id":2636,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"5842:15:12","memberName":"currentLocation","nodeType":"MemberAccess","referencedDeclaration":2965,"src":"5837:20:12","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2637,"name":"location","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2577,"src":"5860:8:12","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"5837:31:12","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":2639,"nodeType":"ExpressionStatement","src":"5837:31:12"},{"expression":{"id":2647,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2640,"name":"susu","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2605,"src":"5875:4:12","typeDescriptions":{"typeIdentifier":"t_struct$_Susu_$2974_storage_ptr","typeString":"struct Susu storage pointer"}},"id":2642,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"5880:7:12","memberName":"carrier","nodeType":"MemberAccess","referencedDeclaration":2971,"src":"5875:12:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"30","id":2645,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5898:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2644,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5890:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2643,"name":"address","nodeType":"ElementaryTypeName","src":"5890:7:12","typeDescriptions":{}}},"id":2646,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5890:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5875:25:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2648,"nodeType":"ExpressionStatement","src":"5875:25:12"},{"expression":{"id":2656,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":2649,"name":"sus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2573,"src":"5907:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$2993_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},"id":2652,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5911:11:12","memberName":"baggedSusus","nodeType":"MemberAccess","referencedDeclaration":2992,"src":"5907:15:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":2653,"indexExpression":{"id":2651,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2575,"src":"5923:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5907:24:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":2654,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"5934:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2655,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5938:6:12","memberName":"sender","nodeType":"MemberAccess","src":"5934:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5907:37:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2657,"nodeType":"ExpressionStatement","src":"5907:37:12"}]},"id":2659,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":2584,"name":"sus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2573,"src":"5513:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$2993_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}}],"id":2585,"kind":"modifierInvocation","modifierName":{"id":2583,"name":"isUserRegistered","nameLocations":["5496:16:12"],"nodeType":"IdentifierPath","referencedDeclaration":2070,"src":"5496:16:12"},"nodeType":"ModifierInvocation","src":"5496:21:12"},{"arguments":[{"id":2587,"name":"sus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2573,"src":"5532:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$2993_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},{"id":2588,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2575,"src":"5537:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2589,"kind":"modifierInvocation","modifierName":{"id":2586,"name":"mustExistSusu","nameLocations":["5518:13:12"],"nodeType":"IdentifierPath","referencedDeclaration":1982,"src":"5518:13:12"},"nodeType":"ModifierInvocation","src":"5518:27:12"},{"arguments":[{"id":2591,"name":"sus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2573,"src":"5560:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$2993_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},{"id":2592,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2575,"src":"5565:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2593,"kind":"modifierInvocation","modifierName":{"id":2590,"name":"mustCarrySusu","nameLocations":["5546:13:12"],"nodeType":"IdentifierPath","referencedDeclaration":2052,"src":"5546:13:12"},"nodeType":"ModifierInvocation","src":"5546:27:12"}],"name":"dropSusu","nameLocation":"5356:8:12","nodeType":"FunctionDefinition","parameters":{"id":2582,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2573,"mutability":"mutable","name":"sus","nameLocation":"5391:3:12","nodeType":"VariableDeclaration","scope":2659,"src":"5365:29:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$2993_storage_ptr","typeString":"struct SusuwatariStorage"},"typeName":{"id":2572,"nodeType":"UserDefinedTypeName","pathNode":{"id":2571,"name":"SusuwatariStorage","nameLocations":["5365:17:12"],"nodeType":"IdentifierPath","referencedDeclaration":2993,"src":"5365:17:12"},"referencedDeclaration":2993,"src":"5365:17:12","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$2993_storage_ptr","typeString":"struct SusuwatariStorage"}},"visibility":"internal"},{"constant":false,"id":2575,"mutability":"mutable","name":"tokenId","nameLocation":"5404:7:12","nodeType":"VariableDeclaration","scope":2659,"src":"5396:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2574,"name":"uint256","nodeType":"ElementaryTypeName","src":"5396:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2577,"mutability":"mutable","name":"location","nameLocation":"5427:8:12","nodeType":"VariableDeclaration","scope":2659,"src":"5413:22:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2576,"name":"string","nodeType":"ElementaryTypeName","src":"5413:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2579,"mutability":"mutable","name":"destination","nameLocation":"5451:11:12","nodeType":"VariableDeclaration","scope":2659,"src":"5437:25:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2578,"name":"string","nodeType":"ElementaryTypeName","src":"5437:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2581,"mutability":"mutable","name":"message","nameLocation":"5478:7:12","nodeType":"VariableDeclaration","scope":2659,"src":"5464:21:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2580,"name":"string","nodeType":"ElementaryTypeName","src":"5464:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5364:122:12"},"returnParameters":{"id":2602,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2595,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2659,"src":"5583:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2594,"name":"uint256","nodeType":"ElementaryTypeName","src":"5583:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2597,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2659,"src":"5592:13:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2596,"name":"string","nodeType":"ElementaryTypeName","src":"5592:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2599,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2659,"src":"5607:13:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2598,"name":"string","nodeType":"ElementaryTypeName","src":"5607:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2601,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2659,"src":"5622:13:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2600,"name":"string","nodeType":"ElementaryTypeName","src":"5622:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5582:54:12"},"scope":2763,"src":"5347:607:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2761,"nodeType":"Block","src":"6296:450:12","statements":[{"assignments":[2698],"declarations":[{"constant":false,"id":2698,"mutability":"mutable","name":"susu","nameLocation":"6323:4:12","nodeType":"VariableDeclaration","scope":2761,"src":"6310:17:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Susu_$2974_storage_ptr","typeString":"struct Susu"},"typeName":{"id":2697,"nodeType":"UserDefinedTypeName","pathNode":{"id":2696,"name":"Susu","nameLocations":["6310:4:12"],"nodeType":"IdentifierPath","referencedDeclaration":2974,"src":"6310:4:12"},"referencedDeclaration":2974,"src":"6310:4:12","typeDescriptions":{"typeIdentifier":"t_struct$_Susu_$2974_storage_ptr","typeString":"struct Susu"}},"visibility":"internal"}],"id":2703,"initialValue":{"baseExpression":{"expression":{"id":2699,"name":"sus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2662,"src":"6330:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$2993_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},"id":2700,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6334:13:12","memberName":"tokenIdToSusu","nodeType":"MemberAccess","referencedDeclaration":2986,"src":"6330:17:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Susu_$2974_storage_$","typeString":"mapping(uint256 => struct Susu storage ref)"}},"id":2702,"indexExpression":{"id":2701,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2664,"src":"6348:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6330:26:12","typeDescriptions":{"typeIdentifier":"t_struct$_Susu_$2974_storage","typeString":"struct Susu storage ref"}},"nodeType":"VariableDeclarationStatement","src":"6310:46:12"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":2718,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"expression":{"id":2708,"name":"susu","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2698,"src":"6415:4:12","typeDescriptions":{"typeIdentifier":"t_struct$_Susu_$2974_storage_ptr","typeString":"struct Susu storage pointer"}},"id":2709,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6420:15:12","memberName":"currentLocation","nodeType":"MemberAccess","referencedDeclaration":2965,"src":"6415:20:12","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}],"expression":{"id":2706,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"6398:3:12","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2707,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6402:12:12","memberName":"encodePacked","nodeType":"MemberAccess","src":"6398:16:12","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2710,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6398:38:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2705,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"6388:9:12","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2711,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6388:49:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"arguments":[{"id":2715,"name":"location","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2666,"src":"6468:8:12","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":2713,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"6451:3:12","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2714,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6455:12:12","memberName":"encodePacked","nodeType":"MemberAccess","src":"6451:16:12","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2716,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6451:26:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2712,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"6441:9:12","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2717,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6441:37:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"6388:90:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"43616c6c6572206973206e6f7420696e2074686520636f7272656374206c6f636174696f6e","id":2719,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6490:39:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a10242b52f0dfe9748f51958953ea7f78581fa11713137865a494781a75de5","typeString":"literal_string \"Caller is not in the correct location\""},"value":"Caller is not in the correct location"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_88a10242b52f0dfe9748f51958953ea7f78581fa11713137865a494781a75de5","typeString":"literal_string \"Caller is not in the correct location\""}],"id":2704,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6370:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2720,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6370:166:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2721,"nodeType":"ExpressionStatement","src":"6370:166:12"},{"expression":{"id":2743,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2722,"name":"susu","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2698,"src":"6548:4:12","typeDescriptions":{"typeIdentifier":"t_struct$_Susu_$2974_storage_ptr","typeString":"struct Susu storage pointer"}},"id":2724,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"6553:16:12","memberName":"dropCooldownTime","nodeType":"MemberAccess","referencedDeclaration":2973,"src":"6548:21:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2742,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"333030","id":2725,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6572:3:12","typeDescriptions":{"typeIdentifier":"t_rational_300_by_1","typeString":"int_const 300"},"value":"300"},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2740,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"arguments":[{"expression":{"id":2731,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"6614:5:12","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2732,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6620:9:12","memberName":"timestamp","nodeType":"MemberAccess","src":"6614:15:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":2733,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6631:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2734,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6635:6:12","memberName":"sender","nodeType":"MemberAccess","src":"6631:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2735,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2664,"src":"6643:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2729,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"6597:3:12","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2730,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6601:12:12","memberName":"encodePacked","nodeType":"MemberAccess","src":"6597:16:12","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2736,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6597:54:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2728,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"6587:9:12","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2737,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6587:65:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2727,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6579:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2726,"name":"uint256","nodeType":"ElementaryTypeName","src":"6579:7:12","typeDescriptions":{}}},"id":2738,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6579:74:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"hexValue":"333031","id":2739,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6656:3:12","typeDescriptions":{"typeIdentifier":"t_rational_301_by_1","typeString":"int_const 301"},"value":"301"},"src":"6579:80:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2741,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6578:82:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6572:88:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6548:112:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2744,"nodeType":"ExpressionStatement","src":"6548:112:12"},{"expression":{"id":2750,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2745,"name":"susu","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2698,"src":"6667:4:12","typeDescriptions":{"typeIdentifier":"t_struct$_Susu_$2974_storage_ptr","typeString":"struct Susu storage pointer"}},"id":2747,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"6672:7:12","memberName":"carrier","nodeType":"MemberAccess","referencedDeclaration":2971,"src":"6667:12:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":2748,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6682:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2749,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6686:6:12","memberName":"sender","nodeType":"MemberAccess","src":"6682:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6667:25:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2751,"nodeType":"ExpressionStatement","src":"6667:25:12"},{"expression":{"id":2759,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":2752,"name":"sus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2662,"src":"6699:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$2993_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},"id":2755,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6703:11:12","memberName":"baggedSusus","nodeType":"MemberAccess","referencedDeclaration":2992,"src":"6699:15:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":2756,"indexExpression":{"id":2754,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2664,"src":"6715:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6699:24:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":2757,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6726:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2758,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6730:6:12","memberName":"sender","nodeType":"MemberAccess","src":"6726:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6699:37:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2760,"nodeType":"ExpressionStatement","src":"6699:37:12"}]},"id":2762,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":2673,"name":"sus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2662,"src":"6134:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$2993_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}}],"id":2674,"kind":"modifierInvocation","modifierName":{"id":2672,"name":"isUserRegistered","nameLocations":["6117:16:12"],"nodeType":"IdentifierPath","referencedDeclaration":2070,"src":"6117:16:12"},"nodeType":"ModifierInvocation","src":"6117:21:12"},{"arguments":[{"id":2676,"name":"sus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2662,"src":"6153:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$2993_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},{"id":2677,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2664,"src":"6158:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2678,"kind":"modifierInvocation","modifierName":{"id":2675,"name":"mustExistSusu","nameLocations":["6139:13:12"],"nodeType":"IdentifierPath","referencedDeclaration":1982,"src":"6139:13:12"},"nodeType":"ModifierInvocation","src":"6139:27:12"},{"arguments":[{"id":2680,"name":"sus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2662,"src":"6184:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$2993_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},{"id":2681,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2664,"src":"6189:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2682,"kind":"modifierInvocation","modifierName":{"id":2679,"name":"mustNotCarrySusu","nameLocations":["6167:16:12"],"nodeType":"IdentifierPath","referencedDeclaration":2118,"src":"6167:16:12"},"nodeType":"ModifierInvocation","src":"6167:30:12"},{"arguments":[{"id":2684,"name":"sus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2662,"src":"6220:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$2993_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},{"id":2685,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2664,"src":"6224:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2686,"kind":"modifierInvocation","modifierName":{"id":2683,"name":"isNotBeingCarriedSusu","nameLocations":["6198:21:12"],"nodeType":"IdentifierPath","referencedDeclaration":2146,"src":"6198:21:12"},"nodeType":"ModifierInvocation","src":"6198:34:12"}],"name":"tryPickupSusu","nameLocation":"5972:13:12","nodeType":"FunctionDefinition","parameters":{"id":2671,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2662,"mutability":"mutable","name":"sus","nameLocation":"6012:3:12","nodeType":"VariableDeclaration","scope":2762,"src":"5986:29:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$2993_storage_ptr","typeString":"struct SusuwatariStorage"},"typeName":{"id":2661,"nodeType":"UserDefinedTypeName","pathNode":{"id":2660,"name":"SusuwatariStorage","nameLocations":["5986:17:12"],"nodeType":"IdentifierPath","referencedDeclaration":2993,"src":"5986:17:12"},"referencedDeclaration":2993,"src":"5986:17:12","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$2993_storage_ptr","typeString":"struct SusuwatariStorage"}},"visibility":"internal"},{"constant":false,"id":2664,"mutability":"mutable","name":"tokenId","nameLocation":"6025:7:12","nodeType":"VariableDeclaration","scope":2762,"src":"6017:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2663,"name":"uint256","nodeType":"ElementaryTypeName","src":"6017:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2666,"mutability":"mutable","name":"location","nameLocation":"6048:8:12","nodeType":"VariableDeclaration","scope":2762,"src":"6034:22:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2665,"name":"string","nodeType":"ElementaryTypeName","src":"6034:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2668,"mutability":"mutable","name":"destination","nameLocation":"6072:11:12","nodeType":"VariableDeclaration","scope":2762,"src":"6058:25:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2667,"name":"string","nodeType":"ElementaryTypeName","src":"6058:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2670,"mutability":"mutable","name":"message","nameLocation":"6099:7:12","nodeType":"VariableDeclaration","scope":2762,"src":"6085:21:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2669,"name":"string","nodeType":"ElementaryTypeName","src":"6085:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5985:122:12"},"returnParameters":{"id":2695,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2688,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2762,"src":"6242:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2687,"name":"uint256","nodeType":"ElementaryTypeName","src":"6242:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2690,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2762,"src":"6251:13:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2689,"name":"string","nodeType":"ElementaryTypeName","src":"6251:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2692,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2762,"src":"6266:13:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2691,"name":"string","nodeType":"ElementaryTypeName","src":"6266:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2694,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2762,"src":"6281:13:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2693,"name":"string","nodeType":"ElementaryTypeName","src":"6281:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6241:54:12"},"scope":2763,"src":"5963:783:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":2764,"src":"253:6500:12","usedErrors":[]}],"src":"34:6719:12"},"id":12},"contracts/SusuwatariFacet.sol":{"ast":{"absolutePath":"contracts/SusuwatariFacet.sol","exportedSymbols":{"Address":[329],"LibSusuwatari":[2763],"Math":[1454],"SignedMath":[1559],"StorageHandler":[3045],"Strings":[588],"SusuwatariFacet":[2902],"SusuwatariStorage":[2993],"UsingDiamondOwner":[3071]},"id":2903,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2765,"literals":["solidity","^","0.8",".18"],"nodeType":"PragmaDirective","src":"35:24:13"},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"@openzeppelin/contracts/utils/Address.sol","id":2766,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2903,"sourceUnit":330,"src":"63:51:13","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","file":"@openzeppelin/contracts/utils/Strings.sol","id":2767,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2903,"sourceUnit":589,"src":"116:51:13","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/SusuwatariStorage.sol","file":"./SusuwatariStorage.sol","id":2770,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2903,"sourceUnit":3046,"src":"169:74:13","symbolAliases":[{"foreign":{"id":2768,"name":"SusuwatariStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2993,"src":"177:17:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":2769,"name":"StorageHandler","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3045,"src":"196:14:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/LibSusuwatari.sol","file":"./LibSusuwatari.sol","id":2772,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2903,"sourceUnit":2764,"src":"245:50:13","symbolAliases":[{"foreign":{"id":2771,"name":"LibSusuwatari","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2763,"src":"253:13:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"hardhat-deploy/solc_0.8/diamond/UsingDiamondOwner.sol","file":"hardhat-deploy/solc_0.8/diamond/UsingDiamondOwner.sol","id":2774,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2903,"sourceUnit":3072,"src":"297:88:13","symbolAliases":[{"foreign":{"id":2773,"name":"UsingDiamondOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3071,"src":"305:17:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2776,"name":"StorageHandler","nameLocations":["669:14:13"],"nodeType":"IdentifierPath","referencedDeclaration":3045,"src":"669:14:13"},"id":2777,"nodeType":"InheritanceSpecifier","src":"669:14:13"},{"baseName":{"id":2778,"name":"UsingDiamondOwner","nameLocations":["685:17:13"],"nodeType":"IdentifierPath","referencedDeclaration":3071,"src":"685:17:13"},"id":2779,"nodeType":"InheritanceSpecifier","src":"685:17:13"}],"canonicalName":"SusuwatariFacet","contractDependencies":[],"contractKind":"contract","documentation":{"id":2775,"nodeType":"StructuredDocumentation","src":"389:250:13","text":" @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n the Metadata extension, but not including the Enumerable extension, which is available separately as\n {ERC721Enumerable}."},"fullyImplemented":true,"id":2902,"linearizedBaseContracts":[2902,3071,3045],"name":"SusuwatariFacet","nameLocation":"650:15:13","nodeType":"ContractDefinition","nodes":[{"global":false,"id":2782,"libraryName":{"id":2780,"name":"Address","nameLocations":["716:7:13"],"nodeType":"IdentifierPath","referencedDeclaration":329,"src":"716:7:13"},"nodeType":"UsingForDirective","src":"710:26:13","typeName":{"id":2781,"name":"address","nodeType":"ElementaryTypeName","src":"728:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"global":false,"id":2785,"libraryName":{"id":2783,"name":"Strings","nameLocations":["748:7:13"],"nodeType":"IdentifierPath","referencedDeclaration":588,"src":"748:7:13"},"nodeType":"UsingForDirective","src":"742:26:13","typeName":{"id":2784,"name":"uint256","nodeType":"ElementaryTypeName","src":"760:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"body":{"id":2795,"nodeType":"Block","src":"807:51:13","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":2791,"name":"susu","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3005,"src":"843:4:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_SusuwatariStorage_$2993_storage_ptr_$","typeString":"function () pure returns (struct SusuwatariStorage storage pointer)"}},"id":2792,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"843:6:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$2993_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_SusuwatariStorage_$2993_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}],"expression":{"id":2788,"name":"LibSusuwatari","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2763,"src":"818:13:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_LibSusuwatari_$2763_$","typeString":"type(library LibSusuwatari)"}},"id":2790,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"832:10:13","memberName":"registerMe","nodeType":"MemberAccess","referencedDeclaration":2465,"src":"818:24:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_SusuwatariStorage_$2993_storage_ptr_$returns$__$","typeString":"function (struct SusuwatariStorage storage pointer)"}},"id":2793,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"818:32:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2794,"nodeType":"ExpressionStatement","src":"818:32:13"}]},"functionSelector":"9a198d61","id":2796,"implemented":true,"kind":"function","modifiers":[],"name":"registerMe","nameLocation":"785:10:13","nodeType":"FunctionDefinition","parameters":{"id":2786,"nodeType":"ParameterList","parameters":[],"src":"795:2:13"},"returnParameters":{"id":2787,"nodeType":"ParameterList","parameters":[],"src":"807:0:13"},"scope":2902,"src":"776:82:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":2825,"nodeType":"Block","src":"1079:103:13","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":2817,"name":"susu","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3005,"src":"1126:4:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_SusuwatariStorage_$2993_storage_ptr_$","typeString":"function () pure returns (struct SusuwatariStorage storage pointer)"}},"id":2818,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1126:6:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$2993_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},{"id":2819,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2798,"src":"1134:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2820,"name":"location","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2800,"src":"1143:8:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":2821,"name":"destination","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2802,"src":"1153:11:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":2822,"name":"message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2804,"src":"1166:7:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_SusuwatariStorage_$2993_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":2815,"name":"LibSusuwatari","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2763,"src":"1097:13:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_LibSusuwatari_$2763_$","typeString":"type(library LibSusuwatari)"}},"id":2816,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1111:14:13","memberName":"aimInitialSusu","nodeType":"MemberAccess","referencedDeclaration":2570,"src":"1097:28:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_SusuwatariStorage_$2993_storage_ptr_$_t_uint256_$_t_string_memory_ptr_$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$_t_uint256_$_t_string_memory_ptr_$_t_string_memory_ptr_$_t_string_memory_ptr_$","typeString":"function (struct SusuwatariStorage storage pointer,uint256,string memory,string memory,string memory) returns (uint256,string memory,string memory,string memory)"}},"id":2823,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1097:77:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_string_memory_ptr_$_t_string_memory_ptr_$_t_string_memory_ptr_$","typeString":"tuple(uint256,string memory,string memory,string memory)"}},"functionReturnParameters":2814,"id":2824,"nodeType":"Return","src":"1090:84:13"}]},"functionSelector":"78630748","id":2826,"implemented":true,"kind":"function","modifiers":[],"name":"aimInitialSusu","nameLocation":"875:14:13","nodeType":"FunctionDefinition","parameters":{"id":2805,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2798,"mutability":"mutable","name":"tokenId","nameLocation":"898:7:13","nodeType":"VariableDeclaration","scope":2826,"src":"890:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2797,"name":"uint256","nodeType":"ElementaryTypeName","src":"890:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2800,"mutability":"mutable","name":"location","nameLocation":"921:8:13","nodeType":"VariableDeclaration","scope":2826,"src":"907:22:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2799,"name":"string","nodeType":"ElementaryTypeName","src":"907:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2802,"mutability":"mutable","name":"destination","nameLocation":"945:11:13","nodeType":"VariableDeclaration","scope":2826,"src":"931:25:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2801,"name":"string","nodeType":"ElementaryTypeName","src":"931:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2804,"mutability":"mutable","name":"message","nameLocation":"972:7:13","nodeType":"VariableDeclaration","scope":2826,"src":"958:21:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2803,"name":"string","nodeType":"ElementaryTypeName","src":"958:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"889:91:13"},"returnParameters":{"id":2814,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2807,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2826,"src":"1019:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2806,"name":"uint256","nodeType":"ElementaryTypeName","src":"1019:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2809,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2826,"src":"1028:13:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2808,"name":"string","nodeType":"ElementaryTypeName","src":"1028:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2811,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2826,"src":"1043:13:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2810,"name":"string","nodeType":"ElementaryTypeName","src":"1043:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2813,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2826,"src":"1058:13:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2812,"name":"string","nodeType":"ElementaryTypeName","src":"1058:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1018:54:13"},"scope":2902,"src":"866:316:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":2855,"nodeType":"Block","src":"1397:97:13","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":2847,"name":"susu","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3005,"src":"1438:4:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_SusuwatariStorage_$2993_storage_ptr_$","typeString":"function () pure returns (struct SusuwatariStorage storage pointer)"}},"id":2848,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1438:6:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$2993_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},{"id":2849,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2828,"src":"1446:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2850,"name":"location","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2830,"src":"1455:8:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":2851,"name":"destination","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2832,"src":"1465:11:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":2852,"name":"message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2834,"src":"1478:7:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_SusuwatariStorage_$2993_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":2845,"name":"LibSusuwatari","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2763,"src":"1415:13:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_LibSusuwatari_$2763_$","typeString":"type(library LibSusuwatari)"}},"id":2846,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1429:8:13","memberName":"dropSusu","nodeType":"MemberAccess","referencedDeclaration":2659,"src":"1415:22:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_SusuwatariStorage_$2993_storage_ptr_$_t_uint256_$_t_string_memory_ptr_$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$_t_uint256_$_t_string_memory_ptr_$_t_string_memory_ptr_$_t_string_memory_ptr_$","typeString":"function (struct SusuwatariStorage storage pointer,uint256,string memory,string memory,string memory) returns (uint256,string memory,string memory,string memory)"}},"id":2853,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1415:71:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_string_memory_ptr_$_t_string_memory_ptr_$_t_string_memory_ptr_$","typeString":"tuple(uint256,string memory,string memory,string memory)"}},"functionReturnParameters":2844,"id":2854,"nodeType":"Return","src":"1408:78:13"}]},"functionSelector":"83d4fdce","id":2856,"implemented":true,"kind":"function","modifiers":[],"name":"dropSusu","nameLocation":"1199:8:13","nodeType":"FunctionDefinition","parameters":{"id":2835,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2828,"mutability":"mutable","name":"tokenId","nameLocation":"1216:7:13","nodeType":"VariableDeclaration","scope":2856,"src":"1208:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2827,"name":"uint256","nodeType":"ElementaryTypeName","src":"1208:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2830,"mutability":"mutable","name":"location","nameLocation":"1239:8:13","nodeType":"VariableDeclaration","scope":2856,"src":"1225:22:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2829,"name":"string","nodeType":"ElementaryTypeName","src":"1225:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2832,"mutability":"mutable","name":"destination","nameLocation":"1263:11:13","nodeType":"VariableDeclaration","scope":2856,"src":"1249:25:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2831,"name":"string","nodeType":"ElementaryTypeName","src":"1249:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2834,"mutability":"mutable","name":"message","nameLocation":"1290:7:13","nodeType":"VariableDeclaration","scope":2856,"src":"1276:21:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2833,"name":"string","nodeType":"ElementaryTypeName","src":"1276:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1207:91:13"},"returnParameters":{"id":2844,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2837,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2856,"src":"1337:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2836,"name":"uint256","nodeType":"ElementaryTypeName","src":"1337:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2839,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2856,"src":"1346:13:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2838,"name":"string","nodeType":"ElementaryTypeName","src":"1346:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2841,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2856,"src":"1361:13:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2840,"name":"string","nodeType":"ElementaryTypeName","src":"1361:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2843,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2856,"src":"1376:13:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2842,"name":"string","nodeType":"ElementaryTypeName","src":"1376:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1336:54:13"},"scope":2902,"src":"1190:304:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":2885,"nodeType":"Block","src":"1714:102:13","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":2877,"name":"susu","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3005,"src":"1760:4:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_SusuwatariStorage_$2993_storage_ptr_$","typeString":"function () pure returns (struct SusuwatariStorage storage pointer)"}},"id":2878,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1760:6:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$2993_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}},{"id":2879,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2858,"src":"1768:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2880,"name":"location","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2860,"src":"1777:8:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":2881,"name":"destination","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2862,"src":"1787:11:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":2882,"name":"message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2864,"src":"1800:7:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_SusuwatariStorage_$2993_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":2875,"name":"LibSusuwatari","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2763,"src":"1732:13:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_LibSusuwatari_$2763_$","typeString":"type(library LibSusuwatari)"}},"id":2876,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1746:13:13","memberName":"tryPickupSusu","nodeType":"MemberAccess","referencedDeclaration":2762,"src":"1732:27:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_SusuwatariStorage_$2993_storage_ptr_$_t_uint256_$_t_string_memory_ptr_$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$_t_uint256_$_t_string_memory_ptr_$_t_string_memory_ptr_$_t_string_memory_ptr_$","typeString":"function (struct SusuwatariStorage storage pointer,uint256,string memory,string memory,string memory) returns (uint256,string memory,string memory,string memory)"}},"id":2883,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1732:76:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_string_memory_ptr_$_t_string_memory_ptr_$_t_string_memory_ptr_$","typeString":"tuple(uint256,string memory,string memory,string memory)"}},"functionReturnParameters":2874,"id":2884,"nodeType":"Return","src":"1725:83:13"}]},"functionSelector":"5fd9a90d","id":2886,"implemented":true,"kind":"function","modifiers":[],"name":"tryPickupSusu","nameLocation":"1511:13:13","nodeType":"FunctionDefinition","parameters":{"id":2865,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2858,"mutability":"mutable","name":"tokenId","nameLocation":"1533:7:13","nodeType":"VariableDeclaration","scope":2886,"src":"1525:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2857,"name":"uint256","nodeType":"ElementaryTypeName","src":"1525:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2860,"mutability":"mutable","name":"location","nameLocation":"1556:8:13","nodeType":"VariableDeclaration","scope":2886,"src":"1542:22:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2859,"name":"string","nodeType":"ElementaryTypeName","src":"1542:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2862,"mutability":"mutable","name":"destination","nameLocation":"1580:11:13","nodeType":"VariableDeclaration","scope":2886,"src":"1566:25:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2861,"name":"string","nodeType":"ElementaryTypeName","src":"1566:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2864,"mutability":"mutable","name":"message","nameLocation":"1607:7:13","nodeType":"VariableDeclaration","scope":2886,"src":"1593:21:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2863,"name":"string","nodeType":"ElementaryTypeName","src":"1593:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1524:91:13"},"returnParameters":{"id":2874,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2867,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2886,"src":"1654:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2866,"name":"uint256","nodeType":"ElementaryTypeName","src":"1654:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2869,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2886,"src":"1663:13:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2868,"name":"string","nodeType":"ElementaryTypeName","src":"1663:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2871,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2886,"src":"1678:13:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2870,"name":"string","nodeType":"ElementaryTypeName","src":"1678:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2873,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2886,"src":"1693:13:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2872,"name":"string","nodeType":"ElementaryTypeName","src":"1693:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1653:54:13"},"scope":2902,"src":"1502:314:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":2900,"nodeType":"Block","src":"1961:63:13","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":2896,"name":"susu","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3005,"src":"2009:4:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_SusuwatariStorage_$2993_storage_ptr_$","typeString":"function () pure returns (struct SusuwatariStorage storage pointer)"}},"id":2897,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2009:6:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$2993_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_SusuwatariStorage_$2993_storage_ptr","typeString":"struct SusuwatariStorage storage pointer"}],"expression":{"id":2894,"name":"LibSusuwatari","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2763,"src":"1979:13:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_LibSusuwatari_$2763_$","typeString":"type(library LibSusuwatari)"}},"id":2895,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1993:15:13","memberName":"getCurrentState","nodeType":"MemberAccess","referencedDeclaration":2392,"src":"1979:29:13","typeDescriptions":{"typeIdentifier":"t_function_delegatecall_view$_t_struct$_SusuwatariStorage_$2993_storage_ptr_$returns$_t_struct$_UserState_$2229_memory_ptr_$","typeString":"function (struct SusuwatariStorage storage pointer) view returns (struct LibSusuwatari.UserState memory)"}},"id":2898,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1979:37:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_UserState_$2229_memory_ptr","typeString":"struct LibSusuwatari.UserState memory"}},"functionReturnParameters":2893,"id":2899,"nodeType":"Return","src":"1972:44:13"}]},"functionSelector":"378aa701","id":2901,"implemented":true,"kind":"function","modifiers":[{"id":2889,"kind":"modifierInvocation","modifierName":{"id":2888,"name":"onlyOwner","nameLocations":["1895:9:13"],"nodeType":"IdentifierPath","referencedDeclaration":3070,"src":"1895:9:13"},"nodeType":"ModifierInvocation","src":"1895:9:13"}],"name":"getCurrentState","nameLocation":"1833:15:13","nodeType":"FunctionDefinition","parameters":{"id":2887,"nodeType":"ParameterList","parameters":[],"src":"1848:2:13"},"returnParameters":{"id":2893,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2892,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2901,"src":"1923:30:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_UserState_$2229_memory_ptr","typeString":"struct LibSusuwatari.UserState"},"typeName":{"id":2891,"nodeType":"UserDefinedTypeName","pathNode":{"id":2890,"name":"LibSusuwatari.UserState","nameLocations":["1923:13:13","1937:9:13"],"nodeType":"IdentifierPath","referencedDeclaration":2229,"src":"1923:23:13"},"referencedDeclaration":2229,"src":"1923:23:13","typeDescriptions":{"typeIdentifier":"t_struct$_UserState_$2229_storage_ptr","typeString":"struct LibSusuwatari.UserState"}},"visibility":"internal"}],"src":"1922:32:13"},"scope":2902,"src":"1824:200:13","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2903,"src":"641:1386:13","usedErrors":[]}],"src":"35:1994:13"},"id":13},"contracts/SusuwatariLeafWalletFacet.sol":{"ast":{"absolutePath":"contracts/SusuwatariLeafWalletFacet.sol","exportedSymbols":{"Context":[359],"ILeafWalletRegistryActivate":[1575],"ILeafWalletRegistryCore":[1605],"LeafWalletRegistryActivate":[1796],"LeafWalletRegistryCore":[1953],"LeafWalletStorage":[2959],"LibDiamond":[3984],"StorageHandler":[3045],"SusuwatariLeafWalletFacet":[2928],"SusuwatariStorage":[2993]},"id":2929,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2904,"literals":["solidity","^","0.8",".18"],"nodeType":"PragmaDirective","src":"34:24:14"},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"@openzeppelin/contracts/utils/Context.sol","id":2905,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2929,"sourceUnit":360,"src":"62:51:14","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/LeafWalletRegistryActivate.sol","file":"./LeafWalletRegistryActivate.sol","id":2906,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2929,"sourceUnit":1797,"src":"115:42:14","symbolAliases":[],"unitAlias":""},{"absolutePath":"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol","file":"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol","id":2908,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2929,"sourceUnit":3985,"src":"159:84:14","symbolAliases":[{"foreign":{"id":2907,"name":"LibDiamond","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3984,"src":"167:10:14","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/SusuwatariStorage.sol","file":"./SusuwatariStorage.sol","id":2910,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2929,"sourceUnit":3046,"src":"245:58:14","symbolAliases":[{"foreign":{"id":2909,"name":"SusuwatariStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2993,"src":"253:17:14","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2911,"name":"LeafWalletRegistryActivate","nameLocations":["347:26:14"],"nodeType":"IdentifierPath","referencedDeclaration":1796,"src":"347:26:14"},"id":2912,"nodeType":"InheritanceSpecifier","src":"347:26:14"},{"baseName":{"id":2913,"name":"Context","nameLocations":["375:7:14"],"nodeType":"IdentifierPath","referencedDeclaration":359,"src":"375:7:14"},"id":2914,"nodeType":"InheritanceSpecifier","src":"375:7:14"}],"canonicalName":"SusuwatariLeafWalletFacet","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":2928,"linearizedBaseContracts":[2928,359,1796,1953,3045,1575,1605],"name":"SusuwatariLeafWalletFacet","nameLocation":"318:25:14","nodeType":"ContractDefinition","nodes":[{"baseFunctions":[1762],"body":{"id":2926,"nodeType":"Block","src":"472:67:14","statements":[{"expression":{"arguments":[{"id":2923,"name":"assignee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2916,"src":"522:8:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":2920,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"483:5:14","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_SusuwatariLeafWalletFacet_$2928_$","typeString":"type(contract super SusuwatariLeafWalletFacet)"}},"id":2922,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"489:32:14","memberName":"assignActivatableAddressToSender","nodeType":"MemberAccess","referencedDeclaration":1762,"src":"483:38:14","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":2924,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"483:48:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2925,"nodeType":"ExpressionStatement","src":"483:48:14"}]},"functionSelector":"ec949297","id":2927,"implemented":true,"kind":"function","modifiers":[],"name":"assignActivatableAddressToSender","nameLocation":"406:32:14","nodeType":"FunctionDefinition","overrides":{"id":2918,"nodeType":"OverrideSpecifier","overrides":[],"src":"464:8:14"},"parameters":{"id":2917,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2916,"mutability":"mutable","name":"assignee","nameLocation":"447:8:14","nodeType":"VariableDeclaration","scope":2927,"src":"439:16:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2915,"name":"address","nodeType":"ElementaryTypeName","src":"439:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"438:18:14"},"returnParameters":{"id":2919,"nodeType":"ParameterList","parameters":[],"src":"472:0:14"},"scope":2928,"src":"397:142:14","stateMutability":"nonpayable","virtual":false,"visibility":"public"}],"scope":2929,"src":"309:233:14","usedErrors":[]}],"src":"34:520:14"},"id":14},"contracts/SusuwatariStorage.sol":{"ast":{"absolutePath":"contracts/SusuwatariStorage.sol","exportedSymbols":{"LEAFWALLET_STORAGE_POSITION":[2942],"LeafWalletStorage":[2959],"LibDiamond":[3984],"OwnableStorage":[2945],"SUSUWATARI_STORAGE_POSITION":[2937],"StorageHandler":[3045],"Susu":[2974],"SusuwatariStorage":[2993]},"id":3046,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2930,"literals":["solidity","^","0.8",".18"],"nodeType":"PragmaDirective","src":"34:24:15"},{"absolutePath":"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol","file":"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol","id":2932,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3046,"sourceUnit":3985,"src":"62:84:15","symbolAliases":[{"foreign":{"id":2931,"name":"LibDiamond","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3984,"src":"70:10:15","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"constant":true,"id":2937,"mutability":"constant","name":"SUSUWATARI_STORAGE_POSITION","nameLocation":"167:27:15","nodeType":"VariableDeclaration","scope":3046,"src":"150:87:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2933,"name":"bytes32","nodeType":"ElementaryTypeName","src":"150:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"737573757761746172692e636f6e74726163742e73746f72616765","id":2935,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"207:29:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_202e1867cade063e32a2eb339a246f853a1a233314949ba8d9e2ac766f6ed846","typeString":"literal_string \"susuwatari.contract.storage\""},"value":"susuwatari.contract.storage"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_202e1867cade063e32a2eb339a246f853a1a233314949ba8d9e2ac766f6ed846","typeString":"literal_string \"susuwatari.contract.storage\""}],"id":2934,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"197:9:15","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2936,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"197:40:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":true,"id":2942,"mutability":"constant","name":"LEAFWALLET_STORAGE_POSITION","nameLocation":"257:27:15","nodeType":"VariableDeclaration","scope":3046,"src":"240:87:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2938,"name":"bytes32","nodeType":"ElementaryTypeName","src":"240:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"6c65616677616c6c65742e636f6e74726163742e73746f72616765","id":2940,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"297:29:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_83ed3ba29c1d52058c877df3ebd264cf957c42ef7764387349be0ccf6df0b63b","typeString":"literal_string \"leafwallet.contract.storage\""},"value":"leafwallet.contract.storage"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_83ed3ba29c1d52058c877df3ebd264cf957c42ef7764387349be0ccf6df0b63b","typeString":"literal_string \"leafwallet.contract.storage\""}],"id":2939,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"287:9:15","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2941,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"287:40:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"canonicalName":"OwnableStorage","id":2945,"members":[{"constant":false,"id":2944,"mutability":"mutable","name":"_owner","nameLocation":"371:6:15","nodeType":"VariableDeclaration","scope":2945,"src":"363:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2943,"name":"address","nodeType":"ElementaryTypeName","src":"363:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"OwnableStorage","nameLocation":"339:14:15","nodeType":"StructDefinition","scope":3046,"src":"332:49:15","visibility":"public"},{"canonicalName":"LeafWalletStorage","id":2959,"members":[{"constant":false,"id":2949,"mutability":"mutable","name":"_deviceOwner","nameLocation":"447:12:15","nodeType":"VariableDeclaration","scope":2959,"src":"419:40:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"},"typeName":{"id":2948,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":2946,"name":"address","nodeType":"ElementaryTypeName","src":"427:7:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"419:27:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2947,"name":"address","nodeType":"ElementaryTypeName","src":"438:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"internal"},{"constant":false,"id":2954,"mutability":"mutable","name":"_ownerDevices","nameLocation":"496:13:15","nodeType":"VariableDeclaration","scope":2959,"src":"466:43:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_address_$dyn_storage_$","typeString":"mapping(address => address[])"},"typeName":{"id":2953,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":2950,"name":"address","nodeType":"ElementaryTypeName","src":"474:7:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"466:29:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_address_$dyn_storage_$","typeString":"mapping(address => address[])"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"baseType":{"id":2951,"name":"address","nodeType":"ElementaryTypeName","src":"485:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2952,"nodeType":"ArrayTypeName","src":"485:9:15","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}}},"visibility":"internal"},{"constant":false,"id":2958,"mutability":"mutable","name":"_deviceActivationCodes","nameLocation":"544:22:15","nodeType":"VariableDeclaration","scope":2959,"src":"516:50:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":2957,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":2955,"name":"address","nodeType":"ElementaryTypeName","src":"524:7:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"516:27:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2956,"name":"uint256","nodeType":"ElementaryTypeName","src":"535:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"internal"}],"name":"LeafWalletStorage","nameLocation":"394:17:15","nodeType":"StructDefinition","scope":3046,"src":"387:183:15","visibility":"public"},{"canonicalName":"Susu","id":2974,"members":[{"constant":false,"id":2961,"mutability":"mutable","name":"tokenId","nameLocation":"611:7:15","nodeType":"VariableDeclaration","scope":2974,"src":"603:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2960,"name":"uint256","nodeType":"ElementaryTypeName","src":"603:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2963,"mutability":"mutable","name":"originLocation","nameLocation":"636:14:15","nodeType":"VariableDeclaration","scope":2974,"src":"629:21:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":2962,"name":"string","nodeType":"ElementaryTypeName","src":"629:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2965,"mutability":"mutable","name":"currentLocation","nameLocation":"668:15:15","nodeType":"VariableDeclaration","scope":2974,"src":"661:22:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":2964,"name":"string","nodeType":"ElementaryTypeName","src":"661:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2967,"mutability":"mutable","name":"destination","nameLocation":"701:11:15","nodeType":"VariableDeclaration","scope":2974,"src":"694:18:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":2966,"name":"string","nodeType":"ElementaryTypeName","src":"694:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2969,"mutability":"mutable","name":"message","nameLocation":"730:7:15","nodeType":"VariableDeclaration","scope":2974,"src":"723:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":2968,"name":"string","nodeType":"ElementaryTypeName","src":"723:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2971,"mutability":"mutable","name":"carrier","nameLocation":"756:7:15","nodeType":"VariableDeclaration","scope":2974,"src":"748:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2970,"name":"address","nodeType":"ElementaryTypeName","src":"748:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2973,"mutability":"mutable","name":"dropCooldownTime","nameLocation":"782:16:15","nodeType":"VariableDeclaration","scope":2974,"src":"774:24:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2972,"name":"uint256","nodeType":"ElementaryTypeName","src":"774:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Susu","nameLocation":"587:4:15","nodeType":"StructDefinition","scope":3046,"src":"580:226:15","visibility":"public"},{"canonicalName":"SusuwatariStorage","id":2993,"members":[{"constant":false,"id":2978,"mutability":"mutable","name":"maxSlotCount","nameLocation":"1036:12:15","nodeType":"VariableDeclaration","scope":2993,"src":"1008:40:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":2977,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":2975,"name":"address","nodeType":"ElementaryTypeName","src":"1016:7:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1008:27:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2976,"name":"uint256","nodeType":"ElementaryTypeName","src":"1027:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"internal"},{"constant":false,"id":2981,"mutability":"mutable","name":"susuOwners","nameLocation":"1069:10:15","nodeType":"VariableDeclaration","scope":2993,"src":"1059:20:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":2979,"name":"address","nodeType":"ElementaryTypeName","src":"1059:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2980,"nodeType":"ArrayTypeName","src":"1059:9:15","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":2986,"mutability":"mutable","name":"tokenIdToSusu","nameLocation":"1115:13:15","nodeType":"VariableDeclaration","scope":2993,"src":"1090:38:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Susu_$2974_storage_$","typeString":"mapping(uint256 => struct Susu)"},"typeName":{"id":2985,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":2982,"name":"uint256","nodeType":"ElementaryTypeName","src":"1098:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1090:24:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Susu_$2974_storage_$","typeString":"mapping(uint256 => struct Susu)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2984,"nodeType":"UserDefinedTypeName","pathNode":{"id":2983,"name":"Susu","nameLocations":["1109:4:15"],"nodeType":"IdentifierPath","referencedDeclaration":2974,"src":"1109:4:15"},"referencedDeclaration":2974,"src":"1109:4:15","typeDescriptions":{"typeIdentifier":"t_struct$_Susu_$2974_storage_ptr","typeString":"struct Susu"}}},"visibility":"internal"},{"constant":false,"id":2988,"mutability":"mutable","name":"isInitialized","nameLocation":"1144:13:15","nodeType":"VariableDeclaration","scope":2993,"src":"1139:18:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2987,"name":"bool","nodeType":"ElementaryTypeName","src":"1139:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2992,"mutability":"mutable","name":"baggedSusus","nameLocation":"1196:11:15","nodeType":"VariableDeclaration","scope":2993,"src":"1168:39:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"typeName":{"id":2991,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":2989,"name":"uint256","nodeType":"ElementaryTypeName","src":"1176:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1168:27:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2990,"name":"address","nodeType":"ElementaryTypeName","src":"1187:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"internal"}],"name":"SusuwatariStorage","nameLocation":"979:17:15","nodeType":"StructDefinition","scope":3046,"src":"972:244:15","visibility":"public"},{"abstract":false,"baseContracts":[],"canonicalName":"StorageHandler","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":3045,"linearizedBaseContracts":[3045],"name":"StorageHandler","nameLocation":"1235:14:15","nodeType":"ContractDefinition","nodes":[{"body":{"id":3004,"nodeType":"Block","src":"1332:128:15","statements":[{"assignments":[3000],"declarations":[{"constant":false,"id":3000,"mutability":"mutable","name":"position","nameLocation":"1351:8:15","nodeType":"VariableDeclaration","scope":3004,"src":"1343:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2999,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1343:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3002,"initialValue":{"id":3001,"name":"SUSUWATARI_STORAGE_POSITION","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2937,"src":"1362:27:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"1343:46:15"},{"AST":{"nodeType":"YulBlock","src":"1409:44:15","statements":[{"nodeType":"YulAssignment","src":"1423:19:15","value":{"name":"position","nodeType":"YulIdentifier","src":"1434:8:15"},"variableNames":[{"name":"cs.slot","nodeType":"YulIdentifier","src":"1423:7:15"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2997,"isOffset":false,"isSlot":true,"src":"1423:7:15","suffix":"slot","valueSize":1},{"declaration":3000,"isOffset":false,"isSlot":false,"src":"1434:8:15","valueSize":1}],"id":3003,"nodeType":"InlineAssembly","src":"1400:53:15"}]},"id":3005,"implemented":true,"kind":"function","modifiers":[],"name":"susu","nameLocation":"1272:4:15","nodeType":"FunctionDefinition","parameters":{"id":2994,"nodeType":"ParameterList","parameters":[],"src":"1276:2:15"},"returnParameters":{"id":2998,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2997,"mutability":"mutable","name":"cs","nameLocation":"1328:2:15","nodeType":"VariableDeclaration","scope":3005,"src":"1302:28:15","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$2993_storage_ptr","typeString":"struct SusuwatariStorage"},"typeName":{"id":2996,"nodeType":"UserDefinedTypeName","pathNode":{"id":2995,"name":"SusuwatariStorage","nameLocations":["1302:17:15"],"nodeType":"IdentifierPath","referencedDeclaration":2993,"src":"1302:17:15"},"referencedDeclaration":2993,"src":"1302:17:15","typeDescriptions":{"typeIdentifier":"t_struct$_SusuwatariStorage_$2993_storage_ptr","typeString":"struct SusuwatariStorage"}},"visibility":"internal"}],"src":"1301:30:15"},"scope":3045,"src":"1263:197:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3018,"nodeType":"Block","src":"1532:138:15","statements":[{"assignments":[3012],"declarations":[{"constant":false,"id":3012,"mutability":"mutable","name":"position","nameLocation":"1551:8:15","nodeType":"VariableDeclaration","scope":3018,"src":"1543:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3011,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1543:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3016,"initialValue":{"arguments":[{"hexValue":"6f776e61626c652e636f6e74726163742e73746f72616765","id":3014,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1572:26:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_ba54e5e2df07707c0738a1dc17a9db81c007d13b963ffe942523a0b589b045cf","typeString":"literal_string \"ownable.contract.storage\""},"value":"ownable.contract.storage"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_ba54e5e2df07707c0738a1dc17a9db81c007d13b963ffe942523a0b589b045cf","typeString":"literal_string \"ownable.contract.storage\""}],"id":3013,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1562:9:15","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3015,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1562:37:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"1543:56:15"},{"AST":{"nodeType":"YulBlock","src":"1619:44:15","statements":[{"nodeType":"YulAssignment","src":"1633:19:15","value":{"name":"position","nodeType":"YulIdentifier","src":"1644:8:15"},"variableNames":[{"name":"cs.slot","nodeType":"YulIdentifier","src":"1633:7:15"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":3009,"isOffset":false,"isSlot":true,"src":"1633:7:15","suffix":"slot","valueSize":1},{"declaration":3012,"isOffset":false,"isSlot":false,"src":"1644:8:15","valueSize":1}],"id":3017,"nodeType":"InlineAssembly","src":"1610:53:15"}]},"id":3019,"implemented":true,"kind":"function","modifiers":[],"name":"os","nameLocation":"1477:2:15","nodeType":"FunctionDefinition","parameters":{"id":3006,"nodeType":"ParameterList","parameters":[],"src":"1479:2:15"},"returnParameters":{"id":3010,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3009,"mutability":"mutable","name":"cs","nameLocation":"1528:2:15","nodeType":"VariableDeclaration","scope":3019,"src":"1505:25:15","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_OwnableStorage_$2945_storage_ptr","typeString":"struct OwnableStorage"},"typeName":{"id":3008,"nodeType":"UserDefinedTypeName","pathNode":{"id":3007,"name":"OwnableStorage","nameLocations":["1505:14:15"],"nodeType":"IdentifierPath","referencedDeclaration":2945,"src":"1505:14:15"},"referencedDeclaration":2945,"src":"1505:14:15","typeDescriptions":{"typeIdentifier":"t_struct$_OwnableStorage_$2945_storage_ptr","typeString":"struct OwnableStorage"}},"visibility":"internal"}],"src":"1504:27:15"},"scope":3045,"src":"1468:202:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3029,"nodeType":"Block","src":"1754:53:15","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3025,"name":"LibDiamond","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3984,"src":"1772:10:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_LibDiamond_$3984_$","typeString":"type(library LibDiamond)"}},"id":3026,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1783:14:15","memberName":"diamondStorage","nodeType":"MemberAccess","referencedDeclaration":3202,"src":"1772:25:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_DiamondStorage_$3190_storage_ptr_$","typeString":"function () pure returns (struct LibDiamond.DiamondStorage storage pointer)"}},"id":3027,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1772:27:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3190_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"}},"functionReturnParameters":3024,"id":3028,"nodeType":"Return","src":"1765:34:15"}]},"id":3030,"implemented":true,"kind":"function","modifiers":[],"name":"ds","nameLocation":"1691:2:15","nodeType":"FunctionDefinition","parameters":{"id":3020,"nodeType":"ParameterList","parameters":[],"src":"1693:2:15"},"returnParameters":{"id":3024,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3023,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3030,"src":"1719:33:15","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3190_storage_ptr","typeString":"struct LibDiamond.DiamondStorage"},"typeName":{"id":3022,"nodeType":"UserDefinedTypeName","pathNode":{"id":3021,"name":"LibDiamond.DiamondStorage","nameLocations":["1719:10:15","1730:14:15"],"nodeType":"IdentifierPath","referencedDeclaration":3190,"src":"1719:25:15"},"referencedDeclaration":3190,"src":"1719:25:15","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3190_storage_ptr","typeString":"struct LibDiamond.DiamondStorage"}},"visibility":"internal"}],"src":"1718:35:15"},"scope":3045,"src":"1682:125:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3043,"nodeType":"Block","src":"1888:141:15","statements":[{"assignments":[3037],"declarations":[{"constant":false,"id":3037,"mutability":"mutable","name":"position","nameLocation":"1907:8:15","nodeType":"VariableDeclaration","scope":3043,"src":"1899:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3036,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1899:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3041,"initialValue":{"arguments":[{"hexValue":"6c65616677616c6c65742e636f6e74726163742e73746f72616765","id":3039,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1928:29:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_83ed3ba29c1d52058c877df3ebd264cf957c42ef7764387349be0ccf6df0b63b","typeString":"literal_string \"leafwallet.contract.storage\""},"value":"leafwallet.contract.storage"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_83ed3ba29c1d52058c877df3ebd264cf957c42ef7764387349be0ccf6df0b63b","typeString":"literal_string \"leafwallet.contract.storage\""}],"id":3038,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1918:9:15","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3040,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1918:40:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"1899:59:15"},{"AST":{"nodeType":"YulBlock","src":"1978:44:15","statements":[{"nodeType":"YulAssignment","src":"1992:19:15","value":{"name":"position","nodeType":"YulIdentifier","src":"2003:8:15"},"variableNames":[{"name":"cs.slot","nodeType":"YulIdentifier","src":"1992:7:15"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":3034,"isOffset":false,"isSlot":true,"src":"1992:7:15","suffix":"slot","valueSize":1},{"declaration":3037,"isOffset":false,"isSlot":false,"src":"2003:8:15","valueSize":1}],"id":3042,"nodeType":"InlineAssembly","src":"1969:53:15"}]},"id":3044,"implemented":true,"kind":"function","modifiers":[],"name":"lw","nameLocation":"1830:2:15","nodeType":"FunctionDefinition","parameters":{"id":3031,"nodeType":"ParameterList","parameters":[],"src":"1832:2:15"},"returnParameters":{"id":3035,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3034,"mutability":"mutable","name":"cs","nameLocation":"1884:2:15","nodeType":"VariableDeclaration","scope":3044,"src":"1858:28:15","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_LeafWalletStorage_$2959_storage_ptr","typeString":"struct LeafWalletStorage"},"typeName":{"id":3033,"nodeType":"UserDefinedTypeName","pathNode":{"id":3032,"name":"LeafWalletStorage","nameLocations":["1858:17:15"],"nodeType":"IdentifierPath","referencedDeclaration":2959,"src":"1858:17:15"},"referencedDeclaration":2959,"src":"1858:17:15","typeDescriptions":{"typeIdentifier":"t_struct$_LeafWalletStorage_$2959_storage_ptr","typeString":"struct LeafWalletStorage"}},"visibility":"internal"}],"src":"1857:30:15"},"scope":3045,"src":"1821:208:15","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":3046,"src":"1226:806:15","usedErrors":[]}],"src":"34:1998:15"},"id":15},"hardhat-deploy/solc_0.8/diamond/UsingDiamondOwner.sol":{"ast":{"absolutePath":"hardhat-deploy/solc_0.8/diamond/UsingDiamondOwner.sol","exportedSymbols":{"IDiamondCut":[3109],"LibDiamond":[3984],"UsingDiamondOwner":[3071]},"id":3072,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3047,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:16"},{"absolutePath":"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol","file":"./libraries/LibDiamond.sol","id":3048,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3072,"sourceUnit":3985,"src":"57:36:16","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"UsingDiamondOwner","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":3071,"linearizedBaseContracts":[3071],"name":"UsingDiamondOwner","nameLocation":"104:17:16","nodeType":"ContractDefinition","nodes":[{"body":{"id":3069,"nodeType":"Block","src":"149:191:16","statements":[{"assignments":[3054],"declarations":[{"constant":false,"id":3054,"mutability":"mutable","name":"ds","nameLocation":"193:2:16","nodeType":"VariableDeclaration","scope":3069,"src":"159:36:16","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3190_storage_ptr","typeString":"struct LibDiamond.DiamondStorage"},"typeName":{"id":3053,"nodeType":"UserDefinedTypeName","pathNode":{"id":3052,"name":"LibDiamond.DiamondStorage","nameLocations":["159:10:16","170:14:16"],"nodeType":"IdentifierPath","referencedDeclaration":3190,"src":"159:25:16"},"referencedDeclaration":3190,"src":"159:25:16","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3190_storage_ptr","typeString":"struct LibDiamond.DiamondStorage"}},"visibility":"internal"}],"id":3058,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3055,"name":"LibDiamond","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3984,"src":"198:10:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_LibDiamond_$3984_$","typeString":"type(library LibDiamond)"}},"id":3056,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"209:14:16","memberName":"diamondStorage","nodeType":"MemberAccess","referencedDeclaration":3202,"src":"198:25:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_DiamondStorage_$3190_storage_ptr_$","typeString":"function () pure returns (struct LibDiamond.DiamondStorage storage pointer)"}},"id":3057,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"198:27:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3190_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"159:66:16"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3064,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3060,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"243:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3061,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"247:6:16","memberName":"sender","nodeType":"MemberAccess","src":"243:10:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3062,"name":"ds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3054,"src":"257:2:16","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3190_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"}},"id":3063,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"260:13:16","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":3189,"src":"257:16:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"243:30:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f6e6c79206f776e657220697320616c6c6f77656420746f20706572666f726d207468697320616374696f6e","id":3065,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"275:46:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_6667b359373c33067b673e635924033a431279501d99693f6e8f303e664c81d7","typeString":"literal_string \"Only owner is allowed to perform this action\""},"value":"Only owner is allowed to perform this action"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_6667b359373c33067b673e635924033a431279501d99693f6e8f303e664c81d7","typeString":"literal_string \"Only owner is allowed to perform this action\""}],"id":3059,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"235:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3066,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"235:87:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3067,"nodeType":"ExpressionStatement","src":"235:87:16"},{"id":3068,"nodeType":"PlaceholderStatement","src":"332:1:16"}]},"id":3070,"name":"onlyOwner","nameLocation":"137:9:16","nodeType":"ModifierDefinition","parameters":{"id":3049,"nodeType":"ParameterList","parameters":[],"src":"146:2:16"},"src":"128:212:16","virtual":false,"visibility":"internal"}],"scope":3072,"src":"95:247:16","usedErrors":[]}],"src":"32:311:16"},"id":16},"hardhat-deploy/solc_0.8/diamond/interfaces/IDiamondCut.sol":{"ast":{"absolutePath":"hardhat-deploy/solc_0.8/diamond/interfaces/IDiamondCut.sol","exportedSymbols":{"IDiamondCut":[3109]},"id":3110,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3073,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:17"},{"abstract":false,"baseContracts":[],"canonicalName":"IDiamondCut","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":3109,"linearizedBaseContracts":[3109],"name":"IDiamondCut","nameLocation":"372:11:17","nodeType":"ContractDefinition","nodes":[{"canonicalName":"IDiamondCut.FacetCutAction","id":3077,"members":[{"id":3074,"name":"Add","nameLocation":"411:3:17","nodeType":"EnumValue","src":"411:3:17"},{"id":3075,"name":"Replace","nameLocation":"416:7:17","nodeType":"EnumValue","src":"416:7:17"},{"id":3076,"name":"Remove","nameLocation":"425:6:17","nodeType":"EnumValue","src":"425:6:17"}],"name":"FacetCutAction","nameLocation":"395:14:17","nodeType":"EnumDefinition","src":"390:42:17"},{"canonicalName":"IDiamondCut.FacetCut","id":3086,"members":[{"constant":false,"id":3079,"mutability":"mutable","name":"facetAddress","nameLocation":"506:12:17","nodeType":"VariableDeclaration","scope":3086,"src":"498:20:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3078,"name":"address","nodeType":"ElementaryTypeName","src":"498:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3082,"mutability":"mutable","name":"action","nameLocation":"543:6:17","nodeType":"VariableDeclaration","scope":3086,"src":"528:21:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_FacetCutAction_$3077","typeString":"enum IDiamondCut.FacetCutAction"},"typeName":{"id":3081,"nodeType":"UserDefinedTypeName","pathNode":{"id":3080,"name":"FacetCutAction","nameLocations":["528:14:17"],"nodeType":"IdentifierPath","referencedDeclaration":3077,"src":"528:14:17"},"referencedDeclaration":3077,"src":"528:14:17","typeDescriptions":{"typeIdentifier":"t_enum$_FacetCutAction_$3077","typeString":"enum IDiamondCut.FacetCutAction"}},"visibility":"internal"},{"constant":false,"id":3085,"mutability":"mutable","name":"functionSelectors","nameLocation":"568:17:17","nodeType":"VariableDeclaration","scope":3086,"src":"559:26:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_storage_ptr","typeString":"bytes4[]"},"typeName":{"baseType":{"id":3083,"name":"bytes4","nodeType":"ElementaryTypeName","src":"559:6:17","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":3084,"nodeType":"ArrayTypeName","src":"559:8:17","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_storage_ptr","typeString":"bytes4[]"}},"visibility":"internal"}],"name":"FacetCut","nameLocation":"479:8:17","nodeType":"StructDefinition","scope":3109,"src":"472:120:17","visibility":"public"},{"documentation":{"id":3087,"nodeType":"StructuredDocumentation","src":"598:438:17","text":"@notice Add/replace/remove any number of functions and optionally execute\n         a function with delegatecall\n @param _diamondCut Contains the facet addresses and function selectors\n @param _init The address of the contract or facet to execute _calldata\n @param _calldata A function call, including function selector and arguments\n                  _calldata is executed with delegatecall on _init"},"functionSelector":"1f931c1c","id":3098,"implemented":false,"kind":"function","modifiers":[],"name":"diamondCut","nameLocation":"1050:10:17","nodeType":"FunctionDefinition","parameters":{"id":3096,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3091,"mutability":"mutable","name":"_diamondCut","nameLocation":"1090:11:17","nodeType":"VariableDeclaration","scope":3098,"src":"1070:31:17","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_FacetCut_$3086_calldata_ptr_$dyn_calldata_ptr","typeString":"struct IDiamondCut.FacetCut[]"},"typeName":{"baseType":{"id":3089,"nodeType":"UserDefinedTypeName","pathNode":{"id":3088,"name":"FacetCut","nameLocations":["1070:8:17"],"nodeType":"IdentifierPath","referencedDeclaration":3086,"src":"1070:8:17"},"referencedDeclaration":3086,"src":"1070:8:17","typeDescriptions":{"typeIdentifier":"t_struct$_FacetCut_$3086_storage_ptr","typeString":"struct IDiamondCut.FacetCut"}},"id":3090,"nodeType":"ArrayTypeName","src":"1070:10:17","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_FacetCut_$3086_storage_$dyn_storage_ptr","typeString":"struct IDiamondCut.FacetCut[]"}},"visibility":"internal"},{"constant":false,"id":3093,"mutability":"mutable","name":"_init","nameLocation":"1119:5:17","nodeType":"VariableDeclaration","scope":3098,"src":"1111:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3092,"name":"address","nodeType":"ElementaryTypeName","src":"1111:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3095,"mutability":"mutable","name":"_calldata","nameLocation":"1149:9:17","nodeType":"VariableDeclaration","scope":3098,"src":"1134:24:17","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3094,"name":"bytes","nodeType":"ElementaryTypeName","src":"1134:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1060:104:17"},"returnParameters":{"id":3097,"nodeType":"ParameterList","parameters":[],"src":"1173:0:17"},"scope":3109,"src":"1041:133:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"anonymous":false,"eventSelector":"8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb673","id":3108,"name":"DiamondCut","nameLocation":"1186:10:17","nodeType":"EventDefinition","parameters":{"id":3107,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3102,"indexed":false,"mutability":"mutable","name":"_diamondCut","nameLocation":"1208:11:17","nodeType":"VariableDeclaration","scope":3108,"src":"1197:22:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_FacetCut_$3086_memory_ptr_$dyn_memory_ptr","typeString":"struct IDiamondCut.FacetCut[]"},"typeName":{"baseType":{"id":3100,"nodeType":"UserDefinedTypeName","pathNode":{"id":3099,"name":"FacetCut","nameLocations":["1197:8:17"],"nodeType":"IdentifierPath","referencedDeclaration":3086,"src":"1197:8:17"},"referencedDeclaration":3086,"src":"1197:8:17","typeDescriptions":{"typeIdentifier":"t_struct$_FacetCut_$3086_storage_ptr","typeString":"struct IDiamondCut.FacetCut"}},"id":3101,"nodeType":"ArrayTypeName","src":"1197:10:17","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_FacetCut_$3086_storage_$dyn_storage_ptr","typeString":"struct IDiamondCut.FacetCut[]"}},"visibility":"internal"},{"constant":false,"id":3104,"indexed":false,"mutability":"mutable","name":"_init","nameLocation":"1229:5:17","nodeType":"VariableDeclaration","scope":3108,"src":"1221:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3103,"name":"address","nodeType":"ElementaryTypeName","src":"1221:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3106,"indexed":false,"mutability":"mutable","name":"_calldata","nameLocation":"1242:9:17","nodeType":"VariableDeclaration","scope":3108,"src":"1236:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3105,"name":"bytes","nodeType":"ElementaryTypeName","src":"1236:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1196:56:17"},"src":"1180:73:17"}],"scope":3110,"src":"362:893:17","usedErrors":[]}],"src":"32:1224:17"},"id":17},"hardhat-deploy/solc_0.8/diamond/interfaces/IDiamondLoupe.sol":{"ast":{"absolutePath":"hardhat-deploy/solc_0.8/diamond/interfaces/IDiamondLoupe.sol","exportedSymbols":{"IDiamondLoupe":[3150]},"id":3151,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3111,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:18"},{"abstract":false,"baseContracts":[],"canonicalName":"IDiamondLoupe","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":3150,"linearizedBaseContracts":[3150],"name":"IDiamondLoupe","nameLocation":"473:13:18","nodeType":"ContractDefinition","nodes":[{"canonicalName":"IDiamondLoupe.Facet","id":3117,"members":[{"constant":false,"id":3113,"mutability":"mutable","name":"facetAddress","nameLocation":"604:12:18","nodeType":"VariableDeclaration","scope":3117,"src":"596:20:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3112,"name":"address","nodeType":"ElementaryTypeName","src":"596:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3116,"mutability":"mutable","name":"functionSelectors","nameLocation":"635:17:18","nodeType":"VariableDeclaration","scope":3117,"src":"626:26:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_storage_ptr","typeString":"bytes4[]"},"typeName":{"baseType":{"id":3114,"name":"bytes4","nodeType":"ElementaryTypeName","src":"626:6:18","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":3115,"nodeType":"ArrayTypeName","src":"626:8:18","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_storage_ptr","typeString":"bytes4[]"}},"visibility":"internal"}],"name":"Facet","nameLocation":"580:5:18","nodeType":"StructDefinition","scope":3150,"src":"573:86:18","visibility":"public"},{"documentation":{"id":3118,"nodeType":"StructuredDocumentation","src":"665:106:18","text":"@notice Gets all facet addresses and their four byte function selectors.\n @return facets_ Facet"},"functionSelector":"7a0ed627","id":3125,"implemented":false,"kind":"function","modifiers":[],"name":"facets","nameLocation":"785:6:18","nodeType":"FunctionDefinition","parameters":{"id":3119,"nodeType":"ParameterList","parameters":[],"src":"791:2:18"},"returnParameters":{"id":3124,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3123,"mutability":"mutable","name":"facets_","nameLocation":"832:7:18","nodeType":"VariableDeclaration","scope":3125,"src":"817:22:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Facet_$3117_memory_ptr_$dyn_memory_ptr","typeString":"struct IDiamondLoupe.Facet[]"},"typeName":{"baseType":{"id":3121,"nodeType":"UserDefinedTypeName","pathNode":{"id":3120,"name":"Facet","nameLocations":["817:5:18"],"nodeType":"IdentifierPath","referencedDeclaration":3117,"src":"817:5:18"},"referencedDeclaration":3117,"src":"817:5:18","typeDescriptions":{"typeIdentifier":"t_struct$_Facet_$3117_storage_ptr","typeString":"struct IDiamondLoupe.Facet"}},"id":3122,"nodeType":"ArrayTypeName","src":"817:7:18","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Facet_$3117_storage_$dyn_storage_ptr","typeString":"struct IDiamondLoupe.Facet[]"}},"visibility":"internal"}],"src":"816:24:18"},"scope":3150,"src":"776:65:18","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3126,"nodeType":"StructuredDocumentation","src":"847:155:18","text":"@notice Gets all the function selectors supported by a specific facet.\n @param _facet The facet address.\n @return facetFunctionSelectors_"},"functionSelector":"adfca15e","id":3134,"implemented":false,"kind":"function","modifiers":[],"name":"facetFunctionSelectors","nameLocation":"1016:22:18","nodeType":"FunctionDefinition","parameters":{"id":3129,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3128,"mutability":"mutable","name":"_facet","nameLocation":"1047:6:18","nodeType":"VariableDeclaration","scope":3134,"src":"1039:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3127,"name":"address","nodeType":"ElementaryTypeName","src":"1039:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1038:16:18"},"returnParameters":{"id":3133,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3132,"mutability":"mutable","name":"facetFunctionSelectors_","nameLocation":"1094:23:18","nodeType":"VariableDeclaration","scope":3134,"src":"1078:39:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_memory_ptr","typeString":"bytes4[]"},"typeName":{"baseType":{"id":3130,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1078:6:18","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":3131,"nodeType":"ArrayTypeName","src":"1078:8:18","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_storage_ptr","typeString":"bytes4[]"}},"visibility":"internal"}],"src":"1077:41:18"},"scope":3150,"src":"1007:112:18","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3135,"nodeType":"StructuredDocumentation","src":"1125:90:18","text":"@notice Get all the facet addresses used by a diamond.\n @return facetAddresses_"},"functionSelector":"52ef6b2c","id":3141,"implemented":false,"kind":"function","modifiers":[],"name":"facetAddresses","nameLocation":"1229:14:18","nodeType":"FunctionDefinition","parameters":{"id":3136,"nodeType":"ParameterList","parameters":[],"src":"1243:2:18"},"returnParameters":{"id":3140,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3139,"mutability":"mutable","name":"facetAddresses_","nameLocation":"1286:15:18","nodeType":"VariableDeclaration","scope":3141,"src":"1269:32:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":3137,"name":"address","nodeType":"ElementaryTypeName","src":"1269:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3138,"nodeType":"ArrayTypeName","src":"1269:9:18","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"1268:34:18"},"scope":3150,"src":"1220:83:18","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3142,"nodeType":"StructuredDocumentation","src":"1309:219:18","text":"@notice Gets the facet that supports the given selector.\n @dev If facet is not found return address(0).\n @param _functionSelector The function selector.\n @return facetAddress_ The facet address."},"functionSelector":"cdffacc6","id":3149,"implemented":false,"kind":"function","modifiers":[],"name":"facetAddress","nameLocation":"1542:12:18","nodeType":"FunctionDefinition","parameters":{"id":3145,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3144,"mutability":"mutable","name":"_functionSelector","nameLocation":"1562:17:18","nodeType":"VariableDeclaration","scope":3149,"src":"1555:24:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3143,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1555:6:18","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1554:26:18"},"returnParameters":{"id":3148,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3147,"mutability":"mutable","name":"facetAddress_","nameLocation":"1612:13:18","nodeType":"VariableDeclaration","scope":3149,"src":"1604:21:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3146,"name":"address","nodeType":"ElementaryTypeName","src":"1604:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1603:23:18"},"scope":3150,"src":"1533:94:18","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":3151,"src":"463:1166:18","usedErrors":[]}],"src":"32:1598:18"},"id":18},"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol":{"ast":{"absolutePath":"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol","exportedSymbols":{"IDiamondCut":[3109],"LibDiamond":[3984]},"id":3985,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3152,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:19"},{"absolutePath":"hardhat-deploy/solc_0.8/diamond/interfaces/IDiamondCut.sol","file":"../interfaces/IDiamondCut.sol","id":3154,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3985,"sourceUnit":3110,"src":"361:60:19","symbolAliases":[{"foreign":{"id":3153,"name":"IDiamondCut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3109,"src":"370:11:19","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"LibDiamond","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":3984,"linearizedBaseContracts":[3984],"name":"LibDiamond","nameLocation":"431:10:19","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":3159,"mutability":"constant","name":"DIAMOND_STORAGE_POSITION","nameLocation":"465:24:19","nodeType":"VariableDeclaration","scope":3984,"src":"448:89:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3155,"name":"bytes32","nodeType":"ElementaryTypeName","src":"448:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"6469616d6f6e642e7374616e646172642e6469616d6f6e642e73746f72616765","id":3157,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"502:34:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_c8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c","typeString":"literal_string \"diamond.standard.diamond.storage\""},"value":"diamond.standard.diamond.storage"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c","typeString":"literal_string \"diamond.standard.diamond.storage\""}],"id":3156,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"492:9:19","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3158,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"492:45:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"canonicalName":"LibDiamond.FacetAddressAndPosition","id":3164,"members":[{"constant":false,"id":3161,"mutability":"mutable","name":"facetAddress","nameLocation":"593:12:19","nodeType":"VariableDeclaration","scope":3164,"src":"585:20:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3160,"name":"address","nodeType":"ElementaryTypeName","src":"585:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3163,"mutability":"mutable","name":"functionSelectorPosition","nameLocation":"622:24:19","nodeType":"VariableDeclaration","scope":3164,"src":"615:31:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":3162,"name":"uint96","nodeType":"ElementaryTypeName","src":"615:6:19","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"}],"name":"FacetAddressAndPosition","nameLocation":"551:23:19","nodeType":"StructDefinition","scope":3984,"src":"544:171:19","visibility":"public"},{"canonicalName":"LibDiamond.FacetFunctionSelectors","id":3170,"members":[{"constant":false,"id":3167,"mutability":"mutable","name":"functionSelectors","nameLocation":"770:17:19","nodeType":"VariableDeclaration","scope":3170,"src":"761:26:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_storage_ptr","typeString":"bytes4[]"},"typeName":{"baseType":{"id":3165,"name":"bytes4","nodeType":"ElementaryTypeName","src":"761:6:19","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":3166,"nodeType":"ArrayTypeName","src":"761:8:19","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_storage_ptr","typeString":"bytes4[]"}},"visibility":"internal"},{"constant":false,"id":3169,"mutability":"mutable","name":"facetAddressPosition","nameLocation":"805:20:19","nodeType":"VariableDeclaration","scope":3170,"src":"797:28:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3168,"name":"uint256","nodeType":"ElementaryTypeName","src":"797:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"FacetFunctionSelectors","nameLocation":"728:22:19","nodeType":"StructDefinition","scope":3984,"src":"721:163:19","visibility":"public"},{"canonicalName":"LibDiamond.DiamondStorage","id":3190,"members":[{"constant":false,"id":3175,"mutability":"mutable","name":"selectorToFacetAndPosition","nameLocation":"1110:26:19","nodeType":"VariableDeclaration","scope":3190,"src":"1067:69:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_struct$_FacetAddressAndPosition_$3164_storage_$","typeString":"mapping(bytes4 => struct LibDiamond.FacetAddressAndPosition)"},"typeName":{"id":3174,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":3171,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1075:6:19","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"Mapping","src":"1067:42:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_struct$_FacetAddressAndPosition_$3164_storage_$","typeString":"mapping(bytes4 => struct LibDiamond.FacetAddressAndPosition)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":3173,"nodeType":"UserDefinedTypeName","pathNode":{"id":3172,"name":"FacetAddressAndPosition","nameLocations":["1085:23:19"],"nodeType":"IdentifierPath","referencedDeclaration":3164,"src":"1085:23:19"},"referencedDeclaration":3164,"src":"1085:23:19","typeDescriptions":{"typeIdentifier":"t_struct$_FacetAddressAndPosition_$3164_storage_ptr","typeString":"struct LibDiamond.FacetAddressAndPosition"}}},"visibility":"internal"},{"constant":false,"id":3180,"mutability":"mutable","name":"facetFunctionSelectors","nameLocation":"1243:22:19","nodeType":"VariableDeclaration","scope":3190,"src":"1200:65:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_FacetFunctionSelectors_$3170_storage_$","typeString":"mapping(address => struct LibDiamond.FacetFunctionSelectors)"},"typeName":{"id":3179,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":3176,"name":"address","nodeType":"ElementaryTypeName","src":"1208:7:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1200:42:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_FacetFunctionSelectors_$3170_storage_$","typeString":"mapping(address => struct LibDiamond.FacetFunctionSelectors)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":3178,"nodeType":"UserDefinedTypeName","pathNode":{"id":3177,"name":"FacetFunctionSelectors","nameLocations":["1219:22:19"],"nodeType":"IdentifierPath","referencedDeclaration":3170,"src":"1219:22:19"},"referencedDeclaration":3170,"src":"1219:22:19","typeDescriptions":{"typeIdentifier":"t_struct$_FacetFunctionSelectors_$3170_storage_ptr","typeString":"struct LibDiamond.FacetFunctionSelectors"}}},"visibility":"internal"},{"constant":false,"id":3183,"mutability":"mutable","name":"facetAddresses","nameLocation":"1312:14:19","nodeType":"VariableDeclaration","scope":3190,"src":"1302:24:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":3181,"name":"address","nodeType":"ElementaryTypeName","src":"1302:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3182,"nodeType":"ArrayTypeName","src":"1302:9:19","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":3187,"mutability":"mutable","name":"supportedInterfaces","nameLocation":"1462:19:19","nodeType":"VariableDeclaration","scope":3190,"src":"1438:43:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"},"typeName":{"id":3186,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":3184,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1446:6:19","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"Mapping","src":"1438:23:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":3185,"name":"bool","nodeType":"ElementaryTypeName","src":"1456:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"internal"},{"constant":false,"id":3189,"mutability":"mutable","name":"contractOwner","nameLocation":"1532:13:19","nodeType":"VariableDeclaration","scope":3190,"src":"1524:21:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3188,"name":"address","nodeType":"ElementaryTypeName","src":"1524:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"DiamondStorage","nameLocation":"897:14:19","nodeType":"StructDefinition","scope":3984,"src":"890:662:19","visibility":"public"},{"body":{"id":3201,"nodeType":"Block","src":"1634:121:19","statements":[{"assignments":[3197],"declarations":[{"constant":false,"id":3197,"mutability":"mutable","name":"position","nameLocation":"1652:8:19","nodeType":"VariableDeclaration","scope":3201,"src":"1644:16:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3196,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1644:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3199,"initialValue":{"id":3198,"name":"DIAMOND_STORAGE_POSITION","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3159,"src":"1663:24:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"1644:43:19"},{"AST":{"nodeType":"YulBlock","src":"1706:43:19","statements":[{"nodeType":"YulAssignment","src":"1720:19:19","value":{"name":"position","nodeType":"YulIdentifier","src":"1731:8:19"},"variableNames":[{"name":"ds.slot","nodeType":"YulIdentifier","src":"1720:7:19"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":3194,"isOffset":false,"isSlot":true,"src":"1720:7:19","suffix":"slot","valueSize":1},{"declaration":3197,"isOffset":false,"isSlot":false,"src":"1731:8:19","valueSize":1}],"id":3200,"nodeType":"InlineAssembly","src":"1697:52:19"}]},"id":3202,"implemented":true,"kind":"function","modifiers":[],"name":"diamondStorage","nameLocation":"1567:14:19","nodeType":"FunctionDefinition","parameters":{"id":3191,"nodeType":"ParameterList","parameters":[],"src":"1581:2:19"},"returnParameters":{"id":3195,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3194,"mutability":"mutable","name":"ds","nameLocation":"1630:2:19","nodeType":"VariableDeclaration","scope":3202,"src":"1607:25:19","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3190_storage_ptr","typeString":"struct LibDiamond.DiamondStorage"},"typeName":{"id":3193,"nodeType":"UserDefinedTypeName","pathNode":{"id":3192,"name":"DiamondStorage","nameLocations":["1607:14:19"],"nodeType":"IdentifierPath","referencedDeclaration":3190,"src":"1607:14:19"},"referencedDeclaration":3190,"src":"1607:14:19","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3190_storage_ptr","typeString":"struct LibDiamond.DiamondStorage"}},"visibility":"internal"}],"src":"1606:27:19"},"scope":3984,"src":"1558:197:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"anonymous":false,"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":3208,"name":"OwnershipTransferred","nameLocation":"1767:20:19","nodeType":"EventDefinition","parameters":{"id":3207,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3204,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"1804:13:19","nodeType":"VariableDeclaration","scope":3208,"src":"1788:29:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3203,"name":"address","nodeType":"ElementaryTypeName","src":"1788:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3206,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"1835:8:19","nodeType":"VariableDeclaration","scope":3208,"src":"1819:24:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3205,"name":"address","nodeType":"ElementaryTypeName","src":"1819:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1787:57:19"},"src":"1761:84:19"},{"body":{"id":3235,"nodeType":"Block","src":"1905:210:19","statements":[{"assignments":[3215],"declarations":[{"constant":false,"id":3215,"mutability":"mutable","name":"ds","nameLocation":"1938:2:19","nodeType":"VariableDeclaration","scope":3235,"src":"1915:25:19","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3190_storage_ptr","typeString":"struct LibDiamond.DiamondStorage"},"typeName":{"id":3214,"nodeType":"UserDefinedTypeName","pathNode":{"id":3213,"name":"DiamondStorage","nameLocations":["1915:14:19"],"nodeType":"IdentifierPath","referencedDeclaration":3190,"src":"1915:14:19"},"referencedDeclaration":3190,"src":"1915:14:19","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3190_storage_ptr","typeString":"struct LibDiamond.DiamondStorage"}},"visibility":"internal"}],"id":3218,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":3216,"name":"diamondStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3202,"src":"1943:14:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_DiamondStorage_$3190_storage_ptr_$","typeString":"function () pure returns (struct LibDiamond.DiamondStorage storage pointer)"}},"id":3217,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1943:16:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3190_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"1915:44:19"},{"assignments":[3220],"declarations":[{"constant":false,"id":3220,"mutability":"mutable","name":"previousOwner","nameLocation":"1977:13:19","nodeType":"VariableDeclaration","scope":3235,"src":"1969:21:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3219,"name":"address","nodeType":"ElementaryTypeName","src":"1969:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3223,"initialValue":{"expression":{"id":3221,"name":"ds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3215,"src":"1993:2:19","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3190_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"}},"id":3222,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1996:13:19","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":3189,"src":"1993:16:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"1969:40:19"},{"expression":{"id":3228,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3224,"name":"ds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3215,"src":"2019:2:19","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3190_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"}},"id":3226,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"2022:13:19","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":3189,"src":"2019:16:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3227,"name":"_newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3210,"src":"2038:9:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2019:28:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3229,"nodeType":"ExpressionStatement","src":"2019:28:19"},{"eventCall":{"arguments":[{"id":3231,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3220,"src":"2083:13:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3232,"name":"_newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3210,"src":"2098:9:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3230,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3208,"src":"2062:20:19","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":3233,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2062:46:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3234,"nodeType":"EmitStatement","src":"2057:51:19"}]},"id":3236,"implemented":true,"kind":"function","modifiers":[],"name":"setContractOwner","nameLocation":"1860:16:19","nodeType":"FunctionDefinition","parameters":{"id":3211,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3210,"mutability":"mutable","name":"_newOwner","nameLocation":"1885:9:19","nodeType":"VariableDeclaration","scope":3236,"src":"1877:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3209,"name":"address","nodeType":"ElementaryTypeName","src":"1877:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1876:19:19"},"returnParameters":{"id":3212,"nodeType":"ParameterList","parameters":[],"src":"1905:0:19"},"scope":3984,"src":"1851:264:19","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3247,"nodeType":"Block","src":"2193:64:19","statements":[{"expression":{"id":3245,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3241,"name":"contractOwner_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3239,"src":"2203:14:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":3242,"name":"diamondStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3202,"src":"2220:14:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_DiamondStorage_$3190_storage_ptr_$","typeString":"function () pure returns (struct LibDiamond.DiamondStorage storage pointer)"}},"id":3243,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2220:16:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3190_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"}},"id":3244,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2237:13:19","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":3189,"src":"2220:30:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2203:47:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3246,"nodeType":"ExpressionStatement","src":"2203:47:19"}]},"id":3248,"implemented":true,"kind":"function","modifiers":[],"name":"contractOwner","nameLocation":"2130:13:19","nodeType":"FunctionDefinition","parameters":{"id":3237,"nodeType":"ParameterList","parameters":[],"src":"2143:2:19"},"returnParameters":{"id":3240,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3239,"mutability":"mutable","name":"contractOwner_","nameLocation":"2177:14:19","nodeType":"VariableDeclaration","scope":3248,"src":"2169:22:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3238,"name":"address","nodeType":"ElementaryTypeName","src":"2169:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2168:24:19"},"scope":3984,"src":"2121:136:19","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3261,"nodeType":"Block","src":"2311:108:19","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3257,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3252,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2329:3:19","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3253,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2333:6:19","memberName":"sender","nodeType":"MemberAccess","src":"2329:10:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":3254,"name":"diamondStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3202,"src":"2343:14:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_DiamondStorage_$3190_storage_ptr_$","typeString":"function () pure returns (struct LibDiamond.DiamondStorage storage pointer)"}},"id":3255,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2343:16:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3190_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"}},"id":3256,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2360:13:19","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":3189,"src":"2343:30:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2329:44:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4c69624469616d6f6e643a204d75737420626520636f6e7472616374206f776e6572","id":3258,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2375:36:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_0d4ae41009c51fd276653a54d7793c24f266ddc8c56ce21f8be5e2c6595ab3ac","typeString":"literal_string \"LibDiamond: Must be contract owner\""},"value":"LibDiamond: Must be contract owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0d4ae41009c51fd276653a54d7793c24f266ddc8c56ce21f8be5e2c6595ab3ac","typeString":"literal_string \"LibDiamond: Must be contract owner\""}],"id":3251,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2321:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3259,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2321:91:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3260,"nodeType":"ExpressionStatement","src":"2321:91:19"}]},"id":3262,"implemented":true,"kind":"function","modifiers":[],"name":"enforceIsContractOwner","nameLocation":"2272:22:19","nodeType":"FunctionDefinition","parameters":{"id":3249,"nodeType":"ParameterList","parameters":[],"src":"2294:2:19"},"returnParameters":{"id":3250,"nodeType":"ParameterList","parameters":[],"src":"2311:0:19"},"scope":3984,"src":"2263:156:19","stateMutability":"view","virtual":false,"visibility":"internal"},{"anonymous":false,"eventSelector":"8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb673","id":3272,"name":"DiamondCut","nameLocation":"2431:10:19","nodeType":"EventDefinition","parameters":{"id":3271,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3266,"indexed":false,"mutability":"mutable","name":"_diamondCut","nameLocation":"2465:11:19","nodeType":"VariableDeclaration","scope":3272,"src":"2442:34:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_FacetCut_$3086_memory_ptr_$dyn_memory_ptr","typeString":"struct IDiamondCut.FacetCut[]"},"typeName":{"baseType":{"id":3264,"nodeType":"UserDefinedTypeName","pathNode":{"id":3263,"name":"IDiamondCut.FacetCut","nameLocations":["2442:11:19","2454:8:19"],"nodeType":"IdentifierPath","referencedDeclaration":3086,"src":"2442:20:19"},"referencedDeclaration":3086,"src":"2442:20:19","typeDescriptions":{"typeIdentifier":"t_struct$_FacetCut_$3086_storage_ptr","typeString":"struct IDiamondCut.FacetCut"}},"id":3265,"nodeType":"ArrayTypeName","src":"2442:22:19","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_FacetCut_$3086_storage_$dyn_storage_ptr","typeString":"struct IDiamondCut.FacetCut[]"}},"visibility":"internal"},{"constant":false,"id":3268,"indexed":false,"mutability":"mutable","name":"_init","nameLocation":"2486:5:19","nodeType":"VariableDeclaration","scope":3272,"src":"2478:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3267,"name":"address","nodeType":"ElementaryTypeName","src":"2478:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3270,"indexed":false,"mutability":"mutable","name":"_calldata","nameLocation":"2499:9:19","nodeType":"VariableDeclaration","scope":3272,"src":"2493:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3269,"name":"bytes","nodeType":"ElementaryTypeName","src":"2493:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2441:68:19"},"src":"2425:85:19"},{"body":{"id":3375,"nodeType":"Block","src":"2704:926:19","statements":[{"body":{"id":3362,"nodeType":"Block","src":"2786:734:19","statements":[{"assignments":[3297],"declarations":[{"constant":false,"id":3297,"mutability":"mutable","name":"action","nameLocation":"2827:6:19","nodeType":"VariableDeclaration","scope":3362,"src":"2800:33:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_FacetCutAction_$3077","typeString":"enum IDiamondCut.FacetCutAction"},"typeName":{"id":3296,"nodeType":"UserDefinedTypeName","pathNode":{"id":3295,"name":"IDiamondCut.FacetCutAction","nameLocations":["2800:11:19","2812:14:19"],"nodeType":"IdentifierPath","referencedDeclaration":3077,"src":"2800:26:19"},"referencedDeclaration":3077,"src":"2800:26:19","typeDescriptions":{"typeIdentifier":"t_enum$_FacetCutAction_$3077","typeString":"enum IDiamondCut.FacetCutAction"}},"visibility":"internal"}],"id":3302,"initialValue":{"expression":{"baseExpression":{"id":3298,"name":"_diamondCut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3276,"src":"2836:11:19","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_FacetCut_$3086_memory_ptr_$dyn_memory_ptr","typeString":"struct IDiamondCut.FacetCut memory[] memory"}},"id":3300,"indexExpression":{"id":3299,"name":"facetIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3284,"src":"2848:10:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2836:23:19","typeDescriptions":{"typeIdentifier":"t_struct$_FacetCut_$3086_memory_ptr","typeString":"struct IDiamondCut.FacetCut memory"}},"id":3301,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2860:6:19","memberName":"action","nodeType":"MemberAccess","referencedDeclaration":3082,"src":"2836:30:19","typeDescriptions":{"typeIdentifier":"t_enum$_FacetCutAction_$3077","typeString":"enum IDiamondCut.FacetCutAction"}},"nodeType":"VariableDeclarationStatement","src":"2800:66:19"},{"condition":{"commonType":{"typeIdentifier":"t_enum$_FacetCutAction_$3077","typeString":"enum IDiamondCut.FacetCutAction"},"id":3307,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3303,"name":"action","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3297,"src":"2884:6:19","typeDescriptions":{"typeIdentifier":"t_enum$_FacetCutAction_$3077","typeString":"enum IDiamondCut.FacetCutAction"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":3304,"name":"IDiamondCut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3109,"src":"2894:11:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IDiamondCut_$3109_$","typeString":"type(contract IDiamondCut)"}},"id":3305,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2906:14:19","memberName":"FacetCutAction","nodeType":"MemberAccess","referencedDeclaration":3077,"src":"2894:26:19","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_FacetCutAction_$3077_$","typeString":"type(enum IDiamondCut.FacetCutAction)"}},"id":3306,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2921:3:19","memberName":"Add","nodeType":"MemberAccess","referencedDeclaration":3074,"src":"2894:30:19","typeDescriptions":{"typeIdentifier":"t_enum$_FacetCutAction_$3077","typeString":"enum IDiamondCut.FacetCutAction"}},"src":"2884:40:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_FacetCutAction_$3077","typeString":"enum IDiamondCut.FacetCutAction"},"id":3324,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3320,"name":"action","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3297,"src":"3062:6:19","typeDescriptions":{"typeIdentifier":"t_enum$_FacetCutAction_$3077","typeString":"enum IDiamondCut.FacetCutAction"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":3321,"name":"IDiamondCut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3109,"src":"3072:11:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IDiamondCut_$3109_$","typeString":"type(contract IDiamondCut)"}},"id":3322,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3084:14:19","memberName":"FacetCutAction","nodeType":"MemberAccess","referencedDeclaration":3077,"src":"3072:26:19","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_FacetCutAction_$3077_$","typeString":"type(enum IDiamondCut.FacetCutAction)"}},"id":3323,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3099:7:19","memberName":"Replace","nodeType":"MemberAccess","referencedDeclaration":3075,"src":"3072:34:19","typeDescriptions":{"typeIdentifier":"t_enum$_FacetCutAction_$3077","typeString":"enum IDiamondCut.FacetCutAction"}},"src":"3062:44:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_FacetCutAction_$3077","typeString":"enum IDiamondCut.FacetCutAction"},"id":3341,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3337,"name":"action","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3297,"src":"3248:6:19","typeDescriptions":{"typeIdentifier":"t_enum$_FacetCutAction_$3077","typeString":"enum IDiamondCut.FacetCutAction"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":3338,"name":"IDiamondCut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3109,"src":"3258:11:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IDiamondCut_$3109_$","typeString":"type(contract IDiamondCut)"}},"id":3339,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3270:14:19","memberName":"FacetCutAction","nodeType":"MemberAccess","referencedDeclaration":3077,"src":"3258:26:19","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_FacetCutAction_$3077_$","typeString":"type(enum IDiamondCut.FacetCutAction)"}},"id":3340,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3285:6:19","memberName":"Remove","nodeType":"MemberAccess","referencedDeclaration":3076,"src":"3258:33:19","typeDescriptions":{"typeIdentifier":"t_enum$_FacetCutAction_$3077","typeString":"enum IDiamondCut.FacetCutAction"}},"src":"3248:43:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3358,"nodeType":"Block","src":"3428:82:19","statements":[{"expression":{"arguments":[{"hexValue":"4c69624469616d6f6e644375743a20496e636f7272656374204661636574437574416374696f6e","id":3355,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3453:41:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_48267d8daf5ea9c6bbad1fe9c53dc4c04a2a01b2b85bad432956cf42f45b2f54","typeString":"literal_string \"LibDiamondCut: Incorrect FacetCutAction\""},"value":"LibDiamondCut: Incorrect FacetCutAction"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_48267d8daf5ea9c6bbad1fe9c53dc4c04a2a01b2b85bad432956cf42f45b2f54","typeString":"literal_string \"LibDiamondCut: Incorrect FacetCutAction\""}],"id":3354,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"3446:6:19","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":3356,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3446:49:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3357,"nodeType":"ExpressionStatement","src":"3446:49:19"}]},"id":3359,"nodeType":"IfStatement","src":"3244:266:19","trueBody":{"id":3353,"nodeType":"Block","src":"3293:129:19","statements":[{"expression":{"arguments":[{"expression":{"baseExpression":{"id":3343,"name":"_diamondCut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3276,"src":"3327:11:19","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_FacetCut_$3086_memory_ptr_$dyn_memory_ptr","typeString":"struct IDiamondCut.FacetCut memory[] memory"}},"id":3345,"indexExpression":{"id":3344,"name":"facetIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3284,"src":"3339:10:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3327:23:19","typeDescriptions":{"typeIdentifier":"t_struct$_FacetCut_$3086_memory_ptr","typeString":"struct IDiamondCut.FacetCut memory"}},"id":3346,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3351:12:19","memberName":"facetAddress","nodeType":"MemberAccess","referencedDeclaration":3079,"src":"3327:36:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"baseExpression":{"id":3347,"name":"_diamondCut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3276,"src":"3365:11:19","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_FacetCut_$3086_memory_ptr_$dyn_memory_ptr","typeString":"struct IDiamondCut.FacetCut memory[] memory"}},"id":3349,"indexExpression":{"id":3348,"name":"facetIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3284,"src":"3377:10:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3365:23:19","typeDescriptions":{"typeIdentifier":"t_struct$_FacetCut_$3086_memory_ptr","typeString":"struct IDiamondCut.FacetCut memory"}},"id":3350,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3389:17:19","memberName":"functionSelectors","nodeType":"MemberAccess","referencedDeclaration":3085,"src":"3365:41:19","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_memory_ptr","typeString":"bytes4[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_bytes4_$dyn_memory_ptr","typeString":"bytes4[] memory"}],"id":3342,"name":"removeFunctions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3646,"src":"3311:15:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_array$_t_bytes4_$dyn_memory_ptr_$returns$__$","typeString":"function (address,bytes4[] memory)"}},"id":3351,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3311:96:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3352,"nodeType":"ExpressionStatement","src":"3311:96:19"}]}},"id":3360,"nodeType":"IfStatement","src":"3058:452:19","trueBody":{"id":3336,"nodeType":"Block","src":"3108:130:19","statements":[{"expression":{"arguments":[{"expression":{"baseExpression":{"id":3326,"name":"_diamondCut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3276,"src":"3143:11:19","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_FacetCut_$3086_memory_ptr_$dyn_memory_ptr","typeString":"struct IDiamondCut.FacetCut memory[] memory"}},"id":3328,"indexExpression":{"id":3327,"name":"facetIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3284,"src":"3155:10:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3143:23:19","typeDescriptions":{"typeIdentifier":"t_struct$_FacetCut_$3086_memory_ptr","typeString":"struct IDiamondCut.FacetCut memory"}},"id":3329,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3167:12:19","memberName":"facetAddress","nodeType":"MemberAccess","referencedDeclaration":3079,"src":"3143:36:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"baseExpression":{"id":3330,"name":"_diamondCut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3276,"src":"3181:11:19","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_FacetCut_$3086_memory_ptr_$dyn_memory_ptr","typeString":"struct IDiamondCut.FacetCut memory[] memory"}},"id":3332,"indexExpression":{"id":3331,"name":"facetIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3284,"src":"3193:10:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3181:23:19","typeDescriptions":{"typeIdentifier":"t_struct$_FacetCut_$3086_memory_ptr","typeString":"struct IDiamondCut.FacetCut memory"}},"id":3333,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3205:17:19","memberName":"functionSelectors","nodeType":"MemberAccess","referencedDeclaration":3085,"src":"3181:41:19","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_memory_ptr","typeString":"bytes4[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_bytes4_$dyn_memory_ptr","typeString":"bytes4[] memory"}],"id":3325,"name":"replaceFunctions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3581,"src":"3126:16:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_array$_t_bytes4_$dyn_memory_ptr_$returns$__$","typeString":"function (address,bytes4[] memory)"}},"id":3334,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3126:97:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3335,"nodeType":"ExpressionStatement","src":"3126:97:19"}]}},"id":3361,"nodeType":"IfStatement","src":"2880:630:19","trueBody":{"id":3319,"nodeType":"Block","src":"2926:126:19","statements":[{"expression":{"arguments":[{"expression":{"baseExpression":{"id":3309,"name":"_diamondCut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3276,"src":"2957:11:19","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_FacetCut_$3086_memory_ptr_$dyn_memory_ptr","typeString":"struct IDiamondCut.FacetCut memory[] memory"}},"id":3311,"indexExpression":{"id":3310,"name":"facetIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3284,"src":"2969:10:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2957:23:19","typeDescriptions":{"typeIdentifier":"t_struct$_FacetCut_$3086_memory_ptr","typeString":"struct IDiamondCut.FacetCut memory"}},"id":3312,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2981:12:19","memberName":"facetAddress","nodeType":"MemberAccess","referencedDeclaration":3079,"src":"2957:36:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"baseExpression":{"id":3313,"name":"_diamondCut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3276,"src":"2995:11:19","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_FacetCut_$3086_memory_ptr_$dyn_memory_ptr","typeString":"struct IDiamondCut.FacetCut memory[] memory"}},"id":3315,"indexExpression":{"id":3314,"name":"facetIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3284,"src":"3007:10:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2995:23:19","typeDescriptions":{"typeIdentifier":"t_struct$_FacetCut_$3086_memory_ptr","typeString":"struct IDiamondCut.FacetCut memory"}},"id":3316,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3019:17:19","memberName":"functionSelectors","nodeType":"MemberAccess","referencedDeclaration":3085,"src":"2995:41:19","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_memory_ptr","typeString":"bytes4[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_bytes4_$dyn_memory_ptr","typeString":"bytes4[] memory"}],"id":3308,"name":"addFunctions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3477,"src":"2944:12:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_array$_t_bytes4_$dyn_memory_ptr_$returns$__$","typeString":"function (address,bytes4[] memory)"}},"id":3317,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2944:93:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3318,"nodeType":"ExpressionStatement","src":"2944:93:19"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3289,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3286,"name":"facetIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3284,"src":"2739:10:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":3287,"name":"_diamondCut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3276,"src":"2752:11:19","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_FacetCut_$3086_memory_ptr_$dyn_memory_ptr","typeString":"struct IDiamondCut.FacetCut memory[] memory"}},"id":3288,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2764:6:19","memberName":"length","nodeType":"MemberAccess","src":"2752:18:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2739:31:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3363,"initializationExpression":{"assignments":[3284],"declarations":[{"constant":false,"id":3284,"mutability":"mutable","name":"facetIndex","nameLocation":"2727:10:19","nodeType":"VariableDeclaration","scope":3363,"src":"2719:18:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3283,"name":"uint256","nodeType":"ElementaryTypeName","src":"2719:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3285,"nodeType":"VariableDeclarationStatement","src":"2719:18:19"},"loopExpression":{"expression":{"id":3291,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2772:12:19","subExpression":{"id":3290,"name":"facetIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3284,"src":"2772:10:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3292,"nodeType":"ExpressionStatement","src":"2772:12:19"},"nodeType":"ForStatement","src":"2714:806:19"},{"eventCall":{"arguments":[{"id":3365,"name":"_diamondCut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3276,"src":"3545:11:19","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_FacetCut_$3086_memory_ptr_$dyn_memory_ptr","typeString":"struct IDiamondCut.FacetCut memory[] memory"}},{"id":3366,"name":"_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3278,"src":"3558:5:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3367,"name":"_calldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3280,"src":"3565:9:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_struct$_FacetCut_$3086_memory_ptr_$dyn_memory_ptr","typeString":"struct IDiamondCut.FacetCut memory[] memory"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3364,"name":"DiamondCut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3272,"src":"3534:10:19","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_array$_t_struct$_FacetCut_$3086_memory_ptr_$dyn_memory_ptr_$_t_address_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (struct IDiamondCut.FacetCut memory[] memory,address,bytes memory)"}},"id":3368,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3534:41:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3369,"nodeType":"EmitStatement","src":"3529:46:19"},{"expression":{"arguments":[{"id":3371,"name":"_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3278,"src":"3606:5:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3372,"name":"_calldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3280,"src":"3613:9:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3370,"name":"initializeDiamondCut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3964,"src":"3585:20:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,bytes memory)"}},"id":3373,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3585:38:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3374,"nodeType":"ExpressionStatement","src":"3585:38:19"}]},"id":3376,"implemented":true,"kind":"function","modifiers":[],"name":"diamondCut","nameLocation":"2572:10:19","nodeType":"FunctionDefinition","parameters":{"id":3281,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3276,"mutability":"mutable","name":"_diamondCut","nameLocation":"2622:11:19","nodeType":"VariableDeclaration","scope":3376,"src":"2592:41:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_FacetCut_$3086_memory_ptr_$dyn_memory_ptr","typeString":"struct IDiamondCut.FacetCut[]"},"typeName":{"baseType":{"id":3274,"nodeType":"UserDefinedTypeName","pathNode":{"id":3273,"name":"IDiamondCut.FacetCut","nameLocations":["2592:11:19","2604:8:19"],"nodeType":"IdentifierPath","referencedDeclaration":3086,"src":"2592:20:19"},"referencedDeclaration":3086,"src":"2592:20:19","typeDescriptions":{"typeIdentifier":"t_struct$_FacetCut_$3086_storage_ptr","typeString":"struct IDiamondCut.FacetCut"}},"id":3275,"nodeType":"ArrayTypeName","src":"2592:22:19","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_FacetCut_$3086_storage_$dyn_storage_ptr","typeString":"struct IDiamondCut.FacetCut[]"}},"visibility":"internal"},{"constant":false,"id":3278,"mutability":"mutable","name":"_init","nameLocation":"2651:5:19","nodeType":"VariableDeclaration","scope":3376,"src":"2643:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3277,"name":"address","nodeType":"ElementaryTypeName","src":"2643:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3280,"mutability":"mutable","name":"_calldata","nameLocation":"2679:9:19","nodeType":"VariableDeclaration","scope":3376,"src":"2666:22:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3279,"name":"bytes","nodeType":"ElementaryTypeName","src":"2666:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2582:112:19"},"returnParameters":{"id":3282,"nodeType":"ParameterList","parameters":[],"src":"2704:0:19"},"scope":3984,"src":"2563:1067:19","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3476,"nodeType":"Block","src":"3726:999:19","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3388,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3385,"name":"_functionSelectors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3381,"src":"3744:18:19","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_memory_ptr","typeString":"bytes4[] memory"}},"id":3386,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3763:6:19","memberName":"length","nodeType":"MemberAccess","src":"3744:25:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3387,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3772:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3744:29:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4c69624469616d6f6e644375743a204e6f2073656c6563746f727320696e20666163657420746f20637574","id":3389,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3775:45:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_1ffc682bcfedefd5e93ba9ed0c2d1bc0b18319886e3b4bd28a03a3d3729f85c0","typeString":"literal_string \"LibDiamondCut: No selectors in facet to cut\""},"value":"LibDiamondCut: No selectors in facet to cut"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1ffc682bcfedefd5e93ba9ed0c2d1bc0b18319886e3b4bd28a03a3d3729f85c0","typeString":"literal_string \"LibDiamondCut: No selectors in facet to cut\""}],"id":3384,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3736:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3390,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3736:85:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3391,"nodeType":"ExpressionStatement","src":"3736:85:19"},{"assignments":[3394],"declarations":[{"constant":false,"id":3394,"mutability":"mutable","name":"ds","nameLocation":"3854:2:19","nodeType":"VariableDeclaration","scope":3476,"src":"3831:25:19","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3190_storage_ptr","typeString":"struct LibDiamond.DiamondStorage"},"typeName":{"id":3393,"nodeType":"UserDefinedTypeName","pathNode":{"id":3392,"name":"DiamondStorage","nameLocations":["3831:14:19"],"nodeType":"IdentifierPath","referencedDeclaration":3190,"src":"3831:14:19"},"referencedDeclaration":3190,"src":"3831:14:19","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3190_storage_ptr","typeString":"struct LibDiamond.DiamondStorage"}},"visibility":"internal"}],"id":3397,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":3395,"name":"diamondStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3202,"src":"3859:14:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_DiamondStorage_$3190_storage_ptr_$","typeString":"function () pure returns (struct LibDiamond.DiamondStorage storage pointer)"}},"id":3396,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3859:16:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3190_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"3831:44:19"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3404,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3399,"name":"_facetAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3378,"src":"3901:13:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3402,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3926:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3401,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3918:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3400,"name":"address","nodeType":"ElementaryTypeName","src":"3918:7:19","typeDescriptions":{}}},"id":3403,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3918:10:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3901:27:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4c69624469616d6f6e644375743a204164642066616365742063616e27742062652061646472657373283029","id":3405,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3930:46:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_64609d8b93c93a06b98d7db7a87b04044cd4a52c5661d603bb9b90ad8b914a3a","typeString":"literal_string \"LibDiamondCut: Add facet can't be address(0)\""},"value":"LibDiamondCut: Add facet can't be address(0)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_64609d8b93c93a06b98d7db7a87b04044cd4a52c5661d603bb9b90ad8b914a3a","typeString":"literal_string \"LibDiamondCut: Add facet can't be address(0)\""}],"id":3398,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3893:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3406,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3893:84:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3407,"nodeType":"ExpressionStatement","src":"3893:84:19"},{"assignments":[3409],"declarations":[{"constant":false,"id":3409,"mutability":"mutable","name":"selectorPosition","nameLocation":"3994:16:19","nodeType":"VariableDeclaration","scope":3476,"src":"3987:23:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":3408,"name":"uint96","nodeType":"ElementaryTypeName","src":"3987:6:19","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"}],"id":3419,"initialValue":{"arguments":[{"expression":{"expression":{"baseExpression":{"expression":{"id":3412,"name":"ds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3394,"src":"4020:2:19","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3190_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"}},"id":3413,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4023:22:19","memberName":"facetFunctionSelectors","nodeType":"MemberAccess","referencedDeclaration":3180,"src":"4020:25:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_FacetFunctionSelectors_$3170_storage_$","typeString":"mapping(address => struct LibDiamond.FacetFunctionSelectors storage ref)"}},"id":3415,"indexExpression":{"id":3414,"name":"_facetAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3378,"src":"4046:13:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4020:40:19","typeDescriptions":{"typeIdentifier":"t_struct$_FacetFunctionSelectors_$3170_storage","typeString":"struct LibDiamond.FacetFunctionSelectors storage ref"}},"id":3416,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4061:17:19","memberName":"functionSelectors","nodeType":"MemberAccess","referencedDeclaration":3167,"src":"4020:58:19","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_storage","typeString":"bytes4[] storage ref"}},"id":3417,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4079:6:19","memberName":"length","nodeType":"MemberAccess","src":"4020:65:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3411,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4013:6:19","typeDescriptions":{"typeIdentifier":"t_type$_t_uint96_$","typeString":"type(uint96)"},"typeName":{"id":3410,"name":"uint96","nodeType":"ElementaryTypeName","src":"4013:6:19","typeDescriptions":{}}},"id":3418,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4013:73:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"nodeType":"VariableDeclarationStatement","src":"3987:99:19"},{"condition":{"commonType":{"typeIdentifier":"t_uint96","typeString":"uint96"},"id":3422,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3420,"name":"selectorPosition","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3409,"src":"4154:16:19","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3421,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4174:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4154:21:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3429,"nodeType":"IfStatement","src":"4150:91:19","trueBody":{"id":3428,"nodeType":"Block","src":"4177:64:19","statements":[{"expression":{"arguments":[{"id":3424,"name":"ds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3394,"src":"4200:2:19","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3190_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"}},{"id":3425,"name":"_facetAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3378,"src":"4204:13:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_DiamondStorage_$3190_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3423,"name":"addFacet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3679,"src":"4191:8:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_DiamondStorage_$3190_storage_ptr_$_t_address_$returns$__$","typeString":"function (struct LibDiamond.DiamondStorage storage pointer,address)"}},"id":3426,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4191:27:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3427,"nodeType":"ExpressionStatement","src":"4191:27:19"}]}},{"body":{"id":3474,"nodeType":"Block","src":"4338:381:19","statements":[{"assignments":[3441],"declarations":[{"constant":false,"id":3441,"mutability":"mutable","name":"selector","nameLocation":"4359:8:19","nodeType":"VariableDeclaration","scope":3474,"src":"4352:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3440,"name":"bytes4","nodeType":"ElementaryTypeName","src":"4352:6:19","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"id":3445,"initialValue":{"baseExpression":{"id":3442,"name":"_functionSelectors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3381,"src":"4370:18:19","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_memory_ptr","typeString":"bytes4[] memory"}},"id":3444,"indexExpression":{"id":3443,"name":"selectorIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3431,"src":"4389:13:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4370:33:19","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"VariableDeclarationStatement","src":"4352:51:19"},{"assignments":[3447],"declarations":[{"constant":false,"id":3447,"mutability":"mutable","name":"oldFacetAddress","nameLocation":"4425:15:19","nodeType":"VariableDeclaration","scope":3474,"src":"4417:23:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3446,"name":"address","nodeType":"ElementaryTypeName","src":"4417:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3453,"initialValue":{"expression":{"baseExpression":{"expression":{"id":3448,"name":"ds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3394,"src":"4443:2:19","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3190_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"}},"id":3449,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4446:26:19","memberName":"selectorToFacetAndPosition","nodeType":"MemberAccess","referencedDeclaration":3175,"src":"4443:29:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_struct$_FacetAddressAndPosition_$3164_storage_$","typeString":"mapping(bytes4 => struct LibDiamond.FacetAddressAndPosition storage ref)"}},"id":3451,"indexExpression":{"id":3450,"name":"selector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3441,"src":"4473:8:19","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4443:39:19","typeDescriptions":{"typeIdentifier":"t_struct$_FacetAddressAndPosition_$3164_storage","typeString":"struct LibDiamond.FacetAddressAndPosition storage ref"}},"id":3452,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4483:12:19","memberName":"facetAddress","nodeType":"MemberAccess","referencedDeclaration":3161,"src":"4443:52:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"4417:78:19"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3460,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3455,"name":"oldFacetAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3447,"src":"4517:15:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":3458,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4544:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3457,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4536:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3456,"name":"address","nodeType":"ElementaryTypeName","src":"4536:7:19","typeDescriptions":{}}},"id":3459,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4536:10:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4517:29:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4c69624469616d6f6e644375743a2043616e2774206164642066756e6374696f6e207468617420616c726561647920657869737473","id":3461,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4548:55:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_99a7418ee014d613f46da44561258cdbb58064508097483a319062b99fa37700","typeString":"literal_string \"LibDiamondCut: Can't add function that already exists\""},"value":"LibDiamondCut: Can't add function that already exists"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_99a7418ee014d613f46da44561258cdbb58064508097483a319062b99fa37700","typeString":"literal_string \"LibDiamondCut: Can't add function that already exists\""}],"id":3454,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4509:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3462,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4509:95:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3463,"nodeType":"ExpressionStatement","src":"4509:95:19"},{"expression":{"arguments":[{"id":3465,"name":"ds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3394,"src":"4630:2:19","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3190_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"}},{"id":3466,"name":"selector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3441,"src":"4634:8:19","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":3467,"name":"selectorPosition","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3409,"src":"4644:16:19","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},{"id":3468,"name":"_facetAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3378,"src":"4662:13:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_DiamondStorage_$3190_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"},{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_uint96","typeString":"uint96"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3464,"name":"addFunction","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3720,"src":"4618:11:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_DiamondStorage_$3190_storage_ptr_$_t_bytes4_$_t_uint96_$_t_address_$returns$__$","typeString":"function (struct LibDiamond.DiamondStorage storage pointer,bytes4,uint96,address)"}},"id":3469,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4618:58:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3470,"nodeType":"ExpressionStatement","src":"4618:58:19"},{"expression":{"id":3472,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"4690:18:19","subExpression":{"id":3471,"name":"selectorPosition","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3409,"src":"4690:16:19","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"id":3473,"nodeType":"ExpressionStatement","src":"4690:18:19"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3436,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3433,"name":"selectorIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3431,"src":"4278:13:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":3434,"name":"_functionSelectors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3381,"src":"4294:18:19","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_memory_ptr","typeString":"bytes4[] memory"}},"id":3435,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4313:6:19","memberName":"length","nodeType":"MemberAccess","src":"4294:25:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4278:41:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3475,"initializationExpression":{"assignments":[3431],"declarations":[{"constant":false,"id":3431,"mutability":"mutable","name":"selectorIndex","nameLocation":"4263:13:19","nodeType":"VariableDeclaration","scope":3475,"src":"4255:21:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3430,"name":"uint256","nodeType":"ElementaryTypeName","src":"4255:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3432,"nodeType":"VariableDeclarationStatement","src":"4255:21:19"},"loopExpression":{"expression":{"id":3438,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"4321:15:19","subExpression":{"id":3437,"name":"selectorIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3431,"src":"4321:13:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3439,"nodeType":"ExpressionStatement","src":"4321:15:19"},"nodeType":"ForStatement","src":"4250:469:19"}]},"id":3477,"implemented":true,"kind":"function","modifiers":[],"name":"addFunctions","nameLocation":"3645:12:19","nodeType":"FunctionDefinition","parameters":{"id":3382,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3378,"mutability":"mutable","name":"_facetAddress","nameLocation":"3666:13:19","nodeType":"VariableDeclaration","scope":3477,"src":"3658:21:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3377,"name":"address","nodeType":"ElementaryTypeName","src":"3658:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3381,"mutability":"mutable","name":"_functionSelectors","nameLocation":"3697:18:19","nodeType":"VariableDeclaration","scope":3477,"src":"3681:34:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_memory_ptr","typeString":"bytes4[]"},"typeName":{"baseType":{"id":3379,"name":"bytes4","nodeType":"ElementaryTypeName","src":"3681:6:19","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":3380,"nodeType":"ArrayTypeName","src":"3681:8:19","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_storage_ptr","typeString":"bytes4[]"}},"visibility":"internal"}],"src":"3657:59:19"},"returnParameters":{"id":3383,"nodeType":"ParameterList","parameters":[],"src":"3726:0:19"},"scope":3984,"src":"3636:1089:19","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3580,"nodeType":"Block","src":"4825:1044:19","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3489,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3486,"name":"_functionSelectors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3482,"src":"4843:18:19","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_memory_ptr","typeString":"bytes4[] memory"}},"id":3487,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4862:6:19","memberName":"length","nodeType":"MemberAccess","src":"4843:25:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3488,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4871:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4843:29:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4c69624469616d6f6e644375743a204e6f2073656c6563746f727320696e20666163657420746f20637574","id":3490,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4874:45:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_1ffc682bcfedefd5e93ba9ed0c2d1bc0b18319886e3b4bd28a03a3d3729f85c0","typeString":"literal_string \"LibDiamondCut: No selectors in facet to cut\""},"value":"LibDiamondCut: No selectors in facet to cut"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1ffc682bcfedefd5e93ba9ed0c2d1bc0b18319886e3b4bd28a03a3d3729f85c0","typeString":"literal_string \"LibDiamondCut: No selectors in facet to cut\""}],"id":3485,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4835:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3491,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4835:85:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3492,"nodeType":"ExpressionStatement","src":"4835:85:19"},{"assignments":[3495],"declarations":[{"constant":false,"id":3495,"mutability":"mutable","name":"ds","nameLocation":"4953:2:19","nodeType":"VariableDeclaration","scope":3580,"src":"4930:25:19","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3190_storage_ptr","typeString":"struct LibDiamond.DiamondStorage"},"typeName":{"id":3494,"nodeType":"UserDefinedTypeName","pathNode":{"id":3493,"name":"DiamondStorage","nameLocations":["4930:14:19"],"nodeType":"IdentifierPath","referencedDeclaration":3190,"src":"4930:14:19"},"referencedDeclaration":3190,"src":"4930:14:19","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3190_storage_ptr","typeString":"struct LibDiamond.DiamondStorage"}},"visibility":"internal"}],"id":3498,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":3496,"name":"diamondStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3202,"src":"4958:14:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_DiamondStorage_$3190_storage_ptr_$","typeString":"function () pure returns (struct LibDiamond.DiamondStorage storage pointer)"}},"id":3497,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4958:16:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3190_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"4930:44:19"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3505,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3500,"name":"_facetAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3479,"src":"4992:13:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3503,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5017:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3502,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5009:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3501,"name":"address","nodeType":"ElementaryTypeName","src":"5009:7:19","typeDescriptions":{}}},"id":3504,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5009:10:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4992:27:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4c69624469616d6f6e644375743a204164642066616365742063616e27742062652061646472657373283029","id":3506,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5021:46:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_64609d8b93c93a06b98d7db7a87b04044cd4a52c5661d603bb9b90ad8b914a3a","typeString":"literal_string \"LibDiamondCut: Add facet can't be address(0)\""},"value":"LibDiamondCut: Add facet can't be address(0)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_64609d8b93c93a06b98d7db7a87b04044cd4a52c5661d603bb9b90ad8b914a3a","typeString":"literal_string \"LibDiamondCut: Add facet can't be address(0)\""}],"id":3499,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4984:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3507,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4984:84:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3508,"nodeType":"ExpressionStatement","src":"4984:84:19"},{"assignments":[3510],"declarations":[{"constant":false,"id":3510,"mutability":"mutable","name":"selectorPosition","nameLocation":"5085:16:19","nodeType":"VariableDeclaration","scope":3580,"src":"5078:23:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":3509,"name":"uint96","nodeType":"ElementaryTypeName","src":"5078:6:19","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"}],"id":3520,"initialValue":{"arguments":[{"expression":{"expression":{"baseExpression":{"expression":{"id":3513,"name":"ds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3495,"src":"5111:2:19","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3190_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"}},"id":3514,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5114:22:19","memberName":"facetFunctionSelectors","nodeType":"MemberAccess","referencedDeclaration":3180,"src":"5111:25:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_FacetFunctionSelectors_$3170_storage_$","typeString":"mapping(address => struct LibDiamond.FacetFunctionSelectors storage ref)"}},"id":3516,"indexExpression":{"id":3515,"name":"_facetAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3479,"src":"5137:13:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5111:40:19","typeDescriptions":{"typeIdentifier":"t_struct$_FacetFunctionSelectors_$3170_storage","typeString":"struct LibDiamond.FacetFunctionSelectors storage ref"}},"id":3517,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5152:17:19","memberName":"functionSelectors","nodeType":"MemberAccess","referencedDeclaration":3167,"src":"5111:58:19","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_storage","typeString":"bytes4[] storage ref"}},"id":3518,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5170:6:19","memberName":"length","nodeType":"MemberAccess","src":"5111:65:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3512,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5104:6:19","typeDescriptions":{"typeIdentifier":"t_type$_t_uint96_$","typeString":"type(uint96)"},"typeName":{"id":3511,"name":"uint96","nodeType":"ElementaryTypeName","src":"5104:6:19","typeDescriptions":{}}},"id":3519,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5104:73:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"nodeType":"VariableDeclarationStatement","src":"5078:99:19"},{"condition":{"commonType":{"typeIdentifier":"t_uint96","typeString":"uint96"},"id":3523,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3521,"name":"selectorPosition","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3510,"src":"5245:16:19","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3522,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5265:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5245:21:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3530,"nodeType":"IfStatement","src":"5241:79:19","trueBody":{"id":3529,"nodeType":"Block","src":"5268:52:19","statements":[{"expression":{"arguments":[{"id":3525,"name":"ds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3495,"src":"5291:2:19","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3190_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"}},{"id":3526,"name":"_facetAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3479,"src":"5295:13:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_DiamondStorage_$3190_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3524,"name":"addFacet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3679,"src":"5282:8:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_DiamondStorage_$3190_storage_ptr_$_t_address_$returns$__$","typeString":"function (struct LibDiamond.DiamondStorage storage pointer,address)"}},"id":3527,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5282:27:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3528,"nodeType":"ExpressionStatement","src":"5282:27:19"}]}},{"body":{"id":3578,"nodeType":"Block","src":"5417:446:19","statements":[{"assignments":[3542],"declarations":[{"constant":false,"id":3542,"mutability":"mutable","name":"selector","nameLocation":"5438:8:19","nodeType":"VariableDeclaration","scope":3578,"src":"5431:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3541,"name":"bytes4","nodeType":"ElementaryTypeName","src":"5431:6:19","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"id":3546,"initialValue":{"baseExpression":{"id":3543,"name":"_functionSelectors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3482,"src":"5449:18:19","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_memory_ptr","typeString":"bytes4[] memory"}},"id":3545,"indexExpression":{"id":3544,"name":"selectorIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3532,"src":"5468:13:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5449:33:19","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"VariableDeclarationStatement","src":"5431:51:19"},{"assignments":[3548],"declarations":[{"constant":false,"id":3548,"mutability":"mutable","name":"oldFacetAddress","nameLocation":"5504:15:19","nodeType":"VariableDeclaration","scope":3578,"src":"5496:23:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3547,"name":"address","nodeType":"ElementaryTypeName","src":"5496:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3554,"initialValue":{"expression":{"baseExpression":{"expression":{"id":3549,"name":"ds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3495,"src":"5522:2:19","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3190_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"}},"id":3550,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5525:26:19","memberName":"selectorToFacetAndPosition","nodeType":"MemberAccess","referencedDeclaration":3175,"src":"5522:29:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_struct$_FacetAddressAndPosition_$3164_storage_$","typeString":"mapping(bytes4 => struct LibDiamond.FacetAddressAndPosition storage ref)"}},"id":3552,"indexExpression":{"id":3551,"name":"selector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3542,"src":"5552:8:19","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5522:39:19","typeDescriptions":{"typeIdentifier":"t_struct$_FacetAddressAndPosition_$3164_storage","typeString":"struct LibDiamond.FacetAddressAndPosition storage ref"}},"id":3553,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5562:12:19","memberName":"facetAddress","nodeType":"MemberAccess","referencedDeclaration":3161,"src":"5522:52:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"5496:78:19"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3558,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3556,"name":"oldFacetAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3548,"src":"5596:15:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":3557,"name":"_facetAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3479,"src":"5615:13:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5596:32:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4c69624469616d6f6e644375743a2043616e2774207265706c6163652066756e6374696f6e20776974682073616d652066756e6374696f6e","id":3559,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5630:58:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_b5a7112edf707196456f338fdcc19cd849be6cb8c0d166bcd035f4cfb00e7078","typeString":"literal_string \"LibDiamondCut: Can't replace function with same function\""},"value":"LibDiamondCut: Can't replace function with same function"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b5a7112edf707196456f338fdcc19cd849be6cb8c0d166bcd035f4cfb00e7078","typeString":"literal_string \"LibDiamondCut: Can't replace function with same function\""}],"id":3555,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5588:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3560,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5588:101:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3561,"nodeType":"ExpressionStatement","src":"5588:101:19"},{"expression":{"arguments":[{"id":3563,"name":"ds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3495,"src":"5718:2:19","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3190_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"}},{"id":3564,"name":"oldFacetAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3548,"src":"5722:15:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3565,"name":"selector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3542,"src":"5739:8:19","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_DiamondStorage_$3190_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"id":3562,"name":"removeFunction","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3887,"src":"5703:14:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_DiamondStorage_$3190_storage_ptr_$_t_address_$_t_bytes4_$returns$__$","typeString":"function (struct LibDiamond.DiamondStorage storage pointer,address,bytes4)"}},"id":3566,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5703:45:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3567,"nodeType":"ExpressionStatement","src":"5703:45:19"},{"expression":{"arguments":[{"id":3569,"name":"ds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3495,"src":"5774:2:19","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3190_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"}},{"id":3570,"name":"selector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3542,"src":"5778:8:19","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":3571,"name":"selectorPosition","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3510,"src":"5788:16:19","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},{"id":3572,"name":"_facetAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3479,"src":"5806:13:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_DiamondStorage_$3190_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"},{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_uint96","typeString":"uint96"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3568,"name":"addFunction","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3720,"src":"5762:11:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_DiamondStorage_$3190_storage_ptr_$_t_bytes4_$_t_uint96_$_t_address_$returns$__$","typeString":"function (struct LibDiamond.DiamondStorage storage pointer,bytes4,uint96,address)"}},"id":3573,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5762:58:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3574,"nodeType":"ExpressionStatement","src":"5762:58:19"},{"expression":{"id":3576,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"5834:18:19","subExpression":{"id":3575,"name":"selectorPosition","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3510,"src":"5834:16:19","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"id":3577,"nodeType":"ExpressionStatement","src":"5834:18:19"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3537,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3534,"name":"selectorIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3532,"src":"5357:13:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":3535,"name":"_functionSelectors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3482,"src":"5373:18:19","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_memory_ptr","typeString":"bytes4[] memory"}},"id":3536,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5392:6:19","memberName":"length","nodeType":"MemberAccess","src":"5373:25:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5357:41:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3579,"initializationExpression":{"assignments":[3532],"declarations":[{"constant":false,"id":3532,"mutability":"mutable","name":"selectorIndex","nameLocation":"5342:13:19","nodeType":"VariableDeclaration","scope":3579,"src":"5334:21:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3531,"name":"uint256","nodeType":"ElementaryTypeName","src":"5334:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3533,"nodeType":"VariableDeclarationStatement","src":"5334:21:19"},"loopExpression":{"expression":{"id":3539,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"5400:15:19","subExpression":{"id":3538,"name":"selectorIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3532,"src":"5400:13:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3540,"nodeType":"ExpressionStatement","src":"5400:15:19"},"nodeType":"ForStatement","src":"5329:534:19"}]},"id":3581,"implemented":true,"kind":"function","modifiers":[],"name":"replaceFunctions","nameLocation":"4740:16:19","nodeType":"FunctionDefinition","parameters":{"id":3483,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3479,"mutability":"mutable","name":"_facetAddress","nameLocation":"4765:13:19","nodeType":"VariableDeclaration","scope":3581,"src":"4757:21:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3478,"name":"address","nodeType":"ElementaryTypeName","src":"4757:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3482,"mutability":"mutable","name":"_functionSelectors","nameLocation":"4796:18:19","nodeType":"VariableDeclaration","scope":3581,"src":"4780:34:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_memory_ptr","typeString":"bytes4[]"},"typeName":{"baseType":{"id":3480,"name":"bytes4","nodeType":"ElementaryTypeName","src":"4780:6:19","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":3481,"nodeType":"ArrayTypeName","src":"4780:8:19","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_storage_ptr","typeString":"bytes4[]"}},"visibility":"internal"}],"src":"4756:59:19"},"returnParameters":{"id":3484,"nodeType":"ParameterList","parameters":[],"src":"4825:0:19"},"scope":3984,"src":"4731:1138:19","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3645,"nodeType":"Block","src":"5968:649:19","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3593,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3590,"name":"_functionSelectors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3586,"src":"5986:18:19","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_memory_ptr","typeString":"bytes4[] memory"}},"id":3591,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6005:6:19","memberName":"length","nodeType":"MemberAccess","src":"5986:25:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3592,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6014:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5986:29:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4c69624469616d6f6e644375743a204e6f2073656c6563746f727320696e20666163657420746f20637574","id":3594,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6017:45:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_1ffc682bcfedefd5e93ba9ed0c2d1bc0b18319886e3b4bd28a03a3d3729f85c0","typeString":"literal_string \"LibDiamondCut: No selectors in facet to cut\""},"value":"LibDiamondCut: No selectors in facet to cut"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1ffc682bcfedefd5e93ba9ed0c2d1bc0b18319886e3b4bd28a03a3d3729f85c0","typeString":"literal_string \"LibDiamondCut: No selectors in facet to cut\""}],"id":3589,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5978:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3595,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5978:85:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3596,"nodeType":"ExpressionStatement","src":"5978:85:19"},{"assignments":[3599],"declarations":[{"constant":false,"id":3599,"mutability":"mutable","name":"ds","nameLocation":"6096:2:19","nodeType":"VariableDeclaration","scope":3645,"src":"6073:25:19","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3190_storage_ptr","typeString":"struct LibDiamond.DiamondStorage"},"typeName":{"id":3598,"nodeType":"UserDefinedTypeName","pathNode":{"id":3597,"name":"DiamondStorage","nameLocations":["6073:14:19"],"nodeType":"IdentifierPath","referencedDeclaration":3190,"src":"6073:14:19"},"referencedDeclaration":3190,"src":"6073:14:19","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3190_storage_ptr","typeString":"struct LibDiamond.DiamondStorage"}},"visibility":"internal"}],"id":3602,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":3600,"name":"diamondStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3202,"src":"6101:14:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_DiamondStorage_$3190_storage_ptr_$","typeString":"function () pure returns (struct LibDiamond.DiamondStorage storage pointer)"}},"id":3601,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6101:16:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3190_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"6073:44:19"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3609,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3604,"name":"_facetAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3583,"src":"6200:13:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":3607,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6225:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3606,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6217:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3605,"name":"address","nodeType":"ElementaryTypeName","src":"6217:7:19","typeDescriptions":{}}},"id":3608,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6217:10:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6200:27:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4c69624469616d6f6e644375743a2052656d6f76652066616365742061646472657373206d7573742062652061646472657373283029","id":3610,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6229:56:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_b739aae768f79b96e91d9f66398733516895e39eb09ee54a795b49dcc77504d4","typeString":"literal_string \"LibDiamondCut: Remove facet address must be address(0)\""},"value":"LibDiamondCut: Remove facet address must be address(0)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b739aae768f79b96e91d9f66398733516895e39eb09ee54a795b49dcc77504d4","typeString":"literal_string \"LibDiamondCut: Remove facet address must be address(0)\""}],"id":3603,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6192:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3611,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6192:94:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3612,"nodeType":"ExpressionStatement","src":"6192:94:19"},{"body":{"id":3643,"nodeType":"Block","src":"6384:227:19","statements":[{"assignments":[3624],"declarations":[{"constant":false,"id":3624,"mutability":"mutable","name":"selector","nameLocation":"6405:8:19","nodeType":"VariableDeclaration","scope":3643,"src":"6398:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3623,"name":"bytes4","nodeType":"ElementaryTypeName","src":"6398:6:19","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"id":3628,"initialValue":{"baseExpression":{"id":3625,"name":"_functionSelectors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3586,"src":"6416:18:19","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_memory_ptr","typeString":"bytes4[] memory"}},"id":3627,"indexExpression":{"id":3626,"name":"selectorIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3614,"src":"6435:13:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6416:33:19","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"VariableDeclarationStatement","src":"6398:51:19"},{"assignments":[3630],"declarations":[{"constant":false,"id":3630,"mutability":"mutable","name":"oldFacetAddress","nameLocation":"6471:15:19","nodeType":"VariableDeclaration","scope":3643,"src":"6463:23:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3629,"name":"address","nodeType":"ElementaryTypeName","src":"6463:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3636,"initialValue":{"expression":{"baseExpression":{"expression":{"id":3631,"name":"ds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3599,"src":"6489:2:19","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3190_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"}},"id":3632,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6492:26:19","memberName":"selectorToFacetAndPosition","nodeType":"MemberAccess","referencedDeclaration":3175,"src":"6489:29:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_struct$_FacetAddressAndPosition_$3164_storage_$","typeString":"mapping(bytes4 => struct LibDiamond.FacetAddressAndPosition storage ref)"}},"id":3634,"indexExpression":{"id":3633,"name":"selector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3624,"src":"6519:8:19","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6489:39:19","typeDescriptions":{"typeIdentifier":"t_struct$_FacetAddressAndPosition_$3164_storage","typeString":"struct LibDiamond.FacetAddressAndPosition storage ref"}},"id":3635,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6529:12:19","memberName":"facetAddress","nodeType":"MemberAccess","referencedDeclaration":3161,"src":"6489:52:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"6463:78:19"},{"expression":{"arguments":[{"id":3638,"name":"ds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3599,"src":"6570:2:19","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3190_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"}},{"id":3639,"name":"oldFacetAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3630,"src":"6574:15:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3640,"name":"selector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3624,"src":"6591:8:19","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_DiamondStorage_$3190_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"id":3637,"name":"removeFunction","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3887,"src":"6555:14:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_DiamondStorage_$3190_storage_ptr_$_t_address_$_t_bytes4_$returns$__$","typeString":"function (struct LibDiamond.DiamondStorage storage pointer,address,bytes4)"}},"id":3641,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6555:45:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3642,"nodeType":"ExpressionStatement","src":"6555:45:19"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3619,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3616,"name":"selectorIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3614,"src":"6324:13:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":3617,"name":"_functionSelectors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3586,"src":"6340:18:19","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_memory_ptr","typeString":"bytes4[] memory"}},"id":3618,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6359:6:19","memberName":"length","nodeType":"MemberAccess","src":"6340:25:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6324:41:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3644,"initializationExpression":{"assignments":[3614],"declarations":[{"constant":false,"id":3614,"mutability":"mutable","name":"selectorIndex","nameLocation":"6309:13:19","nodeType":"VariableDeclaration","scope":3644,"src":"6301:21:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3613,"name":"uint256","nodeType":"ElementaryTypeName","src":"6301:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3615,"nodeType":"VariableDeclarationStatement","src":"6301:21:19"},"loopExpression":{"expression":{"id":3621,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6367:15:19","subExpression":{"id":3620,"name":"selectorIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3614,"src":"6367:13:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3622,"nodeType":"ExpressionStatement","src":"6367:15:19"},"nodeType":"ForStatement","src":"6296:315:19"}]},"id":3646,"implemented":true,"kind":"function","modifiers":[],"name":"removeFunctions","nameLocation":"5884:15:19","nodeType":"FunctionDefinition","parameters":{"id":3587,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3583,"mutability":"mutable","name":"_facetAddress","nameLocation":"5908:13:19","nodeType":"VariableDeclaration","scope":3646,"src":"5900:21:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3582,"name":"address","nodeType":"ElementaryTypeName","src":"5900:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3586,"mutability":"mutable","name":"_functionSelectors","nameLocation":"5939:18:19","nodeType":"VariableDeclaration","scope":3646,"src":"5923:34:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_memory_ptr","typeString":"bytes4[]"},"typeName":{"baseType":{"id":3584,"name":"bytes4","nodeType":"ElementaryTypeName","src":"5923:6:19","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":3585,"nodeType":"ArrayTypeName","src":"5923:8:19","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_storage_ptr","typeString":"bytes4[]"}},"visibility":"internal"}],"src":"5899:59:19"},"returnParameters":{"id":3588,"nodeType":"ParameterList","parameters":[],"src":"5968:0:19"},"scope":3984,"src":"5875:742:19","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3678,"nodeType":"Block","src":"6700:239:19","statements":[{"expression":{"arguments":[{"id":3655,"name":"_facetAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3651,"src":"6733:13:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"4c69624469616d6f6e644375743a204e657720666163657420686173206e6f20636f6465","id":3656,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6748:38:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_846ccbeb9c32d4d40d2c1bf991251db6ab65744a2f52b273947cee088a65504b","typeString":"literal_string \"LibDiamondCut: New facet has no code\""},"value":"LibDiamondCut: New facet has no code"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_stringliteral_846ccbeb9c32d4d40d2c1bf991251db6ab65744a2f52b273947cee088a65504b","typeString":"literal_string \"LibDiamondCut: New facet has no code\""}],"id":3654,"name":"enforceHasContractCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3983,"src":"6710:22:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_string_memory_ptr_$returns$__$","typeString":"function (address,string memory) view"}},"id":3657,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6710:77:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3658,"nodeType":"ExpressionStatement","src":"6710:77:19"},{"expression":{"id":3668,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"expression":{"id":3659,"name":"ds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3649,"src":"6797:2:19","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3190_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"}},"id":3662,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6800:22:19","memberName":"facetFunctionSelectors","nodeType":"MemberAccess","referencedDeclaration":3180,"src":"6797:25:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_FacetFunctionSelectors_$3170_storage_$","typeString":"mapping(address => struct LibDiamond.FacetFunctionSelectors storage ref)"}},"id":3663,"indexExpression":{"id":3661,"name":"_facetAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3651,"src":"6823:13:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6797:40:19","typeDescriptions":{"typeIdentifier":"t_struct$_FacetFunctionSelectors_$3170_storage","typeString":"struct LibDiamond.FacetFunctionSelectors storage ref"}},"id":3664,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"6838:20:19","memberName":"facetAddressPosition","nodeType":"MemberAccess","referencedDeclaration":3169,"src":"6797:61:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"expression":{"id":3665,"name":"ds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3649,"src":"6861:2:19","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3190_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"}},"id":3666,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6864:14:19","memberName":"facetAddresses","nodeType":"MemberAccess","referencedDeclaration":3183,"src":"6861:17:19","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":3667,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6879:6:19","memberName":"length","nodeType":"MemberAccess","src":"6861:24:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6797:88:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3669,"nodeType":"ExpressionStatement","src":"6797:88:19"},{"expression":{"arguments":[{"id":3675,"name":"_facetAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3651,"src":"6918:13:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"expression":{"id":3670,"name":"ds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3649,"src":"6895:2:19","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3190_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"}},"id":3673,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6898:14:19","memberName":"facetAddresses","nodeType":"MemberAccess","referencedDeclaration":3183,"src":"6895:17:19","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":3674,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6913:4:19","memberName":"push","nodeType":"MemberAccess","src":"6895:22:19","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_address_$dyn_storage_ptr_$_t_address_$returns$__$attached_to$_t_array$_t_address_$dyn_storage_ptr_$","typeString":"function (address[] storage pointer,address)"}},"id":3676,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6895:37:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3677,"nodeType":"ExpressionStatement","src":"6895:37:19"}]},"id":3679,"implemented":true,"kind":"function","modifiers":[],"name":"addFacet","nameLocation":"6632:8:19","nodeType":"FunctionDefinition","parameters":{"id":3652,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3649,"mutability":"mutable","name":"ds","nameLocation":"6664:2:19","nodeType":"VariableDeclaration","scope":3679,"src":"6641:25:19","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3190_storage_ptr","typeString":"struct LibDiamond.DiamondStorage"},"typeName":{"id":3648,"nodeType":"UserDefinedTypeName","pathNode":{"id":3647,"name":"DiamondStorage","nameLocations":["6641:14:19"],"nodeType":"IdentifierPath","referencedDeclaration":3190,"src":"6641:14:19"},"referencedDeclaration":3190,"src":"6641:14:19","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3190_storage_ptr","typeString":"struct LibDiamond.DiamondStorage"}},"visibility":"internal"},{"constant":false,"id":3651,"mutability":"mutable","name":"_facetAddress","nameLocation":"6676:13:19","nodeType":"VariableDeclaration","scope":3679,"src":"6668:21:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3650,"name":"address","nodeType":"ElementaryTypeName","src":"6668:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6640:50:19"},"returnParameters":{"id":3653,"nodeType":"ParameterList","parameters":[],"src":"6700:0:19"},"scope":3984,"src":"6623:316:19","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3719,"nodeType":"Block","src":"7074:265:19","statements":[{"expression":{"id":3698,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"expression":{"id":3691,"name":"ds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3682,"src":"7084:2:19","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3190_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"}},"id":3694,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7087:26:19","memberName":"selectorToFacetAndPosition","nodeType":"MemberAccess","referencedDeclaration":3175,"src":"7084:29:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_struct$_FacetAddressAndPosition_$3164_storage_$","typeString":"mapping(bytes4 => struct LibDiamond.FacetAddressAndPosition storage ref)"}},"id":3695,"indexExpression":{"id":3693,"name":"_selector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3684,"src":"7114:9:19","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7084:40:19","typeDescriptions":{"typeIdentifier":"t_struct$_FacetAddressAndPosition_$3164_storage","typeString":"struct LibDiamond.FacetAddressAndPosition storage ref"}},"id":3696,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"7125:24:19","memberName":"functionSelectorPosition","nodeType":"MemberAccess","referencedDeclaration":3163,"src":"7084:65:19","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3697,"name":"_selectorPosition","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3686,"src":"7152:17:19","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"src":"7084:85:19","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"id":3699,"nodeType":"ExpressionStatement","src":"7084:85:19"},{"expression":{"arguments":[{"id":3707,"name":"_selector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3684,"src":"7243:9:19","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"expression":{"baseExpression":{"expression":{"id":3700,"name":"ds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3682,"src":"7179:2:19","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3190_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"}},"id":3703,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7182:22:19","memberName":"facetFunctionSelectors","nodeType":"MemberAccess","referencedDeclaration":3180,"src":"7179:25:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_FacetFunctionSelectors_$3170_storage_$","typeString":"mapping(address => struct LibDiamond.FacetFunctionSelectors storage ref)"}},"id":3704,"indexExpression":{"id":3702,"name":"_facetAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3688,"src":"7205:13:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7179:40:19","typeDescriptions":{"typeIdentifier":"t_struct$_FacetFunctionSelectors_$3170_storage","typeString":"struct LibDiamond.FacetFunctionSelectors storage ref"}},"id":3705,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7220:17:19","memberName":"functionSelectors","nodeType":"MemberAccess","referencedDeclaration":3167,"src":"7179:58:19","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_storage","typeString":"bytes4[] storage ref"}},"id":3706,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7238:4:19","memberName":"push","nodeType":"MemberAccess","src":"7179:63:19","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_bytes4_$dyn_storage_ptr_$_t_bytes4_$returns$__$attached_to$_t_array$_t_bytes4_$dyn_storage_ptr_$","typeString":"function (bytes4[] storage pointer,bytes4)"}},"id":3708,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7179:74:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3709,"nodeType":"ExpressionStatement","src":"7179:74:19"},{"expression":{"id":3717,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"expression":{"id":3710,"name":"ds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3682,"src":"7263:2:19","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3190_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"}},"id":3713,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7266:26:19","memberName":"selectorToFacetAndPosition","nodeType":"MemberAccess","referencedDeclaration":3175,"src":"7263:29:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_struct$_FacetAddressAndPosition_$3164_storage_$","typeString":"mapping(bytes4 => struct LibDiamond.FacetAddressAndPosition storage ref)"}},"id":3714,"indexExpression":{"id":3712,"name":"_selector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3684,"src":"7293:9:19","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7263:40:19","typeDescriptions":{"typeIdentifier":"t_struct$_FacetAddressAndPosition_$3164_storage","typeString":"struct LibDiamond.FacetAddressAndPosition storage ref"}},"id":3715,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"7304:12:19","memberName":"facetAddress","nodeType":"MemberAccess","referencedDeclaration":3161,"src":"7263:53:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3716,"name":"_facetAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3688,"src":"7319:13:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7263:69:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3718,"nodeType":"ExpressionStatement","src":"7263:69:19"}]},"id":3720,"implemented":true,"kind":"function","modifiers":[],"name":"addFunction","nameLocation":"6959:11:19","nodeType":"FunctionDefinition","parameters":{"id":3689,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3682,"mutability":"mutable","name":"ds","nameLocation":"6994:2:19","nodeType":"VariableDeclaration","scope":3720,"src":"6971:25:19","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3190_storage_ptr","typeString":"struct LibDiamond.DiamondStorage"},"typeName":{"id":3681,"nodeType":"UserDefinedTypeName","pathNode":{"id":3680,"name":"DiamondStorage","nameLocations":["6971:14:19"],"nodeType":"IdentifierPath","referencedDeclaration":3190,"src":"6971:14:19"},"referencedDeclaration":3190,"src":"6971:14:19","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3190_storage_ptr","typeString":"struct LibDiamond.DiamondStorage"}},"visibility":"internal"},{"constant":false,"id":3684,"mutability":"mutable","name":"_selector","nameLocation":"7005:9:19","nodeType":"VariableDeclaration","scope":3720,"src":"6998:16:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3683,"name":"bytes4","nodeType":"ElementaryTypeName","src":"6998:6:19","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"},{"constant":false,"id":3686,"mutability":"mutable","name":"_selectorPosition","nameLocation":"7023:17:19","nodeType":"VariableDeclaration","scope":3720,"src":"7016:24:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":3685,"name":"uint96","nodeType":"ElementaryTypeName","src":"7016:6:19","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"},{"constant":false,"id":3688,"mutability":"mutable","name":"_facetAddress","nameLocation":"7050:13:19","nodeType":"VariableDeclaration","scope":3720,"src":"7042:21:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3687,"name":"address","nodeType":"ElementaryTypeName","src":"7042:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6970:94:19"},"returnParameters":{"id":3690,"nodeType":"ParameterList","parameters":[],"src":"7074:0:19"},"scope":3984,"src":"6950:389:19","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3886,"nodeType":"Block","src":"7446:2089:19","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3736,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3731,"name":"_facetAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3725,"src":"7472:13:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3734,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7497:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3733,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7489:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3732,"name":"address","nodeType":"ElementaryTypeName","src":"7489:7:19","typeDescriptions":{}}},"id":3735,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7489:10:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7472:27:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4c69624469616d6f6e644375743a2043616e27742072656d6f76652066756e6374696f6e207468617420646f65736e2774206578697374","id":3737,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7501:57:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_2c590e498c4d56c984a7092fd5e89a68b9f4541ce9f97252fb74e44a00ffbb71","typeString":"literal_string \"LibDiamondCut: Can't remove function that doesn't exist\""},"value":"LibDiamondCut: Can't remove function that doesn't exist"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2c590e498c4d56c984a7092fd5e89a68b9f4541ce9f97252fb74e44a00ffbb71","typeString":"literal_string \"LibDiamondCut: Can't remove function that doesn't exist\""}],"id":3730,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7464:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3738,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7464:95:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3739,"nodeType":"ExpressionStatement","src":"7464:95:19"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3746,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3741,"name":"_facetAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3725,"src":"7654:13:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"id":3744,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"7679:4:19","typeDescriptions":{"typeIdentifier":"t_contract$_LibDiamond_$3984","typeString":"library LibDiamond"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_LibDiamond_$3984","typeString":"library LibDiamond"}],"id":3743,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7671:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3742,"name":"address","nodeType":"ElementaryTypeName","src":"7671:7:19","typeDescriptions":{}}},"id":3745,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7671:13:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7654:30:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4c69624469616d6f6e644375743a2043616e27742072656d6f766520696d6d757461626c652066756e6374696f6e","id":3747,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7686:48:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_8ba063dfaa4be2d2cbe73dbb1364728b0f7031ac048441d5fad19e9541992b21","typeString":"literal_string \"LibDiamondCut: Can't remove immutable function\""},"value":"LibDiamondCut: Can't remove immutable function"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8ba063dfaa4be2d2cbe73dbb1364728b0f7031ac048441d5fad19e9541992b21","typeString":"literal_string \"LibDiamondCut: Can't remove immutable function\""}],"id":3740,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7646:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3748,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7646:89:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3749,"nodeType":"ExpressionStatement","src":"7646:89:19"},{"assignments":[3751],"declarations":[{"constant":false,"id":3751,"mutability":"mutable","name":"selectorPosition","nameLocation":"7827:16:19","nodeType":"VariableDeclaration","scope":3886,"src":"7819:24:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3750,"name":"uint256","nodeType":"ElementaryTypeName","src":"7819:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3757,"initialValue":{"expression":{"baseExpression":{"expression":{"id":3752,"name":"ds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3723,"src":"7846:2:19","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3190_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"}},"id":3753,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7849:26:19","memberName":"selectorToFacetAndPosition","nodeType":"MemberAccess","referencedDeclaration":3175,"src":"7846:29:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_struct$_FacetAddressAndPosition_$3164_storage_$","typeString":"mapping(bytes4 => struct LibDiamond.FacetAddressAndPosition storage ref)"}},"id":3755,"indexExpression":{"id":3754,"name":"_selector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3727,"src":"7876:9:19","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7846:40:19","typeDescriptions":{"typeIdentifier":"t_struct$_FacetAddressAndPosition_$3164_storage","typeString":"struct LibDiamond.FacetAddressAndPosition storage ref"}},"id":3756,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7887:24:19","memberName":"functionSelectorPosition","nodeType":"MemberAccess","referencedDeclaration":3163,"src":"7846:65:19","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"nodeType":"VariableDeclarationStatement","src":"7819:92:19"},{"assignments":[3759],"declarations":[{"constant":false,"id":3759,"mutability":"mutable","name":"lastSelectorPosition","nameLocation":"7929:20:19","nodeType":"VariableDeclaration","scope":3886,"src":"7921:28:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3758,"name":"uint256","nodeType":"ElementaryTypeName","src":"7921:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3768,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3767,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"baseExpression":{"expression":{"id":3760,"name":"ds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3723,"src":"7952:2:19","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3190_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"}},"id":3761,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7955:22:19","memberName":"facetFunctionSelectors","nodeType":"MemberAccess","referencedDeclaration":3180,"src":"7952:25:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_FacetFunctionSelectors_$3170_storage_$","typeString":"mapping(address => struct LibDiamond.FacetFunctionSelectors storage ref)"}},"id":3763,"indexExpression":{"id":3762,"name":"_facetAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3725,"src":"7978:13:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7952:40:19","typeDescriptions":{"typeIdentifier":"t_struct$_FacetFunctionSelectors_$3170_storage","typeString":"struct LibDiamond.FacetFunctionSelectors storage ref"}},"id":3764,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7993:17:19","memberName":"functionSelectors","nodeType":"MemberAccess","referencedDeclaration":3167,"src":"7952:58:19","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_storage","typeString":"bytes4[] storage ref"}},"id":3765,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8011:6:19","memberName":"length","nodeType":"MemberAccess","src":"7952:65:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":3766,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8020:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7952:69:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7921:100:19"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3771,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3769,"name":"selectorPosition","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3751,"src":"8103:16:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":3770,"name":"lastSelectorPosition","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3759,"src":"8123:20:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8103:40:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3806,"nodeType":"IfStatement","src":"8099:387:19","trueBody":{"id":3805,"nodeType":"Block","src":"8145:341:19","statements":[{"assignments":[3773],"declarations":[{"constant":false,"id":3773,"mutability":"mutable","name":"lastSelector","nameLocation":"8166:12:19","nodeType":"VariableDeclaration","scope":3805,"src":"8159:19:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3772,"name":"bytes4","nodeType":"ElementaryTypeName","src":"8159:6:19","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"id":3781,"initialValue":{"baseExpression":{"expression":{"baseExpression":{"expression":{"id":3774,"name":"ds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3723,"src":"8181:2:19","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3190_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"}},"id":3775,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8184:22:19","memberName":"facetFunctionSelectors","nodeType":"MemberAccess","referencedDeclaration":3180,"src":"8181:25:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_FacetFunctionSelectors_$3170_storage_$","typeString":"mapping(address => struct LibDiamond.FacetFunctionSelectors storage ref)"}},"id":3777,"indexExpression":{"id":3776,"name":"_facetAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3725,"src":"8207:13:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8181:40:19","typeDescriptions":{"typeIdentifier":"t_struct$_FacetFunctionSelectors_$3170_storage","typeString":"struct LibDiamond.FacetFunctionSelectors storage ref"}},"id":3778,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8222:17:19","memberName":"functionSelectors","nodeType":"MemberAccess","referencedDeclaration":3167,"src":"8181:58:19","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_storage","typeString":"bytes4[] storage ref"}},"id":3780,"indexExpression":{"id":3779,"name":"lastSelectorPosition","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3759,"src":"8240:20:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8181:80:19","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"VariableDeclarationStatement","src":"8159:102:19"},{"expression":{"id":3791,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"baseExpression":{"expression":{"id":3782,"name":"ds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3723,"src":"8275:2:19","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3190_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"}},"id":3785,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8278:22:19","memberName":"facetFunctionSelectors","nodeType":"MemberAccess","referencedDeclaration":3180,"src":"8275:25:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_FacetFunctionSelectors_$3170_storage_$","typeString":"mapping(address => struct LibDiamond.FacetFunctionSelectors storage ref)"}},"id":3786,"indexExpression":{"id":3784,"name":"_facetAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3725,"src":"8301:13:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8275:40:19","typeDescriptions":{"typeIdentifier":"t_struct$_FacetFunctionSelectors_$3170_storage","typeString":"struct LibDiamond.FacetFunctionSelectors storage ref"}},"id":3787,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8316:17:19","memberName":"functionSelectors","nodeType":"MemberAccess","referencedDeclaration":3167,"src":"8275:58:19","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_storage","typeString":"bytes4[] storage ref"}},"id":3789,"indexExpression":{"id":3788,"name":"selectorPosition","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3751,"src":"8334:16:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8275:76:19","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3790,"name":"lastSelector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3773,"src":"8354:12:19","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"8275:91:19","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":3792,"nodeType":"ExpressionStatement","src":"8275:91:19"},{"expression":{"id":3803,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"expression":{"id":3793,"name":"ds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3723,"src":"8380:2:19","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3190_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"}},"id":3796,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8383:26:19","memberName":"selectorToFacetAndPosition","nodeType":"MemberAccess","referencedDeclaration":3175,"src":"8380:29:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_struct$_FacetAddressAndPosition_$3164_storage_$","typeString":"mapping(bytes4 => struct LibDiamond.FacetAddressAndPosition storage ref)"}},"id":3797,"indexExpression":{"id":3795,"name":"lastSelector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3773,"src":"8410:12:19","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8380:43:19","typeDescriptions":{"typeIdentifier":"t_struct$_FacetAddressAndPosition_$3164_storage","typeString":"struct LibDiamond.FacetAddressAndPosition storage ref"}},"id":3798,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"8424:24:19","memberName":"functionSelectorPosition","nodeType":"MemberAccess","referencedDeclaration":3163,"src":"8380:68:19","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":3801,"name":"selectorPosition","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3751,"src":"8458:16:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3800,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8451:6:19","typeDescriptions":{"typeIdentifier":"t_type$_t_uint96_$","typeString":"type(uint96)"},"typeName":{"id":3799,"name":"uint96","nodeType":"ElementaryTypeName","src":"8451:6:19","typeDescriptions":{}}},"id":3802,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8451:24:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"src":"8380:95:19","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"id":3804,"nodeType":"ExpressionStatement","src":"8380:95:19"}]}},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"expression":{"baseExpression":{"expression":{"id":3807,"name":"ds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3723,"src":"8531:2:19","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3190_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"}},"id":3810,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8534:22:19","memberName":"facetFunctionSelectors","nodeType":"MemberAccess","referencedDeclaration":3180,"src":"8531:25:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_FacetFunctionSelectors_$3170_storage_$","typeString":"mapping(address => struct LibDiamond.FacetFunctionSelectors storage ref)"}},"id":3811,"indexExpression":{"id":3809,"name":"_facetAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3725,"src":"8557:13:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8531:40:19","typeDescriptions":{"typeIdentifier":"t_struct$_FacetFunctionSelectors_$3170_storage","typeString":"struct LibDiamond.FacetFunctionSelectors storage ref"}},"id":3812,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8572:17:19","memberName":"functionSelectors","nodeType":"MemberAccess","referencedDeclaration":3167,"src":"8531:58:19","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_storage","typeString":"bytes4[] storage ref"}},"id":3813,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8590:3:19","memberName":"pop","nodeType":"MemberAccess","src":"8531:62:19","typeDescriptions":{"typeIdentifier":"t_function_arraypop_nonpayable$_t_array$_t_bytes4_$dyn_storage_ptr_$returns$__$attached_to$_t_array$_t_bytes4_$dyn_storage_ptr_$","typeString":"function (bytes4[] storage pointer)"}},"id":3814,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8531:64:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3815,"nodeType":"ExpressionStatement","src":"8531:64:19"},{"expression":{"id":3820,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"8605:47:19","subExpression":{"baseExpression":{"expression":{"id":3816,"name":"ds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3723,"src":"8612:2:19","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3190_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"}},"id":3817,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8615:26:19","memberName":"selectorToFacetAndPosition","nodeType":"MemberAccess","referencedDeclaration":3175,"src":"8612:29:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_struct$_FacetAddressAndPosition_$3164_storage_$","typeString":"mapping(bytes4 => struct LibDiamond.FacetAddressAndPosition storage ref)"}},"id":3819,"indexExpression":{"id":3818,"name":"_selector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3727,"src":"8642:9:19","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8612:40:19","typeDescriptions":{"typeIdentifier":"t_struct$_FacetAddressAndPosition_$3164_storage","typeString":"struct LibDiamond.FacetAddressAndPosition storage ref"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3821,"nodeType":"ExpressionStatement","src":"8605:47:19"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3824,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3822,"name":"lastSelectorPosition","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3759,"src":"8747:20:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3823,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8771:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8747:25:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3885,"nodeType":"IfStatement","src":"8743:786:19","trueBody":{"id":3884,"nodeType":"Block","src":"8774:755:19","statements":[{"assignments":[3826],"declarations":[{"constant":false,"id":3826,"mutability":"mutable","name":"lastFacetAddressPosition","nameLocation":"8887:24:19","nodeType":"VariableDeclaration","scope":3884,"src":"8879:32:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3825,"name":"uint256","nodeType":"ElementaryTypeName","src":"8879:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3832,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3831,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":3827,"name":"ds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3723,"src":"8914:2:19","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3190_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"}},"id":3828,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8917:14:19","memberName":"facetAddresses","nodeType":"MemberAccess","referencedDeclaration":3183,"src":"8914:17:19","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":3829,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8932:6:19","memberName":"length","nodeType":"MemberAccess","src":"8914:24:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":3830,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8941:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8914:28:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8879:63:19"},{"assignments":[3834],"declarations":[{"constant":false,"id":3834,"mutability":"mutable","name":"facetAddressPosition","nameLocation":"8964:20:19","nodeType":"VariableDeclaration","scope":3884,"src":"8956:28:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3833,"name":"uint256","nodeType":"ElementaryTypeName","src":"8956:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3840,"initialValue":{"expression":{"baseExpression":{"expression":{"id":3835,"name":"ds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3723,"src":"8987:2:19","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3190_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"}},"id":3836,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8990:22:19","memberName":"facetFunctionSelectors","nodeType":"MemberAccess","referencedDeclaration":3180,"src":"8987:25:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_FacetFunctionSelectors_$3170_storage_$","typeString":"mapping(address => struct LibDiamond.FacetFunctionSelectors storage ref)"}},"id":3838,"indexExpression":{"id":3837,"name":"_facetAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3725,"src":"9013:13:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8987:40:19","typeDescriptions":{"typeIdentifier":"t_struct$_FacetFunctionSelectors_$3170_storage","typeString":"struct LibDiamond.FacetFunctionSelectors storage ref"}},"id":3839,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9028:20:19","memberName":"facetAddressPosition","nodeType":"MemberAccess","referencedDeclaration":3169,"src":"8987:61:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8956:92:19"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3843,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3841,"name":"facetAddressPosition","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3834,"src":"9066:20:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":3842,"name":"lastFacetAddressPosition","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3826,"src":"9090:24:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9066:48:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3869,"nodeType":"IfStatement","src":"9062:338:19","trueBody":{"id":3868,"nodeType":"Block","src":"9116:284:19","statements":[{"assignments":[3845],"declarations":[{"constant":false,"id":3845,"mutability":"mutable","name":"lastFacetAddress","nameLocation":"9142:16:19","nodeType":"VariableDeclaration","scope":3868,"src":"9134:24:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3844,"name":"address","nodeType":"ElementaryTypeName","src":"9134:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3850,"initialValue":{"baseExpression":{"expression":{"id":3846,"name":"ds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3723,"src":"9161:2:19","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3190_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"}},"id":3847,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9164:14:19","memberName":"facetAddresses","nodeType":"MemberAccess","referencedDeclaration":3183,"src":"9161:17:19","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":3849,"indexExpression":{"id":3848,"name":"lastFacetAddressPosition","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3826,"src":"9179:24:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9161:43:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"9134:70:19"},{"expression":{"id":3857,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":3851,"name":"ds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3723,"src":"9222:2:19","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3190_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"}},"id":3854,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9225:14:19","memberName":"facetAddresses","nodeType":"MemberAccess","referencedDeclaration":3183,"src":"9222:17:19","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":3855,"indexExpression":{"id":3853,"name":"facetAddressPosition","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3834,"src":"9240:20:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9222:39:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3856,"name":"lastFacetAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3845,"src":"9264:16:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9222:58:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3858,"nodeType":"ExpressionStatement","src":"9222:58:19"},{"expression":{"id":3866,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"expression":{"id":3859,"name":"ds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3723,"src":"9298:2:19","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3190_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"}},"id":3862,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9301:22:19","memberName":"facetFunctionSelectors","nodeType":"MemberAccess","referencedDeclaration":3180,"src":"9298:25:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_FacetFunctionSelectors_$3170_storage_$","typeString":"mapping(address => struct LibDiamond.FacetFunctionSelectors storage ref)"}},"id":3863,"indexExpression":{"id":3861,"name":"lastFacetAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3845,"src":"9324:16:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9298:43:19","typeDescriptions":{"typeIdentifier":"t_struct$_FacetFunctionSelectors_$3170_storage","typeString":"struct LibDiamond.FacetFunctionSelectors storage ref"}},"id":3864,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"9342:20:19","memberName":"facetAddressPosition","nodeType":"MemberAccess","referencedDeclaration":3169,"src":"9298:64:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3865,"name":"facetAddressPosition","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3834,"src":"9365:20:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9298:87:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3867,"nodeType":"ExpressionStatement","src":"9298:87:19"}]}},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"expression":{"id":3870,"name":"ds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3723,"src":"9413:2:19","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3190_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"}},"id":3873,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9416:14:19","memberName":"facetAddresses","nodeType":"MemberAccess","referencedDeclaration":3183,"src":"9413:17:19","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":3874,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9431:3:19","memberName":"pop","nodeType":"MemberAccess","src":"9413:21:19","typeDescriptions":{"typeIdentifier":"t_function_arraypop_nonpayable$_t_array$_t_address_$dyn_storage_ptr_$returns$__$attached_to$_t_array$_t_address_$dyn_storage_ptr_$","typeString":"function (address[] storage pointer)"}},"id":3875,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9413:23:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3876,"nodeType":"ExpressionStatement","src":"9413:23:19"},{"expression":{"id":3882,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"9450:68:19","subExpression":{"expression":{"baseExpression":{"expression":{"id":3877,"name":"ds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3723,"src":"9457:2:19","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3190_storage_ptr","typeString":"struct LibDiamond.DiamondStorage storage pointer"}},"id":3878,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9460:22:19","memberName":"facetFunctionSelectors","nodeType":"MemberAccess","referencedDeclaration":3180,"src":"9457:25:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_FacetFunctionSelectors_$3170_storage_$","typeString":"mapping(address => struct LibDiamond.FacetFunctionSelectors storage ref)"}},"id":3880,"indexExpression":{"id":3879,"name":"_facetAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3725,"src":"9483:13:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9457:40:19","typeDescriptions":{"typeIdentifier":"t_struct$_FacetFunctionSelectors_$3170_storage","typeString":"struct LibDiamond.FacetFunctionSelectors storage ref"}},"id":3881,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"9498:20:19","memberName":"facetAddressPosition","nodeType":"MemberAccess","referencedDeclaration":3169,"src":"9457:61:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3883,"nodeType":"ExpressionStatement","src":"9450:68:19"}]}}]},"id":3887,"implemented":true,"kind":"function","modifiers":[],"name":"removeFunction","nameLocation":"7354:14:19","nodeType":"FunctionDefinition","parameters":{"id":3728,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3723,"mutability":"mutable","name":"ds","nameLocation":"7392:2:19","nodeType":"VariableDeclaration","scope":3887,"src":"7369:25:19","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3190_storage_ptr","typeString":"struct LibDiamond.DiamondStorage"},"typeName":{"id":3722,"nodeType":"UserDefinedTypeName","pathNode":{"id":3721,"name":"DiamondStorage","nameLocations":["7369:14:19"],"nodeType":"IdentifierPath","referencedDeclaration":3190,"src":"7369:14:19"},"referencedDeclaration":3190,"src":"7369:14:19","typeDescriptions":{"typeIdentifier":"t_struct$_DiamondStorage_$3190_storage_ptr","typeString":"struct LibDiamond.DiamondStorage"}},"visibility":"internal"},{"constant":false,"id":3725,"mutability":"mutable","name":"_facetAddress","nameLocation":"7404:13:19","nodeType":"VariableDeclaration","scope":3887,"src":"7396:21:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3724,"name":"address","nodeType":"ElementaryTypeName","src":"7396:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3727,"mutability":"mutable","name":"_selector","nameLocation":"7426:9:19","nodeType":"VariableDeclaration","scope":3887,"src":"7419:16:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3726,"name":"bytes4","nodeType":"ElementaryTypeName","src":"7419:6:19","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"7368:68:19"},"returnParameters":{"id":3729,"nodeType":"ParameterList","parameters":[],"src":"7446:0:19"},"scope":3984,"src":"7345:2190:19","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3963,"nodeType":"Block","src":"9619:793:19","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3899,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3894,"name":"_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3889,"src":"9633:5:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":3897,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9650:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3896,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9642:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3895,"name":"address","nodeType":"ElementaryTypeName","src":"9642:7:19","typeDescriptions":{}}},"id":3898,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9642:10:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9633:19:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3961,"nodeType":"Block","src":"9779:627:19","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3913,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3910,"name":"_calldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3891,"src":"9801:9:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3911,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9811:6:19","memberName":"length","nodeType":"MemberAccess","src":"9801:16:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3912,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9820:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9801:20:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4c69624469616d6f6e644375743a205f63616c6c6461746120697320656d70747920627574205f696e6974206973206e6f742061646472657373283029","id":3914,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9823:63:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_868d165ec2461661b624442252aed6a645399bfae7b60083a77ea1b61b084042","typeString":"literal_string \"LibDiamondCut: _calldata is empty but _init is not address(0)\""},"value":"LibDiamondCut: _calldata is empty but _init is not address(0)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_868d165ec2461661b624442252aed6a645399bfae7b60083a77ea1b61b084042","typeString":"literal_string \"LibDiamondCut: _calldata is empty but _init is not address(0)\""}],"id":3909,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9793:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3915,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9793:94:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3916,"nodeType":"ExpressionStatement","src":"9793:94:19"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3922,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3917,"name":"_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3889,"src":"9905:5:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"id":3920,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"9922:4:19","typeDescriptions":{"typeIdentifier":"t_contract$_LibDiamond_$3984","typeString":"library LibDiamond"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_LibDiamond_$3984","typeString":"library LibDiamond"}],"id":3919,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9914:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3918,"name":"address","nodeType":"ElementaryTypeName","src":"9914:7:19","typeDescriptions":{}}},"id":3921,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9914:13:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9905:22:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3929,"nodeType":"IfStatement","src":"9901:134:19","trueBody":{"id":3928,"nodeType":"Block","src":"9929:106:19","statements":[{"expression":{"arguments":[{"id":3924,"name":"_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3889,"src":"9970:5:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"4c69624469616d6f6e644375743a205f696e6974206164647265737320686173206e6f20636f6465","id":3925,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9977:42:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_460f8f0920c649146ef02741816b1cf9ce4f02ea288ceb73adf027cefe9069a0","typeString":"literal_string \"LibDiamondCut: _init address has no code\""},"value":"LibDiamondCut: _init address has no code"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_stringliteral_460f8f0920c649146ef02741816b1cf9ce4f02ea288ceb73adf027cefe9069a0","typeString":"literal_string \"LibDiamondCut: _init address has no code\""}],"id":3923,"name":"enforceHasContractCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3983,"src":"9947:22:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_string_memory_ptr_$returns$__$","typeString":"function (address,string memory) view"}},"id":3926,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9947:73:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3927,"nodeType":"ExpressionStatement","src":"9947:73:19"}]}},{"assignments":[3931,3933],"declarations":[{"constant":false,"id":3931,"mutability":"mutable","name":"success","nameLocation":"10054:7:19","nodeType":"VariableDeclaration","scope":3961,"src":"10049:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3930,"name":"bool","nodeType":"ElementaryTypeName","src":"10049:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3933,"mutability":"mutable","name":"error","nameLocation":"10076:5:19","nodeType":"VariableDeclaration","scope":3961,"src":"10063:18:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3932,"name":"bytes","nodeType":"ElementaryTypeName","src":"10063:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3938,"initialValue":{"arguments":[{"id":3936,"name":"_calldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3891,"src":"10104:9:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3934,"name":"_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3889,"src":"10085:5:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3935,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10091:12:19","memberName":"delegatecall","nodeType":"MemberAccess","src":"10085:18:19","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":3937,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10085:29:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"10048:66:19"},{"condition":{"id":3940,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"10132:8:19","subExpression":{"id":3939,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3931,"src":"10133:7:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3960,"nodeType":"IfStatement","src":"10128:268:19","trueBody":{"id":3959,"nodeType":"Block","src":"10142:254:19","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3944,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3941,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3933,"src":"10164:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3942,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10170:6:19","memberName":"length","nodeType":"MemberAccess","src":"10164:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3943,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10179:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10164:16:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3957,"nodeType":"Block","src":"10293:89:19","statements":[{"expression":{"arguments":[{"hexValue":"4c69624469616d6f6e644375743a205f696e69742066756e6374696f6e207265766572746564","id":3954,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10322:40:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_080b2fe78815767d522290509c8fce2af708c8a54455ca1b0cc978c92822465d","typeString":"literal_string \"LibDiamondCut: _init function reverted\""},"value":"LibDiamondCut: _init function reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_080b2fe78815767d522290509c8fce2af708c8a54455ca1b0cc978c92822465d","typeString":"literal_string \"LibDiamondCut: _init function reverted\""}],"id":3953,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"10315:6:19","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":3955,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10315:48:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3956,"nodeType":"ExpressionStatement","src":"10315:48:19"}]},"id":3958,"nodeType":"IfStatement","src":"10160:222:19","trueBody":{"id":3952,"nodeType":"Block","src":"10182:105:19","statements":[{"expression":{"arguments":[{"arguments":[{"id":3948,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3933,"src":"10261:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3947,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10254:6:19","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":3946,"name":"string","nodeType":"ElementaryTypeName","src":"10254:6:19","typeDescriptions":{}}},"id":3949,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10254:13:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3945,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"10247:6:19","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":3950,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10247:21:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3951,"nodeType":"ExpressionStatement","src":"10247:21:19"}]}}]}}]},"id":3962,"nodeType":"IfStatement","src":"9629:777:19","trueBody":{"id":3908,"nodeType":"Block","src":"9654:119:19","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3904,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3901,"name":"_calldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3891,"src":"9676:9:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3902,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9686:6:19","memberName":"length","nodeType":"MemberAccess","src":"9676:16:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3903,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9696:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9676:21:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4c69624469616d6f6e644375743a205f696e69742069732061646472657373283029206275745f63616c6c64617461206973206e6f7420656d707479","id":3905,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9699:62:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_046c761a688d1dc3c500562bc5aaa3544f01f394f9bb3b69aa2a950a45afb1f8","typeString":"literal_string \"LibDiamondCut: _init is address(0) but_calldata is not empty\""},"value":"LibDiamondCut: _init is address(0) but_calldata is not empty"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_046c761a688d1dc3c500562bc5aaa3544f01f394f9bb3b69aa2a950a45afb1f8","typeString":"literal_string \"LibDiamondCut: _init is address(0) but_calldata is not empty\""}],"id":3900,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9668:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3906,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9668:94:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3907,"nodeType":"ExpressionStatement","src":"9668:94:19"}]}}]},"id":3964,"implemented":true,"kind":"function","modifiers":[],"name":"initializeDiamondCut","nameLocation":"9550:20:19","nodeType":"FunctionDefinition","parameters":{"id":3892,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3889,"mutability":"mutable","name":"_init","nameLocation":"9579:5:19","nodeType":"VariableDeclaration","scope":3964,"src":"9571:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3888,"name":"address","nodeType":"ElementaryTypeName","src":"9571:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3891,"mutability":"mutable","name":"_calldata","nameLocation":"9599:9:19","nodeType":"VariableDeclaration","scope":3964,"src":"9586:22:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3890,"name":"bytes","nodeType":"ElementaryTypeName","src":"9586:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"9570:39:19"},"returnParameters":{"id":3893,"nodeType":"ParameterList","parameters":[],"src":"9619:0:19"},"scope":3984,"src":"9541:871:19","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3982,"nodeType":"Block","src":"10512:167:19","statements":[{"assignments":[3972],"declarations":[{"constant":false,"id":3972,"mutability":"mutable","name":"contractSize","nameLocation":"10530:12:19","nodeType":"VariableDeclaration","scope":3982,"src":"10522:20:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3971,"name":"uint256","nodeType":"ElementaryTypeName","src":"10522:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3973,"nodeType":"VariableDeclarationStatement","src":"10522:20:19"},{"AST":{"nodeType":"YulBlock","src":"10561:62:19","statements":[{"nodeType":"YulAssignment","src":"10575:38:19","value":{"arguments":[{"name":"_contract","nodeType":"YulIdentifier","src":"10603:9:19"}],"functionName":{"name":"extcodesize","nodeType":"YulIdentifier","src":"10591:11:19"},"nodeType":"YulFunctionCall","src":"10591:22:19"},"variableNames":[{"name":"contractSize","nodeType":"YulIdentifier","src":"10575:12:19"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":3966,"isOffset":false,"isSlot":false,"src":"10603:9:19","valueSize":1},{"declaration":3972,"isOffset":false,"isSlot":false,"src":"10575:12:19","valueSize":1}],"id":3974,"nodeType":"InlineAssembly","src":"10552:71:19"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3978,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3976,"name":"contractSize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3972,"src":"10640:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3977,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10655:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10640:16:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":3979,"name":"_errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3968,"src":"10658:13:19","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3975,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"10632:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3980,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10632:40:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3981,"nodeType":"ExpressionStatement","src":"10632:40:19"}]},"id":3983,"implemented":true,"kind":"function","modifiers":[],"name":"enforceHasContractCode","nameLocation":"10427:22:19","nodeType":"FunctionDefinition","parameters":{"id":3969,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3966,"mutability":"mutable","name":"_contract","nameLocation":"10458:9:19","nodeType":"VariableDeclaration","scope":3983,"src":"10450:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3965,"name":"address","nodeType":"ElementaryTypeName","src":"10450:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3968,"mutability":"mutable","name":"_errorMessage","nameLocation":"10483:13:19","nodeType":"VariableDeclaration","scope":3983,"src":"10469:27:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3967,"name":"string","nodeType":"ElementaryTypeName","src":"10469:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"10449:48:19"},"returnParameters":{"id":3970,"nodeType":"ParameterList","parameters":[],"src":"10512:0:19"},"scope":3984,"src":"10418:261:19","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":3985,"src":"423:10258:19","usedErrors":[]}],"src":"32:10650:19"},"id":19}},"contracts":{"@openzeppelin/contracts/utils/Address.sol":{"Address":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea264697066735822122084d1f93aabab4efca3980adb3907631d19794240ae6ec11087681a3c33de337064736f6c63430008120033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP5 0xD1 0xF9 GASPRICE 0xAB 0xAB 0x4E 0xFC LOG3 SWAP9 EXP 0xDB CODECOPY SMOD PUSH4 0x1D197942 BLOCKHASH 0xAE PUSH15 0xC11087681A3C33DE337064736F6C63 NUMBER STOP ADDMOD SLT STOP CALLER ","sourceMap":"194:9169:0:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"600080fdfea264697066735822122084d1f93aabab4efca3980adb3907631d19794240ae6ec11087681a3c33de337064736f6c63430008120033","opcodes":"PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP5 0xD1 0xF9 GASPRICE 0xAB 0xAB 0x4E 0xFC LOG3 SWAP9 EXP 0xDB CODECOPY SMOD PUSH4 0x1D197942 BLOCKHASH 0xAE PUSH15 0xC11087681A3C33DE337064736F6C63 NUMBER STOP ADDMOD SLT STOP CALLER ","sourceMap":"194:9169:0:-:0;;"},"gasEstimates":{"creation":{"codeDepositCost":"11600","executionCost":"infinite","totalCost":"infinite"},"internal":{"_revert(bytes memory,string memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionDelegateCall(address,bytes memory)":"infinite","functionDelegateCall(address,bytes memory,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory,string memory)":"infinite","verifyCallResultFromTarget(address,bool,bytes memory,string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Strings.sol":{"Strings":{"abi":[],"devdoc":{"details":"String operations.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea2646970667358221220f47120980f9705a2f401d98ae81c9d1e65e2a3fa65485df0c9085ef28005031064736f6c63430008120033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DELEGATECALL PUSH18 0x20980F9705A2F401D98AE81C9D1E65E2A3FA PUSH6 0x485DF0C9085E CALLCODE DUP1 SDIV SUB LT PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"220:2559:2:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"600080fdfea2646970667358221220f47120980f9705a2f401d98ae81c9d1e65e2a3fa65485df0c9085ef28005031064736f6c63430008120033","opcodes":"PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DELEGATECALL PUSH18 0x20980F9705A2F401D98AE81C9D1E65E2A3FA PUSH6 0x485DF0C9085E CALLCODE DUP1 SDIV SUB LT PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"220:2559:2:-:0;;"},"gasEstimates":{"creation":{"codeDepositCost":"11600","executionCost":"infinite","totalCost":"infinite"},"internal":{"equal(string memory,string memory)":"infinite","toHexString(address)":"infinite","toHexString(uint256)":"infinite","toHexString(uint256,uint256)":"infinite","toString(int256)":"infinite","toString(uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/Math.sol":{"Math":{"abi":[],"devdoc":{"details":"Standard math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea264697066735822122057f67a5f5464bce52eb898013a9f5eb0a19d6cff414bb24217542dbb15207e5164736f6c63430008120033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 JUMPI 0xF6 PUSH27 0x5F5464BCE52EB898013A9F5EB0A19D6CFF414BB24217542DBB1520 PUSH31 0x5164736F6C6343000812003300000000000000000000000000000000000000 ","sourceMap":"202:12582:3:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"600080fdfea264697066735822122057f67a5f5464bce52eb898013a9f5eb0a19d6cff414bb24217542dbb15207e5164736f6c63430008120033","opcodes":"PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 JUMPI 0xF6 PUSH27 0x5F5464BCE52EB898013A9F5EB0A19D6CFF414BB24217542DBB1520 PUSH31 0x5164736F6C6343000812003300000000000000000000000000000000000000 ","sourceMap":"202:12582:3:-:0;;"},"gasEstimates":{"creation":{"codeDepositCost":"11600","executionCost":"infinite","totalCost":"infinite"},"internal":{"average(uint256,uint256)":"infinite","ceilDiv(uint256,uint256)":"infinite","log10(uint256)":"infinite","log10(uint256,enum Math.Rounding)":"infinite","log2(uint256)":"infinite","log2(uint256,enum Math.Rounding)":"infinite","log256(uint256)":"infinite","log256(uint256,enum Math.Rounding)":"infinite","max(uint256,uint256)":"infinite","min(uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256,enum Math.Rounding)":"infinite","sqrt(uint256)":"infinite","sqrt(uint256,enum Math.Rounding)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"SignedMath":{"abi":[],"devdoc":{"details":"Standard signed math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea2646970667358221220aeabe9786664b5693d0f0e0b428c2f19cb673eec80b4ac37fe8e35d60aa9d11964736f6c63430008120033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAE 0xAB 0xE9 PUSH25 0x6664B5693D0F0E0B428C2F19CB673EEC80B4AC37FE8E35D60A 0xA9 0xD1 NOT PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"215:1047:4:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"600080fdfea2646970667358221220aeabe9786664b5693d0f0e0b428c2f19cb673eec80b4ac37fe8e35d60aa9d11964736f6c63430008120033","opcodes":"PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAE 0xAB 0xE9 PUSH25 0x6664B5693D0F0E0B428C2F19CB673EEC80B4AC37FE8E35D60A 0xA9 0xD1 NOT PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"215:1047:4:-:0;;"},"gasEstimates":{"creation":{"codeDepositCost":"11600","executionCost":"infinite","totalCost":"infinite"},"internal":{"abs(int256)":"infinite","average(int256,int256)":"infinite","max(int256,int256)":"infinite","min(int256,int256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard signed math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":\"SignedMath\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/ILeafWalletRegistryActivate.sol":{"ILeafWalletRegistryActivate":{"abi":[{"inputs":[{"internalType":"address","name":"assignee","type":"address"}],"name":"assignActivatableAddressToSender","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getActivationCodeOfSender","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getDeviceOwner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getRelatedDevices","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isSenderRegistered","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"assignActivatableAddressToSender(address)":"ec949297","getActivationCodeOfSender()":"58944eb8","getDeviceOwner()":"9b8ae375","getRelatedDevices()":"e0f64efc","isSenderRegistered()":"3aafa388"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assignee\",\"type\":\"address\"}],\"name\":\"assignActivatableAddressToSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActivationCodeOfSender\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDeviceOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRelatedDevices\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSenderRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ILeafWalletRegistryActivate.sol\":\"ILeafWalletRegistryActivate\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/ILeafWalletRegistryActivate.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport \\\"./ILeafWalletRegistryCore.sol\\\";\\r\\n\\r\\ninterface ILeafWalletRegistryActivate is ILeafWalletRegistryCore{\\r\\n    function assignActivatableAddressToSender(address assignee)  external;\\r\\n    function getActivationCodeOfSender() external view returns (uint256);\\r\\n}\",\"keccak256\":\"0x822f13bd8b0d72f4d88a6824ddc6114eb682e6b183aa0f2367ae4cc3a25edcf2\",\"license\":\"MIT\"},\"contracts/ILeafWalletRegistryCore.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\ninterface ILeafWalletRegistryCore {\\r\\n    function isSenderRegistered() external view returns (bool);\\r\\n    function getDeviceOwner() external view returns (address);\\r\\n    function getRelatedDevices() external view returns (address[] memory);\\r\\n}\",\"keccak256\":\"0x3c21ce0ba8cfdd89401a502d15673006dbd41aeee58211c53fc33c2e187adbec\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/ILeafWalletRegistryBasic.sol":{"ILeafWalletRegistryBasic":{"abi":[{"inputs":[{"internalType":"address","name":"assignee","type":"address"}],"name":"assignAddressToSender","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getDeviceOwner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getRelatedDevices","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isSenderRegistered","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"assignAddressToSender(address)":"56a593e3","getDeviceOwner()":"9b8ae375","getRelatedDevices()":"e0f64efc","isSenderRegistered()":"3aafa388"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assignee\",\"type\":\"address\"}],\"name\":\"assignAddressToSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDeviceOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRelatedDevices\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSenderRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ILeafWalletRegistryBasic.sol\":\"ILeafWalletRegistryBasic\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/ILeafWalletRegistryBasic.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport \\\"./ILeafWalletRegistryCore.sol\\\";\\r\\n\\r\\ninterface ILeafWalletRegistryBasic is ILeafWalletRegistryCore {\\r\\n    function assignAddressToSender(address assignee)  external;\\r\\n}\\r\\n\",\"keccak256\":\"0x51f43c06757d8634318e7484b953b6210a338771c4b2818d7440c3676513c21a\",\"license\":\"MIT\"},\"contracts/ILeafWalletRegistryCore.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\ninterface ILeafWalletRegistryCore {\\r\\n    function isSenderRegistered() external view returns (bool);\\r\\n    function getDeviceOwner() external view returns (address);\\r\\n    function getRelatedDevices() external view returns (address[] memory);\\r\\n}\",\"keccak256\":\"0x3c21ce0ba8cfdd89401a502d15673006dbd41aeee58211c53fc33c2e187adbec\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/ILeafWalletRegistryCore.sol":{"ILeafWalletRegistryCore":{"abi":[{"inputs":[],"name":"getDeviceOwner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getRelatedDevices","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isSenderRegistered","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"getDeviceOwner()":"9b8ae375","getRelatedDevices()":"e0f64efc","isSenderRegistered()":"3aafa388"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"getDeviceOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRelatedDevices\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSenderRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ILeafWalletRegistryCore.sol\":\"ILeafWalletRegistryCore\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/ILeafWalletRegistryCore.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\ninterface ILeafWalletRegistryCore {\\r\\n    function isSenderRegistered() external view returns (bool);\\r\\n    function getDeviceOwner() external view returns (address);\\r\\n    function getRelatedDevices() external view returns (address[] memory);\\r\\n}\",\"keccak256\":\"0x3c21ce0ba8cfdd89401a502d15673006dbd41aeee58211c53fc33c2e187adbec\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/InitFacet.sol":{"InitFacet":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"init","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234610078577fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c13208054336001600160a01b0319821681179092556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a36101ee908161007e8239f35b600080fdfe608080604052600436101561001357600080fd5b600090813560e01c63e1c7392a1461002a57600080fd5b346100ce57816003193601126100ce577fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c1320546001600160a01b0316330361007757506100746100d2565b80f35b62461bcd60e51b815260206004820152602c60248201527f4f6e6c79206f776e657220697320616c6c6f77656420746f20706572666f726d60448201526b103a3434b99030b1ba34b7b760a11b6064820152608490fd5b5080fd5b7f202e1867cade063e32a2eb339a246f853a1a233314949ba8d9e2ac766f6ed84960ff8154166101b5577fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131f6020527ff97e938d8af42f52387bb74b8b526fda8f184cc2aa534340a8d75a88fbecc7758054600160ff1991821681179092557f65d510a5d8f7ef134ec444f7f34ee808c8eeb5177cdfd16be0c40fe1ab433695805482168317905563b400dc2f60e01b6000527f54176106f8def38a53cafa6fa9f47b09d8454741751f1c65c4dc48ed3663375a8054821683179055825416179055565b5056fea26469706673582212205503875843279aa4b110b98c5f00a1358b03a1421aa582d87a64e41fa778295564736f6c63430008120033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH2 0x78 JUMPI PUSH32 0xC8FCAD8DB84D3CC18B4C41D551EA0EE66DD599CDE068D998E57D5E09332C1320 DUP1 SLOAD CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP3 AND DUP2 OR SWAP1 SWAP3 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x0 DUP1 LOG3 PUSH2 0x1EE SWAP1 DUP2 PUSH2 0x7E DUP3 CODECOPY RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP1 DUP2 CALLDATALOAD PUSH1 0xE0 SHR PUSH4 0xE1C7392A EQ PUSH2 0x2A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0xCE JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xCE JUMPI PUSH32 0xC8FCAD8DB84D3CC18B4C41D551EA0EE66DD599CDE068D998E57D5E09332C1320 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER SUB PUSH2 0x77 JUMPI POP PUSH2 0x74 PUSH2 0xD2 JUMP JUMPDEST DUP1 RETURN JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F6E6C79206F776E657220697320616C6C6F77656420746F20706572666F726D PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x103A3434B99030B1BA34B7B7 PUSH1 0xA1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST POP DUP1 REVERT JUMPDEST PUSH32 0x202E1867CADE063E32A2EB339A246F853A1A233314949BA8D9E2AC766F6ED849 PUSH1 0xFF DUP2 SLOAD AND PUSH2 0x1B5 JUMPI PUSH32 0xC8FCAD8DB84D3CC18B4C41D551EA0EE66DD599CDE068D998E57D5E09332C131F PUSH1 0x20 MSTORE PUSH32 0xF97E938D8AF42F52387BB74B8B526FDA8F184CC2AA534340A8D75A88FBECC775 DUP1 SLOAD PUSH1 0x1 PUSH1 0xFF NOT SWAP2 DUP3 AND DUP2 OR SWAP1 SWAP3 SSTORE PUSH32 0x65D510A5D8F7EF134EC444F7F34EE808C8EEB5177CDFD16BE0C40FE1AB433695 DUP1 SLOAD DUP3 AND DUP4 OR SWAP1 SSTORE PUSH4 0xB400DC2F PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH32 0x54176106F8DEF38A53CAFA6FA9F47B09D8454741751F1C65C4DC48ED3663375A DUP1 SLOAD DUP3 AND DUP4 OR SWAP1 SSTORE DUP3 SLOAD AND OR SWAP1 SSTORE JUMP JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SSTORE SUB DUP8 PC NUMBER 0x27 SWAP11 LOG4 0xB1 LT 0xB9 DUP13 0x5F STOP LOG1 CALLDATALOAD DUP12 SUB LOG1 TIMESTAMP BYTE 0xA5 DUP3 0xD8 PUSH27 0x64E41FA778295564736F6C63430008120033000000000000000000 ","sourceMap":"450:588:8:-:0;;;;;;;1993:16:19;450:588:8;;567:10;-1:-1:-1;;;;;;450:588:8;;;;;;;-1:-1:-1;;;;;450:588:8;2062:46:19;-1:-1:-1;;2062:46:19;450:588:8;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"fun_init_inner":{"entryPoint":210,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"608080604052600436101561001357600080fd5b600090813560e01c63e1c7392a1461002a57600080fd5b346100ce57816003193601126100ce577fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c1320546001600160a01b0316330361007757506100746100d2565b80f35b62461bcd60e51b815260206004820152602c60248201527f4f6e6c79206f776e657220697320616c6c6f77656420746f20706572666f726d60448201526b103a3434b99030b1ba34b7b760a11b6064820152608490fd5b5080fd5b7f202e1867cade063e32a2eb339a246f853a1a233314949ba8d9e2ac766f6ed84960ff8154166101b5577fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131f6020527ff97e938d8af42f52387bb74b8b526fda8f184cc2aa534340a8d75a88fbecc7758054600160ff1991821681179092557f65d510a5d8f7ef134ec444f7f34ee808c8eeb5177cdfd16be0c40fe1ab433695805482168317905563b400dc2f60e01b6000527f54176106f8def38a53cafa6fa9f47b09d8454741751f1c65c4dc48ed3663375a8054821683179055825416179055565b5056fea26469706673582212205503875843279aa4b110b98c5f00a1358b03a1421aa582d87a64e41fa778295564736f6c63430008120033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP1 DUP2 CALLDATALOAD PUSH1 0xE0 SHR PUSH4 0xE1C7392A EQ PUSH2 0x2A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0xCE JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xCE JUMPI PUSH32 0xC8FCAD8DB84D3CC18B4C41D551EA0EE66DD599CDE068D998E57D5E09332C1320 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER SUB PUSH2 0x77 JUMPI POP PUSH2 0x74 PUSH2 0xD2 JUMP JUMPDEST DUP1 RETURN JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F6E6C79206F776E657220697320616C6C6F77656420746F20706572666F726D PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x103A3434B99030B1BA34B7B7 PUSH1 0xA1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST POP DUP1 REVERT JUMPDEST PUSH32 0x202E1867CADE063E32A2EB339A246F853A1A233314949BA8D9E2AC766F6ED849 PUSH1 0xFF DUP2 SLOAD AND PUSH2 0x1B5 JUMPI PUSH32 0xC8FCAD8DB84D3CC18B4C41D551EA0EE66DD599CDE068D998E57D5E09332C131F PUSH1 0x20 MSTORE PUSH32 0xF97E938D8AF42F52387BB74B8B526FDA8F184CC2AA534340A8D75A88FBECC775 DUP1 SLOAD PUSH1 0x1 PUSH1 0xFF NOT SWAP2 DUP3 AND DUP2 OR SWAP1 SWAP3 SSTORE PUSH32 0x65D510A5D8F7EF134EC444F7F34EE808C8EEB5177CDFD16BE0C40FE1AB433695 DUP1 SLOAD DUP3 AND DUP4 OR SWAP1 SSTORE PUSH4 0xB400DC2F PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH32 0x54176106F8DEF38A53CAFA6FA9F47B09D8454741751F1C65C4DC48ED3663375A DUP1 SLOAD DUP3 AND DUP4 OR SWAP1 SSTORE DUP3 SLOAD AND OR SWAP1 SSTORE JUMP JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SSTORE SUB DUP8 PC NUMBER 0x27 SWAP11 LOG4 0xB1 LT 0xB9 DUP13 0x5F STOP LOG1 CALLDATALOAD DUP12 SUB LOG1 TIMESTAMP BYTE 0xA5 DUP3 0xD8 PUSH27 0x64E41FA778295564736F6C63430008120033000000000000000000 ","sourceMap":"450:588:8:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;257:16:16;450:588:8;-1:-1:-1;;;;;450:588:8;243:10:16;:30;450:588:8;;332:1:16;;;:::i;:::-;450:588:8;;;-1:-1:-1;;;450:588:8;;;;;;;;;;;;;;;;;-1:-1:-1;;;450:588:8;;;;;;;;;;;608:427;714:18;450:588;;;;710:31;;753:24;450:588;;;;;811:4;-1:-1:-1;;450:588:8;;;;;;;;;;;;;;;;;-1:-1:-1;;;;450:588:8;;;;;;;;;;;;;;;;608:427::o;710:31::-;734:7;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"98800","executionCost":"25924","totalCost":"124724"},"external":{"init()":"101336"}},"methodIdentifiers":{"init()":"e1c7392a"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/InitFacet.sol\":\"InitFacet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/ILeafWalletRegistryActivate.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport \\\"./ILeafWalletRegistryCore.sol\\\";\\r\\n\\r\\ninterface ILeafWalletRegistryActivate is ILeafWalletRegistryCore{\\r\\n    function assignActivatableAddressToSender(address assignee)  external;\\r\\n    function getActivationCodeOfSender() external view returns (uint256);\\r\\n}\",\"keccak256\":\"0x822f13bd8b0d72f4d88a6824ddc6114eb682e6b183aa0f2367ae4cc3a25edcf2\",\"license\":\"MIT\"},\"contracts/ILeafWalletRegistryCore.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\ninterface ILeafWalletRegistryCore {\\r\\n    function isSenderRegistered() external view returns (bool);\\r\\n    function getDeviceOwner() external view returns (address);\\r\\n    function getRelatedDevices() external view returns (address[] memory);\\r\\n}\",\"keccak256\":\"0x3c21ce0ba8cfdd89401a502d15673006dbd41aeee58211c53fc33c2e187adbec\",\"license\":\"MIT\"},\"contracts/InitFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport {IDiamondLoupe} from \\\"hardhat-deploy/solc_0.8/diamond/interfaces/IDiamondLoupe.sol\\\";\\r\\nimport {UsingDiamondOwner, IDiamondCut} from \\\"hardhat-deploy/solc_0.8/diamond/UsingDiamondOwner.sol\\\";\\r\\nimport \\\"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\\\";\\r\\nimport {SusuwatariStorage, StorageHandler} from \\\"./SusuwatariStorage.sol\\\";\\r\\nimport \\\"./ILeafWalletRegistryActivate.sol\\\";\\r\\n\\r\\n\\r\\ncontract InitFacet is UsingDiamondOwner, StorageHandler {\\r\\n  \\r\\n  constructor(){\\r\\n        LibDiamond.setContractOwner(msg.sender);\\r\\n        \\r\\n    }\\r\\n    \\r\\n    function init() external onlyOwner {\\r\\n\\r\\n        SusuwatariStorage storage susu = susu();\\r\\n\\r\\n\\r\\n        if (susu.isInitialized) return;\\r\\n\\r\\n        ds().supportedInterfaces[type(IDiamondCut).interfaceId] = true;\\r\\n        ds().supportedInterfaces[type(IDiamondLoupe).interfaceId] = true;\\r\\n        \\r\\n        ds().supportedInterfaces[type(ILeafWalletRegistryActivate).interfaceId] = true;\\r\\n\\r\\n        susu.isInitialized = true;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x16c6a961bfd0ac69e0663ae7cceb49e0c3ad29544d5b347d1f079fec57db3359\",\"license\":\"MIT\"},\"contracts/SusuwatariStorage.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport {LibDiamond} from \\\"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\\\";\\r\\n\\r\\nbytes32 constant SUSUWATARI_STORAGE_POSITION = keccak256(\\\"susuwatari.contract.storage\\\");\\r\\nbytes32 constant LEAFWALLET_STORAGE_POSITION = keccak256(\\\"leafwallet.contract.storage\\\");\\r\\n\\r\\nstruct OwnableStorage {\\r\\n\\r\\n    address _owner;\\r\\n}\\r\\n\\r\\n\\r\\nstruct LeafWalletStorage {\\r\\n    mapping(address => address) _deviceOwner;\\r\\n    mapping(address => address[]) _ownerDevices;\\r\\n    mapping(address => uint256) _deviceActivationCodes;\\r\\n}\\r\\n\\r\\n\\r\\n    struct Susu {\\r\\n        uint256 tokenId;\\r\\n        string originLocation;\\r\\n        string currentLocation;\\r\\n        string destination;\\r\\n        string message;\\r\\n        address carrier;\\r\\n        uint256 dropCooldownTime;\\r\\n    }\\r\\n    \\r\\n    //slotstate contains: 1. slot array, an element of slotarray has: [susutokenid, dropCooldownTime] 2. maxSlotCount(int) 3.  list of owned susus (nft)\\r\\n    struct SusuwatariStorage {\\r\\n        mapping(address => uint256) maxSlotCount;\\r\\n        address[] susuOwners;\\r\\n        mapping(uint256 => Susu) tokenIdToSusu;\\r\\n        bool isInitialized;\\r\\n        mapping(uint256 => address) baggedSusus; \\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n\\r\\ncontract StorageHandler {\\r\\n    \\r\\n    function susu() internal pure returns (SusuwatariStorage storage cs) {\\r\\n        bytes32 position = SUSUWATARI_STORAGE_POSITION;\\r\\n        assembly {\\r\\n           cs.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function os() internal pure returns (OwnableStorage storage cs) {\\r\\n        bytes32 position = keccak256(\\\"ownable.contract.storage\\\");\\r\\n        assembly {\\r\\n           cs.slot := position\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function ds() internal pure returns (LibDiamond.DiamondStorage storage) {\\r\\n        return LibDiamond.diamondStorage();\\r\\n    }\\r\\n\\r\\n    \\r\\n    function lw() internal pure returns (LeafWalletStorage storage cs) {\\r\\n        bytes32 position = keccak256(\\\"leafwallet.contract.storage\\\");\\r\\n        assembly {\\r\\n           cs.slot := position\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0x63d24fb7415d1311c310f32e8ef03a9d657e7fc8829afbbc342feed9b30b6c48\",\"license\":\"MIT\"},\"hardhat-deploy/solc_0.8/diamond/UsingDiamondOwner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./libraries/LibDiamond.sol\\\";\\n\\ncontract UsingDiamondOwner {\\n    modifier onlyOwner() {\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\n        require(msg.sender == ds.contractOwner, \\\"Only owner is allowed to perform this action\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x610145c6957708608f3d2c2626dbf3461f2886b0b304c2bdc0c332df981b82f8\",\"license\":\"MIT\"},\"hardhat-deploy/solc_0.8/diamond/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0xc00c16bfa30a3fa5f3dc684f7f8ba62c259962b25f647d9588739458989717fc\",\"license\":\"MIT\"},\"hardhat-deploy/solc_0.8/diamond/interfaces/IDiamondLoupe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\n// A loupe is a small magnifying glass used to look at diamonds.\\n// These functions look at diamonds\\ninterface IDiamondLoupe {\\n    /// These functions are expected to be called frequently\\n    /// by tools.\\n\\n    struct Facet {\\n        address facetAddress;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Gets all facet addresses and their four byte function selectors.\\n    /// @return facets_ Facet\\n    function facets() external view returns (Facet[] memory facets_);\\n\\n    /// @notice Gets all the function selectors supported by a specific facet.\\n    /// @param _facet The facet address.\\n    /// @return facetFunctionSelectors_\\n    function facetFunctionSelectors(address _facet) external view returns (bytes4[] memory facetFunctionSelectors_);\\n\\n    /// @notice Get all the facet addresses used by a diamond.\\n    /// @return facetAddresses_\\n    function facetAddresses() external view returns (address[] memory facetAddresses_);\\n\\n    /// @notice Gets the facet that supports the given selector.\\n    /// @dev If facet is not found return address(0).\\n    /// @param _functionSelector The function selector.\\n    /// @return facetAddress_ The facet address.\\n    function facetAddress(bytes4 _functionSelector) external view returns (address facetAddress_);\\n}\\n\",\"keccak256\":\"0x10884024af2c0f7deca0fac4ddf84e76da5dba35b6e02fabeac8ea54c1a5c6f7\",\"license\":\"MIT\"},\"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);            \\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress != _facetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(_facetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n        enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }    \\n\\n\\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n        // an immutable function is a function defined directly in a diamond\\n        require(_facetAddress != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\");\\n        } else {\\n            require(_calldata.length > 0, \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\");\\n            if (_init != address(this)) {\\n                enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x2205345e83eb86f5281f159a9215a096cb6d404782619f9b8e9d7a4a46c32a37\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/LeafWalletRegistryActivate.sol":{"LeafWalletRegistryActivate":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"","type":"uint256"}],"name":"AssignActivatableAddressToSenderReturn","type":"event"},{"inputs":[{"internalType":"address","name":"assignee","type":"address"}],"name":"assignActivatableAddressToSender","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getActivationCodeOfSender","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getDeviceOwner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getRelatedDevices","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isSenderRegistered","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"6080806040523461001657610534908161001c8239f35b600080fdfe60806040908082526004918236101561001757600080fd5b600091823560e01c9081633aafa388146104a25750806358944eb8146103ea5780639b8ae375146103ac578063e0f64efc146102ae5763ec9492971461005c57600080fd5b346102aa57602090816003193601126102a65783356001600160a01b03808216908183036102a2578186526000805160206104df833981519152908186528085882054168015908115610298575b5015610255578287528186528487205416156101ae575b505081518381019042825244848201523360601b6060820152605481526080810181811067ffffffffffffffff82111761019b5784525190206064900694600a8610610172575b5090846101697f4194273a0171865880e1d7a0089dcb6cfe51ce239b09acde0bf6cc5e071210b095969360018060a01b03166000527f83ed3ba29c1d52058c877df3ebd264cf957c42ef7764387349be0ccf6df0b63d602052604060002090565b5551908152a180f35b94600a8101809111610188579450610169610108565b634e487b7160e01b855260118652602485fd5b634e487b7160e01b875260418852602487fd5b3360009081527f83ed3ba29c1d52058c877df3ebd264cf957c42ef7764387349be0ccf6df0b63c6020526040902080549068010000000000000000821015610242576001820180825582101561022f5787528587200180546001600160a01b03199081168417909155918652845282852080549091163317905538806100c1565b634e487b7160e01b885260328952602488fd5b634e487b7160e01b885260418952602488fd5b845162461bcd60e51b8152808901879052601960248201527f44657669636520616c72656164792072656769737465726564000000000000006044820152606490fd5b90503314386100aa565b8580fd5b8280fd5b5080fd5b50346102aa57816003193601126102aa573360009081527f83ed3ba29c1d52058c877df3ebd264cf957c42ef7764387349be0ccf6df0b63c6020526040902091815190819284548084526020809401908196845284842090845b8682821061038f5750505050849003601f01601f191684019567ffffffffffffffff87118588101761037c575085815282865292518583018190528594938501939290915b82811061035c57505050500390f35b83516001600160a01b03168552869550938101939281019260010161034d565b634e487b7160e01b835260419052602482fd5b83546001600160a01b031685529093019260019283019201610308565b50346102aa57816003193601126102aa573382526000805160206104df8339815191526020908152918190205490516001600160a01b039091168152f35b5091903461049f578060031936011261049f573381526000805160206104df833981519152602052829020546001600160a01b03161561045d573360009081527f83ed3ba29c1d52058c877df3ebd264cf957c42ef7764387349be0ccf6df0b63d60209081526040909120548351908152f35b6020606492519162461bcd60e51b8352820152601960248201527f446576696365206e6f74207965742072656769737465726564000000000000006044820152fd5b80fd5b919050346102a657826003193601126102a6573383526000805160206104df83398151915260209081529220546001600160a01b031615158152f3fe83ed3ba29c1d52058c877df3ebd264cf957c42ef7764387349be0ccf6df0b63ba2646970667358221220be5cb5e912b5f97af8716c17e6114d7fec0c7645ae5cda421d476f572e3f0d1364736f6c63430008120033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH2 0x16 JUMPI PUSH2 0x534 SWAP1 DUP2 PUSH2 0x1C DUP3 CODECOPY RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 SWAP1 DUP1 DUP3 MSTORE PUSH1 0x4 SWAP2 DUP3 CALLDATASIZE LT ISZERO PUSH2 0x17 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x3AAFA388 EQ PUSH2 0x4A2 JUMPI POP DUP1 PUSH4 0x58944EB8 EQ PUSH2 0x3EA JUMPI DUP1 PUSH4 0x9B8AE375 EQ PUSH2 0x3AC JUMPI DUP1 PUSH4 0xE0F64EFC EQ PUSH2 0x2AE JUMPI PUSH4 0xEC949297 EQ PUSH2 0x5C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x2AA JUMPI PUSH1 0x20 SWAP1 DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x2A6 JUMPI DUP4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND SWAP1 DUP2 DUP4 SUB PUSH2 0x2A2 JUMPI DUP2 DUP7 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4DF DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 DUP2 DUP7 MSTORE DUP1 DUP6 DUP9 KECCAK256 SLOAD AND DUP1 ISZERO SWAP1 DUP2 ISZERO PUSH2 0x298 JUMPI JUMPDEST POP ISZERO PUSH2 0x255 JUMPI DUP3 DUP8 MSTORE DUP2 DUP7 MSTORE DUP5 DUP8 KECCAK256 SLOAD AND ISZERO PUSH2 0x1AE JUMPI JUMPDEST POP POP DUP2 MLOAD DUP4 DUP2 ADD SWAP1 TIMESTAMP DUP3 MSTORE PREVRANDAO DUP5 DUP3 ADD MSTORE CALLER PUSH1 0x60 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x54 DUP2 MSTORE PUSH1 0x80 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x19B JUMPI DUP5 MSTORE MLOAD SWAP1 KECCAK256 PUSH1 0x64 SWAP1 MOD SWAP5 PUSH1 0xA DUP7 LT PUSH2 0x172 JUMPI JUMPDEST POP SWAP1 DUP5 PUSH2 0x169 PUSH32 0x4194273A0171865880E1D7A0089DCB6CFE51CE239B09ACDE0BF6CC5E071210B0 SWAP6 SWAP7 SWAP4 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH32 0x83ED3BA29C1D52058C877DF3EBD264CF957C42EF7764387349BE0CCF6DF0B63D PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SSTORE MLOAD SWAP1 DUP2 MSTORE LOG1 DUP1 RETURN JUMPDEST SWAP5 PUSH1 0xA DUP2 ADD DUP1 SWAP2 GT PUSH2 0x188 JUMPI SWAP5 POP PUSH2 0x169 PUSH2 0x108 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP6 MSTORE PUSH1 0x11 DUP7 MSTORE PUSH1 0x24 DUP6 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP8 MSTORE PUSH1 0x41 DUP9 MSTORE PUSH1 0x24 DUP8 REVERT JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0x83ED3BA29C1D52058C877DF3EBD264CF957C42EF7764387349BE0CCF6DF0B63C PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD SWAP1 PUSH9 0x10000000000000000 DUP3 LT ISZERO PUSH2 0x242 JUMPI PUSH1 0x1 DUP3 ADD DUP1 DUP3 SSTORE DUP3 LT ISZERO PUSH2 0x22F JUMPI DUP8 MSTORE DUP6 DUP8 KECCAK256 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND DUP5 OR SWAP1 SWAP2 SSTORE SWAP2 DUP7 MSTORE DUP5 MSTORE DUP3 DUP6 KECCAK256 DUP1 SLOAD SWAP1 SWAP2 AND CALLER OR SWAP1 SSTORE CODESIZE DUP1 PUSH2 0xC1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP9 MSTORE PUSH1 0x32 DUP10 MSTORE PUSH1 0x24 DUP9 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP9 MSTORE PUSH1 0x41 DUP10 MSTORE PUSH1 0x24 DUP9 REVERT JUMPDEST DUP5 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 DUP10 ADD DUP8 SWAP1 MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x44657669636520616C7265616479207265676973746572656400000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP1 POP CALLER EQ CODESIZE PUSH2 0xAA JUMP JUMPDEST DUP6 DUP1 REVERT JUMPDEST DUP3 DUP1 REVERT JUMPDEST POP DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x2AA JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x2AA JUMPI CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0x83ED3BA29C1D52058C877DF3EBD264CF957C42EF7764387349BE0CCF6DF0B63C PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP2 DUP2 MLOAD SWAP1 DUP2 SWAP3 DUP5 SLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 SWAP5 ADD SWAP1 DUP2 SWAP7 DUP5 MSTORE DUP5 DUP5 KECCAK256 SWAP1 DUP5 JUMPDEST DUP7 DUP3 DUP3 LT PUSH2 0x38F JUMPI POP POP POP POP DUP5 SWAP1 SUB PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP5 ADD SWAP6 PUSH8 0xFFFFFFFFFFFFFFFF DUP8 GT DUP6 DUP9 LT OR PUSH2 0x37C JUMPI POP DUP6 DUP2 MSTORE DUP3 DUP7 MSTORE SWAP3 MLOAD DUP6 DUP4 ADD DUP2 SWAP1 MSTORE DUP6 SWAP5 SWAP4 DUP6 ADD SWAP4 SWAP3 SWAP1 SWAP2 JUMPDEST DUP3 DUP2 LT PUSH2 0x35C JUMPI POP POP POP POP SUB SWAP1 RETURN JUMPDEST DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 MSTORE DUP7 SWAP6 POP SWAP4 DUP2 ADD SWAP4 SWAP3 DUP2 ADD SWAP3 PUSH1 0x1 ADD PUSH2 0x34D JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x41 SWAP1 MSTORE PUSH1 0x24 DUP3 REVERT JUMPDEST DUP4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 MSTORE SWAP1 SWAP4 ADD SWAP3 PUSH1 0x1 SWAP3 DUP4 ADD SWAP3 ADD PUSH2 0x308 JUMP JUMPDEST POP CALLVALUE PUSH2 0x2AA JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x2AA JUMPI CALLER DUP3 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4DF DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x20 SWAP1 DUP2 MSTORE SWAP2 DUP2 SWAP1 KECCAK256 SLOAD SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE RETURN JUMPDEST POP SWAP2 SWAP1 CALLVALUE PUSH2 0x49F JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x49F JUMPI CALLER DUP2 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4DF DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x20 MSTORE DUP3 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x45D JUMPI CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0x83ED3BA29C1D52058C877DF3EBD264CF957C42EF7764387349BE0CCF6DF0B63D PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 SLOAD DUP4 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH1 0x20 PUSH1 0x64 SWAP3 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x446576696365206E6F7420796574207265676973746572656400000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP CALLVALUE PUSH2 0x2A6 JUMPI DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x2A6 JUMPI CALLER DUP4 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4DF DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x20 SWAP1 DUP2 MSTORE SWAP3 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO ISZERO DUP2 MSTORE RETURN INVALID DUP4 0xED EXTCODESIZE LOG2 SWAP13 SAR MSTORE SDIV DUP13 DUP8 PUSH30 0xF3EBD264CF957C42EF7764387349BE0CCF6DF0B63BA26469706673582212 KECCAK256 0xBE 0x5C 0xB5 0xE9 SLT 0xB5 0xF9 PUSH27 0xF8716C17E6114D7FEC0C7645AE5CDA421D476F572E3F0D1364736F PUSH13 0x63430008120033000000000000 ","sourceMap":"225:993:9:-:0;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"mapping_index_access_mapping_address_uint256_of_address":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"mapping_index_access_mapping_address_uint256_of_address_4288":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1}},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"60806040908082526004918236101561001757600080fd5b600091823560e01c9081633aafa388146104a25750806358944eb8146103ea5780639b8ae375146103ac578063e0f64efc146102ae5763ec9492971461005c57600080fd5b346102aa57602090816003193601126102a65783356001600160a01b03808216908183036102a2578186526000805160206104df833981519152908186528085882054168015908115610298575b5015610255578287528186528487205416156101ae575b505081518381019042825244848201523360601b6060820152605481526080810181811067ffffffffffffffff82111761019b5784525190206064900694600a8610610172575b5090846101697f4194273a0171865880e1d7a0089dcb6cfe51ce239b09acde0bf6cc5e071210b095969360018060a01b03166000527f83ed3ba29c1d52058c877df3ebd264cf957c42ef7764387349be0ccf6df0b63d602052604060002090565b5551908152a180f35b94600a8101809111610188579450610169610108565b634e487b7160e01b855260118652602485fd5b634e487b7160e01b875260418852602487fd5b3360009081527f83ed3ba29c1d52058c877df3ebd264cf957c42ef7764387349be0ccf6df0b63c6020526040902080549068010000000000000000821015610242576001820180825582101561022f5787528587200180546001600160a01b03199081168417909155918652845282852080549091163317905538806100c1565b634e487b7160e01b885260328952602488fd5b634e487b7160e01b885260418952602488fd5b845162461bcd60e51b8152808901879052601960248201527f44657669636520616c72656164792072656769737465726564000000000000006044820152606490fd5b90503314386100aa565b8580fd5b8280fd5b5080fd5b50346102aa57816003193601126102aa573360009081527f83ed3ba29c1d52058c877df3ebd264cf957c42ef7764387349be0ccf6df0b63c6020526040902091815190819284548084526020809401908196845284842090845b8682821061038f5750505050849003601f01601f191684019567ffffffffffffffff87118588101761037c575085815282865292518583018190528594938501939290915b82811061035c57505050500390f35b83516001600160a01b03168552869550938101939281019260010161034d565b634e487b7160e01b835260419052602482fd5b83546001600160a01b031685529093019260019283019201610308565b50346102aa57816003193601126102aa573382526000805160206104df8339815191526020908152918190205490516001600160a01b039091168152f35b5091903461049f578060031936011261049f573381526000805160206104df833981519152602052829020546001600160a01b03161561045d573360009081527f83ed3ba29c1d52058c877df3ebd264cf957c42ef7764387349be0ccf6df0b63d60209081526040909120548351908152f35b6020606492519162461bcd60e51b8352820152601960248201527f446576696365206e6f74207965742072656769737465726564000000000000006044820152fd5b80fd5b919050346102a657826003193601126102a6573383526000805160206104df83398151915260209081529220546001600160a01b031615158152f3fe83ed3ba29c1d52058c877df3ebd264cf957c42ef7764387349be0ccf6df0b63ba2646970667358221220be5cb5e912b5f97af8716c17e6114d7fec0c7645ae5cda421d476f572e3f0d1364736f6c63430008120033","opcodes":"PUSH1 0x80 PUSH1 0x40 SWAP1 DUP1 DUP3 MSTORE PUSH1 0x4 SWAP2 DUP3 CALLDATASIZE LT ISZERO PUSH2 0x17 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x3AAFA388 EQ PUSH2 0x4A2 JUMPI POP DUP1 PUSH4 0x58944EB8 EQ PUSH2 0x3EA JUMPI DUP1 PUSH4 0x9B8AE375 EQ PUSH2 0x3AC JUMPI DUP1 PUSH4 0xE0F64EFC EQ PUSH2 0x2AE JUMPI PUSH4 0xEC949297 EQ PUSH2 0x5C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x2AA JUMPI PUSH1 0x20 SWAP1 DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x2A6 JUMPI DUP4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND SWAP1 DUP2 DUP4 SUB PUSH2 0x2A2 JUMPI DUP2 DUP7 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4DF DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 DUP2 DUP7 MSTORE DUP1 DUP6 DUP9 KECCAK256 SLOAD AND DUP1 ISZERO SWAP1 DUP2 ISZERO PUSH2 0x298 JUMPI JUMPDEST POP ISZERO PUSH2 0x255 JUMPI DUP3 DUP8 MSTORE DUP2 DUP7 MSTORE DUP5 DUP8 KECCAK256 SLOAD AND ISZERO PUSH2 0x1AE JUMPI JUMPDEST POP POP DUP2 MLOAD DUP4 DUP2 ADD SWAP1 TIMESTAMP DUP3 MSTORE PREVRANDAO DUP5 DUP3 ADD MSTORE CALLER PUSH1 0x60 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x54 DUP2 MSTORE PUSH1 0x80 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x19B JUMPI DUP5 MSTORE MLOAD SWAP1 KECCAK256 PUSH1 0x64 SWAP1 MOD SWAP5 PUSH1 0xA DUP7 LT PUSH2 0x172 JUMPI JUMPDEST POP SWAP1 DUP5 PUSH2 0x169 PUSH32 0x4194273A0171865880E1D7A0089DCB6CFE51CE239B09ACDE0BF6CC5E071210B0 SWAP6 SWAP7 SWAP4 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH32 0x83ED3BA29C1D52058C877DF3EBD264CF957C42EF7764387349BE0CCF6DF0B63D PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SSTORE MLOAD SWAP1 DUP2 MSTORE LOG1 DUP1 RETURN JUMPDEST SWAP5 PUSH1 0xA DUP2 ADD DUP1 SWAP2 GT PUSH2 0x188 JUMPI SWAP5 POP PUSH2 0x169 PUSH2 0x108 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP6 MSTORE PUSH1 0x11 DUP7 MSTORE PUSH1 0x24 DUP6 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP8 MSTORE PUSH1 0x41 DUP9 MSTORE PUSH1 0x24 DUP8 REVERT JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0x83ED3BA29C1D52058C877DF3EBD264CF957C42EF7764387349BE0CCF6DF0B63C PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD SWAP1 PUSH9 0x10000000000000000 DUP3 LT ISZERO PUSH2 0x242 JUMPI PUSH1 0x1 DUP3 ADD DUP1 DUP3 SSTORE DUP3 LT ISZERO PUSH2 0x22F JUMPI DUP8 MSTORE DUP6 DUP8 KECCAK256 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND DUP5 OR SWAP1 SWAP2 SSTORE SWAP2 DUP7 MSTORE DUP5 MSTORE DUP3 DUP6 KECCAK256 DUP1 SLOAD SWAP1 SWAP2 AND CALLER OR SWAP1 SSTORE CODESIZE DUP1 PUSH2 0xC1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP9 MSTORE PUSH1 0x32 DUP10 MSTORE PUSH1 0x24 DUP9 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP9 MSTORE PUSH1 0x41 DUP10 MSTORE PUSH1 0x24 DUP9 REVERT JUMPDEST DUP5 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 DUP10 ADD DUP8 SWAP1 MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x44657669636520616C7265616479207265676973746572656400000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP1 POP CALLER EQ CODESIZE PUSH2 0xAA JUMP JUMPDEST DUP6 DUP1 REVERT JUMPDEST DUP3 DUP1 REVERT JUMPDEST POP DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x2AA JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x2AA JUMPI CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0x83ED3BA29C1D52058C877DF3EBD264CF957C42EF7764387349BE0CCF6DF0B63C PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP2 DUP2 MLOAD SWAP1 DUP2 SWAP3 DUP5 SLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 SWAP5 ADD SWAP1 DUP2 SWAP7 DUP5 MSTORE DUP5 DUP5 KECCAK256 SWAP1 DUP5 JUMPDEST DUP7 DUP3 DUP3 LT PUSH2 0x38F JUMPI POP POP POP POP DUP5 SWAP1 SUB PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP5 ADD SWAP6 PUSH8 0xFFFFFFFFFFFFFFFF DUP8 GT DUP6 DUP9 LT OR PUSH2 0x37C JUMPI POP DUP6 DUP2 MSTORE DUP3 DUP7 MSTORE SWAP3 MLOAD DUP6 DUP4 ADD DUP2 SWAP1 MSTORE DUP6 SWAP5 SWAP4 DUP6 ADD SWAP4 SWAP3 SWAP1 SWAP2 JUMPDEST DUP3 DUP2 LT PUSH2 0x35C JUMPI POP POP POP POP SUB SWAP1 RETURN JUMPDEST DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 MSTORE DUP7 SWAP6 POP SWAP4 DUP2 ADD SWAP4 SWAP3 DUP2 ADD SWAP3 PUSH1 0x1 ADD PUSH2 0x34D JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x41 SWAP1 MSTORE PUSH1 0x24 DUP3 REVERT JUMPDEST DUP4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 MSTORE SWAP1 SWAP4 ADD SWAP3 PUSH1 0x1 SWAP3 DUP4 ADD SWAP3 ADD PUSH2 0x308 JUMP JUMPDEST POP CALLVALUE PUSH2 0x2AA JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x2AA JUMPI CALLER DUP3 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4DF DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x20 SWAP1 DUP2 MSTORE SWAP2 DUP2 SWAP1 KECCAK256 SLOAD SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE RETURN JUMPDEST POP SWAP2 SWAP1 CALLVALUE PUSH2 0x49F JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x49F JUMPI CALLER DUP2 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4DF DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x20 MSTORE DUP3 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x45D JUMPI CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0x83ED3BA29C1D52058C877DF3EBD264CF957C42EF7764387349BE0CCF6DF0B63D PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 SLOAD DUP4 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH1 0x20 PUSH1 0x64 SWAP3 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x446576696365206E6F7420796574207265676973746572656400000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP CALLVALUE PUSH2 0x2A6 JUMPI DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x2A6 JUMPI CALLER DUP4 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4DF DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x20 SWAP1 DUP2 MSTORE SWAP3 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO ISZERO DUP2 MSTORE RETURN INVALID DUP4 0xED EXTCODESIZE LOG2 SWAP13 SAR MSTORE SDIV DUP13 DUP8 PUSH30 0xF3EBD264CF957C42EF7764387349BE0CCF6DF0B63BA26469706673582212 KECCAK256 0xBE 0x5C 0xB5 0xE9 SLT 0xB5 0xF9 PUSH27 0xF8716C17E6114D7FEC0C7645AE5CDA421D476F572E3F0D1364736F PUSH13 0x63430008120033000000000000 ","sourceMap":"225:993:9:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;225:993:9;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;225:993:9;;;;;;;;;;395:39:11;;:82;;;;;225:993:9;;;;;;;;;;;;;;;;527:39:11;524:166;;225:993:9;;;;;622:63;;;639:15;;225:993;;656:16;225:993;;;;674:10;225:993;;;;;;622:63;;;225:993;;;;;;;;;;;;;;;612:74;;690:3;225:993;;;722:2;707:17;;704:82;;225:993;796:35;;;;868:54;796:35;;;225:993;;;;;;;;1166:25;225:993;;;;;;;796:35;225:993;;;;;868:54;225:993;;704:82;225:993;722:2;225:993;;;;;;;740:34;-1:-1:-1;796:35:9;704:82;;225:993;-1:-1:-1;;;225:993:9;;;;;;;;;-1:-1:-1;;;225:993:9;;;;;;;;524:166:11;599:10;225:993:9;;;;1207:16:11;225:993:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;225:993:9;;;;;;;;;;;;;;;;;;;;;599:10:11;225:993:9;;;524:166:11;;;;225:993:9;-1:-1:-1;;;225:993:9;;;;;;;;;-1:-1:-1;;;225:993:9;;;;;;;;;;;-1:-1:-1;;;225:993:9;;;;;;;;;;;;;;;;;;;;;395:82:11;467:10;;;438:39;395:82;;;225:993:9;;;;;;;;;;;;;;;;;;;;;;;;;1224:10:11;225:993:9;;;;1207:16:11;225:993:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;225:993:9;;;;;-1:-1:-1;;225:993:9;;;;;;;;;;;;;-1:-1:-1;225:993:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;225:993:9;;;;;-1:-1:-1;225:993:9;;;;;;;;1207:16:11;225:993:9;;;;-1:-1:-1;;;225:993:9;;;;;;;;;;;-1:-1:-1;;;;;225:993:9;;;;;;;1207:16:11;225:993:9;;;;;;;;;;;;;;;;;;;;1039:10:11;225:993:9;;-1:-1:-1;;;;;;;;;;;225:993:9;;;;;;;;;;;-1:-1:-1;;;;;225:993:9;;;;;;;;;;;;;;;;;;;;;1094:10;225:993;;-1:-1:-1;;;;;;;;;;;225:993:9;;;;;;-1:-1:-1;;;;;225:993:9;1078:41;225:993;;1094:10;225:993;;;;1166:25;225:993;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;853:10:11;225:993:9;;-1:-1:-1;;;;;;;;;;;225:993:9;;;;;;;-1:-1:-1;;;;;225:993:9;837:41:11;;225:993:9;;"},"gasEstimates":{"creation":{"codeDepositCost":"266400","executionCost":"313","totalCost":"266713"},"external":{"assignActivatableAddressToSender(address)":"infinite","getActivationCodeOfSender()":"infinite","getDeviceOwner()":"infinite","getRelatedDevices()":"infinite","isSenderRegistered()":"2392"}},"methodIdentifiers":{"assignActivatableAddressToSender(address)":"ec949297","getActivationCodeOfSender()":"58944eb8","getDeviceOwner()":"9b8ae375","getRelatedDevices()":"e0f64efc","isSenderRegistered()":"3aafa388"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"AssignActivatableAddressToSenderReturn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assignee\",\"type\":\"address\"}],\"name\":\"assignActivatableAddressToSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActivationCodeOfSender\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDeviceOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRelatedDevices\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSenderRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LeafWalletRegistryActivate.sol\":\"LeafWalletRegistryActivate\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/ILeafWalletRegistryActivate.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport \\\"./ILeafWalletRegistryCore.sol\\\";\\r\\n\\r\\ninterface ILeafWalletRegistryActivate is ILeafWalletRegistryCore{\\r\\n    function assignActivatableAddressToSender(address assignee)  external;\\r\\n    function getActivationCodeOfSender() external view returns (uint256);\\r\\n}\",\"keccak256\":\"0x822f13bd8b0d72f4d88a6824ddc6114eb682e6b183aa0f2367ae4cc3a25edcf2\",\"license\":\"MIT\"},\"contracts/ILeafWalletRegistryCore.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\ninterface ILeafWalletRegistryCore {\\r\\n    function isSenderRegistered() external view returns (bool);\\r\\n    function getDeviceOwner() external view returns (address);\\r\\n    function getRelatedDevices() external view returns (address[] memory);\\r\\n}\",\"keccak256\":\"0x3c21ce0ba8cfdd89401a502d15673006dbd41aeee58211c53fc33c2e187adbec\",\"license\":\"MIT\"},\"contracts/LeafWalletRegistryActivate.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport \\\"./ILeafWalletRegistryActivate.sol\\\";\\r\\nimport \\\"./LeafWalletRegistryCore.sol\\\";\\r\\nimport {LeafWalletStorage,StorageHandler} from  \\\"./SusuwatariStorage.sol\\\";\\r\\n\\r\\ncontract LeafWalletRegistryActivate is ILeafWalletRegistryActivate, LeafWalletRegistryCore  {\\r\\n    event AssignActivatableAddressToSenderReturn(uint256);\\r\\n    \\r\\n\\r\\n    function assignActivatableAddressToSender(address assignee) public virtual override{\\r\\n        LeafWalletStorage storage lw = lw();\\r\\n        _assignAddressToSender(assignee);\\r\\n\\r\\n\\r\\n        uint256 activationCode = uint256(keccak256(abi.encodePacked(block.timestamp, block.prevrandao, msg.sender))) % 100;\\r\\n        if(activationCode<10){\\r\\n            activationCode = activationCode+10;\\r\\n        }\\r\\n        lw._deviceActivationCodes[assignee] = activationCode;\\r\\n\\r\\n\\r\\n        emit AssignActivatableAddressToSenderReturn(activationCode);\\r\\n    }\\r\\n\\r\\n    function getActivationCodeOfSender() public view override returns (uint256){\\r\\n        LeafWalletStorage storage lw = lw();\\r\\n        require(lw._deviceOwner[msg.sender] != address(0),\\\"Device not yet registered\\\");\\r\\n        return lw._deviceActivationCodes[msg.sender];\\r\\n    }\\r\\n\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n    \",\"keccak256\":\"0x9199e4fb9795851bfd7c748e5d4b8d4c33d87cf197223c3a554f7fc4ae2ce78b\",\"license\":\"MIT\"},\"contracts/LeafWalletRegistryCore.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport \\\"./ILeafWalletRegistryCore.sol\\\";\\r\\nimport {LeafWalletStorage,StorageHandler} from  \\\"./SusuwatariStorage.sol\\\";\\r\\n\\r\\ncontract LeafWalletRegistryCore is ILeafWalletRegistryCore,StorageHandler {\\r\\n\\r\\n    \\r\\n\\r\\n    function _assignAddressToSender(address assignee) internal{\\r\\n        LeafWalletStorage storage lw = lw();\\r\\n        require(lw._deviceOwner[assignee] == address(0) || lw._deviceOwner[assignee] == msg.sender,\\\"Device already registered\\\");\\r\\n     \\r\\n        if(lw._deviceOwner[assignee] == address(0)){\\r\\n            lw._ownerDevices[msg.sender].push(assignee);\\r\\n            lw._deviceOwner[assignee] = msg.sender;\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    function isSenderRegistered() public view override returns (bool) {\\r\\n        LeafWalletStorage storage lw = lw();\\r\\n        return lw._deviceOwner[msg.sender] != address(0);\\r\\n    }\\r\\n\\r\\n    function getDeviceOwner() public view override returns (address) {\\r\\n        LeafWalletStorage storage lw = lw();\\r\\n        return lw._deviceOwner[msg.sender];\\r\\n    }\\r\\n\\r\\n    function getRelatedDevices() public view override returns (address[] memory) {\\r\\n        LeafWalletStorage storage lw = lw();\\r\\n        return lw._ownerDevices[msg.sender];\\r\\n    }\\r\\n\\r\\n\\r\\n    \\r\\n\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n    \",\"keccak256\":\"0xff10bf2d25fd7de2410411975b7ac4a8bdb2c829a94b91fbed4426a44a65438b\",\"license\":\"MIT\"},\"contracts/SusuwatariStorage.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport {LibDiamond} from \\\"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\\\";\\r\\n\\r\\nbytes32 constant SUSUWATARI_STORAGE_POSITION = keccak256(\\\"susuwatari.contract.storage\\\");\\r\\nbytes32 constant LEAFWALLET_STORAGE_POSITION = keccak256(\\\"leafwallet.contract.storage\\\");\\r\\n\\r\\nstruct OwnableStorage {\\r\\n\\r\\n    address _owner;\\r\\n}\\r\\n\\r\\n\\r\\nstruct LeafWalletStorage {\\r\\n    mapping(address => address) _deviceOwner;\\r\\n    mapping(address => address[]) _ownerDevices;\\r\\n    mapping(address => uint256) _deviceActivationCodes;\\r\\n}\\r\\n\\r\\n\\r\\n    struct Susu {\\r\\n        uint256 tokenId;\\r\\n        string originLocation;\\r\\n        string currentLocation;\\r\\n        string destination;\\r\\n        string message;\\r\\n        address carrier;\\r\\n        uint256 dropCooldownTime;\\r\\n    }\\r\\n    \\r\\n    //slotstate contains: 1. slot array, an element of slotarray has: [susutokenid, dropCooldownTime] 2. maxSlotCount(int) 3.  list of owned susus (nft)\\r\\n    struct SusuwatariStorage {\\r\\n        mapping(address => uint256) maxSlotCount;\\r\\n        address[] susuOwners;\\r\\n        mapping(uint256 => Susu) tokenIdToSusu;\\r\\n        bool isInitialized;\\r\\n        mapping(uint256 => address) baggedSusus; \\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n\\r\\ncontract StorageHandler {\\r\\n    \\r\\n    function susu() internal pure returns (SusuwatariStorage storage cs) {\\r\\n        bytes32 position = SUSUWATARI_STORAGE_POSITION;\\r\\n        assembly {\\r\\n           cs.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function os() internal pure returns (OwnableStorage storage cs) {\\r\\n        bytes32 position = keccak256(\\\"ownable.contract.storage\\\");\\r\\n        assembly {\\r\\n           cs.slot := position\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function ds() internal pure returns (LibDiamond.DiamondStorage storage) {\\r\\n        return LibDiamond.diamondStorage();\\r\\n    }\\r\\n\\r\\n    \\r\\n    function lw() internal pure returns (LeafWalletStorage storage cs) {\\r\\n        bytes32 position = keccak256(\\\"leafwallet.contract.storage\\\");\\r\\n        assembly {\\r\\n           cs.slot := position\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0x63d24fb7415d1311c310f32e8ef03a9d657e7fc8829afbbc342feed9b30b6c48\",\"license\":\"MIT\"},\"hardhat-deploy/solc_0.8/diamond/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0xc00c16bfa30a3fa5f3dc684f7f8ba62c259962b25f647d9588739458989717fc\",\"license\":\"MIT\"},\"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);            \\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress != _facetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(_facetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n        enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }    \\n\\n\\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n        // an immutable function is a function defined directly in a diamond\\n        require(_facetAddress != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\");\\n        } else {\\n            require(_calldata.length > 0, \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\");\\n            if (_init != address(this)) {\\n                enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x2205345e83eb86f5281f159a9215a096cb6d404782619f9b8e9d7a4a46c32a37\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/LeafWalletRegistryBase.sol":{"LeafWalletRegistryBasic":{"abi":[{"inputs":[{"internalType":"address","name":"assignee","type":"address"}],"name":"assignAddressToSender","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getDeviceOwner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getRelatedDevices","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isSenderRegistered","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234610016576103a6908161001c8239f35b600080fdfe60806040908082526004918236101561001757600080fd5b600091823560e01c9081633aafa388146103225750806356a593e3146101a25780639b8ae375146101525763e0f64efc1461005157600080fd5b3461014e578160031936011261014e573360009081527f83ed3ba29c1d52058c877df3ebd264cf957c42ef7764387349be0ccf6df0b63c6020526040902091815190819284548084526020809401908196845284842090845b868282106101315750505050849003601f01601f191684019567ffffffffffffffff87118588101761011e575085815282865292518583018190528594938501939290915b8281106100fe57505050500390f35b83516001600160a01b0316855286955093810193928101926001016100ef565b634e487b7160e01b835260419052602482fd5b83546001600160a01b0316855290930192600192830192016100aa565b5080fd5b503461014e578160031936011261014e573382527f83ed3ba29c1d52058c877df3ebd264cf957c42ef7764387349be0ccf6df0b63b6020908152918190205490516001600160a01b039091168152f35b5082903461031e576020918260031936011261031a576001600160a01b03813581811694919290859003610316578486527f83ed3ba29c1d52058c877df3ebd264cf957c42ef7764387349be0ccf6df0b63b92838352808588205416801590811561030c575b50156102ca57858752838352848720541615610222578580f35b3360009081527f83ed3ba29c1d52058c877df3ebd264cf957c42ef7764387349be0ccf6df0b63c60205260409020805491680100000000000000008310156102b757600183018083558310156102a4575086528186200180546001600160a01b0319908116861790915593855252822080549091163317905581808080808580f35b634e487b7160e01b885260329052602487fd5b634e487b7160e01b885260419052602487fd5b5060649184519162461bcd60e51b8352820152601960248201527f44657669636520616c72656164792072656769737465726564000000000000006044820152fd5b9050331488610208565b8580fd5b8380fd5b8280fd5b9190503461031e578260031936011261031e573383527f83ed3ba29c1d52058c877df3ebd264cf957c42ef7764387349be0ccf6df0b63b60209081529220546001600160a01b031615158152f3fea2646970667358221220a083b590e17135bbeb7f75d37cd3651e6c164ae2412e423cf5fffc1e7babd03b64736f6c63430008120033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH2 0x16 JUMPI PUSH2 0x3A6 SWAP1 DUP2 PUSH2 0x1C DUP3 CODECOPY RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 SWAP1 DUP1 DUP3 MSTORE PUSH1 0x4 SWAP2 DUP3 CALLDATASIZE LT ISZERO PUSH2 0x17 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x3AAFA388 EQ PUSH2 0x322 JUMPI POP DUP1 PUSH4 0x56A593E3 EQ PUSH2 0x1A2 JUMPI DUP1 PUSH4 0x9B8AE375 EQ PUSH2 0x152 JUMPI PUSH4 0xE0F64EFC EQ PUSH2 0x51 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x14E JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x14E JUMPI CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0x83ED3BA29C1D52058C877DF3EBD264CF957C42EF7764387349BE0CCF6DF0B63C PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP2 DUP2 MLOAD SWAP1 DUP2 SWAP3 DUP5 SLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 SWAP5 ADD SWAP1 DUP2 SWAP7 DUP5 MSTORE DUP5 DUP5 KECCAK256 SWAP1 DUP5 JUMPDEST DUP7 DUP3 DUP3 LT PUSH2 0x131 JUMPI POP POP POP POP DUP5 SWAP1 SUB PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP5 ADD SWAP6 PUSH8 0xFFFFFFFFFFFFFFFF DUP8 GT DUP6 DUP9 LT OR PUSH2 0x11E JUMPI POP DUP6 DUP2 MSTORE DUP3 DUP7 MSTORE SWAP3 MLOAD DUP6 DUP4 ADD DUP2 SWAP1 MSTORE DUP6 SWAP5 SWAP4 DUP6 ADD SWAP4 SWAP3 SWAP1 SWAP2 JUMPDEST DUP3 DUP2 LT PUSH2 0xFE JUMPI POP POP POP POP SUB SWAP1 RETURN JUMPDEST DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 MSTORE DUP7 SWAP6 POP SWAP4 DUP2 ADD SWAP4 SWAP3 DUP2 ADD SWAP3 PUSH1 0x1 ADD PUSH2 0xEF JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x41 SWAP1 MSTORE PUSH1 0x24 DUP3 REVERT JUMPDEST DUP4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 MSTORE SWAP1 SWAP4 ADD SWAP3 PUSH1 0x1 SWAP3 DUP4 ADD SWAP3 ADD PUSH2 0xAA JUMP JUMPDEST POP DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x14E JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x14E JUMPI CALLER DUP3 MSTORE PUSH32 0x83ED3BA29C1D52058C877DF3EBD264CF957C42EF7764387349BE0CCF6DF0B63B PUSH1 0x20 SWAP1 DUP2 MSTORE SWAP2 DUP2 SWAP1 KECCAK256 SLOAD SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE RETURN JUMPDEST POP DUP3 SWAP1 CALLVALUE PUSH2 0x31E JUMPI PUSH1 0x20 SWAP2 DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x31A JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 DUP2 AND SWAP5 SWAP2 SWAP3 SWAP1 DUP6 SWAP1 SUB PUSH2 0x316 JUMPI DUP5 DUP7 MSTORE PUSH32 0x83ED3BA29C1D52058C877DF3EBD264CF957C42EF7764387349BE0CCF6DF0B63B SWAP3 DUP4 DUP4 MSTORE DUP1 DUP6 DUP9 KECCAK256 SLOAD AND DUP1 ISZERO SWAP1 DUP2 ISZERO PUSH2 0x30C JUMPI JUMPDEST POP ISZERO PUSH2 0x2CA JUMPI DUP6 DUP8 MSTORE DUP4 DUP4 MSTORE DUP5 DUP8 KECCAK256 SLOAD AND ISZERO PUSH2 0x222 JUMPI DUP6 DUP1 RETURN JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0x83ED3BA29C1D52058C877DF3EBD264CF957C42EF7764387349BE0CCF6DF0B63C PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD SWAP2 PUSH9 0x10000000000000000 DUP4 LT ISZERO PUSH2 0x2B7 JUMPI PUSH1 0x1 DUP4 ADD DUP1 DUP4 SSTORE DUP4 LT ISZERO PUSH2 0x2A4 JUMPI POP DUP7 MSTORE DUP2 DUP7 KECCAK256 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND DUP7 OR SWAP1 SWAP2 SSTORE SWAP4 DUP6 MSTORE MSTORE DUP3 KECCAK256 DUP1 SLOAD SWAP1 SWAP2 AND CALLER OR SWAP1 SSTORE DUP2 DUP1 DUP1 DUP1 DUP1 DUP6 DUP1 RETURN JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP9 MSTORE PUSH1 0x32 SWAP1 MSTORE PUSH1 0x24 DUP8 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP9 MSTORE PUSH1 0x41 SWAP1 MSTORE PUSH1 0x24 DUP8 REVERT JUMPDEST POP PUSH1 0x64 SWAP2 DUP5 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x44657669636520616C7265616479207265676973746572656400000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 POP CALLER EQ DUP9 PUSH2 0x208 JUMP JUMPDEST DUP6 DUP1 REVERT JUMPDEST DUP4 DUP1 REVERT JUMPDEST DUP3 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP CALLVALUE PUSH2 0x31E JUMPI DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x31E JUMPI CALLER DUP4 MSTORE PUSH32 0x83ED3BA29C1D52058C877DF3EBD264CF957C42EF7764387349BE0CCF6DF0B63B PUSH1 0x20 SWAP1 DUP2 MSTORE SWAP3 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO ISZERO DUP2 MSTORE RETURN INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG0 DUP4 0xB5 SWAP1 0xE1 PUSH18 0x35BBEB7F75D37CD3651E6C164AE2412E423C CREATE2 SELFDESTRUCT 0xFC 0x1E PUSH28 0xABD03B64736F6C634300081200330000000000000000000000000000 ","sourceMap":"146:221:10:-:0;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"mapping_index_access_mapping_address_address_of_address":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1}},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"60806040908082526004918236101561001757600080fd5b600091823560e01c9081633aafa388146103225750806356a593e3146101a25780639b8ae375146101525763e0f64efc1461005157600080fd5b3461014e578160031936011261014e573360009081527f83ed3ba29c1d52058c877df3ebd264cf957c42ef7764387349be0ccf6df0b63c6020526040902091815190819284548084526020809401908196845284842090845b868282106101315750505050849003601f01601f191684019567ffffffffffffffff87118588101761011e575085815282865292518583018190528594938501939290915b8281106100fe57505050500390f35b83516001600160a01b0316855286955093810193928101926001016100ef565b634e487b7160e01b835260419052602482fd5b83546001600160a01b0316855290930192600192830192016100aa565b5080fd5b503461014e578160031936011261014e573382527f83ed3ba29c1d52058c877df3ebd264cf957c42ef7764387349be0ccf6df0b63b6020908152918190205490516001600160a01b039091168152f35b5082903461031e576020918260031936011261031a576001600160a01b03813581811694919290859003610316578486527f83ed3ba29c1d52058c877df3ebd264cf957c42ef7764387349be0ccf6df0b63b92838352808588205416801590811561030c575b50156102ca57858752838352848720541615610222578580f35b3360009081527f83ed3ba29c1d52058c877df3ebd264cf957c42ef7764387349be0ccf6df0b63c60205260409020805491680100000000000000008310156102b757600183018083558310156102a4575086528186200180546001600160a01b0319908116861790915593855252822080549091163317905581808080808580f35b634e487b7160e01b885260329052602487fd5b634e487b7160e01b885260419052602487fd5b5060649184519162461bcd60e51b8352820152601960248201527f44657669636520616c72656164792072656769737465726564000000000000006044820152fd5b9050331488610208565b8580fd5b8380fd5b8280fd5b9190503461031e578260031936011261031e573383527f83ed3ba29c1d52058c877df3ebd264cf957c42ef7764387349be0ccf6df0b63b60209081529220546001600160a01b031615158152f3fea2646970667358221220a083b590e17135bbeb7f75d37cd3651e6c164ae2412e423cf5fffc1e7babd03b64736f6c63430008120033","opcodes":"PUSH1 0x80 PUSH1 0x40 SWAP1 DUP1 DUP3 MSTORE PUSH1 0x4 SWAP2 DUP3 CALLDATASIZE LT ISZERO PUSH2 0x17 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x3AAFA388 EQ PUSH2 0x322 JUMPI POP DUP1 PUSH4 0x56A593E3 EQ PUSH2 0x1A2 JUMPI DUP1 PUSH4 0x9B8AE375 EQ PUSH2 0x152 JUMPI PUSH4 0xE0F64EFC EQ PUSH2 0x51 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x14E JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x14E JUMPI CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0x83ED3BA29C1D52058C877DF3EBD264CF957C42EF7764387349BE0CCF6DF0B63C PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP2 DUP2 MLOAD SWAP1 DUP2 SWAP3 DUP5 SLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 SWAP5 ADD SWAP1 DUP2 SWAP7 DUP5 MSTORE DUP5 DUP5 KECCAK256 SWAP1 DUP5 JUMPDEST DUP7 DUP3 DUP3 LT PUSH2 0x131 JUMPI POP POP POP POP DUP5 SWAP1 SUB PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP5 ADD SWAP6 PUSH8 0xFFFFFFFFFFFFFFFF DUP8 GT DUP6 DUP9 LT OR PUSH2 0x11E JUMPI POP DUP6 DUP2 MSTORE DUP3 DUP7 MSTORE SWAP3 MLOAD DUP6 DUP4 ADD DUP2 SWAP1 MSTORE DUP6 SWAP5 SWAP4 DUP6 ADD SWAP4 SWAP3 SWAP1 SWAP2 JUMPDEST DUP3 DUP2 LT PUSH2 0xFE JUMPI POP POP POP POP SUB SWAP1 RETURN JUMPDEST DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 MSTORE DUP7 SWAP6 POP SWAP4 DUP2 ADD SWAP4 SWAP3 DUP2 ADD SWAP3 PUSH1 0x1 ADD PUSH2 0xEF JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x41 SWAP1 MSTORE PUSH1 0x24 DUP3 REVERT JUMPDEST DUP4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 MSTORE SWAP1 SWAP4 ADD SWAP3 PUSH1 0x1 SWAP3 DUP4 ADD SWAP3 ADD PUSH2 0xAA JUMP JUMPDEST POP DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x14E JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x14E JUMPI CALLER DUP3 MSTORE PUSH32 0x83ED3BA29C1D52058C877DF3EBD264CF957C42EF7764387349BE0CCF6DF0B63B PUSH1 0x20 SWAP1 DUP2 MSTORE SWAP2 DUP2 SWAP1 KECCAK256 SLOAD SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE RETURN JUMPDEST POP DUP3 SWAP1 CALLVALUE PUSH2 0x31E JUMPI PUSH1 0x20 SWAP2 DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x31A JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 DUP2 AND SWAP5 SWAP2 SWAP3 SWAP1 DUP6 SWAP1 SUB PUSH2 0x316 JUMPI DUP5 DUP7 MSTORE PUSH32 0x83ED3BA29C1D52058C877DF3EBD264CF957C42EF7764387349BE0CCF6DF0B63B SWAP3 DUP4 DUP4 MSTORE DUP1 DUP6 DUP9 KECCAK256 SLOAD AND DUP1 ISZERO SWAP1 DUP2 ISZERO PUSH2 0x30C JUMPI JUMPDEST POP ISZERO PUSH2 0x2CA JUMPI DUP6 DUP8 MSTORE DUP4 DUP4 MSTORE DUP5 DUP8 KECCAK256 SLOAD AND ISZERO PUSH2 0x222 JUMPI DUP6 DUP1 RETURN JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0x83ED3BA29C1D52058C877DF3EBD264CF957C42EF7764387349BE0CCF6DF0B63C PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD SWAP2 PUSH9 0x10000000000000000 DUP4 LT ISZERO PUSH2 0x2B7 JUMPI PUSH1 0x1 DUP4 ADD DUP1 DUP4 SSTORE DUP4 LT ISZERO PUSH2 0x2A4 JUMPI POP DUP7 MSTORE DUP2 DUP7 KECCAK256 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND DUP7 OR SWAP1 SWAP2 SSTORE SWAP4 DUP6 MSTORE MSTORE DUP3 KECCAK256 DUP1 SLOAD SWAP1 SWAP2 AND CALLER OR SWAP1 SSTORE DUP2 DUP1 DUP1 DUP1 DUP1 DUP6 DUP1 RETURN JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP9 MSTORE PUSH1 0x32 SWAP1 MSTORE PUSH1 0x24 DUP8 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP9 MSTORE PUSH1 0x41 SWAP1 MSTORE PUSH1 0x24 DUP8 REVERT JUMPDEST POP PUSH1 0x64 SWAP2 DUP5 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x44657669636520616C7265616479207265676973746572656400000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 POP CALLER EQ DUP9 PUSH2 0x208 JUMP JUMPDEST DUP6 DUP1 REVERT JUMPDEST DUP4 DUP1 REVERT JUMPDEST DUP3 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP CALLVALUE PUSH2 0x31E JUMPI DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x31E JUMPI CALLER DUP4 MSTORE PUSH32 0x83ED3BA29C1D52058C877DF3EBD264CF957C42EF7764387349BE0CCF6DF0B63B PUSH1 0x20 SWAP1 DUP2 MSTORE SWAP3 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO ISZERO DUP2 MSTORE RETURN INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG0 DUP4 0xB5 SWAP1 0xE1 PUSH18 0x35BBEB7F75D37CD3651E6C164AE2412E423C CREATE2 SELFDESTRUCT 0xFC 0x1E PUSH28 0xABD03B64736F6C634300081200330000000000000000000000000000 ","sourceMap":"146:221:10:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1224:10:11;146:221:10;;;;582:16:11;146:221:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;146:221:10;;;;;-1:-1:-1;;146:221:10;;;;;;;;;;;;;-1:-1:-1;146:221:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;146:221:10;;;;;-1:-1:-1;146:221:10;;;;;;;;1207:16:11;146:221:10;;;;-1:-1:-1;;;146:221:10;;;;;;;;;;;-1:-1:-1;;;;;146:221:10;;;;;;;1207:16:11;146:221:10;;;;;;;;;;;;;;;;;;;;;;;;1039:10:11;146:221:10;;1918:40:15;146:221:10;;;;;;;;;;;-1:-1:-1;;;;;146:221:10;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;146:221:10;;;;;;;;;;;;;;;;;1918:40:15;146:221:10;;;;;;;;;;395:39:11;;:82;;;;;146:221:10;;;;;;;;;;;;;;;;527:39:11;524:166;;146:221:10;;;524:166:11;599:10;146:221:10;;;;582:16:11;146:221:10;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;146:221:10;;;;;;;;-1:-1:-1;;;;;;146:221:10;;;;;;;;;;;;;;;;;;;599:10:11;146:221:10;;;524:166:11;;;;;146:221:10;;;;-1:-1:-1;;;146:221:10;;;;;;;;;-1:-1:-1;;;146:221:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;395:82:11;467:10;;;438:39;395:82;;;146:221:10;;;;;;;;;;;;;;;;;;;;;;;;;;;853:10:11;146:221:10;;1918:40:15;146:221:10;;;;;;;-1:-1:-1;;;;;146:221:10;837:41:11;;146:221:10;;"},"gasEstimates":{"creation":{"codeDepositCost":"186800","executionCost":"239","totalCost":"187039"},"external":{"assignAddressToSender(address)":"77617","getDeviceOwner()":"2411","getRelatedDevices()":"infinite","isSenderRegistered()":"2359"}},"methodIdentifiers":{"assignAddressToSender(address)":"56a593e3","getDeviceOwner()":"9b8ae375","getRelatedDevices()":"e0f64efc","isSenderRegistered()":"3aafa388"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assignee\",\"type\":\"address\"}],\"name\":\"assignAddressToSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDeviceOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRelatedDevices\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSenderRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LeafWalletRegistryBase.sol\":\"LeafWalletRegistryBasic\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/ILeafWalletRegistryBasic.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport \\\"./ILeafWalletRegistryCore.sol\\\";\\r\\n\\r\\ninterface ILeafWalletRegistryBasic is ILeafWalletRegistryCore {\\r\\n    function assignAddressToSender(address assignee)  external;\\r\\n}\\r\\n\",\"keccak256\":\"0x51f43c06757d8634318e7484b953b6210a338771c4b2818d7440c3676513c21a\",\"license\":\"MIT\"},\"contracts/ILeafWalletRegistryCore.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\ninterface ILeafWalletRegistryCore {\\r\\n    function isSenderRegistered() external view returns (bool);\\r\\n    function getDeviceOwner() external view returns (address);\\r\\n    function getRelatedDevices() external view returns (address[] memory);\\r\\n}\",\"keccak256\":\"0x3c21ce0ba8cfdd89401a502d15673006dbd41aeee58211c53fc33c2e187adbec\",\"license\":\"MIT\"},\"contracts/LeafWalletRegistryBase.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport \\\"./ILeafWalletRegistryBasic.sol\\\";\\r\\nimport \\\"./LeafWalletRegistryCore.sol\\\";\\r\\n\\r\\ncontract LeafWalletRegistryBasic is ILeafWalletRegistryBasic,LeafWalletRegistryCore {\\r\\n    \\r\\n    function assignAddressToSender(address assignee) public override{\\r\\n        _assignAddressToSender(assignee);\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n    \",\"keccak256\":\"0xfef1f80113465b8374f9b17fdb6b7735ed07e6bb67dd8001b3b6d2dcd90d638c\",\"license\":\"MIT\"},\"contracts/LeafWalletRegistryCore.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport \\\"./ILeafWalletRegistryCore.sol\\\";\\r\\nimport {LeafWalletStorage,StorageHandler} from  \\\"./SusuwatariStorage.sol\\\";\\r\\n\\r\\ncontract LeafWalletRegistryCore is ILeafWalletRegistryCore,StorageHandler {\\r\\n\\r\\n    \\r\\n\\r\\n    function _assignAddressToSender(address assignee) internal{\\r\\n        LeafWalletStorage storage lw = lw();\\r\\n        require(lw._deviceOwner[assignee] == address(0) || lw._deviceOwner[assignee] == msg.sender,\\\"Device already registered\\\");\\r\\n     \\r\\n        if(lw._deviceOwner[assignee] == address(0)){\\r\\n            lw._ownerDevices[msg.sender].push(assignee);\\r\\n            lw._deviceOwner[assignee] = msg.sender;\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    function isSenderRegistered() public view override returns (bool) {\\r\\n        LeafWalletStorage storage lw = lw();\\r\\n        return lw._deviceOwner[msg.sender] != address(0);\\r\\n    }\\r\\n\\r\\n    function getDeviceOwner() public view override returns (address) {\\r\\n        LeafWalletStorage storage lw = lw();\\r\\n        return lw._deviceOwner[msg.sender];\\r\\n    }\\r\\n\\r\\n    function getRelatedDevices() public view override returns (address[] memory) {\\r\\n        LeafWalletStorage storage lw = lw();\\r\\n        return lw._ownerDevices[msg.sender];\\r\\n    }\\r\\n\\r\\n\\r\\n    \\r\\n\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n    \",\"keccak256\":\"0xff10bf2d25fd7de2410411975b7ac4a8bdb2c829a94b91fbed4426a44a65438b\",\"license\":\"MIT\"},\"contracts/SusuwatariStorage.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport {LibDiamond} from \\\"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\\\";\\r\\n\\r\\nbytes32 constant SUSUWATARI_STORAGE_POSITION = keccak256(\\\"susuwatari.contract.storage\\\");\\r\\nbytes32 constant LEAFWALLET_STORAGE_POSITION = keccak256(\\\"leafwallet.contract.storage\\\");\\r\\n\\r\\nstruct OwnableStorage {\\r\\n\\r\\n    address _owner;\\r\\n}\\r\\n\\r\\n\\r\\nstruct LeafWalletStorage {\\r\\n    mapping(address => address) _deviceOwner;\\r\\n    mapping(address => address[]) _ownerDevices;\\r\\n    mapping(address => uint256) _deviceActivationCodes;\\r\\n}\\r\\n\\r\\n\\r\\n    struct Susu {\\r\\n        uint256 tokenId;\\r\\n        string originLocation;\\r\\n        string currentLocation;\\r\\n        string destination;\\r\\n        string message;\\r\\n        address carrier;\\r\\n        uint256 dropCooldownTime;\\r\\n    }\\r\\n    \\r\\n    //slotstate contains: 1. slot array, an element of slotarray has: [susutokenid, dropCooldownTime] 2. maxSlotCount(int) 3.  list of owned susus (nft)\\r\\n    struct SusuwatariStorage {\\r\\n        mapping(address => uint256) maxSlotCount;\\r\\n        address[] susuOwners;\\r\\n        mapping(uint256 => Susu) tokenIdToSusu;\\r\\n        bool isInitialized;\\r\\n        mapping(uint256 => address) baggedSusus; \\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n\\r\\ncontract StorageHandler {\\r\\n    \\r\\n    function susu() internal pure returns (SusuwatariStorage storage cs) {\\r\\n        bytes32 position = SUSUWATARI_STORAGE_POSITION;\\r\\n        assembly {\\r\\n           cs.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function os() internal pure returns (OwnableStorage storage cs) {\\r\\n        bytes32 position = keccak256(\\\"ownable.contract.storage\\\");\\r\\n        assembly {\\r\\n           cs.slot := position\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function ds() internal pure returns (LibDiamond.DiamondStorage storage) {\\r\\n        return LibDiamond.diamondStorage();\\r\\n    }\\r\\n\\r\\n    \\r\\n    function lw() internal pure returns (LeafWalletStorage storage cs) {\\r\\n        bytes32 position = keccak256(\\\"leafwallet.contract.storage\\\");\\r\\n        assembly {\\r\\n           cs.slot := position\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0x63d24fb7415d1311c310f32e8ef03a9d657e7fc8829afbbc342feed9b30b6c48\",\"license\":\"MIT\"},\"hardhat-deploy/solc_0.8/diamond/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0xc00c16bfa30a3fa5f3dc684f7f8ba62c259962b25f647d9588739458989717fc\",\"license\":\"MIT\"},\"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);            \\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress != _facetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(_facetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n        enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }    \\n\\n\\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n        // an immutable function is a function defined directly in a diamond\\n        require(_facetAddress != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\");\\n        } else {\\n            require(_calldata.length > 0, \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\");\\n            if (_init != address(this)) {\\n                enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x2205345e83eb86f5281f159a9215a096cb6d404782619f9b8e9d7a4a46c32a37\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/LeafWalletRegistryCore.sol":{"LeafWalletRegistryCore":{"abi":[{"inputs":[],"name":"getDeviceOwner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getRelatedDevices","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isSenderRegistered","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"608080604052346100165761021c908161001c8239f35b600080fdfe6080604090808252600436101561001557600080fd5b600090813560e01c9081633aafa38814610194575080639b8ae3751461013f5763e0f64efc1461004457600080fd5b3461013c578060031936011261013c573381526020907f83ed3ba29c1d52058c877df3ebd264cf957c42ef7764387349be0ccf6df0b63c825282812091835191828285549182815201908195835283832090835b8582821061011f5750505050839003601f01601f191683019467ffffffffffffffff86118487101761010b5785815282865292518583018190528594938501939290915b8281106100eb57505050500390f35b83516001600160a01b0316855286955093810193928101926001016100dc565b634e487b7160e01b82526041600452602482fd5b83546001600160a01b031685529093019260019283019201610098565b80fd5b5090346101905781600319360112610190573382527f83ed3ba29c1d52058c877df3ebd264cf957c42ef7764387349be0ccf6df0b63b6020908152918190205490516001600160a01b039091168152f35b5080fd5b905082346101e257826003193601126101e2573383527f83ed3ba29c1d52058c877df3ebd264cf957c42ef7764387349be0ccf6df0b63b60209081529220546001600160a01b031615158152f35b8280fdfea264697066735822122095e8a56331f2d8285467c40034991234be50b36b8e69348c2069d06b0d0a139f64736f6c63430008120033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH2 0x16 JUMPI PUSH2 0x21C SWAP1 DUP2 PUSH2 0x1C DUP3 CODECOPY RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 SWAP1 DUP1 DUP3 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x15 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP1 DUP2 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x3AAFA388 EQ PUSH2 0x194 JUMPI POP DUP1 PUSH4 0x9B8AE375 EQ PUSH2 0x13F JUMPI PUSH4 0xE0F64EFC EQ PUSH2 0x44 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x13C JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x13C JUMPI CALLER DUP2 MSTORE PUSH1 0x20 SWAP1 PUSH32 0x83ED3BA29C1D52058C877DF3EBD264CF957C42EF7764387349BE0CCF6DF0B63C DUP3 MSTORE DUP3 DUP2 KECCAK256 SWAP2 DUP4 MLOAD SWAP2 DUP3 DUP3 DUP6 SLOAD SWAP2 DUP3 DUP2 MSTORE ADD SWAP1 DUP2 SWAP6 DUP4 MSTORE DUP4 DUP4 KECCAK256 SWAP1 DUP4 JUMPDEST DUP6 DUP3 DUP3 LT PUSH2 0x11F JUMPI POP POP POP POP DUP4 SWAP1 SUB PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP4 ADD SWAP5 PUSH8 0xFFFFFFFFFFFFFFFF DUP7 GT DUP5 DUP8 LT OR PUSH2 0x10B JUMPI DUP6 DUP2 MSTORE DUP3 DUP7 MSTORE SWAP3 MLOAD DUP6 DUP4 ADD DUP2 SWAP1 MSTORE DUP6 SWAP5 SWAP4 DUP6 ADD SWAP4 SWAP3 SWAP1 SWAP2 JUMPDEST DUP3 DUP2 LT PUSH2 0xEB JUMPI POP POP POP POP SUB SWAP1 RETURN JUMPDEST DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 MSTORE DUP7 SWAP6 POP SWAP4 DUP2 ADD SWAP4 SWAP3 DUP2 ADD SWAP3 PUSH1 0x1 ADD PUSH2 0xDC JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP3 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP3 REVERT JUMPDEST DUP4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 MSTORE SWAP1 SWAP4 ADD SWAP3 PUSH1 0x1 SWAP3 DUP4 ADD SWAP3 ADD PUSH2 0x98 JUMP JUMPDEST DUP1 REVERT JUMPDEST POP SWAP1 CALLVALUE PUSH2 0x190 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x190 JUMPI CALLER DUP3 MSTORE PUSH32 0x83ED3BA29C1D52058C877DF3EBD264CF957C42EF7764387349BE0CCF6DF0B63B PUSH1 0x20 SWAP1 DUP2 MSTORE SWAP2 DUP2 SWAP1 KECCAK256 SLOAD SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE RETURN JUMPDEST POP DUP1 REVERT JUMPDEST SWAP1 POP DUP3 CALLVALUE PUSH2 0x1E2 JUMPI DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1E2 JUMPI CALLER DUP4 MSTORE PUSH32 0x83ED3BA29C1D52058C877DF3EBD264CF957C42EF7764387349BE0CCF6DF0B63B PUSH1 0x20 SWAP1 DUP2 MSTORE SWAP3 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST DUP3 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP6 0xE8 0xA5 PUSH4 0x31F2D828 SLOAD PUSH8 0xC40034991234BE50 0xB3 PUSH12 0x8E69348C2069D06B0D0A139F PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"181:1079:11:-:0;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"6080604090808252600436101561001557600080fd5b600090813560e01c9081633aafa38814610194575080639b8ae3751461013f5763e0f64efc1461004457600080fd5b3461013c578060031936011261013c573381526020907f83ed3ba29c1d52058c877df3ebd264cf957c42ef7764387349be0ccf6df0b63c825282812091835191828285549182815201908195835283832090835b8582821061011f5750505050839003601f01601f191683019467ffffffffffffffff86118487101761010b5785815282865292518583018190528594938501939290915b8281106100eb57505050500390f35b83516001600160a01b0316855286955093810193928101926001016100dc565b634e487b7160e01b82526041600452602482fd5b83546001600160a01b031685529093019260019283019201610098565b80fd5b5090346101905781600319360112610190573382527f83ed3ba29c1d52058c877df3ebd264cf957c42ef7764387349be0ccf6df0b63b6020908152918190205490516001600160a01b039091168152f35b5080fd5b905082346101e257826003193601126101e2573383527f83ed3ba29c1d52058c877df3ebd264cf957c42ef7764387349be0ccf6df0b63b60209081529220546001600160a01b031615158152f35b8280fdfea264697066735822122095e8a56331f2d8285467c40034991234be50b36b8e69348c2069d06b0d0a139f64736f6c63430008120033","opcodes":"PUSH1 0x80 PUSH1 0x40 SWAP1 DUP1 DUP3 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x15 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP1 DUP2 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x3AAFA388 EQ PUSH2 0x194 JUMPI POP DUP1 PUSH4 0x9B8AE375 EQ PUSH2 0x13F JUMPI PUSH4 0xE0F64EFC EQ PUSH2 0x44 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x13C JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x13C JUMPI CALLER DUP2 MSTORE PUSH1 0x20 SWAP1 PUSH32 0x83ED3BA29C1D52058C877DF3EBD264CF957C42EF7764387349BE0CCF6DF0B63C DUP3 MSTORE DUP3 DUP2 KECCAK256 SWAP2 DUP4 MLOAD SWAP2 DUP3 DUP3 DUP6 SLOAD SWAP2 DUP3 DUP2 MSTORE ADD SWAP1 DUP2 SWAP6 DUP4 MSTORE DUP4 DUP4 KECCAK256 SWAP1 DUP4 JUMPDEST DUP6 DUP3 DUP3 LT PUSH2 0x11F JUMPI POP POP POP POP DUP4 SWAP1 SUB PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP4 ADD SWAP5 PUSH8 0xFFFFFFFFFFFFFFFF DUP7 GT DUP5 DUP8 LT OR PUSH2 0x10B JUMPI DUP6 DUP2 MSTORE DUP3 DUP7 MSTORE SWAP3 MLOAD DUP6 DUP4 ADD DUP2 SWAP1 MSTORE DUP6 SWAP5 SWAP4 DUP6 ADD SWAP4 SWAP3 SWAP1 SWAP2 JUMPDEST DUP3 DUP2 LT PUSH2 0xEB JUMPI POP POP POP POP SUB SWAP1 RETURN JUMPDEST DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 MSTORE DUP7 SWAP6 POP SWAP4 DUP2 ADD SWAP4 SWAP3 DUP2 ADD SWAP3 PUSH1 0x1 ADD PUSH2 0xDC JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP3 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP3 REVERT JUMPDEST DUP4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 MSTORE SWAP1 SWAP4 ADD SWAP3 PUSH1 0x1 SWAP3 DUP4 ADD SWAP3 ADD PUSH2 0x98 JUMP JUMPDEST DUP1 REVERT JUMPDEST POP SWAP1 CALLVALUE PUSH2 0x190 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x190 JUMPI CALLER DUP3 MSTORE PUSH32 0x83ED3BA29C1D52058C877DF3EBD264CF957C42EF7764387349BE0CCF6DF0B63B PUSH1 0x20 SWAP1 DUP2 MSTORE SWAP2 DUP2 SWAP1 KECCAK256 SLOAD SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE RETURN JUMPDEST POP DUP1 REVERT JUMPDEST SWAP1 POP DUP3 CALLVALUE PUSH2 0x1E2 JUMPI DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1E2 JUMPI CALLER DUP4 MSTORE PUSH32 0x83ED3BA29C1D52058C877DF3EBD264CF957C42EF7764387349BE0CCF6DF0B63B PUSH1 0x20 SWAP1 DUP2 MSTORE SWAP3 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST DUP3 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP6 0xE8 0xA5 PUSH4 0x31F2D828 SLOAD PUSH8 0xC40034991234BE50 0xB3 PUSH12 0x8E69348C2069D06B0D0A139F PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"181:1079:11:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1224:10;181:1079;;;;1207:16;181:1079;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;181:1079:11;;;;;-1:-1:-1;;181:1079:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;181:1079:11;;;;;-1:-1:-1;181:1079:11;;;;;;;;1207:16;181:1079;;;;-1:-1:-1;;;181:1079:11;;;;;;;;;;;-1:-1:-1;;;;;181:1079:11;;;;;;;1207:16;181:1079;;;;;;;;;;;;;;;;;;;;;;;;1039:10;181:1079;;1918:40:15;181:1079:11;;;;;;;;;;;-1:-1:-1;;;;;181:1079:11;;;;;;;;;;;;;;;;;;;;;;;;;853:10;181:1079;;1918:40:15;181:1079:11;;;;;;;-1:-1:-1;;;;;181:1079:11;837:41;;181:1079;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"108000","executionCost":"159","totalCost":"108159"},"external":{"getDeviceOwner()":"2386","getRelatedDevices()":"infinite","isSenderRegistered()":"2353"},"internal":{"_assignAddressToSender(address)":"infinite"}},"methodIdentifiers":{"getDeviceOwner()":"9b8ae375","getRelatedDevices()":"e0f64efc","isSenderRegistered()":"3aafa388"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"getDeviceOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRelatedDevices\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSenderRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LeafWalletRegistryCore.sol\":\"LeafWalletRegistryCore\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/ILeafWalletRegistryCore.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\ninterface ILeafWalletRegistryCore {\\r\\n    function isSenderRegistered() external view returns (bool);\\r\\n    function getDeviceOwner() external view returns (address);\\r\\n    function getRelatedDevices() external view returns (address[] memory);\\r\\n}\",\"keccak256\":\"0x3c21ce0ba8cfdd89401a502d15673006dbd41aeee58211c53fc33c2e187adbec\",\"license\":\"MIT\"},\"contracts/LeafWalletRegistryCore.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport \\\"./ILeafWalletRegistryCore.sol\\\";\\r\\nimport {LeafWalletStorage,StorageHandler} from  \\\"./SusuwatariStorage.sol\\\";\\r\\n\\r\\ncontract LeafWalletRegistryCore is ILeafWalletRegistryCore,StorageHandler {\\r\\n\\r\\n    \\r\\n\\r\\n    function _assignAddressToSender(address assignee) internal{\\r\\n        LeafWalletStorage storage lw = lw();\\r\\n        require(lw._deviceOwner[assignee] == address(0) || lw._deviceOwner[assignee] == msg.sender,\\\"Device already registered\\\");\\r\\n     \\r\\n        if(lw._deviceOwner[assignee] == address(0)){\\r\\n            lw._ownerDevices[msg.sender].push(assignee);\\r\\n            lw._deviceOwner[assignee] = msg.sender;\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    function isSenderRegistered() public view override returns (bool) {\\r\\n        LeafWalletStorage storage lw = lw();\\r\\n        return lw._deviceOwner[msg.sender] != address(0);\\r\\n    }\\r\\n\\r\\n    function getDeviceOwner() public view override returns (address) {\\r\\n        LeafWalletStorage storage lw = lw();\\r\\n        return lw._deviceOwner[msg.sender];\\r\\n    }\\r\\n\\r\\n    function getRelatedDevices() public view override returns (address[] memory) {\\r\\n        LeafWalletStorage storage lw = lw();\\r\\n        return lw._ownerDevices[msg.sender];\\r\\n    }\\r\\n\\r\\n\\r\\n    \\r\\n\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n    \",\"keccak256\":\"0xff10bf2d25fd7de2410411975b7ac4a8bdb2c829a94b91fbed4426a44a65438b\",\"license\":\"MIT\"},\"contracts/SusuwatariStorage.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport {LibDiamond} from \\\"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\\\";\\r\\n\\r\\nbytes32 constant SUSUWATARI_STORAGE_POSITION = keccak256(\\\"susuwatari.contract.storage\\\");\\r\\nbytes32 constant LEAFWALLET_STORAGE_POSITION = keccak256(\\\"leafwallet.contract.storage\\\");\\r\\n\\r\\nstruct OwnableStorage {\\r\\n\\r\\n    address _owner;\\r\\n}\\r\\n\\r\\n\\r\\nstruct LeafWalletStorage {\\r\\n    mapping(address => address) _deviceOwner;\\r\\n    mapping(address => address[]) _ownerDevices;\\r\\n    mapping(address => uint256) _deviceActivationCodes;\\r\\n}\\r\\n\\r\\n\\r\\n    struct Susu {\\r\\n        uint256 tokenId;\\r\\n        string originLocation;\\r\\n        string currentLocation;\\r\\n        string destination;\\r\\n        string message;\\r\\n        address carrier;\\r\\n        uint256 dropCooldownTime;\\r\\n    }\\r\\n    \\r\\n    //slotstate contains: 1. slot array, an element of slotarray has: [susutokenid, dropCooldownTime] 2. maxSlotCount(int) 3.  list of owned susus (nft)\\r\\n    struct SusuwatariStorage {\\r\\n        mapping(address => uint256) maxSlotCount;\\r\\n        address[] susuOwners;\\r\\n        mapping(uint256 => Susu) tokenIdToSusu;\\r\\n        bool isInitialized;\\r\\n        mapping(uint256 => address) baggedSusus; \\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n\\r\\ncontract StorageHandler {\\r\\n    \\r\\n    function susu() internal pure returns (SusuwatariStorage storage cs) {\\r\\n        bytes32 position = SUSUWATARI_STORAGE_POSITION;\\r\\n        assembly {\\r\\n           cs.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function os() internal pure returns (OwnableStorage storage cs) {\\r\\n        bytes32 position = keccak256(\\\"ownable.contract.storage\\\");\\r\\n        assembly {\\r\\n           cs.slot := position\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function ds() internal pure returns (LibDiamond.DiamondStorage storage) {\\r\\n        return LibDiamond.diamondStorage();\\r\\n    }\\r\\n\\r\\n    \\r\\n    function lw() internal pure returns (LeafWalletStorage storage cs) {\\r\\n        bytes32 position = keccak256(\\\"leafwallet.contract.storage\\\");\\r\\n        assembly {\\r\\n           cs.slot := position\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0x63d24fb7415d1311c310f32e8ef03a9d657e7fc8829afbbc342feed9b30b6c48\",\"license\":\"MIT\"},\"hardhat-deploy/solc_0.8/diamond/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0xc00c16bfa30a3fa5f3dc684f7f8ba62c259962b25f647d9588739458989717fc\",\"license\":\"MIT\"},\"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);            \\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress != _facetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(_facetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n        enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }    \\n\\n\\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n        // an immutable function is a function defined directly in a diamond\\n        require(_facetAddress != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\");\\n        } else {\\n            require(_calldata.length > 0, \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\");\\n            if (_init != address(this)) {\\n                enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x2205345e83eb86f5281f159a9215a096cb6d404782619f9b8e9d7a4a46c32a37\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/LibSusuwatari.sol":{"LibSusuwatari":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"6080806040523461001a576103c89081610020823930815050f35b600080fdfe604060808152600436101561001357600080fd5b6000803560e01c63a2a298561461002957600080fd5b6020806003193601126102a957600435916100426102ad565b606081528261004f6102e3565b91015280918194600195868601908154905b8181106102635750601f61007487610366565b9684519782199283910116880188811067ffffffffffffffff82111761024f578a949392916100ab918798999b9752808a52610366565b01368789013787885b8281106101e95750505081906100c86102e3565b936002899101925b610150575b505050506100e16102ad565b93845282840190815281519483865260a0860194519460808588015285518091528460c088019601915b81811061013d57505090518051838701529283015160608601525001516001600160a01b031660808301528190039150f35b825187529585019591850191880161010b565b87989695949398518110156101de57610169818961037e565b51808852838752858820600501546001600160a01b0391908216331461019f57505061019490610313565b8893949596986100d0565b856101c69592969798999a9b50819493505282895287526006868920015487860152610338565b90549060031b1c1682820152853880809796976100d5565b9792939495976100d5565b90919293506101fd81859a9897969a610338565b90543360039290921b1c6001600160a01b03161461022e575b61021f90610313565b908993929198949596986100b4565b90610247818361024161021f948c61037e565b52610313565b919050610216565b634e487b7160e01b88526041600452602488fd5b61026d8184610338565b90543360039290921b1c6001600160a01b031614610294575b61028f90610313565b610061565b956102a161028f91610313565b969050610286565b5080fd5b604051906040820182811067ffffffffffffffff8211176102cd57604052565b634e487b7160e01b600052604160045260246000fd5b604051906060820182811067ffffffffffffffff8211176102cd5760405260006040838281528260208201520152565b60001981146103225760010190565b634e487b7160e01b600052601160045260246000fd5b80548210156103505760005260206000200190600090565b634e487b7160e01b600052603260045260246000fd5b67ffffffffffffffff81116102cd5760051b60200190565b80518210156103505760209160051b01019056fea2646970667358221220386d1a4690b61e51da34d29888a6c55bda28e208001581e050587513a35322c464736f6c63430008120033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH2 0x1A JUMPI PUSH2 0x3C8 SWAP1 DUP2 PUSH2 0x20 DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x40 PUSH1 0x80 DUP2 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 CALLDATALOAD PUSH1 0xE0 SHR PUSH4 0xA2A29856 EQ PUSH2 0x29 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x2A9 JUMPI PUSH1 0x4 CALLDATALOAD SWAP2 PUSH2 0x42 PUSH2 0x2AD JUMP JUMPDEST PUSH1 0x60 DUP2 MSTORE DUP3 PUSH2 0x4F PUSH2 0x2E3 JUMP JUMPDEST SWAP2 ADD MSTORE DUP1 SWAP2 DUP2 SWAP5 PUSH1 0x1 SWAP6 DUP7 DUP7 ADD SWAP1 DUP2 SLOAD SWAP1 JUMPDEST DUP2 DUP2 LT PUSH2 0x263 JUMPI POP PUSH1 0x1F PUSH2 0x74 DUP8 PUSH2 0x366 JUMP JUMPDEST SWAP7 DUP5 MLOAD SWAP8 DUP3 NOT SWAP3 DUP4 SWAP2 ADD AND DUP9 ADD DUP9 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x24F JUMPI DUP11 SWAP5 SWAP4 SWAP3 SWAP2 PUSH2 0xAB SWAP2 DUP8 SWAP9 SWAP10 SWAP12 SWAP8 MSTORE DUP1 DUP11 MSTORE PUSH2 0x366 JUMP JUMPDEST ADD CALLDATASIZE DUP8 DUP10 ADD CALLDATACOPY DUP8 DUP9 JUMPDEST DUP3 DUP2 LT PUSH2 0x1E9 JUMPI POP POP POP DUP2 SWAP1 PUSH2 0xC8 PUSH2 0x2E3 JUMP JUMPDEST SWAP4 PUSH1 0x2 DUP10 SWAP2 ADD SWAP3 JUMPDEST PUSH2 0x150 JUMPI JUMPDEST POP POP POP POP PUSH2 0xE1 PUSH2 0x2AD JUMP JUMPDEST SWAP4 DUP5 MSTORE DUP3 DUP5 ADD SWAP1 DUP2 MSTORE DUP2 MLOAD SWAP5 DUP4 DUP7 MSTORE PUSH1 0xA0 DUP7 ADD SWAP5 MLOAD SWAP5 PUSH1 0x80 DUP6 DUP9 ADD MSTORE DUP6 MLOAD DUP1 SWAP2 MSTORE DUP5 PUSH1 0xC0 DUP9 ADD SWAP7 ADD SWAP2 JUMPDEST DUP2 DUP2 LT PUSH2 0x13D JUMPI POP POP SWAP1 MLOAD DUP1 MLOAD DUP4 DUP8 ADD MSTORE SWAP3 DUP4 ADD MLOAD PUSH1 0x60 DUP7 ADD MSTORE POP ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x80 DUP4 ADD MSTORE DUP2 SWAP1 SUB SWAP2 POP RETURN JUMPDEST DUP3 MLOAD DUP8 MSTORE SWAP6 DUP6 ADD SWAP6 SWAP2 DUP6 ADD SWAP2 DUP9 ADD PUSH2 0x10B JUMP JUMPDEST DUP8 SWAP9 SWAP7 SWAP6 SWAP5 SWAP4 SWAP9 MLOAD DUP2 LT ISZERO PUSH2 0x1DE JUMPI PUSH2 0x169 DUP2 DUP10 PUSH2 0x37E JUMP JUMPDEST MLOAD DUP1 DUP9 MSTORE DUP4 DUP8 MSTORE DUP6 DUP9 KECCAK256 PUSH1 0x5 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 DUP3 AND CALLER EQ PUSH2 0x19F JUMPI POP POP PUSH2 0x194 SWAP1 PUSH2 0x313 JUMP JUMPDEST DUP9 SWAP4 SWAP5 SWAP6 SWAP7 SWAP9 PUSH2 0xD0 JUMP JUMPDEST DUP6 PUSH2 0x1C6 SWAP6 SWAP3 SWAP7 SWAP8 SWAP9 SWAP10 SWAP11 SWAP12 POP DUP2 SWAP5 SWAP4 POP MSTORE DUP3 DUP10 MSTORE DUP8 MSTORE PUSH1 0x6 DUP7 DUP10 KECCAK256 ADD SLOAD DUP8 DUP7 ADD MSTORE PUSH2 0x338 JUMP JUMPDEST SWAP1 SLOAD SWAP1 PUSH1 0x3 SHL SHR AND DUP3 DUP3 ADD MSTORE DUP6 CODESIZE DUP1 DUP1 SWAP8 SWAP7 SWAP8 PUSH2 0xD5 JUMP JUMPDEST SWAP8 SWAP3 SWAP4 SWAP5 SWAP6 SWAP8 PUSH2 0xD5 JUMP JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 POP PUSH2 0x1FD DUP2 DUP6 SWAP11 SWAP9 SWAP8 SWAP7 SWAP11 PUSH2 0x338 JUMP JUMPDEST SWAP1 SLOAD CALLER PUSH1 0x3 SWAP3 SWAP1 SWAP3 SHL SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x22E JUMPI JUMPDEST PUSH2 0x21F SWAP1 PUSH2 0x313 JUMP JUMPDEST SWAP1 DUP10 SWAP4 SWAP3 SWAP2 SWAP9 SWAP5 SWAP6 SWAP7 SWAP9 PUSH2 0xB4 JUMP JUMPDEST SWAP1 PUSH2 0x247 DUP2 DUP4 PUSH2 0x241 PUSH2 0x21F SWAP5 DUP13 PUSH2 0x37E JUMP JUMPDEST MSTORE PUSH2 0x313 JUMP JUMPDEST SWAP2 SWAP1 POP PUSH2 0x216 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP9 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP9 REVERT JUMPDEST PUSH2 0x26D DUP2 DUP5 PUSH2 0x338 JUMP JUMPDEST SWAP1 SLOAD CALLER PUSH1 0x3 SWAP3 SWAP1 SWAP3 SHL SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x294 JUMPI JUMPDEST PUSH2 0x28F SWAP1 PUSH2 0x313 JUMP JUMPDEST PUSH2 0x61 JUMP JUMPDEST SWAP6 PUSH2 0x2A1 PUSH2 0x28F SWAP2 PUSH2 0x313 JUMP JUMPDEST SWAP7 SWAP1 POP PUSH2 0x286 JUMP JUMPDEST POP DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0x40 DUP3 ADD DUP3 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x2CD JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0x60 DUP3 ADD DUP3 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x2CD JUMPI PUSH1 0x40 MSTORE PUSH1 0x0 PUSH1 0x40 DUP4 DUP3 DUP2 MSTORE DUP3 PUSH1 0x20 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH1 0x0 NOT DUP2 EQ PUSH2 0x322 JUMPI PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 SLOAD DUP3 LT ISZERO PUSH2 0x350 JUMPI PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x2CD JUMPI PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST DUP1 MLOAD DUP3 LT ISZERO PUSH2 0x350 JUMPI PUSH1 0x20 SWAP2 PUSH1 0x5 SHL ADD ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CODESIZE PUSH14 0x1A4690B61E51DA34D29888A6C55B 0xDA 0x28 0xE2 ADDMOD STOP ISZERO DUP2 0xE0 POP PC PUSH22 0x13A35322C464736F6C63430008120033000000000000 ","sourceMap":"253:6500:12:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"allocate_and_zero_memory_struct_struct_Slot":{"entryPoint":739,"id":null,"parameterSlots":0,"returnSlots":1},"allocate_memory":{"entryPoint":685,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_array_uint256_dyn":{"entryPoint":870,"id":null,"parameterSlots":1,"returnSlots":1},"increment_uint256":{"entryPoint":787,"id":null,"parameterSlots":1,"returnSlots":1},"memory_array_index_access_uint256_dyn":{"entryPoint":894,"id":null,"parameterSlots":2,"returnSlots":1},"storage_array_index_access_address_dyn":{"entryPoint":824,"id":null,"parameterSlots":2,"returnSlots":2}},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"604060808152600436101561001357600080fd5b6000803560e01c63a2a298561461002957600080fd5b6020806003193601126102a957600435916100426102ad565b606081528261004f6102e3565b91015280918194600195868601908154905b8181106102635750601f61007487610366565b9684519782199283910116880188811067ffffffffffffffff82111761024f578a949392916100ab918798999b9752808a52610366565b01368789013787885b8281106101e95750505081906100c86102e3565b936002899101925b610150575b505050506100e16102ad565b93845282840190815281519483865260a0860194519460808588015285518091528460c088019601915b81811061013d57505090518051838701529283015160608601525001516001600160a01b031660808301528190039150f35b825187529585019591850191880161010b565b87989695949398518110156101de57610169818961037e565b51808852838752858820600501546001600160a01b0391908216331461019f57505061019490610313565b8893949596986100d0565b856101c69592969798999a9b50819493505282895287526006868920015487860152610338565b90549060031b1c1682820152853880809796976100d5565b9792939495976100d5565b90919293506101fd81859a9897969a610338565b90543360039290921b1c6001600160a01b03161461022e575b61021f90610313565b908993929198949596986100b4565b90610247818361024161021f948c61037e565b52610313565b919050610216565b634e487b7160e01b88526041600452602488fd5b61026d8184610338565b90543360039290921b1c6001600160a01b031614610294575b61028f90610313565b610061565b956102a161028f91610313565b969050610286565b5080fd5b604051906040820182811067ffffffffffffffff8211176102cd57604052565b634e487b7160e01b600052604160045260246000fd5b604051906060820182811067ffffffffffffffff8211176102cd5760405260006040838281528260208201520152565b60001981146103225760010190565b634e487b7160e01b600052601160045260246000fd5b80548210156103505760005260206000200190600090565b634e487b7160e01b600052603260045260246000fd5b67ffffffffffffffff81116102cd5760051b60200190565b80518210156103505760209160051b01019056fea2646970667358221220386d1a4690b61e51da34d29888a6c55bda28e208001581e050587513a35322c464736f6c63430008120033","opcodes":"PUSH1 0x40 PUSH1 0x80 DUP2 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 CALLDATALOAD PUSH1 0xE0 SHR PUSH4 0xA2A29856 EQ PUSH2 0x29 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x2A9 JUMPI PUSH1 0x4 CALLDATALOAD SWAP2 PUSH2 0x42 PUSH2 0x2AD JUMP JUMPDEST PUSH1 0x60 DUP2 MSTORE DUP3 PUSH2 0x4F PUSH2 0x2E3 JUMP JUMPDEST SWAP2 ADD MSTORE DUP1 SWAP2 DUP2 SWAP5 PUSH1 0x1 SWAP6 DUP7 DUP7 ADD SWAP1 DUP2 SLOAD SWAP1 JUMPDEST DUP2 DUP2 LT PUSH2 0x263 JUMPI POP PUSH1 0x1F PUSH2 0x74 DUP8 PUSH2 0x366 JUMP JUMPDEST SWAP7 DUP5 MLOAD SWAP8 DUP3 NOT SWAP3 DUP4 SWAP2 ADD AND DUP9 ADD DUP9 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x24F JUMPI DUP11 SWAP5 SWAP4 SWAP3 SWAP2 PUSH2 0xAB SWAP2 DUP8 SWAP9 SWAP10 SWAP12 SWAP8 MSTORE DUP1 DUP11 MSTORE PUSH2 0x366 JUMP JUMPDEST ADD CALLDATASIZE DUP8 DUP10 ADD CALLDATACOPY DUP8 DUP9 JUMPDEST DUP3 DUP2 LT PUSH2 0x1E9 JUMPI POP POP POP DUP2 SWAP1 PUSH2 0xC8 PUSH2 0x2E3 JUMP JUMPDEST SWAP4 PUSH1 0x2 DUP10 SWAP2 ADD SWAP3 JUMPDEST PUSH2 0x150 JUMPI JUMPDEST POP POP POP POP PUSH2 0xE1 PUSH2 0x2AD JUMP JUMPDEST SWAP4 DUP5 MSTORE DUP3 DUP5 ADD SWAP1 DUP2 MSTORE DUP2 MLOAD SWAP5 DUP4 DUP7 MSTORE PUSH1 0xA0 DUP7 ADD SWAP5 MLOAD SWAP5 PUSH1 0x80 DUP6 DUP9 ADD MSTORE DUP6 MLOAD DUP1 SWAP2 MSTORE DUP5 PUSH1 0xC0 DUP9 ADD SWAP7 ADD SWAP2 JUMPDEST DUP2 DUP2 LT PUSH2 0x13D JUMPI POP POP SWAP1 MLOAD DUP1 MLOAD DUP4 DUP8 ADD MSTORE SWAP3 DUP4 ADD MLOAD PUSH1 0x60 DUP7 ADD MSTORE POP ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x80 DUP4 ADD MSTORE DUP2 SWAP1 SUB SWAP2 POP RETURN JUMPDEST DUP3 MLOAD DUP8 MSTORE SWAP6 DUP6 ADD SWAP6 SWAP2 DUP6 ADD SWAP2 DUP9 ADD PUSH2 0x10B JUMP JUMPDEST DUP8 SWAP9 SWAP7 SWAP6 SWAP5 SWAP4 SWAP9 MLOAD DUP2 LT ISZERO PUSH2 0x1DE JUMPI PUSH2 0x169 DUP2 DUP10 PUSH2 0x37E JUMP JUMPDEST MLOAD DUP1 DUP9 MSTORE DUP4 DUP8 MSTORE DUP6 DUP9 KECCAK256 PUSH1 0x5 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 DUP3 AND CALLER EQ PUSH2 0x19F JUMPI POP POP PUSH2 0x194 SWAP1 PUSH2 0x313 JUMP JUMPDEST DUP9 SWAP4 SWAP5 SWAP6 SWAP7 SWAP9 PUSH2 0xD0 JUMP JUMPDEST DUP6 PUSH2 0x1C6 SWAP6 SWAP3 SWAP7 SWAP8 SWAP9 SWAP10 SWAP11 SWAP12 POP DUP2 SWAP5 SWAP4 POP MSTORE DUP3 DUP10 MSTORE DUP8 MSTORE PUSH1 0x6 DUP7 DUP10 KECCAK256 ADD SLOAD DUP8 DUP7 ADD MSTORE PUSH2 0x338 JUMP JUMPDEST SWAP1 SLOAD SWAP1 PUSH1 0x3 SHL SHR AND DUP3 DUP3 ADD MSTORE DUP6 CODESIZE DUP1 DUP1 SWAP8 SWAP7 SWAP8 PUSH2 0xD5 JUMP JUMPDEST SWAP8 SWAP3 SWAP4 SWAP5 SWAP6 SWAP8 PUSH2 0xD5 JUMP JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 POP PUSH2 0x1FD DUP2 DUP6 SWAP11 SWAP9 SWAP8 SWAP7 SWAP11 PUSH2 0x338 JUMP JUMPDEST SWAP1 SLOAD CALLER PUSH1 0x3 SWAP3 SWAP1 SWAP3 SHL SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x22E JUMPI JUMPDEST PUSH2 0x21F SWAP1 PUSH2 0x313 JUMP JUMPDEST SWAP1 DUP10 SWAP4 SWAP3 SWAP2 SWAP9 SWAP5 SWAP6 SWAP7 SWAP9 PUSH2 0xB4 JUMP JUMPDEST SWAP1 PUSH2 0x247 DUP2 DUP4 PUSH2 0x241 PUSH2 0x21F SWAP5 DUP13 PUSH2 0x37E JUMP JUMPDEST MSTORE PUSH2 0x313 JUMP JUMPDEST SWAP2 SWAP1 POP PUSH2 0x216 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP9 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP9 REVERT JUMPDEST PUSH2 0x26D DUP2 DUP5 PUSH2 0x338 JUMP JUMPDEST SWAP1 SLOAD CALLER PUSH1 0x3 SWAP3 SWAP1 SWAP3 SHL SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x294 JUMPI JUMPDEST PUSH2 0x28F SWAP1 PUSH2 0x313 JUMP JUMPDEST PUSH2 0x61 JUMP JUMPDEST SWAP6 PUSH2 0x2A1 PUSH2 0x28F SWAP2 PUSH2 0x313 JUMP JUMPDEST SWAP7 SWAP1 POP PUSH2 0x286 JUMP JUMPDEST POP DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0x40 DUP3 ADD DUP3 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x2CD JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0x60 DUP3 ADD DUP3 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x2CD JUMPI PUSH1 0x40 MSTORE PUSH1 0x0 PUSH1 0x40 DUP4 DUP3 DUP2 MSTORE DUP3 PUSH1 0x20 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH1 0x0 NOT DUP2 EQ PUSH2 0x322 JUMPI PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 SLOAD DUP3 LT ISZERO PUSH2 0x350 JUMPI PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x2CD JUMPI PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST DUP1 MLOAD DUP3 LT ISZERO PUSH2 0x350 JUMPI PUSH1 0x20 SWAP2 PUSH1 0x5 SHL ADD ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CODESIZE PUSH14 0x1A4690B61E51DA34D29888A6C55B 0xDA 0x28 0xE2 ADDMOD STOP ISZERO DUP2 0xE0 POP PC PUSH22 0x13A35322C464736F6C63430008120033000000000000 ","sourceMap":"253:6500:12:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;2880:27;2919:13;;253:6500;;2938:14;;;;253:6500;;;2914:151;2934:25;;;;;;253:6500;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;3176:17;3205:13;3220:25;;;;;;253:6500;;;;;;;:::i;:::-;3414:13;3516:17;3414:13;3516:17;;3409:398;253:6500;;;3409:398;253:6500;;;;;;:::i;:::-;;;;3840:74;;;253:6500;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;253:6500:12;;;;;;;;;;;;;;;;-1:-1:-1;253:6500:12;;-1:-1:-1;;;;;253:6500:12;;;;;;;;;-1:-1:-1;253:6500:12;;;;;;;;;;;;;;;;;;3453:3;253:6500;;;;;;;;3429:22;;;;;3487:14;;;;:::i;:::-;253:6500;;;;;;;;;;3516:34;;253:6500;-1:-1:-1;;;;;253:6500:12;;;;2981:10;3516:48;3512:288;;3453:3;;;;;:::i;:::-;3414:13;;;;;;;;3512:288;253:6500;3724:23;253:6500;;;;;;;;;;;;;;;;;;;3646:43;253:6500;;;3646:43;253:6500;3622:21;;;253:6500;3724:23;:::i;:::-;253:6500;;;;;;;3704:17;;;253:6500;3762:5;;;;;;;;;3429:22;;;;;;;;;3247:3;3281:17;;;;;;;;;;;;;;:::i;:::-;253:6500;;2981:10;253:6500;;;;;;-1:-1:-1;;;;;253:6500:12;3267:31;3263:108;;3247:3;;;;:::i;:::-;3205:13;;;;;;;;;;;;3263:108;3315:22;3352:7;3315:22;;;3247:3;3315:22;;;:::i;:::-;253:6500;3352:7;:::i;:::-;3263:108;;;;;253:6500;-1:-1:-1;;;253:6500:12;;;;;;;;2961:3;2995:17;;;;:::i;:::-;253:6500;;2981:10;253:6500;;;;;;-1:-1:-1;;;;;253:6500:12;2981:31;2977:81;;2961:3;;;;:::i;:::-;2919:13;;2977:81;3029:17;;2961:3;3029:17;;:::i;:::-;2977:81;;;;;253:6500;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;253:6500:12;;;;;;;;;;;;:::o;:::-;-1:-1:-1;;253:6500:12;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;253:6500:12;;-1:-1:-1;253:6500:12;;;-1:-1:-1;253:6500:12;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"193600","executionCost":"infinite","totalCost":"infinite"},"external":{"getCurrentState(SusuwatariStorage storage)":"infinite"},"internal":{"aimInitialSusu(struct SusuwatariStorage storage pointer,uint256,string memory,string memory,string memory)":"infinite","dropSusu(struct SusuwatariStorage storage pointer,uint256,string memory,string memory,string memory)":"infinite","registerMe(struct SusuwatariStorage storage pointer)":"infinite","tryPickupSusu(struct SusuwatariStorage storage pointer,uint256,string memory,string memory,string memory)":"infinite"}},"methodIdentifiers":{"getCurrentState(SusuwatariStorage storage)":"a2a29856"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LibSusuwatari.sol\":\"LibSusuwatari\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/LibSusuwatari.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\n\\r\\nimport {SusuwatariStorage, Susu} from \\\"./SusuwatariStorage.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport \\\"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\\\";\\r\\n\\r\\nlibrary LibSusuwatari{\\r\\n\\r\\n   \\r\\n\\r\\n    \\r\\n    modifier mustExistSusu(SusuwatariStorage storage sus, uint256 tokenId) {\\r\\n        require(tokenId > 0 && tokenId <= sus.susuOwners.length, \\\"The Susuwatari does not exist\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    \\r\\n    modifier mustHaveSusu(SusuwatariStorage storage sus) {\\r\\n    bool hasSusu = false;\\r\\n    \\r\\n    for (uint256 i = 0; i < sus.susuOwners.length; i++) {\\r\\n        if (sus.susuOwners[i] == msg.sender) {\\r\\n            hasSusu = true;\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    require(hasSusu, \\\"Caller does not own any Susuwatari token\\\");\\r\\n    _;\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n    \\r\\n    \\r\\n\\r\\n    modifier mustCarrySusu(SusuwatariStorage storage sus, uint256 tokenId) {\\r\\n    Susu storage susuInstance = sus.tokenIdToSusu[tokenId];\\r\\n    require(susuInstance.carrier == msg.sender, \\\"Caller doesn't carry a Susuwatari Token!\\\");\\r\\n    _;\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\nmodifier isUserRegistered(SusuwatariStorage storage sus){\\r\\n      require(sus.maxSlotCount[msg.sender] > 0, \\\"User is not registered\\\"); \\r\\n          _;\\r\\n}\\r\\n\\r\\n    modifier mustNotCarrySusu(SusuwatariStorage storage sus, uint256 tokenId) { \\r\\n\\r\\n    bool isCarrying = false;\\r\\n    \\r\\n\\r\\n    for (uint256 i = 0; i < sus.susuOwners.length; i++) {\\r\\n        if (sus.tokenIdToSusu[i].carrier == msg.sender) {\\r\\n            isCarrying = true;\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n    require(!isCarrying, \\\"Caller is already carry a Susuwatari Token!\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n \\r\\n\\r\\nmodifier isNotBeingCarriedSusu(SusuwatariStorage storage sus, uint256 tokenId) {\\r\\n    Susu storage su = sus.tokenIdToSusu[tokenId];\\r\\n    require(su.carrier == address(0), \\\"Susu is already being carried!\\\");\\r\\n    _;\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n        modifier mustHaveBagSpace(SusuwatariStorage storage sus) {\\r\\n\\r\\n    bool isCarrying = false;\\r\\n    \\r\\n    for (uint256 i = 0; i < sus.susuOwners.length; i++) {\\r\\n        if (sus.tokenIdToSusu[i].carrier == msg.sender) {\\r\\n            isCarrying = true;\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n    require(isCarrying == false, \\\"Caller is already overburdened\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n  modifier susuMustNotHaveBeenAimed(SusuwatariStorage storage sus, uint256 tokenId) {\\r\\n\\r\\n        \\r\\n    require(sus.susuOwners[tokenId] == msg.sender && sus.tokenIdToSusu[tokenId].carrier == msg.sender, \\\"Caller is not owner\\\");\\r\\n    \\r\\n        _;\\r\\n    }\\r\\n\\r\\n    \\r\\n\\r\\n\\r\\n    struct UserState {\\r\\n        uint256[] ownedTokens;\\r\\n        Slot slot;\\r\\n    }\\r\\n\\r\\n\\r\\n    struct Slot {\\r\\n        uint256 susuTokenId;\\r\\n        uint256 dropCooldownTime;\\r\\n        address ownerAddress;\\r\\n    }\\r\\n\\r\\n\\r\\nfunction getCurrentState(SusuwatariStorage storage sus) public view returns (UserState memory) {\\r\\n\\r\\n    uint256 ownedTokenCount = 0;\\r\\n    for (uint256 i = 0; i < sus.susuOwners.length; i++) {\\r\\n        if (msg.sender == sus.susuOwners[i]) {\\r\\n            ownedTokenCount++;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    uint256[] memory ownedTokens = new uint256[](ownedTokenCount); //push geht nicht in memory arrays\\r\\n    uint256 index = 0;\\r\\n    for (uint256 i = 0; i < sus.susuOwners.length; i++) {\\r\\n        if (msg.sender == sus.susuOwners[i]) {\\r\\n            ownedTokens[index] = i;\\r\\n            index++;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    Slot memory slot;\\r\\n    for (uint256 i = 0; i < ownedTokens.length; i++) {\\r\\n        uint256 tokenId = ownedTokens[i];\\r\\n        if (sus.tokenIdToSusu[tokenId].carrier == msg.sender) {\\r\\n            slot.susuTokenId = tokenId;\\r\\n            slot.dropCooldownTime = sus.tokenIdToSusu[tokenId].dropCooldownTime;\\r\\n            slot.ownerAddress = sus.susuOwners[tokenId];\\r\\n            break; //one slot per user!\\r\\n        }\\r\\n    }\\r\\n\\r\\n    UserState memory state = UserState({\\r\\n        ownedTokens: ownedTokens,\\r\\n        slot: slot\\r\\n    });\\r\\n    \\r\\n    return state;\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n    function registerMe(SusuwatariStorage storage sus) internal { \\r\\n        require(sus.maxSlotCount[msg.sender] == 0, \\\"User already registered\\\");\\r\\n\\r\\n        Susu memory newSusu = Susu({\\r\\n            tokenId: sus.susuOwners.length + 1,\\r\\n            dropCooldownTime: 0,\\r\\n            originLocation: \\\"\\\",\\r\\n            currentLocation: \\\"\\\",\\r\\n            destination: \\\"\\\",\\r\\n            message: \\\"\\\",\\r\\n            carrier: msg.sender\\r\\n        });\\r\\n\\r\\n        sus.maxSlotCount[msg.sender] = 1;\\r\\n        sus.susuOwners.push(msg.sender);\\r\\n        sus.tokenIdToSusu[newSusu.tokenId] = newSusu;\\r\\n        sus.baggedSusus[newSusu.tokenId] = msg.sender;\\r\\n    \\r\\n    }\\r\\n\\r\\nfunction aimInitialSusu(SusuwatariStorage storage sus, uint256 tokenId, string memory location, string memory destination, string memory message) internal isUserRegistered(sus) mustExistSusu(sus, tokenId) susuMustNotHaveBeenAimed(sus,tokenId) returns (uint256, string memory, string memory, string memory) {\\r\\n    \\r\\n       \\r\\n    Susu storage susu = sus.tokenIdToSusu[tokenId];\\r\\n    \\r\\n   \\r\\n    susu.dropCooldownTime = 300 + (uint256(keccak256(abi.encodePacked(block.timestamp, msg.sender, tokenId))) % 301);\\r\\n    susu.originLocation = location;\\r\\n    susu.currentLocation = location;\\r\\n    susu.destination = destination;\\r\\n    susu.message = message;\\r\\n    susu.carrier = msg.sender;\\r\\n    sus.baggedSusus[tokenId] = msg.sender;\\r\\n    \\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\nfunction dropSusu(SusuwatariStorage storage sus, uint256 tokenId, string memory location, string memory destination, string memory message) internal isUserRegistered(sus) mustExistSusu(sus, tokenId) mustCarrySusu(sus, tokenId) returns (uint256, string memory, string memory, string memory) {\\r\\n  \\r\\n    \\r\\n    Susu storage susu = sus.tokenIdToSusu[tokenId];\\r\\n    \\r\\n   \\r\\n    susu.dropCooldownTime = 300 + (uint256(keccak256(abi.encodePacked(block.timestamp, msg.sender, tokenId))) % 301);\\r\\n    susu.currentLocation = location;\\r\\n    susu.carrier = address(0);\\r\\n    sus.baggedSusus[tokenId] = msg.sender;\\r\\n    \\r\\n}\\r\\n\\r\\n \\r\\n\\r\\nfunction tryPickupSusu(SusuwatariStorage storage sus, uint256 tokenId, string memory location, string memory destination, string memory message) internal isUserRegistered(sus) mustExistSusu(sus, tokenId) mustNotCarrySusu(sus, tokenId) isNotBeingCarriedSusu(sus,tokenId) returns (uint256, string memory, string memory, string memory) {\\r\\n     \\r\\n    Susu storage susu = sus.tokenIdToSusu[tokenId];\\r\\n    \\r\\n     require(\\r\\n        keccak256(abi.encodePacked(susu.currentLocation)) == keccak256(abi.encodePacked(location)), \\r\\n        \\\"Caller is not in the correct location\\\"\\r\\n    );\\r\\n   \\r\\n    susu.dropCooldownTime = 300 + (uint256(keccak256(abi.encodePacked(block.timestamp, msg.sender, tokenId))) % 301);\\r\\n    susu.carrier = msg.sender;\\r\\n    sus.baggedSusus[tokenId] = msg.sender;\\r\\n    \\r\\n}\\r\\n\\r\\n\\r\\n}\",\"keccak256\":\"0x2b5edf0ee35513a3cdb70664a917397aaf7bbf85d8a89db504da62dcf619d01d\",\"license\":\"MIT\"},\"contracts/SusuwatariStorage.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport {LibDiamond} from \\\"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\\\";\\r\\n\\r\\nbytes32 constant SUSUWATARI_STORAGE_POSITION = keccak256(\\\"susuwatari.contract.storage\\\");\\r\\nbytes32 constant LEAFWALLET_STORAGE_POSITION = keccak256(\\\"leafwallet.contract.storage\\\");\\r\\n\\r\\nstruct OwnableStorage {\\r\\n\\r\\n    address _owner;\\r\\n}\\r\\n\\r\\n\\r\\nstruct LeafWalletStorage {\\r\\n    mapping(address => address) _deviceOwner;\\r\\n    mapping(address => address[]) _ownerDevices;\\r\\n    mapping(address => uint256) _deviceActivationCodes;\\r\\n}\\r\\n\\r\\n\\r\\n    struct Susu {\\r\\n        uint256 tokenId;\\r\\n        string originLocation;\\r\\n        string currentLocation;\\r\\n        string destination;\\r\\n        string message;\\r\\n        address carrier;\\r\\n        uint256 dropCooldownTime;\\r\\n    }\\r\\n    \\r\\n    //slotstate contains: 1. slot array, an element of slotarray has: [susutokenid, dropCooldownTime] 2. maxSlotCount(int) 3.  list of owned susus (nft)\\r\\n    struct SusuwatariStorage {\\r\\n        mapping(address => uint256) maxSlotCount;\\r\\n        address[] susuOwners;\\r\\n        mapping(uint256 => Susu) tokenIdToSusu;\\r\\n        bool isInitialized;\\r\\n        mapping(uint256 => address) baggedSusus; \\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n\\r\\ncontract StorageHandler {\\r\\n    \\r\\n    function susu() internal pure returns (SusuwatariStorage storage cs) {\\r\\n        bytes32 position = SUSUWATARI_STORAGE_POSITION;\\r\\n        assembly {\\r\\n           cs.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function os() internal pure returns (OwnableStorage storage cs) {\\r\\n        bytes32 position = keccak256(\\\"ownable.contract.storage\\\");\\r\\n        assembly {\\r\\n           cs.slot := position\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function ds() internal pure returns (LibDiamond.DiamondStorage storage) {\\r\\n        return LibDiamond.diamondStorage();\\r\\n    }\\r\\n\\r\\n    \\r\\n    function lw() internal pure returns (LeafWalletStorage storage cs) {\\r\\n        bytes32 position = keccak256(\\\"leafwallet.contract.storage\\\");\\r\\n        assembly {\\r\\n           cs.slot := position\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0x63d24fb7415d1311c310f32e8ef03a9d657e7fc8829afbbc342feed9b30b6c48\",\"license\":\"MIT\"},\"hardhat-deploy/solc_0.8/diamond/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0xc00c16bfa30a3fa5f3dc684f7f8ba62c259962b25f647d9588739458989717fc\",\"license\":\"MIT\"},\"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);            \\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress != _facetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(_facetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n        enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }    \\n\\n\\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n        // an immutable function is a function defined directly in a diamond\\n        require(_facetAddress != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\");\\n        } else {\\n            require(_calldata.length > 0, \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\");\\n            if (_init != address(this)) {\\n                enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x2205345e83eb86f5281f159a9215a096cb6d404782619f9b8e9d7a4a46c32a37\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/SusuwatariFacet.sol":{"SusuwatariFacet":{"abi":[{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"string","name":"location","type":"string"},{"internalType":"string","name":"destination","type":"string"},{"internalType":"string","name":"message","type":"string"}],"name":"aimInitialSusu","outputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"string","name":"","type":"string"},{"internalType":"string","name":"","type":"string"},{"internalType":"string","name":"","type":"string"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"string","name":"location","type":"string"},{"internalType":"string","name":"destination","type":"string"},{"internalType":"string","name":"message","type":"string"}],"name":"dropSusu","outputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"string","name":"","type":"string"},{"internalType":"string","name":"","type":"string"},{"internalType":"string","name":"","type":"string"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getCurrentState","outputs":[{"components":[{"internalType":"uint256[]","name":"ownedTokens","type":"uint256[]"},{"components":[{"internalType":"uint256","name":"susuTokenId","type":"uint256"},{"internalType":"uint256","name":"dropCooldownTime","type":"uint256"},{"internalType":"address","name":"ownerAddress","type":"address"}],"internalType":"struct LibSusuwatari.Slot","name":"slot","type":"tuple"}],"internalType":"struct LibSusuwatari.UserState","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"registerMe","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"string","name":"location","type":"string"},{"internalType":"string","name":"destination","type":"string"},{"internalType":"string","name":"message","type":"string"}],"name":"tryPickupSusu","outputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"string","name":"","type":"string"},{"internalType":"string","name":"","type":"string"},{"internalType":"string","name":"","type":"string"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension, but not including the Enumerable extension, which is available separately as {ERC721Enumerable}.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{"contracts/LibSusuwatari.sol":{"LibSusuwatari":[{"length":20,"start":5037}]}},"object":"$0820f723aeb6f00714a6a0f17f71596d4d$__5af49081156115125760009161141c575b506040519183835260a083019180519260808686015283518091528560c0860194019060005b81811061140857505050848495604092015190815183870152810151606086015201511660808301520390f35b8251865294870194918701916001016113db565b90503d806000833e61142e81836115c9565b81019083818303126106bc5780516001600160401b03918282116106bc57019081830390608082126106bc576040519361146785611578565b83518281116106bc57840181601f820112156106bc57805192831161040b578260051b6040519361149a8a8301866115c9565b845288808501918301019283116106bc5788809201905b8382106115035750505050906060918452601f1901126106bc576060604051916114da83611593565b858101518352604081015186840152015183811681036106bc57604082015283820152836113b5565b815181529082019082016114b1565b6040513d6000823e3d90fd5b60405162461bcd60e51b815260048101839052602c60248201527f4f6e6c79206f776e657220697320616c6c6f77656420746f20706572666f726d60448201526b103a3434b99030b1ba34b7b760a11b6064820152608490fd5b604081019081106001600160401b0382111761040b57604052565b606081019081106001600160401b0382111761040b57604052565b602081019081106001600160401b0382111761040b57604052565b90601f801991011681019081106001600160401b0382111761040b57604052565b81601f820112156106bc578035906001600160401b03821161040b576040519261161e601f8401601f1916602001856115c9565b828452602083830101116106bc57816000926020809301838601378301015290565b9060806003198301126106bc57600435916001600160401b03916024358381116106bc5782611671916004016115ea565b926044358181116106bc5783611689916004016115ea565b926064359182116106bc576116a0916004016115ea565b90565b60005b8281106116b557506000910152565b6080810151828201526020016116a6565b60e0906000815260806020820152601f6060518060808401526116ec8160a085016116a3565b81199182910116820160a083820301604084015281601f6060518060a08501526117198160c086016116a3565b01160191606060c082850301910152601f6060518060c085015261173f818686016116a3565b0116010190565b6001600160a01b031660009081527f202e1867cade063e32a2eb339a246f853a1a233314949ba8d9e2ac766f6ed8466020526040902090565b6000805160206118e483398151915280548210156117c2576000527f5b627e705e277f4cd69351cfcf0179f3685951408382038c266c60748db0394a0190600090565b634e487b7160e01b600052603260045260246000fd5b90600182811c92168015611808575b60208310146117f257565b634e487b7160e01b600052602260045260246000fd5b91607f16916117e7565b1561181957565b60405162461bcd60e51b8152602060048201526016602482015275155cd95c881a5cc81b9bdd081c9959da5cdd195c995960521b6044820152606490fd5b1561185e57565b60405162461bcd60e51b815260206004820152601d60248201527f546865205375737577617461726920646f6573206e6f742065786973740000006044820152606490fdfe202e1867cade063e32a2eb339a246f853a1a233314949ba8d9e2ac766f6ed848202e1867cade063e32a2eb339a246f853a1a233314949ba8d9e2ac766f6ed84a202e1867cade063e32a2eb339a246f853a1a233314949ba8d9e2ac766f6ed847a2646970667358221220a0443f15800ab537d6db58ff2e42fcdb2ca70336097e2a6d1c68c13c89aedd2e64736f6c63430008120033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH2 0x16 JUMPI PUSH2 0x1939 SWAP1 DUP2 PUSH2 0x1C DUP3 CODECOPY RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x378AA701 EQ PUSH2 0x12E4 JUMPI POP DUP1 PUSH4 0x5FD9A90D EQ PUSH2 0xF69 JUMPI DUP1 PUSH4 0x78630748 EQ PUSH2 0x96D JUMPI DUP1 PUSH4 0x83D4FDCE EQ PUSH2 0x6C1 JUMPI PUSH4 0x9A198D61 EQ PUSH2 0x56 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x6BC JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x6BC JUMPI PUSH2 0x70 CALLER PUSH2 0x1746 JUMP JUMPDEST SLOAD PUSH2 0x677 JUMPI PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x18E4 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP1 SWAP2 GT PUSH2 0x661 JUMPI PUSH1 0x40 MLOAD SWAP1 PUSH1 0xE0 DUP3 ADD DUP3 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x40B JUMPI PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x40 MLOAD SWAP2 PUSH2 0xBD DUP4 PUSH2 0x15AE JUMP JUMPDEST PUSH1 0x0 DUP4 MSTORE PUSH1 0x20 DUP3 ADD SWAP3 DUP4 MSTORE PUSH1 0x40 MLOAD PUSH2 0xD4 DUP2 PUSH2 0x15AE JUMP JUMPDEST PUSH1 0x0 DUP2 MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x40 MLOAD PUSH2 0xE9 DUP2 PUSH2 0x15AE JUMP JUMPDEST PUSH1 0x0 DUP2 MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x40 MLOAD PUSH2 0xFE DUP2 PUSH2 0x15AE JUMP JUMPDEST PUSH1 0x0 DUP2 MSTORE PUSH1 0x80 DUP4 ADD MSTORE CALLER PUSH1 0xA0 DUP4 ADD MSTORE PUSH1 0x0 PUSH1 0xC0 DUP4 ADD MSTORE PUSH1 0x1 PUSH2 0x11F CALLER PUSH2 0x1746 JUMP JUMPDEST SSTORE DUP1 SLOAD PUSH9 0x10000000000000000 DUP2 LT ISZERO PUSH2 0x40B JUMPI PUSH2 0x142 SWAP2 PUSH1 0x1 DUP3 ADD SWAP1 SSTORE PUSH2 0x177F JUMP JUMPDEST DUP2 SLOAD SWAP1 PUSH1 0x3 SHL SWAP1 CALLER DUP3 SHL SWAP2 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP1 SHL NOT AND OR SWAP1 SSTORE DUP1 MLOAD PUSH1 0x0 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x18A4 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP2 DUP2 MLOAD DUP4 SSTORE MLOAD SWAP2 DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x40B JUMPI PUSH2 0x19B PUSH1 0x1 DUP4 ADD SLOAD PUSH2 0x17D8 JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0x61A JUMPI JUMPDEST POP PUSH1 0x20 PUSH1 0x1F DUP3 GT PUSH1 0x1 EQ PUSH2 0x5AC JUMPI DUP2 SWAP3 SWAP4 SWAP5 PUSH1 0x0 SWAP3 PUSH2 0x5A1 JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0x1 DUP3 ADD SSTORE JUMPDEST PUSH1 0x40 DUP3 ADD MLOAD SWAP2 DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x40B JUMPI PUSH2 0x1F9 PUSH1 0x2 DUP5 ADD SLOAD PUSH2 0x17D8 JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0x55A JUMPI JUMPDEST POP PUSH1 0x20 PUSH1 0x1F DUP3 GT PUSH1 0x1 EQ PUSH2 0x4EC JUMPI DUP2 SWAP3 SWAP4 SWAP5 PUSH1 0x0 SWAP3 PUSH2 0x4E1 JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0x2 DUP4 ADD SSTORE JUMPDEST PUSH1 0x60 DUP2 ADD MLOAD SWAP2 DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x40B JUMPI PUSH2 0x257 PUSH1 0x3 DUP4 ADD SLOAD PUSH2 0x17D8 JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0x49A JUMPI JUMPDEST POP PUSH1 0x20 PUSH1 0x1F DUP3 GT PUSH1 0x1 EQ PUSH2 0x42C JUMPI DUP2 SWAP3 SWAP4 SWAP5 PUSH1 0x0 SWAP3 PUSH2 0x421 JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0x3 DUP3 ADD SSTORE JUMPDEST PUSH1 0x80 DUP3 ADD MLOAD SWAP2 DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x40B JUMPI PUSH2 0x2B5 PUSH1 0x4 DUP5 ADD SLOAD PUSH2 0x17D8 JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0x3C0 JUMPI JUMPDEST POP PUSH1 0x20 PUSH1 0x1F DUP3 GT PUSH1 0x1 EQ PUSH2 0x354 JUMPI DUP2 SWAP3 SWAP4 SWAP5 PUSH1 0x0 SWAP3 PUSH2 0x349 JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0x4 DUP4 ADD SSTORE JUMPDEST PUSH1 0x5 DUP3 ADD SWAP2 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0xA0 DUP4 ADD MLOAD AND SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL SWAP4 DUP5 DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x6 PUSH1 0xC0 DUP4 ADD MLOAD SWAP2 ADD SSTORE MLOAD PUSH1 0x0 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x18C4 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 CALLER SWAP1 DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x0 DUP1 RETURN JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH2 0x2D8 JUMP JUMPDEST PUSH1 0x1F NOT DUP3 AND SWAP1 PUSH1 0x4 DUP6 ADD PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP2 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT PUSH2 0x3A8 JUMPI POP SWAP6 DUP4 PUSH1 0x1 SWAP6 SWAP7 SWAP8 LT PUSH2 0x38F JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH1 0x4 DUP4 ADD SSTORE PUSH2 0x2F0 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH2 0x37F JUMP JUMPDEST SWAP2 SWAP3 PUSH1 0x20 PUSH1 0x1 DUP2 SWAP3 DUP7 DUP12 ADD MLOAD DUP2 SSTORE ADD SWAP5 ADD SWAP3 ADD PUSH2 0x36A JUMP JUMPDEST PUSH1 0x4 DUP5 ADD PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 PUSH1 0x1F DUP4 ADD PUSH1 0x5 SHR DUP2 ADD SWAP2 PUSH1 0x20 DUP5 LT PUSH2 0x401 JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP1 JUMPDEST DUP2 DUP2 LT PUSH2 0x3F5 JUMPI POP PUSH2 0x2BE JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x3E8 JUMP JUMPDEST SWAP1 SWAP2 POP DUP2 SWAP1 PUSH2 0x3DF JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH2 0x27A JUMP JUMPDEST PUSH1 0x3 DUP4 ADD PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x0 JUMPDEST PUSH1 0x1F NOT DUP5 AND DUP2 LT PUSH2 0x482 JUMPI POP PUSH1 0x1 SWAP4 SWAP5 SWAP6 DUP4 PUSH1 0x1F NOT DUP2 AND LT PUSH2 0x469 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH1 0x3 DUP3 ADD SSTORE PUSH2 0x292 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH2 0x459 JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0x20 PUSH1 0x1 DUP2 SWAP3 DUP6 DUP11 ADD MLOAD DUP2 SSTORE ADD SWAP4 ADD SWAP2 ADD PUSH2 0x43C JUMP JUMPDEST PUSH1 0x3 DUP4 ADD PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 PUSH1 0x1F DUP4 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP5 LT PUSH2 0x4DA JUMPI JUMPDEST PUSH1 0x1F DUP4 ADD PUSH1 0x5 SHR DUP3 ADD DUP2 LT PUSH2 0x4CE JUMPI POP POP PUSH2 0x260 JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x4B8 JUMP JUMPDEST POP DUP1 PUSH2 0x4B8 JUMP JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH2 0x21C JUMP JUMPDEST PUSH1 0x2 DUP5 ADD PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x0 JUMPDEST PUSH1 0x1F NOT DUP5 AND DUP2 LT PUSH2 0x542 JUMPI POP PUSH1 0x1 SWAP4 SWAP5 SWAP6 DUP4 PUSH1 0x1F NOT DUP2 AND LT PUSH2 0x529 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH1 0x2 DUP4 ADD SSTORE PUSH2 0x234 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH2 0x519 JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0x20 PUSH1 0x1 DUP2 SWAP3 DUP6 DUP11 ADD MLOAD DUP2 SSTORE ADD SWAP4 ADD SWAP2 ADD PUSH2 0x4FC JUMP JUMPDEST PUSH1 0x2 DUP5 ADD PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 PUSH1 0x1F DUP4 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP5 LT PUSH2 0x59A JUMPI JUMPDEST PUSH1 0x1F DUP4 ADD PUSH1 0x5 SHR DUP3 ADD DUP2 LT PUSH2 0x58E JUMPI POP POP PUSH2 0x202 JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x578 JUMP JUMPDEST POP DUP1 PUSH2 0x578 JUMP JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH2 0x1BE JUMP JUMPDEST PUSH1 0x1 DUP4 ADD PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x0 JUMPDEST PUSH1 0x1F NOT DUP5 AND DUP2 LT PUSH2 0x602 JUMPI POP PUSH1 0x1 SWAP4 SWAP5 SWAP6 DUP4 PUSH1 0x1F NOT DUP2 AND LT PUSH2 0x5E9 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH1 0x1 DUP3 ADD SSTORE PUSH2 0x1D6 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH2 0x5D9 JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0x20 PUSH1 0x1 DUP2 SWAP3 DUP6 DUP11 ADD MLOAD DUP2 SSTORE ADD SWAP4 ADD SWAP2 ADD PUSH2 0x5BC JUMP JUMPDEST PUSH1 0x1 DUP4 ADD PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 PUSH1 0x1F DUP4 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP5 LT PUSH2 0x65A JUMPI JUMPDEST PUSH1 0x1F DUP4 ADD PUSH1 0x5 SHR DUP3 ADD DUP2 LT PUSH2 0x64E JUMPI POP POP PUSH2 0x1A4 JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x638 JUMP JUMPDEST POP DUP1 PUSH2 0x638 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5573657220616C72656164792072656769737465726564000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x6BC JUMPI PUSH2 0x6CF CALLDATASIZE PUSH2 0x1640 JUMP JUMPDEST POP POP SWAP1 PUSH2 0x6E6 PUSH2 0x6DE CALLER PUSH2 0x1746 JUMP JUMPDEST SLOAD ISZERO ISZERO PUSH2 0x1812 JUMP JUMPDEST DUP1 ISZERO ISZERO DUP1 PUSH2 0x954 JUMPI JUMPDEST PUSH2 0x6F8 SWAP1 PUSH2 0x1857 JUMP JUMPDEST DUP1 PUSH1 0x0 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x18A4 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x20 SWAP1 DUP1 DUP3 MSTORE CALLER PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x5 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD SLOAD AND SUB PUSH2 0x8FE JUMPI DUP3 PUSH1 0x0 MSTORE DUP2 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP3 PUSH1 0x40 MLOAD SWAP1 PUSH2 0x12D DUP4 DUP4 ADD DUP4 PUSH2 0x769 DUP8 CALLER TIMESTAMP DUP6 SWAP2 PUSH1 0x54 SWAP4 SWAP2 DUP4 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT SWAP1 PUSH1 0x60 SHL AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x34 DUP3 ADD MSTORE ADD SWAP1 JUMP JUMPDEST SUB SWAP4 PUSH2 0x77D PUSH1 0x1F NOT SWAP6 DUP7 DUP2 ADD DUP4 MSTORE DUP3 PUSH2 0x15C9 JUMP JUMPDEST MLOAD SWAP1 KECCAK256 MOD PUSH2 0x12C SWAP1 DUP2 ADD DUP1 SWAP2 GT PUSH2 0x661 JUMPI PUSH1 0x6 DUP7 ADD SSTORE PUSH1 0x2 DUP6 ADD SWAP2 DUP2 MLOAD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT PUSH2 0x40B JUMPI PUSH2 0x7B3 DUP5 SLOAD PUSH2 0x17D8 JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0x8B8 JUMPI JUMPDEST POP DUP5 SWAP2 PUSH1 0x1F DUP5 GT PUSH1 0x1 EQ PUSH2 0x842 JUMPI POP SWAP2 DUP1 PUSH1 0x5 SWAP5 SWAP3 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x18C4 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP8 SWAP9 SWAP5 PUSH1 0x0 SWAP3 PUSH2 0x837 JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR SWAP1 SSTORE JUMPDEST ADD SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL SWAP4 DUP5 DUP2 SLOAD AND SWAP1 SSTORE PUSH1 0x0 MSTORE MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 CALLER SWAP1 DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x40 MLOAD DUP1 PUSH2 0x833 DUP2 PUSH2 0x16C6 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST ADD MLOAD SWAP1 POP DUP9 DUP1 PUSH2 0x7EB JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE DUP7 DUP2 KECCAK256 SWAP4 SWAP3 SWAP2 DUP6 AND SWAP1 JUMPDEST DUP2 DUP2 LT PUSH2 0x8A1 JUMPI POP SWAP3 PUSH1 0x1 SWAP3 DUP6 SWAP3 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x18C4 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP10 SWAP11 SWAP7 PUSH1 0x5 SWAP9 SWAP7 LT PUSH2 0x888 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD SWAP1 SSTORE PUSH2 0x800 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE DUP9 DUP1 DUP1 PUSH2 0x87B JUMP JUMPDEST SWAP3 SWAP4 DUP8 PUSH1 0x1 DUP2 SWAP3 DUP8 DUP7 ADD MLOAD DUP2 SSTORE ADD SWAP6 ADD SWAP4 ADD PUSH2 0x851 JUMP JUMPDEST DUP5 PUSH1 0x0 MSTORE DUP6 PUSH1 0x0 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD SWAP2 DUP8 DUP7 LT PUSH2 0x8F4 JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP1 JUMPDEST DUP2 DUP2 LT PUSH2 0x8E8 JUMPI POP PUSH2 0x7BC JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x8DB JUMP JUMPDEST SWAP1 SWAP2 POP DUP2 SWAP1 PUSH2 0x8D2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616C6C657220646F65736E2774206361727279206120537573757761746172 PUSH1 0x44 DUP3 ADD MSTORE PUSH8 0x6920546F6B656E21 PUSH1 0xC0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST POP PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x18E4 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD DUP2 GT ISZERO PUSH2 0x6EF JUMP JUMPDEST CALLVALUE PUSH2 0x6BC JUMPI PUSH2 0x97B CALLDATASIZE PUSH2 0x1640 JUMP JUMPDEST SWAP2 PUSH2 0x98B PUSH2 0x6DE SWAP5 SWAP3 SWAP5 CALLER PUSH2 0x1746 JUMP JUMPDEST DUP2 ISZERO ISZERO DUP1 PUSH2 0xF50 JUMPI JUMPDEST PUSH2 0x99D SWAP1 PUSH2 0x1857 JUMP JUMPDEST PUSH2 0x9A6 DUP3 PUSH2 0x177F JUMP JUMPDEST SWAP1 SLOAD PUSH1 0x3 SWAP2 SWAP1 SWAP2 SHL SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND CALLER EQ SWAP1 DUP2 PUSH2 0xF25 JUMPI JUMPDEST POP ISZERO PUSH2 0xEEA JUMPI DUP2 PUSH1 0x0 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x18A4 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH2 0x12D PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xA2C DUP2 PUSH2 0xA1E DUP9 CALLER TIMESTAMP DUP8 SWAP2 PUSH1 0x54 SWAP4 SWAP2 DUP4 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT SWAP1 PUSH1 0x60 SHL AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x34 DUP3 ADD MSTORE ADD SWAP1 JUMP JUMPDEST SUB PUSH1 0x1F NOT DUP2 ADD DUP4 MSTORE DUP3 PUSH2 0x15C9 JUMP JUMPDEST MLOAD SWAP1 KECCAK256 MOD PUSH2 0x12C SWAP1 DUP2 ADD DUP1 SWAP2 GT PUSH2 0x661 JUMPI PUSH1 0x6 DUP4 ADD SSTORE DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x40B JUMPI PUSH2 0xA5F PUSH1 0x1 DUP5 ADD SLOAD PUSH2 0x17D8 JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0xEA3 JUMPI JUMPDEST POP DUP1 PUSH1 0x20 PUSH1 0x1F DUP3 GT PUSH1 0x1 EQ PUSH2 0xE38 JUMPI PUSH1 0x0 SWAP2 PUSH2 0xE2D JUMPI JUMPDEST POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0x1 DUP4 ADD SSTORE JUMPDEST DUP1 MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x40B JUMPI DUP2 SWAP1 PUSH2 0xAB6 PUSH1 0x2 DUP6 ADD SLOAD PUSH2 0x17D8 JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0xDDA JUMPI JUMPDEST POP PUSH1 0x20 SWAP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0xD6D JUMPI PUSH1 0x0 SWAP3 PUSH2 0xD62 JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0x2 DUP3 ADD SSTORE JUMPDEST DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x40B JUMPI PUSH2 0xB0B PUSH1 0x3 DUP4 ADD SLOAD PUSH2 0x17D8 JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0xD1B JUMPI JUMPDEST POP PUSH1 0x20 SWAP5 PUSH1 0x1F DUP3 GT PUSH1 0x1 EQ PUSH2 0xCAF JUMPI SWAP5 DUP2 SWAP3 SWAP4 SWAP5 SWAP6 PUSH1 0x0 SWAP3 PUSH2 0xCA4 JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0x3 DUP3 ADD SSTORE JUMPDEST PUSH1 0x4 DUP2 ADD DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x40B JUMPI PUSH2 0xB67 DUP3 SLOAD PUSH2 0x17D8 JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0xC5C JUMPI JUMPDEST POP PUSH1 0x20 PUSH1 0x1F DUP3 GT PUSH1 0x1 EQ PUSH2 0xBF2 JUMPI DUP2 SWAP1 PUSH1 0x5 SWAP6 SWAP7 PUSH1 0x0 SWAP3 PUSH2 0xBE7 JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR SWAP1 SSTORE JUMPDEST ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL SWAP2 CALLER DUP4 DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x0 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x18C4 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 CALLER SWAP1 DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x40 MLOAD DUP1 PUSH2 0x833 DUP2 PUSH2 0x16C6 JUMP JUMPDEST ADD MLOAD SWAP1 POP DUP7 DUP1 PUSH2 0xB8C JUMP JUMPDEST PUSH1 0x1F NOT DUP3 AND SWAP6 DUP4 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP7 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT PUSH2 0xC44 JUMPI POP SWAP2 PUSH1 0x5 SWAP7 SWAP8 SWAP2 DUP5 PUSH1 0x1 SWAP6 SWAP5 LT PUSH2 0xC2B JUMPI JUMPDEST POP POP POP DUP2 SHL ADD SWAP1 SSTORE PUSH2 0xBA1 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE DUP7 DUP1 DUP1 PUSH2 0xC1E JUMP JUMPDEST DUP4 DUP4 ADD MLOAD DUP10 SSTORE PUSH1 0x1 SWAP1 SWAP9 ADD SWAP8 PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 ADD PUSH2 0xC05 JUMP JUMPDEST DUP3 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 PUSH1 0x1F DUP4 ADD PUSH1 0x5 SHR DUP2 ADD SWAP2 PUSH1 0x20 DUP5 LT PUSH2 0xC9A JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP1 JUMPDEST DUP2 DUP2 LT PUSH2 0xC8E JUMPI POP PUSH2 0xB70 JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0xC81 JUMP JUMPDEST SWAP1 SWAP2 POP DUP2 SWAP1 PUSH2 0xC78 JUMP JUMPDEST ADD MLOAD SWAP1 POP DUP6 DUP1 PUSH2 0xB31 JUMP JUMPDEST PUSH1 0x1F NOT DUP3 AND SWAP6 PUSH1 0x3 DUP5 ADD PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP2 PUSH1 0x0 JUMPDEST DUP9 DUP2 LT PUSH2 0xD03 JUMPI POP DUP4 PUSH1 0x1 SWAP6 SWAP7 SWAP8 SWAP9 LT PUSH2 0xCEA JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH1 0x3 DUP3 ADD SSTORE PUSH2 0xB49 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE DUP6 DUP1 DUP1 PUSH2 0xCDA JUMP JUMPDEST SWAP2 SWAP3 PUSH1 0x20 PUSH1 0x1 DUP2 SWAP3 DUP7 DUP6 ADD MLOAD DUP2 SSTORE ADD SWAP5 ADD SWAP3 ADD PUSH2 0xCC5 JUMP JUMPDEST PUSH1 0x3 DUP4 ADD PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 PUSH1 0x1F DUP4 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP5 LT PUSH2 0xD5B JUMPI JUMPDEST PUSH1 0x1F DUP4 ADD PUSH1 0x5 SHR DUP3 ADD DUP2 LT PUSH2 0xD4F JUMPI POP POP PUSH2 0xB14 JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0xD39 JUMP JUMPDEST POP DUP1 PUSH2 0xD39 JUMP JUMPDEST ADD MLOAD SWAP1 POP DUP7 DUP1 PUSH2 0xAD6 JUMP JUMPDEST PUSH1 0x2 DUP6 ADD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 SWAP4 POP PUSH1 0x1F NOT DUP6 AND SWAP1 JUMPDEST DUP2 DUP2 LT PUSH2 0xDC2 JUMPI POP SWAP1 DUP5 PUSH1 0x1 SWAP6 SWAP5 SWAP4 SWAP3 LT PUSH2 0xDA9 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH1 0x2 DUP3 ADD SSTORE PUSH2 0xAEE JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE DUP7 DUP1 DUP1 PUSH2 0xD99 JUMP JUMPDEST SWAP3 SWAP4 PUSH1 0x20 PUSH1 0x1 DUP2 SWAP3 DUP8 DUP7 ADD MLOAD DUP2 SSTORE ADD SWAP6 ADD SWAP4 ADD PUSH2 0xD83 JUMP JUMPDEST SWAP1 SWAP2 POP PUSH1 0x2 DUP5 ADD PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 PUSH1 0x1F DUP5 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP6 LT PUSH2 0xE26 JUMPI JUMPDEST SWAP1 DUP5 SWAP4 SWAP3 SWAP2 JUMPDEST PUSH1 0x1F DUP4 ADD PUSH1 0x5 SHR DUP3 ADD DUP2 LT PUSH2 0xE17 JUMPI POP POP PUSH2 0xABF JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE DUP6 SWAP5 POP PUSH1 0x1 ADD PUSH2 0xE01 JUMP JUMPDEST POP DUP1 PUSH2 0xDFB JUMP JUMPDEST SWAP1 POP DUP3 ADD MLOAD DUP8 PUSH2 0xA7F JUMP JUMPDEST PUSH1 0x1 DUP6 ADD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 SWAP3 POP PUSH1 0x1F NOT DUP5 AND SWAP1 JUMPDEST DUP2 DUP2 LT PUSH2 0xE8B JUMPI POP SWAP1 DUP4 PUSH1 0x1 SWAP5 SWAP4 SWAP3 LT PUSH2 0xE72 JUMPI JUMPDEST POP POP DUP2 SHL ADD PUSH1 0x1 DUP4 ADD SSTORE PUSH2 0xA96 JUMP JUMPDEST DUP5 ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE DUP8 DUP1 PUSH2 0xE63 JUMP JUMPDEST SWAP2 SWAP3 PUSH1 0x20 PUSH1 0x1 DUP2 SWAP3 DUP7 DUP10 ADD MLOAD DUP2 SSTORE ADD SWAP5 ADD SWAP3 ADD PUSH2 0xE4E JUMP JUMPDEST PUSH1 0x1 DUP5 ADD PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 PUSH1 0x1F DUP4 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP5 LT PUSH2 0xEE3 JUMPI JUMPDEST PUSH1 0x1F DUP4 ADD PUSH1 0x5 SHR DUP3 ADD DUP2 LT PUSH2 0xED7 JUMPI POP POP PUSH2 0xA68 JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0xEC1 JUMP JUMPDEST POP DUP1 PUSH2 0xEC1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x21B0B63632B91034B9903737BA1037BBB732B9 PUSH1 0x69 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP1 POP DUP3 PUSH1 0x0 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x18A4 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x20 MSTORE CALLER SWAP1 PUSH1 0x5 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD SLOAD AND EQ DUP6 PUSH2 0x9C3 JUMP JUMPDEST POP PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x18E4 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD DUP3 GT ISZERO PUSH2 0x994 JUMP JUMPDEST CALLVALUE PUSH2 0x6BC JUMPI PUSH2 0xF77 CALLDATASIZE PUSH2 0x1640 JUMP JUMPDEST POP POP PUSH2 0xF85 PUSH2 0x6DE CALLER PUSH2 0x1746 JUMP JUMPDEST DUP2 ISZERO ISZERO DUP1 PUSH2 0x12CB JUMPI JUMPDEST PUSH2 0xF97 SWAP1 PUSH2 0x1857 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x18E4 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD SWAP1 JUMPDEST DUP2 DUP2 LT PUSH2 0x1280 JUMPI JUMPDEST POP POP PUSH2 0x1227 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x18A4 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 SWAP1 SWAP3 KECCAK256 PUSH1 0x5 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x11E2 JUMPI DUP4 PUSH1 0x0 MSTORE DUP2 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP2 PUSH1 0x2 DUP4 ADD SWAP1 PUSH1 0x40 MLOAD SWAP2 DUP3 DUP5 DUP2 ADD SWAP2 PUSH1 0x0 SWAP1 DUP1 SLOAD PUSH2 0x1011 DUP2 PUSH2 0x17D8 JUMP JUMPDEST SWAP2 PUSH1 0x1 SWAP2 DUP10 DUP4 DUP3 AND SWAP2 DUP3 PUSH1 0x0 EQ PUSH2 0x11C7 JUMPI POP POP PUSH1 0x1 EQ PUSH2 0x118B JUMPI JUMPDEST POP POP POP SUB SWAP3 PUSH2 0x1043 PUSH1 0x1F NOT SWAP5 DUP6 DUP2 ADD DUP4 MSTORE DUP3 PUSH2 0x15C9 JUMP JUMPDEST MLOAD SWAP1 KECCAK256 SWAP1 PUSH1 0x40 MLOAD SWAP1 DUP5 DUP3 DUP3 MLOAD SWAP3 PUSH1 0x0 JUMPDEST DUP5 DUP2 LT PUSH2 0x1174 JUMPI POP POP PUSH2 0x1073 SWAP3 DUP2 ADD PUSH1 0x0 DUP4 DUP3 ADD MSTORE SUB DUP1 DUP5 MSTORE ADD DUP3 PUSH2 0x15C9 JUMP JUMPDEST DUP4 DUP2 MLOAD SWAP2 ADD KECCAK256 SUB PUSH2 0x1121 JUMPI PUSH1 0x40 MLOAD TIMESTAMP DUP4 DUP3 ADD SWAP1 DUP2 MSTORE CALLER PUSH1 0x60 SHL PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x34 DUP2 ADD DUP7 SWAP1 MSTORE PUSH2 0x12D SWAP3 SWAP1 SWAP2 SWAP1 PUSH2 0x10C3 SWAP1 DUP3 PUSH1 0x54 DUP6 ADD SUB SWAP1 DUP2 ADD DUP4 MSTORE DUP3 PUSH2 0x15C9 JUMP JUMPDEST MLOAD SWAP1 KECCAK256 MOD PUSH2 0x12C SWAP1 DUP2 ADD DUP1 SWAP2 GT PUSH2 0x661 JUMPI DUP3 PUSH1 0x5 SWAP2 PUSH1 0x6 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x18C4 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP6 ADD SSTORE ADD SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL SWAP4 CALLER DUP6 DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x0 MSTORE MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 CALLER SWAP1 DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x40 MLOAD DUP1 PUSH2 0x833 DUP2 PUSH2 0x16C6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616C6C6572206973206E6F7420696E2074686520636F7272656374206C6F63 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x30BA34B7B7 PUSH1 0xD9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST DUP2 DUP2 ADD DUP5 ADD MLOAD DUP7 DUP3 ADD DUP6 ADD MSTORE DUP9 SWAP4 DUP7 SWAP4 POP ADD PUSH2 0x1053 JUMP JUMPDEST DUP9 SWAP4 POP PUSH1 0x0 MSTORE DUP3 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x0 SWAP2 JUMPDEST DUP4 DUP4 LT PUSH2 0x11AF JUMPI POP POP POP DUP3 ADD ADD DUP9 DUP1 DUP1 PUSH2 0x102C JUMP JUMPDEST DUP1 SLOAD DUP4 DUP11 ADD DUP7 ADD MSTORE DUP9 SWAP6 POP DUP10 SWAP5 SWAP1 SWAP3 ADD SWAP2 DUP2 ADD PUSH2 0x119A JUMP JUMPDEST SWAP4 POP SWAP5 POP POP POP PUSH1 0xFF NOT AND DUP5 MSTORE DUP1 ISZERO ISZERO MUL DUP3 ADD ADD DUP9 DUP1 DUP1 PUSH2 0x102C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5375737520697320616C7265616479206265696E672063617272696564210000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616C6C657220697320616C7265616479206361727279206120537573757761 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x7461726920546F6B656E21 PUSH1 0xA8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x18A4 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x5 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x12BF JUMPI PUSH1 0x0 NOT DUP2 EQ PUSH2 0x661 JUMPI PUSH1 0x1 ADD PUSH2 0xFAC JUMP JUMPDEST POP POP POP PUSH1 0x1 DUP4 DUP1 PUSH2 0xFB4 JUMP JUMPDEST POP PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x18E4 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD DUP3 GT ISZERO PUSH2 0xF8E JUMP JUMPDEST CALLVALUE PUSH2 0x6BC JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x6BC JUMPI PUSH2 0x12FE DUP2 PUSH2 0x1578 JUMP JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x40 MLOAD PUSH2 0x130E DUP2 PUSH2 0x1593 JUMP JUMPDEST PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 DUP1 SWAP3 PUSH1 0x0 DUP3 DUP5 ADD MSTORE PUSH1 0x0 PUSH1 0x40 DUP5 ADD MSTORE ADD MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 PUSH32 0xC8FCAD8DB84D3CC18B4C41D551EA0EE66DD599CDE068D998E57D5E09332C1320 SLOAD AND CALLER SUB PUSH2 0x151E JUMPI PUSH1 0x40 MLOAD PUSH4 0x51514C2B PUSH1 0xE1 SHL DUP2 MSTORE PUSH32 0x202E1867CADE063E32A2EB339A246F853A1A233314949BA8D9E2AC766F6ED846 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 DUP2 PUSH1 0x24 DUP2 PUSH20 0x0 GAS DELEGATECALL SWAP1 DUP2 ISZERO PUSH2 0x1512 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x141C JUMPI JUMPDEST POP PUSH1 0x40 MLOAD SWAP2 DUP4 DUP4 MSTORE PUSH1 0xA0 DUP4 ADD SWAP2 DUP1 MLOAD SWAP3 PUSH1 0x80 DUP7 DUP7 ADD MSTORE DUP4 MLOAD DUP1 SWAP2 MSTORE DUP6 PUSH1 0xC0 DUP7 ADD SWAP5 ADD SWAP1 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT PUSH2 0x1408 JUMPI POP POP POP DUP5 DUP5 SWAP6 PUSH1 0x40 SWAP3 ADD MLOAD SWAP1 DUP2 MLOAD DUP4 DUP8 ADD MSTORE DUP2 ADD MLOAD PUSH1 0x60 DUP7 ADD MSTORE ADD MLOAD AND PUSH1 0x80 DUP4 ADD MSTORE SUB SWAP1 RETURN JUMPDEST DUP3 MLOAD DUP7 MSTORE SWAP5 DUP8 ADD SWAP5 SWAP2 DUP8 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x13DB JUMP JUMPDEST SWAP1 POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP4 RETURNDATACOPY PUSH2 0x142E DUP2 DUP4 PUSH2 0x15C9 JUMP JUMPDEST DUP2 ADD SWAP1 DUP4 DUP2 DUP4 SUB SLT PUSH2 0x6BC JUMPI DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP2 DUP3 DUP3 GT PUSH2 0x6BC JUMPI ADD SWAP1 DUP2 DUP4 SUB SWAP1 PUSH1 0x80 DUP3 SLT PUSH2 0x6BC JUMPI PUSH1 0x40 MLOAD SWAP4 PUSH2 0x1467 DUP6 PUSH2 0x1578 JUMP JUMPDEST DUP4 MLOAD DUP3 DUP2 GT PUSH2 0x6BC JUMPI DUP5 ADD DUP2 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0x6BC JUMPI DUP1 MLOAD SWAP3 DUP4 GT PUSH2 0x40B JUMPI DUP3 PUSH1 0x5 SHL PUSH1 0x40 MLOAD SWAP4 PUSH2 0x149A DUP11 DUP4 ADD DUP7 PUSH2 0x15C9 JUMP JUMPDEST DUP5 MSTORE DUP9 DUP1 DUP6 ADD SWAP2 DUP4 ADD ADD SWAP3 DUP4 GT PUSH2 0x6BC JUMPI DUP9 DUP1 SWAP3 ADD SWAP1 JUMPDEST DUP4 DUP3 LT PUSH2 0x1503 JUMPI POP POP POP POP SWAP1 PUSH1 0x60 SWAP2 DUP5 MSTORE PUSH1 0x1F NOT ADD SLT PUSH2 0x6BC JUMPI PUSH1 0x60 PUSH1 0x40 MLOAD SWAP2 PUSH2 0x14DA DUP4 PUSH2 0x1593 JUMP JUMPDEST DUP6 DUP2 ADD MLOAD DUP4 MSTORE PUSH1 0x40 DUP2 ADD MLOAD DUP7 DUP5 ADD MSTORE ADD MLOAD DUP4 DUP2 AND DUP2 SUB PUSH2 0x6BC JUMPI PUSH1 0x40 DUP3 ADD MSTORE DUP4 DUP3 ADD MSTORE DUP4 PUSH2 0x13B5 JUMP JUMPDEST DUP2 MLOAD DUP2 MSTORE SWAP1 DUP3 ADD SWAP1 DUP3 ADD PUSH2 0x14B1 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F6E6C79206F776E657220697320616C6C6F77656420746F20706572666F726D PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x103A3434B99030B1BA34B7B7 PUSH1 0xA1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x40B JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x60 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x40B JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x20 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x40B JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x40B JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST DUP2 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0x6BC JUMPI DUP1 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x40B JUMPI PUSH1 0x40 MLOAD SWAP3 PUSH2 0x161E PUSH1 0x1F DUP5 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP6 PUSH2 0x15C9 JUMP JUMPDEST DUP3 DUP5 MSTORE PUSH1 0x20 DUP4 DUP4 ADD ADD GT PUSH2 0x6BC JUMPI DUP2 PUSH1 0x0 SWAP3 PUSH1 0x20 DUP1 SWAP4 ADD DUP4 DUP7 ADD CALLDATACOPY DUP4 ADD ADD MSTORE SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x80 PUSH1 0x3 NOT DUP4 ADD SLT PUSH2 0x6BC JUMPI PUSH1 0x4 CALLDATALOAD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP2 PUSH1 0x24 CALLDATALOAD DUP4 DUP2 GT PUSH2 0x6BC JUMPI DUP3 PUSH2 0x1671 SWAP2 PUSH1 0x4 ADD PUSH2 0x15EA JUMP JUMPDEST SWAP3 PUSH1 0x44 CALLDATALOAD DUP2 DUP2 GT PUSH2 0x6BC JUMPI DUP4 PUSH2 0x1689 SWAP2 PUSH1 0x4 ADD PUSH2 0x15EA JUMP JUMPDEST SWAP3 PUSH1 0x64 CALLDATALOAD SWAP2 DUP3 GT PUSH2 0x6BC JUMPI PUSH2 0x16A0 SWAP2 PUSH1 0x4 ADD PUSH2 0x15EA JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT PUSH2 0x16B5 JUMPI POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x80 DUP2 ADD MLOAD DUP3 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x16A6 JUMP JUMPDEST PUSH1 0xE0 SWAP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x80 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x60 MLOAD DUP1 PUSH1 0x80 DUP5 ADD MSTORE PUSH2 0x16EC DUP2 PUSH1 0xA0 DUP6 ADD PUSH2 0x16A3 JUMP JUMPDEST DUP2 NOT SWAP2 DUP3 SWAP2 ADD AND DUP3 ADD PUSH1 0xA0 DUP4 DUP3 SUB ADD PUSH1 0x40 DUP5 ADD MSTORE DUP2 PUSH1 0x1F PUSH1 0x60 MLOAD DUP1 PUSH1 0xA0 DUP6 ADD MSTORE PUSH2 0x1719 DUP2 PUSH1 0xC0 DUP7 ADD PUSH2 0x16A3 JUMP JUMPDEST ADD AND ADD SWAP2 PUSH1 0x60 PUSH1 0xC0 DUP3 DUP6 SUB ADD SWAP2 ADD MSTORE PUSH1 0x1F PUSH1 0x60 MLOAD DUP1 PUSH1 0xC0 DUP6 ADD MSTORE PUSH2 0x173F DUP2 DUP7 DUP7 ADD PUSH2 0x16A3 JUMP JUMPDEST ADD AND ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0x202E1867CADE063E32A2EB339A246F853A1A233314949BA8D9E2AC766F6ED846 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x18E4 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD DUP3 LT ISZERO PUSH2 0x17C2 JUMPI PUSH1 0x0 MSTORE PUSH32 0x5B627E705E277F4CD69351CFCF0179F3685951408382038C266C60748DB0394A ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x1 DUP3 DUP2 SHR SWAP3 AND DUP1 ISZERO PUSH2 0x1808 JUMPI JUMPDEST PUSH1 0x20 DUP4 LT EQ PUSH2 0x17F2 JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x17E7 JUMP JUMPDEST ISZERO PUSH2 0x1819 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x155CD95C881A5CC81B9BDD081C9959DA5CDD195C9959 PUSH1 0x52 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x185E JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x546865205375737577617461726920646F6573206E6F74206578697374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT INVALID KECCAK256 0x2E XOR PUSH8 0xCADE063E32A2EB33 SWAP11 0x24 PUSH16 0x853A1A233314949BA8D9E2AC766F6ED8 BASEFEE KECCAK256 0x2E XOR PUSH8 0xCADE063E32A2EB33 SWAP11 0x24 PUSH16 0x853A1A233314949BA8D9E2AC766F6ED8 0x4A KECCAK256 0x2E XOR PUSH8 0xCADE063E32A2EB33 SWAP11 0x24 PUSH16 0x853A1A233314949BA8D9E2AC766F6ED8 SELFBALANCE LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG0 PREVRANDAO EXTCODEHASH ISZERO DUP1 EXP 0xB5 CALLDATACOPY 0xD6 0xDB PC SELFDESTRUCT 0x2E TIMESTAMP 0xFC 0xDB 0x2C 0xA7 SUB CALLDATASIZE MULMOD PUSH31 0x2A6D1C68C13C89AEDD2E64736F6C6343000812003300000000000000000000 ","sourceMap":"641:1386:13:-:0;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"abi_decode_string":{"entryPoint":5610,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_uint256t_stringt_stringt_string":{"entryPoint":5696,"id":null,"parameterSlots":1,"returnSlots":4},"abi_encode_packed_uint256_address_uint256":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_uint256_string_string_string":{"entryPoint":5830,"id":null,"parameterSlots":1,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":5795,"id":null,"parameterSlots":2,"returnSlots":0},"extract_byte_array_length":{"entryPoint":6104,"id":null,"parameterSlots":1,"returnSlots":1},"finalize_allocation":{"entryPoint":5577,"id":null,"parameterSlots":2,"returnSlots":0},"finalize_allocation_33098":{"entryPoint":5496,"id":null,"parameterSlots":1,"returnSlots":0},"finalize_allocation_33099":{"entryPoint":5523,"id":null,"parameterSlots":1,"returnSlots":0},"finalize_allocation_40893":{"entryPoint":5550,"id":null,"parameterSlots":1,"returnSlots":0},"mapping_index_access_mapping_address_uint256_of_address":{"entryPoint":5958,"id":null,"parameterSlots":1,"returnSlots":1},"require_helper_stringliteral":{"entryPoint":6162,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_4d1a":{"entryPoint":6231,"id":null,"parameterSlots":1,"returnSlots":0},"storage_array_index_access_address_dyn_ptr":{"entryPoint":6015,"id":null,"parameterSlots":1,"returnSlots":2}},"generatedSources":[],"immutableReferences":{},"linkReferences":{"contracts/LibSusuwatari.sol":{"LibSusuwatari":[{"length":20,"start":5009}]}},"object":"608080604052600436101561001357600080fd5b60003560e01c908163378aa701146112e4575080635fd9a90d14610f69578063786307481461096d57806383d4fdce146106c157639a198d611461005657600080fd5b346106bc5760003660031901126106bc5761007033611746565b54610677576000805160206118e4833981519152805460018101809111610661576040519060e082018281106001600160401b0382111761040b576040528152604051916100bd836115ae565b60008352602082019283526040516100d4816115ae565b6000815260408301526040516100e9816115ae565b6000815260608301526040516100fe816115ae565b6000815260808301523360a0830152600060c0830152600161011f33611746565b5580546801000000000000000081101561040b576101429160018201905561177f565b81549060031b9033821b9160018060a01b03901b191617905580516000526000805160206118a483398151915260205260406000209181518355519182516001600160401b03811161040b5761019b60018301546117d8565b601f811161061a575b506020601f82116001146105ac57819293946000926105a1575b50508160011b916000199060031b1c19161760018201555b60408201519182516001600160401b03811161040b576101f960028401546117d8565b601f811161055a575b506020601f82116001146104ec57819293946000926104e1575b50508160011b916000199060031b1c19161760028301555b60608101519182516001600160401b03811161040b5761025760038301546117d8565b601f811161049a575b506020601f821160011461042c5781929394600092610421575b50508160011b916000199060031b1c19161760038201555b60808201519182516001600160401b03811161040b576102b560048401546117d8565b601f81116103c0575b506020601f82116001146103545781929394600092610349575b50508160011b916000199060031b1c19161760048301555b600582019160018060a01b0360a083015116926001600160601b0360a01b9384825416179055600660c0830151910155516000526000805160206118c48339815191526020526040600020903390825416179055600080f35b0151905038806102d8565b601f198216906004850160005260206000209160005b8181106103a85750958360019596971061038f575b505050811b0160048301556102f0565b015160001960f88460031b161c1916905538808061037f565b9192602060018192868b01518155019401920161036a565b600484016000526020600020601f830160051c81019160208410610401575b601f0160051c01905b8181106103f557506102be565b600081556001016103e8565b90915081906103df565b634e487b7160e01b600052604160045260246000fd5b01519050388061027a565b6003830160005260206000209060005b601f19841681106104825750600193949583601f19811610610469575b505050811b016003820155610292565b015160001960f88460031b161c19169055388080610459565b9091602060018192858a01518155019301910161043c565b600383016000526020600020601f830160051c8101602084106104da575b601f830160051c820181106104ce575050610260565b600081556001016104b8565b50806104b8565b01519050388061021c565b6002840160005260206000209060005b601f19841681106105425750600193949583601f19811610610529575b505050811b016002830155610234565b015160001960f88460031b161c19169055388080610519565b9091602060018192858a0151815501930191016104fc565b600284016000526020600020601f830160051c81016020841061059a575b601f830160051c8201811061058e575050610202565b60008155600101610578565b5080610578565b0151905038806101be565b6001830160005260206000209060005b601f19841681106106025750600193949583601f198116106105e9575b505050811b0160018201556101d6565b015160001960f88460031b161c191690553880806105d9565b9091602060018192858a0151815501930191016105bc565b600183016000526020600020601f830160051c81016020841061065a575b601f830160051c8201811061064e5750506101a4565b60008155600101610638565b5080610638565b634e487b7160e01b600052601160045260246000fd5b60405162461bcd60e51b815260206004820152601760248201527f5573657220616c726561647920726567697374657265640000000000000000006044820152606490fd5b600080fd5b346106bc576106cf36611640565b5050906106e66106de33611746565b541515611812565b80151580610954575b6106f890611857565b806000526000805160206118a48339815191526020908082523360018060a01b0360056040600020015416036108fe578260005281526040600020926040519061012d8383018361076987334285916054939183526001600160601b03199060601b16602083015260348201520190565b039361077d601f19958681018352826115c9565b5190200661012c90810180911161066157600686015560028501918151916001600160401b03831161040b576107b384546117d8565b601f81116108b8575b508491601f841160011461084257509180600594926000805160206118c4833981519152979894600092610837575b50508160011b916000199060031b1c19161790555b01926001600160601b0360a01b9384815416905560005252604060002090339082541617905560405180610833816116c6565b0390f35b0151905088806107eb565b60008581528681209392918516905b8181106108a157509260019285926000805160206118c4833981519152999a966005989610610888575b505050811b019055610800565b015160001960f88460031b161c1916905588808061087b565b929387600181928786015181550195019301610851565b8460005285600020601f850160051c8101918786106108f4575b601f0160051c01905b8181106108e857506107bc565b600081556001016108db565b90915081906108d2565b60405162461bcd60e51b815260048101839052602860248201527f43616c6c657220646f65736e27742063617272792061205375737577617461726044820152676920546f6b656e2160c01b6064820152608490fd5b506000805160206118e4833981519152548111156106ef565b346106bc5761097b36611640565b9161098b6106de94929433611746565b81151580610f50575b61099d90611857565b6109a68261177f565b905460039190911b1c6001600160a01b0390811633149081610f25575b5015610eea57816000526000805160206118a483398151915260205260406000209061012d6040516020810190610a2c81610a1e88334287916054939183526001600160601b03199060601b16602083015260348201520190565b03601f1981018352826115c9565b5190200661012c90810180911161066157600683015580516001600160401b03811161040b57610a5f60018401546117d8565b601f8111610ea3575b50806020601f8211600114610e3857600091610e2d575b508160011b916000199060031b1c19161760018301555b8051906001600160401b03821161040b578190610ab660028501546117d8565b601f8111610dda575b50602090601f8311600114610d6d57600092610d62575b50508160011b916000199060031b1c19161760028201555b83516001600160401b03811161040b57610b0b60038301546117d8565b601f8111610d1b575b50602094601f8211600114610caf57948192939495600092610ca4575b50508160011b916000199060031b1c19161760038201555b6004810183516001600160401b03811161040b57610b6782546117d8565b601f8111610c5c575b506020601f8211600114610bf257819060059596600092610be7575b50508160011b916000199060031b1c19161790555b01906001600160601b0360a01b9133838254161790556000526000805160206118c4833981519152602052604060002090339082541617905560405180610833816116c6565b015190508680610b8c565b601f198216958360005260206000209660005b818110610c445750916005969791846001959410610c2b575b505050811b019055610ba1565b015160001960f88460031b161c19169055868080610c1e565b83830151895560019098019760209384019301610c05565b826000526020600020601f830160051c81019160208410610c9a575b601f0160051c01905b818110610c8e5750610b70565b60008155600101610c81565b9091508190610c78565b015190508580610b31565b601f198216956003840160005260206000209160005b888110610d0357508360019596979810610cea575b505050811b016003820155610b49565b015160001960f88460031b161c19169055858080610cda565b91926020600181928685015181550194019201610cc5565b600383016000526020600020601f830160051c810160208410610d5b575b601f830160051c82018110610d4f575050610b14565b60008155600101610d39565b5080610d39565b015190508680610ad6565b600285016000908152602081209350601f198516905b818110610dc25750908460019594939210610da9575b505050811b016002820155610aee565b015160001960f88460031b161c19169055868080610d99565b92936020600181928786015181550195019301610d83565b909150600284016000526020600020601f840160051c810160208510610e26575b90849392915b601f830160051c82018110610e17575050610abf565b60008155859450600101610e01565b5080610dfb565b905082015187610a7f565b600185016000908152602081209250601f198416905b818110610e8b57509083600194939210610e72575b5050811b016001830155610a96565b84015160001960f88460031b161c191690558780610e63565b91926020600181928689015181550194019201610e4e565b600184016000526020600020601f830160051c810160208410610ee3575b601f830160051c82018110610ed7575050610a68565b60008155600101610ec1565b5080610ec1565b60405162461bcd60e51b815260206004820152601360248201527221b0b63632b91034b9903737ba1037bbb732b960691b6044820152606490fd5b9050826000526000805160206118a483398151915260205233906005604060002001541614856109c3565b506000805160206118e483398151915254821115610994565b346106bc57610f7736611640565b5050610f856106de33611746565b811515806112cb575b610f9790611857565b6000806000805160206118e483398151915254905b818110611280575b50506112275760008281526000805160206118a483398151915260208181526040909220600501546001600160a01b03166111e25783600052815260406000209160028301906040519182848101916000908054611011816117d8565b916001918983821691826000146111c757505060011461118b575b5050500392611043601f19948581018352826115c9565b5190209060405190848282519260005b8481106111745750506110739281016000838201520380845201826115c9565b8381519101200361112157604051428382019081523360601b6bffffffffffffffffffffffff191660208201526034810186905261012d929091906110c3908260548501039081018352826115c9565b5190200661012c908101809111610661578260059160066000805160206118c483398151915295015501926001600160601b0360a01b93338582541617905560005252604060002090339082541617905560405180610833816116c6565b60405162461bcd60e51b815260048101839052602560248201527f43616c6c6572206973206e6f7420696e2074686520636f7272656374206c6f6360448201526430ba34b7b760d91b6064820152608490fd5b818101840151868201850152889386935001611053565b88935060005282600020906000915b8383106111af5750505082010188808061102c565b8054838a01860152889550899490920191810161119a565b93509450505060ff191684528015150282010188808061102c565b60405162461bcd60e51b815260048101839052601e60248201527f5375737520697320616c7265616479206265696e6720636172726965642100006044820152606490fd5b60405162461bcd60e51b815260206004820152602b60248201527f43616c6c657220697320616c726561647920636172727920612053757375776160448201526a7461726920546f6b656e2160a81b6064820152608490fd5b60008181526000805160206118a483398151915260205260409020600501546001600160a01b031633146112bf57600019811461066157600101610fac565b50505060018380610fb4565b506000805160206118e483398151915254821115610f8e565b346106bc5760003660031901126106bc576112fe81611578565b6060815260405161130e81611593565b600081526020809260008284015260006040840152015260018060a01b03807fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c13205416330361151e576040516351514c2b60e11b81527f202e1867cade063e32a2eb339a246f853a1a233314949ba8d9e2ac766f6ed846600482015260008160248173__$0820f723aeb6f00714a6a0f17f71596d4d$__5af49081156115125760009161141c575b506040519183835260a083019180519260808686015283518091528560c0860194019060005b81811061140857505050848495604092015190815183870152810151606086015201511660808301520390f35b8251865294870194918701916001016113db565b90503d806000833e61142e81836115c9565b81019083818303126106bc5780516001600160401b03918282116106bc57019081830390608082126106bc576040519361146785611578565b83518281116106bc57840181601f820112156106bc57805192831161040b578260051b6040519361149a8a8301866115c9565b845288808501918301019283116106bc5788809201905b8382106115035750505050906060918452601f1901126106bc576060604051916114da83611593565b858101518352604081015186840152015183811681036106bc57604082015283820152836113b5565b815181529082019082016114b1565b6040513d6000823e3d90fd5b60405162461bcd60e51b815260048101839052602c60248201527f4f6e6c79206f776e657220697320616c6c6f77656420746f20706572666f726d60448201526b103a3434b99030b1ba34b7b760a11b6064820152608490fd5b604081019081106001600160401b0382111761040b57604052565b606081019081106001600160401b0382111761040b57604052565b602081019081106001600160401b0382111761040b57604052565b90601f801991011681019081106001600160401b0382111761040b57604052565b81601f820112156106bc578035906001600160401b03821161040b576040519261161e601f8401601f1916602001856115c9565b828452602083830101116106bc57816000926020809301838601378301015290565b9060806003198301126106bc57600435916001600160401b03916024358381116106bc5782611671916004016115ea565b926044358181116106bc5783611689916004016115ea565b926064359182116106bc576116a0916004016115ea565b90565b60005b8281106116b557506000910152565b6080810151828201526020016116a6565b60e0906000815260806020820152601f6060518060808401526116ec8160a085016116a3565b81199182910116820160a083820301604084015281601f6060518060a08501526117198160c086016116a3565b01160191606060c082850301910152601f6060518060c085015261173f818686016116a3565b0116010190565b6001600160a01b031660009081527f202e1867cade063e32a2eb339a246f853a1a233314949ba8d9e2ac766f6ed8466020526040902090565b6000805160206118e483398151915280548210156117c2576000527f5b627e705e277f4cd69351cfcf0179f3685951408382038c266c60748db0394a0190600090565b634e487b7160e01b600052603260045260246000fd5b90600182811c92168015611808575b60208310146117f257565b634e487b7160e01b600052602260045260246000fd5b91607f16916117e7565b1561181957565b60405162461bcd60e51b8152602060048201526016602482015275155cd95c881a5cc81b9bdd081c9959da5cdd195c995960521b6044820152606490fd5b1561185e57565b60405162461bcd60e51b815260206004820152601d60248201527f546865205375737577617461726920646f6573206e6f742065786973740000006044820152606490fdfe202e1867cade063e32a2eb339a246f853a1a233314949ba8d9e2ac766f6ed848202e1867cade063e32a2eb339a246f853a1a233314949ba8d9e2ac766f6ed84a202e1867cade063e32a2eb339a246f853a1a233314949ba8d9e2ac766f6ed847a2646970667358221220a0443f15800ab537d6db58ff2e42fcdb2ca70336097e2a6d1c68c13c89aedd2e64736f6c63430008120033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x378AA701 EQ PUSH2 0x12E4 JUMPI POP DUP1 PUSH4 0x5FD9A90D EQ PUSH2 0xF69 JUMPI DUP1 PUSH4 0x78630748 EQ PUSH2 0x96D JUMPI DUP1 PUSH4 0x83D4FDCE EQ PUSH2 0x6C1 JUMPI PUSH4 0x9A198D61 EQ PUSH2 0x56 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x6BC JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x6BC JUMPI PUSH2 0x70 CALLER PUSH2 0x1746 JUMP JUMPDEST SLOAD PUSH2 0x677 JUMPI PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x18E4 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP1 SWAP2 GT PUSH2 0x661 JUMPI PUSH1 0x40 MLOAD SWAP1 PUSH1 0xE0 DUP3 ADD DUP3 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x40B JUMPI PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x40 MLOAD SWAP2 PUSH2 0xBD DUP4 PUSH2 0x15AE JUMP JUMPDEST PUSH1 0x0 DUP4 MSTORE PUSH1 0x20 DUP3 ADD SWAP3 DUP4 MSTORE PUSH1 0x40 MLOAD PUSH2 0xD4 DUP2 PUSH2 0x15AE JUMP JUMPDEST PUSH1 0x0 DUP2 MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x40 MLOAD PUSH2 0xE9 DUP2 PUSH2 0x15AE JUMP JUMPDEST PUSH1 0x0 DUP2 MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x40 MLOAD PUSH2 0xFE DUP2 PUSH2 0x15AE JUMP JUMPDEST PUSH1 0x0 DUP2 MSTORE PUSH1 0x80 DUP4 ADD MSTORE CALLER PUSH1 0xA0 DUP4 ADD MSTORE PUSH1 0x0 PUSH1 0xC0 DUP4 ADD MSTORE PUSH1 0x1 PUSH2 0x11F CALLER PUSH2 0x1746 JUMP JUMPDEST SSTORE DUP1 SLOAD PUSH9 0x10000000000000000 DUP2 LT ISZERO PUSH2 0x40B JUMPI PUSH2 0x142 SWAP2 PUSH1 0x1 DUP3 ADD SWAP1 SSTORE PUSH2 0x177F JUMP JUMPDEST DUP2 SLOAD SWAP1 PUSH1 0x3 SHL SWAP1 CALLER DUP3 SHL SWAP2 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP1 SHL NOT AND OR SWAP1 SSTORE DUP1 MLOAD PUSH1 0x0 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x18A4 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP2 DUP2 MLOAD DUP4 SSTORE MLOAD SWAP2 DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x40B JUMPI PUSH2 0x19B PUSH1 0x1 DUP4 ADD SLOAD PUSH2 0x17D8 JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0x61A JUMPI JUMPDEST POP PUSH1 0x20 PUSH1 0x1F DUP3 GT PUSH1 0x1 EQ PUSH2 0x5AC JUMPI DUP2 SWAP3 SWAP4 SWAP5 PUSH1 0x0 SWAP3 PUSH2 0x5A1 JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0x1 DUP3 ADD SSTORE JUMPDEST PUSH1 0x40 DUP3 ADD MLOAD SWAP2 DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x40B JUMPI PUSH2 0x1F9 PUSH1 0x2 DUP5 ADD SLOAD PUSH2 0x17D8 JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0x55A JUMPI JUMPDEST POP PUSH1 0x20 PUSH1 0x1F DUP3 GT PUSH1 0x1 EQ PUSH2 0x4EC JUMPI DUP2 SWAP3 SWAP4 SWAP5 PUSH1 0x0 SWAP3 PUSH2 0x4E1 JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0x2 DUP4 ADD SSTORE JUMPDEST PUSH1 0x60 DUP2 ADD MLOAD SWAP2 DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x40B JUMPI PUSH2 0x257 PUSH1 0x3 DUP4 ADD SLOAD PUSH2 0x17D8 JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0x49A JUMPI JUMPDEST POP PUSH1 0x20 PUSH1 0x1F DUP3 GT PUSH1 0x1 EQ PUSH2 0x42C JUMPI DUP2 SWAP3 SWAP4 SWAP5 PUSH1 0x0 SWAP3 PUSH2 0x421 JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0x3 DUP3 ADD SSTORE JUMPDEST PUSH1 0x80 DUP3 ADD MLOAD SWAP2 DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x40B JUMPI PUSH2 0x2B5 PUSH1 0x4 DUP5 ADD SLOAD PUSH2 0x17D8 JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0x3C0 JUMPI JUMPDEST POP PUSH1 0x20 PUSH1 0x1F DUP3 GT PUSH1 0x1 EQ PUSH2 0x354 JUMPI DUP2 SWAP3 SWAP4 SWAP5 PUSH1 0x0 SWAP3 PUSH2 0x349 JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0x4 DUP4 ADD SSTORE JUMPDEST PUSH1 0x5 DUP3 ADD SWAP2 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0xA0 DUP4 ADD MLOAD AND SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL SWAP4 DUP5 DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x6 PUSH1 0xC0 DUP4 ADD MLOAD SWAP2 ADD SSTORE MLOAD PUSH1 0x0 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x18C4 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 CALLER SWAP1 DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x0 DUP1 RETURN JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH2 0x2D8 JUMP JUMPDEST PUSH1 0x1F NOT DUP3 AND SWAP1 PUSH1 0x4 DUP6 ADD PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP2 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT PUSH2 0x3A8 JUMPI POP SWAP6 DUP4 PUSH1 0x1 SWAP6 SWAP7 SWAP8 LT PUSH2 0x38F JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH1 0x4 DUP4 ADD SSTORE PUSH2 0x2F0 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH2 0x37F JUMP JUMPDEST SWAP2 SWAP3 PUSH1 0x20 PUSH1 0x1 DUP2 SWAP3 DUP7 DUP12 ADD MLOAD DUP2 SSTORE ADD SWAP5 ADD SWAP3 ADD PUSH2 0x36A JUMP JUMPDEST PUSH1 0x4 DUP5 ADD PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 PUSH1 0x1F DUP4 ADD PUSH1 0x5 SHR DUP2 ADD SWAP2 PUSH1 0x20 DUP5 LT PUSH2 0x401 JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP1 JUMPDEST DUP2 DUP2 LT PUSH2 0x3F5 JUMPI POP PUSH2 0x2BE JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x3E8 JUMP JUMPDEST SWAP1 SWAP2 POP DUP2 SWAP1 PUSH2 0x3DF JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH2 0x27A JUMP JUMPDEST PUSH1 0x3 DUP4 ADD PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x0 JUMPDEST PUSH1 0x1F NOT DUP5 AND DUP2 LT PUSH2 0x482 JUMPI POP PUSH1 0x1 SWAP4 SWAP5 SWAP6 DUP4 PUSH1 0x1F NOT DUP2 AND LT PUSH2 0x469 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH1 0x3 DUP3 ADD SSTORE PUSH2 0x292 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH2 0x459 JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0x20 PUSH1 0x1 DUP2 SWAP3 DUP6 DUP11 ADD MLOAD DUP2 SSTORE ADD SWAP4 ADD SWAP2 ADD PUSH2 0x43C JUMP JUMPDEST PUSH1 0x3 DUP4 ADD PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 PUSH1 0x1F DUP4 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP5 LT PUSH2 0x4DA JUMPI JUMPDEST PUSH1 0x1F DUP4 ADD PUSH1 0x5 SHR DUP3 ADD DUP2 LT PUSH2 0x4CE JUMPI POP POP PUSH2 0x260 JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x4B8 JUMP JUMPDEST POP DUP1 PUSH2 0x4B8 JUMP JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH2 0x21C JUMP JUMPDEST PUSH1 0x2 DUP5 ADD PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x0 JUMPDEST PUSH1 0x1F NOT DUP5 AND DUP2 LT PUSH2 0x542 JUMPI POP PUSH1 0x1 SWAP4 SWAP5 SWAP6 DUP4 PUSH1 0x1F NOT DUP2 AND LT PUSH2 0x529 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH1 0x2 DUP4 ADD SSTORE PUSH2 0x234 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH2 0x519 JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0x20 PUSH1 0x1 DUP2 SWAP3 DUP6 DUP11 ADD MLOAD DUP2 SSTORE ADD SWAP4 ADD SWAP2 ADD PUSH2 0x4FC JUMP JUMPDEST PUSH1 0x2 DUP5 ADD PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 PUSH1 0x1F DUP4 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP5 LT PUSH2 0x59A JUMPI JUMPDEST PUSH1 0x1F DUP4 ADD PUSH1 0x5 SHR DUP3 ADD DUP2 LT PUSH2 0x58E JUMPI POP POP PUSH2 0x202 JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x578 JUMP JUMPDEST POP DUP1 PUSH2 0x578 JUMP JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH2 0x1BE JUMP JUMPDEST PUSH1 0x1 DUP4 ADD PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x0 JUMPDEST PUSH1 0x1F NOT DUP5 AND DUP2 LT PUSH2 0x602 JUMPI POP PUSH1 0x1 SWAP4 SWAP5 SWAP6 DUP4 PUSH1 0x1F NOT DUP2 AND LT PUSH2 0x5E9 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH1 0x1 DUP3 ADD SSTORE PUSH2 0x1D6 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH2 0x5D9 JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0x20 PUSH1 0x1 DUP2 SWAP3 DUP6 DUP11 ADD MLOAD DUP2 SSTORE ADD SWAP4 ADD SWAP2 ADD PUSH2 0x5BC JUMP JUMPDEST PUSH1 0x1 DUP4 ADD PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 PUSH1 0x1F DUP4 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP5 LT PUSH2 0x65A JUMPI JUMPDEST PUSH1 0x1F DUP4 ADD PUSH1 0x5 SHR DUP3 ADD DUP2 LT PUSH2 0x64E JUMPI POP POP PUSH2 0x1A4 JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x638 JUMP JUMPDEST POP DUP1 PUSH2 0x638 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5573657220616C72656164792072656769737465726564000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x6BC JUMPI PUSH2 0x6CF CALLDATASIZE PUSH2 0x1640 JUMP JUMPDEST POP POP SWAP1 PUSH2 0x6E6 PUSH2 0x6DE CALLER PUSH2 0x1746 JUMP JUMPDEST SLOAD ISZERO ISZERO PUSH2 0x1812 JUMP JUMPDEST DUP1 ISZERO ISZERO DUP1 PUSH2 0x954 JUMPI JUMPDEST PUSH2 0x6F8 SWAP1 PUSH2 0x1857 JUMP JUMPDEST DUP1 PUSH1 0x0 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x18A4 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x20 SWAP1 DUP1 DUP3 MSTORE CALLER PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x5 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD SLOAD AND SUB PUSH2 0x8FE JUMPI DUP3 PUSH1 0x0 MSTORE DUP2 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP3 PUSH1 0x40 MLOAD SWAP1 PUSH2 0x12D DUP4 DUP4 ADD DUP4 PUSH2 0x769 DUP8 CALLER TIMESTAMP DUP6 SWAP2 PUSH1 0x54 SWAP4 SWAP2 DUP4 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT SWAP1 PUSH1 0x60 SHL AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x34 DUP3 ADD MSTORE ADD SWAP1 JUMP JUMPDEST SUB SWAP4 PUSH2 0x77D PUSH1 0x1F NOT SWAP6 DUP7 DUP2 ADD DUP4 MSTORE DUP3 PUSH2 0x15C9 JUMP JUMPDEST MLOAD SWAP1 KECCAK256 MOD PUSH2 0x12C SWAP1 DUP2 ADD DUP1 SWAP2 GT PUSH2 0x661 JUMPI PUSH1 0x6 DUP7 ADD SSTORE PUSH1 0x2 DUP6 ADD SWAP2 DUP2 MLOAD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT PUSH2 0x40B JUMPI PUSH2 0x7B3 DUP5 SLOAD PUSH2 0x17D8 JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0x8B8 JUMPI JUMPDEST POP DUP5 SWAP2 PUSH1 0x1F DUP5 GT PUSH1 0x1 EQ PUSH2 0x842 JUMPI POP SWAP2 DUP1 PUSH1 0x5 SWAP5 SWAP3 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x18C4 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP8 SWAP9 SWAP5 PUSH1 0x0 SWAP3 PUSH2 0x837 JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR SWAP1 SSTORE JUMPDEST ADD SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL SWAP4 DUP5 DUP2 SLOAD AND SWAP1 SSTORE PUSH1 0x0 MSTORE MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 CALLER SWAP1 DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x40 MLOAD DUP1 PUSH2 0x833 DUP2 PUSH2 0x16C6 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST ADD MLOAD SWAP1 POP DUP9 DUP1 PUSH2 0x7EB JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE DUP7 DUP2 KECCAK256 SWAP4 SWAP3 SWAP2 DUP6 AND SWAP1 JUMPDEST DUP2 DUP2 LT PUSH2 0x8A1 JUMPI POP SWAP3 PUSH1 0x1 SWAP3 DUP6 SWAP3 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x18C4 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP10 SWAP11 SWAP7 PUSH1 0x5 SWAP9 SWAP7 LT PUSH2 0x888 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD SWAP1 SSTORE PUSH2 0x800 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE DUP9 DUP1 DUP1 PUSH2 0x87B JUMP JUMPDEST SWAP3 SWAP4 DUP8 PUSH1 0x1 DUP2 SWAP3 DUP8 DUP7 ADD MLOAD DUP2 SSTORE ADD SWAP6 ADD SWAP4 ADD PUSH2 0x851 JUMP JUMPDEST DUP5 PUSH1 0x0 MSTORE DUP6 PUSH1 0x0 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD SWAP2 DUP8 DUP7 LT PUSH2 0x8F4 JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP1 JUMPDEST DUP2 DUP2 LT PUSH2 0x8E8 JUMPI POP PUSH2 0x7BC JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x8DB JUMP JUMPDEST SWAP1 SWAP2 POP DUP2 SWAP1 PUSH2 0x8D2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616C6C657220646F65736E2774206361727279206120537573757761746172 PUSH1 0x44 DUP3 ADD MSTORE PUSH8 0x6920546F6B656E21 PUSH1 0xC0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST POP PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x18E4 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD DUP2 GT ISZERO PUSH2 0x6EF JUMP JUMPDEST CALLVALUE PUSH2 0x6BC JUMPI PUSH2 0x97B CALLDATASIZE PUSH2 0x1640 JUMP JUMPDEST SWAP2 PUSH2 0x98B PUSH2 0x6DE SWAP5 SWAP3 SWAP5 CALLER PUSH2 0x1746 JUMP JUMPDEST DUP2 ISZERO ISZERO DUP1 PUSH2 0xF50 JUMPI JUMPDEST PUSH2 0x99D SWAP1 PUSH2 0x1857 JUMP JUMPDEST PUSH2 0x9A6 DUP3 PUSH2 0x177F JUMP JUMPDEST SWAP1 SLOAD PUSH1 0x3 SWAP2 SWAP1 SWAP2 SHL SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND CALLER EQ SWAP1 DUP2 PUSH2 0xF25 JUMPI JUMPDEST POP ISZERO PUSH2 0xEEA JUMPI DUP2 PUSH1 0x0 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x18A4 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH2 0x12D PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xA2C DUP2 PUSH2 0xA1E DUP9 CALLER TIMESTAMP DUP8 SWAP2 PUSH1 0x54 SWAP4 SWAP2 DUP4 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT SWAP1 PUSH1 0x60 SHL AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x34 DUP3 ADD MSTORE ADD SWAP1 JUMP JUMPDEST SUB PUSH1 0x1F NOT DUP2 ADD DUP4 MSTORE DUP3 PUSH2 0x15C9 JUMP JUMPDEST MLOAD SWAP1 KECCAK256 MOD PUSH2 0x12C SWAP1 DUP2 ADD DUP1 SWAP2 GT PUSH2 0x661 JUMPI PUSH1 0x6 DUP4 ADD SSTORE DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x40B JUMPI PUSH2 0xA5F PUSH1 0x1 DUP5 ADD SLOAD PUSH2 0x17D8 JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0xEA3 JUMPI JUMPDEST POP DUP1 PUSH1 0x20 PUSH1 0x1F DUP3 GT PUSH1 0x1 EQ PUSH2 0xE38 JUMPI PUSH1 0x0 SWAP2 PUSH2 0xE2D JUMPI JUMPDEST POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0x1 DUP4 ADD SSTORE JUMPDEST DUP1 MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x40B JUMPI DUP2 SWAP1 PUSH2 0xAB6 PUSH1 0x2 DUP6 ADD SLOAD PUSH2 0x17D8 JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0xDDA JUMPI JUMPDEST POP PUSH1 0x20 SWAP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0xD6D JUMPI PUSH1 0x0 SWAP3 PUSH2 0xD62 JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0x2 DUP3 ADD SSTORE JUMPDEST DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x40B JUMPI PUSH2 0xB0B PUSH1 0x3 DUP4 ADD SLOAD PUSH2 0x17D8 JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0xD1B JUMPI JUMPDEST POP PUSH1 0x20 SWAP5 PUSH1 0x1F DUP3 GT PUSH1 0x1 EQ PUSH2 0xCAF JUMPI SWAP5 DUP2 SWAP3 SWAP4 SWAP5 SWAP6 PUSH1 0x0 SWAP3 PUSH2 0xCA4 JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0x3 DUP3 ADD SSTORE JUMPDEST PUSH1 0x4 DUP2 ADD DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x40B JUMPI PUSH2 0xB67 DUP3 SLOAD PUSH2 0x17D8 JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0xC5C JUMPI JUMPDEST POP PUSH1 0x20 PUSH1 0x1F DUP3 GT PUSH1 0x1 EQ PUSH2 0xBF2 JUMPI DUP2 SWAP1 PUSH1 0x5 SWAP6 SWAP7 PUSH1 0x0 SWAP3 PUSH2 0xBE7 JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR SWAP1 SSTORE JUMPDEST ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL SWAP2 CALLER DUP4 DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x0 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x18C4 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 CALLER SWAP1 DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x40 MLOAD DUP1 PUSH2 0x833 DUP2 PUSH2 0x16C6 JUMP JUMPDEST ADD MLOAD SWAP1 POP DUP7 DUP1 PUSH2 0xB8C JUMP JUMPDEST PUSH1 0x1F NOT DUP3 AND SWAP6 DUP4 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP7 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT PUSH2 0xC44 JUMPI POP SWAP2 PUSH1 0x5 SWAP7 SWAP8 SWAP2 DUP5 PUSH1 0x1 SWAP6 SWAP5 LT PUSH2 0xC2B JUMPI JUMPDEST POP POP POP DUP2 SHL ADD SWAP1 SSTORE PUSH2 0xBA1 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE DUP7 DUP1 DUP1 PUSH2 0xC1E JUMP JUMPDEST DUP4 DUP4 ADD MLOAD DUP10 SSTORE PUSH1 0x1 SWAP1 SWAP9 ADD SWAP8 PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 ADD PUSH2 0xC05 JUMP JUMPDEST DUP3 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 PUSH1 0x1F DUP4 ADD PUSH1 0x5 SHR DUP2 ADD SWAP2 PUSH1 0x20 DUP5 LT PUSH2 0xC9A JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP1 JUMPDEST DUP2 DUP2 LT PUSH2 0xC8E JUMPI POP PUSH2 0xB70 JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0xC81 JUMP JUMPDEST SWAP1 SWAP2 POP DUP2 SWAP1 PUSH2 0xC78 JUMP JUMPDEST ADD MLOAD SWAP1 POP DUP6 DUP1 PUSH2 0xB31 JUMP JUMPDEST PUSH1 0x1F NOT DUP3 AND SWAP6 PUSH1 0x3 DUP5 ADD PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP2 PUSH1 0x0 JUMPDEST DUP9 DUP2 LT PUSH2 0xD03 JUMPI POP DUP4 PUSH1 0x1 SWAP6 SWAP7 SWAP8 SWAP9 LT PUSH2 0xCEA JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH1 0x3 DUP3 ADD SSTORE PUSH2 0xB49 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE DUP6 DUP1 DUP1 PUSH2 0xCDA JUMP JUMPDEST SWAP2 SWAP3 PUSH1 0x20 PUSH1 0x1 DUP2 SWAP3 DUP7 DUP6 ADD MLOAD DUP2 SSTORE ADD SWAP5 ADD SWAP3 ADD PUSH2 0xCC5 JUMP JUMPDEST PUSH1 0x3 DUP4 ADD PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 PUSH1 0x1F DUP4 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP5 LT PUSH2 0xD5B JUMPI JUMPDEST PUSH1 0x1F DUP4 ADD PUSH1 0x5 SHR DUP3 ADD DUP2 LT PUSH2 0xD4F JUMPI POP POP PUSH2 0xB14 JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0xD39 JUMP JUMPDEST POP DUP1 PUSH2 0xD39 JUMP JUMPDEST ADD MLOAD SWAP1 POP DUP7 DUP1 PUSH2 0xAD6 JUMP JUMPDEST PUSH1 0x2 DUP6 ADD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 SWAP4 POP PUSH1 0x1F NOT DUP6 AND SWAP1 JUMPDEST DUP2 DUP2 LT PUSH2 0xDC2 JUMPI POP SWAP1 DUP5 PUSH1 0x1 SWAP6 SWAP5 SWAP4 SWAP3 LT PUSH2 0xDA9 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH1 0x2 DUP3 ADD SSTORE PUSH2 0xAEE JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE DUP7 DUP1 DUP1 PUSH2 0xD99 JUMP JUMPDEST SWAP3 SWAP4 PUSH1 0x20 PUSH1 0x1 DUP2 SWAP3 DUP8 DUP7 ADD MLOAD DUP2 SSTORE ADD SWAP6 ADD SWAP4 ADD PUSH2 0xD83 JUMP JUMPDEST SWAP1 SWAP2 POP PUSH1 0x2 DUP5 ADD PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 PUSH1 0x1F DUP5 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP6 LT PUSH2 0xE26 JUMPI JUMPDEST SWAP1 DUP5 SWAP4 SWAP3 SWAP2 JUMPDEST PUSH1 0x1F DUP4 ADD PUSH1 0x5 SHR DUP3 ADD DUP2 LT PUSH2 0xE17 JUMPI POP POP PUSH2 0xABF JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE DUP6 SWAP5 POP PUSH1 0x1 ADD PUSH2 0xE01 JUMP JUMPDEST POP DUP1 PUSH2 0xDFB JUMP JUMPDEST SWAP1 POP DUP3 ADD MLOAD DUP8 PUSH2 0xA7F JUMP JUMPDEST PUSH1 0x1 DUP6 ADD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 SWAP3 POP PUSH1 0x1F NOT DUP5 AND SWAP1 JUMPDEST DUP2 DUP2 LT PUSH2 0xE8B JUMPI POP SWAP1 DUP4 PUSH1 0x1 SWAP5 SWAP4 SWAP3 LT PUSH2 0xE72 JUMPI JUMPDEST POP POP DUP2 SHL ADD PUSH1 0x1 DUP4 ADD SSTORE PUSH2 0xA96 JUMP JUMPDEST DUP5 ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE DUP8 DUP1 PUSH2 0xE63 JUMP JUMPDEST SWAP2 SWAP3 PUSH1 0x20 PUSH1 0x1 DUP2 SWAP3 DUP7 DUP10 ADD MLOAD DUP2 SSTORE ADD SWAP5 ADD SWAP3 ADD PUSH2 0xE4E JUMP JUMPDEST PUSH1 0x1 DUP5 ADD PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 PUSH1 0x1F DUP4 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP5 LT PUSH2 0xEE3 JUMPI JUMPDEST PUSH1 0x1F DUP4 ADD PUSH1 0x5 SHR DUP3 ADD DUP2 LT PUSH2 0xED7 JUMPI POP POP PUSH2 0xA68 JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0xEC1 JUMP JUMPDEST POP DUP1 PUSH2 0xEC1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x21B0B63632B91034B9903737BA1037BBB732B9 PUSH1 0x69 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP1 POP DUP3 PUSH1 0x0 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x18A4 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x20 MSTORE CALLER SWAP1 PUSH1 0x5 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD SLOAD AND EQ DUP6 PUSH2 0x9C3 JUMP JUMPDEST POP PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x18E4 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD DUP3 GT ISZERO PUSH2 0x994 JUMP JUMPDEST CALLVALUE PUSH2 0x6BC JUMPI PUSH2 0xF77 CALLDATASIZE PUSH2 0x1640 JUMP JUMPDEST POP POP PUSH2 0xF85 PUSH2 0x6DE CALLER PUSH2 0x1746 JUMP JUMPDEST DUP2 ISZERO ISZERO DUP1 PUSH2 0x12CB JUMPI JUMPDEST PUSH2 0xF97 SWAP1 PUSH2 0x1857 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x18E4 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD SWAP1 JUMPDEST DUP2 DUP2 LT PUSH2 0x1280 JUMPI JUMPDEST POP POP PUSH2 0x1227 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x18A4 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 SWAP1 SWAP3 KECCAK256 PUSH1 0x5 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x11E2 JUMPI DUP4 PUSH1 0x0 MSTORE DUP2 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP2 PUSH1 0x2 DUP4 ADD SWAP1 PUSH1 0x40 MLOAD SWAP2 DUP3 DUP5 DUP2 ADD SWAP2 PUSH1 0x0 SWAP1 DUP1 SLOAD PUSH2 0x1011 DUP2 PUSH2 0x17D8 JUMP JUMPDEST SWAP2 PUSH1 0x1 SWAP2 DUP10 DUP4 DUP3 AND SWAP2 DUP3 PUSH1 0x0 EQ PUSH2 0x11C7 JUMPI POP POP PUSH1 0x1 EQ PUSH2 0x118B JUMPI JUMPDEST POP POP POP SUB SWAP3 PUSH2 0x1043 PUSH1 0x1F NOT SWAP5 DUP6 DUP2 ADD DUP4 MSTORE DUP3 PUSH2 0x15C9 JUMP JUMPDEST MLOAD SWAP1 KECCAK256 SWAP1 PUSH1 0x40 MLOAD SWAP1 DUP5 DUP3 DUP3 MLOAD SWAP3 PUSH1 0x0 JUMPDEST DUP5 DUP2 LT PUSH2 0x1174 JUMPI POP POP PUSH2 0x1073 SWAP3 DUP2 ADD PUSH1 0x0 DUP4 DUP3 ADD MSTORE SUB DUP1 DUP5 MSTORE ADD DUP3 PUSH2 0x15C9 JUMP JUMPDEST DUP4 DUP2 MLOAD SWAP2 ADD KECCAK256 SUB PUSH2 0x1121 JUMPI PUSH1 0x40 MLOAD TIMESTAMP DUP4 DUP3 ADD SWAP1 DUP2 MSTORE CALLER PUSH1 0x60 SHL PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x34 DUP2 ADD DUP7 SWAP1 MSTORE PUSH2 0x12D SWAP3 SWAP1 SWAP2 SWAP1 PUSH2 0x10C3 SWAP1 DUP3 PUSH1 0x54 DUP6 ADD SUB SWAP1 DUP2 ADD DUP4 MSTORE DUP3 PUSH2 0x15C9 JUMP JUMPDEST MLOAD SWAP1 KECCAK256 MOD PUSH2 0x12C SWAP1 DUP2 ADD DUP1 SWAP2 GT PUSH2 0x661 JUMPI DUP3 PUSH1 0x5 SWAP2 PUSH1 0x6 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x18C4 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP6 ADD SSTORE ADD SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL SWAP4 CALLER DUP6 DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x0 MSTORE MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 CALLER SWAP1 DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x40 MLOAD DUP1 PUSH2 0x833 DUP2 PUSH2 0x16C6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616C6C6572206973206E6F7420696E2074686520636F7272656374206C6F63 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x30BA34B7B7 PUSH1 0xD9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST DUP2 DUP2 ADD DUP5 ADD MLOAD DUP7 DUP3 ADD DUP6 ADD MSTORE DUP9 SWAP4 DUP7 SWAP4 POP ADD PUSH2 0x1053 JUMP JUMPDEST DUP9 SWAP4 POP PUSH1 0x0 MSTORE DUP3 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x0 SWAP2 JUMPDEST DUP4 DUP4 LT PUSH2 0x11AF JUMPI POP POP POP DUP3 ADD ADD DUP9 DUP1 DUP1 PUSH2 0x102C JUMP JUMPDEST DUP1 SLOAD DUP4 DUP11 ADD DUP7 ADD MSTORE DUP9 SWAP6 POP DUP10 SWAP5 SWAP1 SWAP3 ADD SWAP2 DUP2 ADD PUSH2 0x119A JUMP JUMPDEST SWAP4 POP SWAP5 POP POP POP PUSH1 0xFF NOT AND DUP5 MSTORE DUP1 ISZERO ISZERO MUL DUP3 ADD ADD DUP9 DUP1 DUP1 PUSH2 0x102C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5375737520697320616C7265616479206265696E672063617272696564210000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616C6C657220697320616C7265616479206361727279206120537573757761 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x7461726920546F6B656E21 PUSH1 0xA8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x18A4 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x5 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x12BF JUMPI PUSH1 0x0 NOT DUP2 EQ PUSH2 0x661 JUMPI PUSH1 0x1 ADD PUSH2 0xFAC JUMP JUMPDEST POP POP POP PUSH1 0x1 DUP4 DUP1 PUSH2 0xFB4 JUMP JUMPDEST POP PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x18E4 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD DUP3 GT ISZERO PUSH2 0xF8E JUMP JUMPDEST CALLVALUE PUSH2 0x6BC JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x6BC JUMPI PUSH2 0x12FE DUP2 PUSH2 0x1578 JUMP JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x40 MLOAD PUSH2 0x130E DUP2 PUSH2 0x1593 JUMP JUMPDEST PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 DUP1 SWAP3 PUSH1 0x0 DUP3 DUP5 ADD MSTORE PUSH1 0x0 PUSH1 0x40 DUP5 ADD MSTORE ADD MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 PUSH32 0xC8FCAD8DB84D3CC18B4C41D551EA0EE66DD599CDE068D998E57D5E09332C1320 SLOAD AND CALLER SUB PUSH2 0x151E JUMPI PUSH1 0x40 MLOAD PUSH4 0x51514C2B PUSH1 0xE1 SHL DUP2 MSTORE PUSH32 0x202E1867CADE063E32A2EB339A246F853A1A233314949BA8D9E2AC766F6ED846 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 DUP2 PUSH1 0x24 DUP2 PUSH20 0x0 GAS DELEGATECALL SWAP1 DUP2 ISZERO PUSH2 0x1512 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x141C JUMPI JUMPDEST POP PUSH1 0x40 MLOAD SWAP2 DUP4 DUP4 MSTORE PUSH1 0xA0 DUP4 ADD SWAP2 DUP1 MLOAD SWAP3 PUSH1 0x80 DUP7 DUP7 ADD MSTORE DUP4 MLOAD DUP1 SWAP2 MSTORE DUP6 PUSH1 0xC0 DUP7 ADD SWAP5 ADD SWAP1 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT PUSH2 0x1408 JUMPI POP POP POP DUP5 DUP5 SWAP6 PUSH1 0x40 SWAP3 ADD MLOAD SWAP1 DUP2 MLOAD DUP4 DUP8 ADD MSTORE DUP2 ADD MLOAD PUSH1 0x60 DUP7 ADD MSTORE ADD MLOAD AND PUSH1 0x80 DUP4 ADD MSTORE SUB SWAP1 RETURN JUMPDEST DUP3 MLOAD DUP7 MSTORE SWAP5 DUP8 ADD SWAP5 SWAP2 DUP8 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x13DB JUMP JUMPDEST SWAP1 POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP4 RETURNDATACOPY PUSH2 0x142E DUP2 DUP4 PUSH2 0x15C9 JUMP JUMPDEST DUP2 ADD SWAP1 DUP4 DUP2 DUP4 SUB SLT PUSH2 0x6BC JUMPI DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP2 DUP3 DUP3 GT PUSH2 0x6BC JUMPI ADD SWAP1 DUP2 DUP4 SUB SWAP1 PUSH1 0x80 DUP3 SLT PUSH2 0x6BC JUMPI PUSH1 0x40 MLOAD SWAP4 PUSH2 0x1467 DUP6 PUSH2 0x1578 JUMP JUMPDEST DUP4 MLOAD DUP3 DUP2 GT PUSH2 0x6BC JUMPI DUP5 ADD DUP2 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0x6BC JUMPI DUP1 MLOAD SWAP3 DUP4 GT PUSH2 0x40B JUMPI DUP3 PUSH1 0x5 SHL PUSH1 0x40 MLOAD SWAP4 PUSH2 0x149A DUP11 DUP4 ADD DUP7 PUSH2 0x15C9 JUMP JUMPDEST DUP5 MSTORE DUP9 DUP1 DUP6 ADD SWAP2 DUP4 ADD ADD SWAP3 DUP4 GT PUSH2 0x6BC JUMPI DUP9 DUP1 SWAP3 ADD SWAP1 JUMPDEST DUP4 DUP3 LT PUSH2 0x1503 JUMPI POP POP POP POP SWAP1 PUSH1 0x60 SWAP2 DUP5 MSTORE PUSH1 0x1F NOT ADD SLT PUSH2 0x6BC JUMPI PUSH1 0x60 PUSH1 0x40 MLOAD SWAP2 PUSH2 0x14DA DUP4 PUSH2 0x1593 JUMP JUMPDEST DUP6 DUP2 ADD MLOAD DUP4 MSTORE PUSH1 0x40 DUP2 ADD MLOAD DUP7 DUP5 ADD MSTORE ADD MLOAD DUP4 DUP2 AND DUP2 SUB PUSH2 0x6BC JUMPI PUSH1 0x40 DUP3 ADD MSTORE DUP4 DUP3 ADD MSTORE DUP4 PUSH2 0x13B5 JUMP JUMPDEST DUP2 MLOAD DUP2 MSTORE SWAP1 DUP3 ADD SWAP1 DUP3 ADD PUSH2 0x14B1 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F6E6C79206F776E657220697320616C6C6F77656420746F20706572666F726D PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x103A3434B99030B1BA34B7B7 PUSH1 0xA1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x40B JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x60 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x40B JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x20 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x40B JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x40B JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST DUP2 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0x6BC JUMPI DUP1 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x40B JUMPI PUSH1 0x40 MLOAD SWAP3 PUSH2 0x161E PUSH1 0x1F DUP5 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP6 PUSH2 0x15C9 JUMP JUMPDEST DUP3 DUP5 MSTORE PUSH1 0x20 DUP4 DUP4 ADD ADD GT PUSH2 0x6BC JUMPI DUP2 PUSH1 0x0 SWAP3 PUSH1 0x20 DUP1 SWAP4 ADD DUP4 DUP7 ADD CALLDATACOPY DUP4 ADD ADD MSTORE SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x80 PUSH1 0x3 NOT DUP4 ADD SLT PUSH2 0x6BC JUMPI PUSH1 0x4 CALLDATALOAD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP2 PUSH1 0x24 CALLDATALOAD DUP4 DUP2 GT PUSH2 0x6BC JUMPI DUP3 PUSH2 0x1671 SWAP2 PUSH1 0x4 ADD PUSH2 0x15EA JUMP JUMPDEST SWAP3 PUSH1 0x44 CALLDATALOAD DUP2 DUP2 GT PUSH2 0x6BC JUMPI DUP4 PUSH2 0x1689 SWAP2 PUSH1 0x4 ADD PUSH2 0x15EA JUMP JUMPDEST SWAP3 PUSH1 0x64 CALLDATALOAD SWAP2 DUP3 GT PUSH2 0x6BC JUMPI PUSH2 0x16A0 SWAP2 PUSH1 0x4 ADD PUSH2 0x15EA JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT PUSH2 0x16B5 JUMPI POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x80 DUP2 ADD MLOAD DUP3 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x16A6 JUMP JUMPDEST PUSH1 0xE0 SWAP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x80 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x60 MLOAD DUP1 PUSH1 0x80 DUP5 ADD MSTORE PUSH2 0x16EC DUP2 PUSH1 0xA0 DUP6 ADD PUSH2 0x16A3 JUMP JUMPDEST DUP2 NOT SWAP2 DUP3 SWAP2 ADD AND DUP3 ADD PUSH1 0xA0 DUP4 DUP3 SUB ADD PUSH1 0x40 DUP5 ADD MSTORE DUP2 PUSH1 0x1F PUSH1 0x60 MLOAD DUP1 PUSH1 0xA0 DUP6 ADD MSTORE PUSH2 0x1719 DUP2 PUSH1 0xC0 DUP7 ADD PUSH2 0x16A3 JUMP JUMPDEST ADD AND ADD SWAP2 PUSH1 0x60 PUSH1 0xC0 DUP3 DUP6 SUB ADD SWAP2 ADD MSTORE PUSH1 0x1F PUSH1 0x60 MLOAD DUP1 PUSH1 0xC0 DUP6 ADD MSTORE PUSH2 0x173F DUP2 DUP7 DUP7 ADD PUSH2 0x16A3 JUMP JUMPDEST ADD AND ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0x202E1867CADE063E32A2EB339A246F853A1A233314949BA8D9E2AC766F6ED846 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x18E4 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD DUP3 LT ISZERO PUSH2 0x17C2 JUMPI PUSH1 0x0 MSTORE PUSH32 0x5B627E705E277F4CD69351CFCF0179F3685951408382038C266C60748DB0394A ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x1 DUP3 DUP2 SHR SWAP3 AND DUP1 ISZERO PUSH2 0x1808 JUMPI JUMPDEST PUSH1 0x20 DUP4 LT EQ PUSH2 0x17F2 JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x17E7 JUMP JUMPDEST ISZERO PUSH2 0x1819 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x155CD95C881A5CC81B9BDD081C9959DA5CDD195C9959 PUSH1 0x52 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x185E JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x546865205375737577617461726920646F6573206E6F74206578697374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT INVALID KECCAK256 0x2E XOR PUSH8 0xCADE063E32A2EB33 SWAP11 0x24 PUSH16 0x853A1A233314949BA8D9E2AC766F6ED8 BASEFEE KECCAK256 0x2E XOR PUSH8 0xCADE063E32A2EB33 SWAP11 0x24 PUSH16 0x853A1A233314949BA8D9E2AC766F6ED8 0x4A KECCAK256 0x2E XOR PUSH8 0xCADE063E32A2EB33 SWAP11 0x24 PUSH16 0x853A1A233314949BA8D9E2AC766F6ED8 SELFBALANCE LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG0 PREVRANDAO EXTCODEHASH ISZERO DUP1 EXP 0xB5 CALLDATACOPY 0xD6 0xDB PC SELFDESTRUCT 0x2E TIMESTAMP 0xFC 0xDB 0x2C 0xA7 SUB CALLDATASIZE MULMOD PUSH31 0x2A6D1C68C13C89AEDD2E64736F6C6343000812003300000000000000000000 ","sourceMap":"641:1386:13:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;641:1386:13;;;;4035:28:12;4052:10;4035:28;:::i;:::-;641:1386:13;;;-1:-1:-1;;;;;;;;;;;641:1386:13;;4160:14:12;641:1386:13;;;;;;;;;;;;;;;;-1:-1:-1;;;;;641:1386:13;;;;;;;;;;;;;;;:::i;:::-;;;;;4131:257:12;;641:1386:13;;;;;;;;:::i;:::-;;;;;4131:257:12;;641:1386:13;;;;;;:::i;:::-;;;;4131:257:12;;;641:1386:13;;;;;;:::i;:::-;;;;4131:257:12;;;641:1386:13;4052:10:12;4131:257;;;641:1386:13;;4131:257:12;;;641:1386:13;4160:14:12;4401:28;4052:10;4401:28;:::i;:::-;641:1386:13;;;;;;;;;;;4160:14:12;641:1386:13;;;;;:::i;:::-;;;;;;4052:10:12;;641:1386:13;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;641:1386:13;;;;;;;;;;;;;;-1:-1:-1;;;;;641:1386:13;;;;;4160:14:12;641:1386:13;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;4160:14:12;641:1386:13;;;;;;;;;;;4160:14:12;641:1386:13;;;;;4131:257:12;;641:1386:13;;;;-1:-1:-1;;;;;641:1386:13;;;;;4486:17:12;641:1386:13;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;4160:14:12;641:1386:13;;;;;;;;;;;4486:17:12;641:1386:13;;;;4131:257:12;;;641:1386:13;;;;-1:-1:-1;;;;;641:1386:13;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;4160:14:12;641:1386:13;;;;;;;;;;;;;;;;4131:257:12;;;641:1386:13;;;;-1:-1:-1;;;;;641:1386:13;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;4160:14:12;641:1386:13;;;;;;;;;;;;;;;;;;;;;;;;;4131:257:12;;;641:1386:13;;;-1:-1:-1;;;;;641:1386:13;;;;;;;;;;;4131:257:12;;;641:1386:13;;;;;;;-1:-1:-1;;;;;;;;;;;641:1386:13;;;;;4052:10:12;;641:1386:13;;;;;;;;;;;;;;-1:-1:-1;641:1386:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4160:14:12;641:1386:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4160:14:12;641:1386:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4160:14:12;641:1386:13;;;;;;-1:-1:-1;641:1386:13;;;;;;;;;;;;;;;;;;;;-1:-1:-1;641:1386:13;;;;;;;;;;;;;;;;-1:-1:-1;;641:1386:13;;;;;;;4160:14:12;641:1386:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4160:14:12;641:1386:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4160:14:12;641:1386:13;;;;-1:-1:-1;641:1386:13;;;;;;;-1:-1:-1;641:1386:13;;;;;4486:17:12;641:1386:13;;;;;;;;;;-1:-1:-1;;641:1386:13;;;;;;;4160:14:12;641:1386:13;;;;;;;;;;;;;;;;;;4486:17:12;641:1386:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4160:14:12;641:1386:13;;;;;;;;;;;;;;;;4486:17:12;641:1386:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4160:14:12;641:1386:13;;;;-1:-1:-1;641:1386:13;;;;;;;-1:-1:-1;641:1386:13;;;;;4160:14:12;641:1386:13;;;;;;;;;;-1:-1:-1;;641:1386:13;;;;;;;4160:14:12;641:1386:13;;;;;;;;;;;;;;;;;;4160:14:12;641:1386:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4160:14:12;641:1386:13;;;;;;;;;;;;;;;;4160:14:12;641:1386:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4160:14:12;641:1386:13;;;;-1:-1:-1;641:1386:13;;;;;;;;;;;;;;;;;;-1:-1:-1;;;641:1386:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1208:10:12;;;1183:67;1191:28;1208:10;1191:28;:::i;:::-;641:1386:13;1191:32:12;;1183:67;:::i;:::-;386:11;;;:47;;;641:1386:13;378:89:12;;;:::i;:::-;641:1386:13;;;-1:-1:-1;;;;;;;;;;;641:1386:13;;;;;1208:10:12;641:1386:13;;;;;1019:20:12;641:1386:13;;;1019:20:12;641:1386:13;;1019:34:12;641:1386:13;;;;;;;;;;;;;5767:54:12;5826:3;5767:54;;;1208:10;5767:54;1208:10;;5784:15;5767:54;641:1386:13;;;;;;-1:-1:-1;;;;;641:1386:13;;;;;;;;;;;;;;;;5767:54:12;;641:1386:13;5767:54:12;641:1386:13;;5767:54:12;;;;;;;;:::i;:::-;641:1386:13;5757:65:12;;641:1386:13;5742:3:12;641:1386:13;;;;;;;;5718:21:12;;;641:1386:13;978:17:12;5837:20;;641:1386:13;;;;-1:-1:-1;;;;;641:1386:13;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;1019:20:12;641:1386:13;;-1:-1:-1;;;;;;;;;;;641:1386:13;;;;;;;;;;;;;;;;;;;;;;;;;;5875:12:12;641:1386:13;-1:-1:-1;;;;;641:1386:13;;;;;;;;;;;;;;;1208:10:12;;641:1386:13;;;;;;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;641:1386:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;641:1386:13;;;1019:20:12;641:1386:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1019:20:12;641:1386:13;;;;;;;;;;;;1019:20:12;641:1386:13;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;641:1386:13;;;;;;;-1:-1:-1;;;641:1386:13;;;;;;;;;;;;;;;;;;-1:-1:-1;;;641:1386:13;;;;;;;386:47:12;-1:-1:-1;;;;;;;;;;;;641:1386:13;401:32:12;;;386:47;;641:1386:13;;;;;;;:::i;:::-;1208:10:12;1183:67;1191:28;1208:10;;;;1191:28;:::i;1183:67::-;386:11;;;:47;;;641:1386:13;378:89:12;;;:::i;:::-;2410:23;;;:::i;:::-;641:1386:13;;;;;;;;-1:-1:-1;;;;;641:1386:13;;;1208:10:12;2410:37;;;:89;;641:1386:13;;;;;;;;-1:-1:-1;;;;;;;;;;;641:1386:13;;;;;;5104:3:12;641:1386:13;;;5045:54:12;;1208:10;5045:54;1208:10;5045:54;1208:10;;5062:15;5045:54;641:1386:13;;;;;;-1:-1:-1;;;;;641:1386:13;;;;;;;;;;;;;;;;5045:54:12;;641:1386:13;;5045:54:12;;;;;;:::i;:::-;641:1386:13;5035:65:12;;641:1386:13;5020:3:12;641:1386:13;;;;;;;;4996:21:12;;;641:1386:13;;;-1:-1:-1;;;;;641:1386:13;;;;;;5115:19:12;;641:1386:13;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5115:19:12;;641:1386:13;;;;;-1:-1:-1;;;;;641:1386:13;;;;5152:20:12;;641:1386:13;4952:17:12;5152:20;;641:1386:13;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4952:17:12;5152:20;;641:1386:13;;;;-1:-1:-1;;;;;641:1386:13;;;;;;5190:16:12;;641:1386:13;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5190:16:12;;641:1386:13;;;5227:12:12;;641:1386:13;;-1:-1:-1;;;;;641:1386:13;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;5256:12:12;641:1386:13;;;;;;;;;;;;;;;;;;;;;;;;;5256:12:12;641:1386:13;-1:-1:-1;;;;;641:1386:13;;1208:10:12;;641:1386:13;;;;;;;;;-1:-1:-1;;;;;;;;;;;641:1386:13;;;;;1208:10:12;;641:1386:13;;;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;641:1386:13;;;;;;;;;;;;;;;;;;;;;;;;;;5256:12:12;641:1386:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;641:1386:13;;;;;;;;-1:-1:-1;641:1386:13;;;;;;;;;5190:16:12;641:1386:13;5190:16:12;;641:1386:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5190:16:12;;641:1386:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5190:16:12;;641:1386:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;641:1386:13;;;;;;;-1:-1:-1;641:1386:13;;;;;4952:17:12;5152:20;;641:1386:13;;;;;;;;-1:-1:-1;;;641:1386:13;;;;;;;;;;;;;;;;;;;;;;;;;;;4952:17:12;5152:20;;641:1386:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5152:20:12;;;4952:17;5152:20;;641:1386:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;641:1386:13;;;;;-1:-1:-1;641:1386:13;;;;;;;;;;;;;;5115:19:12;;641:1386:13;;;;;;;;-1:-1:-1;;;641:1386:13;;;;;;;;;;;;;;;;;;;;;;;;;;5115:19:12;;641:1386:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5115:19:12;;641:1386:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;641:1386:13;;;;;;-1:-1:-1;;;641:1386:13;;;;;;;;;;;;-1:-1:-1;;;641:1386:13;;;;;;;2410:89:12;641:1386:13;;;;;-1:-1:-1;;;;;;;;;;;641:1386:13;;1208:10:12;641:1386:13;2451:34:12;641:1386:13;;;2451:34:12;641:1386:13;;2451:48:12;2410:89;;;386:47;-1:-1:-1;;;;;;;;;;;;641:1386:13;401:32:12;;;386:47;;641:1386:13;;;;;;;:::i;:::-;1208:10:12;;1183:67;1191:28;1208:10;1191:28;:::i;1183:67::-;386:11;;;:47;;;641:1386:13;378:89:12;;;:::i;:::-;641:1386:13;;-1:-1:-1;;;;;;;;;;;641:1386:13;1399:182:12;1419:25;;;;;;1399:182;1595:11;;641:1386:13;;;;;;-1:-1:-1;;;;;;;;;;;641:1386:13;;;;;;;;1466:28:12;1832:10;641:1386:13;-1:-1:-1;;;;;641:1386:13;;;;;;;;;;;6415:20:12;1791:17;6415:20;;641:1386:13;;;6398:38:12;;;;;641:1386:13;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;6398:38:12;;;;641:1386:13;6398:38:12;641:1386:13;;6398:38:12;;;;;;;;:::i;:::-;641:1386:13;6388:49:12;;641:1386:13;;;;;;;;;;;;;;;;;;6451:26:12;641:1386:13;;;;;;;;6451:26:12;;;;;;;:::i;:::-;641:1386:13;;;6451:26:12;;6441:37;6388:90;641:1386:13;;;;6614:15:12;6597:54;;;641:1386:13;;;1208:10:12;641:1386:13;;-1:-1:-1;;641:1386:13;;;;;;;;;;;6656:3:12;;6597:54;;641:1386:13;6597:54:12;;641:1386:13;;;;6597:54:12;;;;;;;;:::i;:::-;641:1386:13;6587:65:12;;641:1386:13;6572:3:12;641:1386:13;;;;;;;;6548:21:12;1466:28;6548:21;;-1:-1:-1;;;;;;;;;;;6548:21:12;;641:1386:13;6667:12:12;641:1386:13;-1:-1:-1;;;;;641:1386:13;;1208:10:12;;641:1386:13;;;;;;;;;;;;;1208:10:12;;641:1386:13;;;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;;;641:1386:13;;;;;;;;;;;;;;;;;;-1:-1:-1;;;641:1386:13;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;641:1386:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;641:1386:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;641:1386:13;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;641:1386:13;;;;;;;;;;;;;;;;;-1:-1:-1;;;641:1386:13;;;;;;;1446:3:12;641:1386:13;;;;-1:-1:-1;;;;;;;;;;;641:1386:13;;;;;1466:28:12;;641:1386:13;-1:-1:-1;;;;;641:1386:13;1208:10:12;1466:42;1462:112;;-1:-1:-1;;641:1386:13;;;;;;1404:13:12;;1462:112;1525:17;;;641:1386:13;1557:5:12;;;;386:47;-1:-1:-1;;;;;;;;;;;;641:1386:13;401:32:12;;;386:47;;641:1386:13;;;;;;-1:-1:-1;;641:1386:13;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;257:16:16;641:1386:13;;243:10:16;:30;641:1386:13;;;;-1:-1:-1;;;1979:37:13;;197:40:15;641:1386:13;1979:37;;641:1386;-1:-1:-1;641:1386:13;;;1979:13;:37;;;;;;;641:1386;1979:37;;;641:1386;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1979:37;;;;;641:1386;1979:37;;;;;;:::i;:::-;;;641:1386;;;;;;;;;;-1:-1:-1;;;;;641:1386:13;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1979:37;;;641:1386;;;;;;;;;;;;;1979:37;641:1386;;;;;;;;;;;;-1:-1:-1;;;641:1386:13;;;;;;;;;;;;;;;;;;-1:-1:-1;;;641:1386:13;;;;;;;;;;;;;;-1:-1:-1;;;;;641:1386:13;;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;641:1386:13;;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;641:1386:13;;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;641:1386:13;;;;;;;:::o;:::-;;;;;;;;;;;;-1:-1:-1;;;;;641:1386:13;;;;;;;;;;;-1:-1:-1;;641:1386:13;;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;641:1386:13;;;;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;641:1386:13;;;;;;;;-1:-1:-1;;;;;641:1386:13;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;;;;;-1:-1:-1;641:1386:13;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::o;:::-;-1:-1:-1;;;;;641:1386:13;;;;;197:40:15;641:1386:13;;;;;;:::o;:::-;-1:-1:-1;;;;;;;;;;;641:1386:13;;;;;;;-1:-1:-1;641:1386:13;;;;-1:-1:-1;641:1386:13;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;641:1386:13;;;;;;;;;;;;-1:-1:-1;;;641:1386:13;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;641:1386:13;;;;;;;;;;;;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"1291400","executionCost":"1351","totalCost":"1292751"},"external":{"aimInitialSusu(uint256,string,string,string)":"infinite","dropSusu(uint256,string,string,string)":"infinite","getCurrentState()":"infinite","registerMe()":"infinite","tryPickupSusu(uint256,string,string,string)":"infinite"}},"methodIdentifiers":{"aimInitialSusu(uint256,string,string,string)":"78630748","dropSusu(uint256,string,string,string)":"83d4fdce","getCurrentState()":"378aa701","registerMe()":"9a198d61","tryPickupSusu(uint256,string,string,string)":"5fd9a90d"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"destination\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"aimInitialSusu\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"destination\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"dropSusu\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentState\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"ownedTokens\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"susuTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dropCooldownTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"internalType\":\"struct LibSusuwatari.Slot\",\"name\":\"slot\",\"type\":\"tuple\"}],\"internalType\":\"struct LibSusuwatari.UserState\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registerMe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"destination\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"tryPickupSusu\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension, but not including the Enumerable extension, which is available separately as {ERC721Enumerable}.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SusuwatariFacet.sol\":\"SusuwatariFacet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/LibSusuwatari.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\n\\r\\nimport {SusuwatariStorage, Susu} from \\\"./SusuwatariStorage.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport \\\"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\\\";\\r\\n\\r\\nlibrary LibSusuwatari{\\r\\n\\r\\n   \\r\\n\\r\\n    \\r\\n    modifier mustExistSusu(SusuwatariStorage storage sus, uint256 tokenId) {\\r\\n        require(tokenId > 0 && tokenId <= sus.susuOwners.length, \\\"The Susuwatari does not exist\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    \\r\\n    modifier mustHaveSusu(SusuwatariStorage storage sus) {\\r\\n    bool hasSusu = false;\\r\\n    \\r\\n    for (uint256 i = 0; i < sus.susuOwners.length; i++) {\\r\\n        if (sus.susuOwners[i] == msg.sender) {\\r\\n            hasSusu = true;\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    require(hasSusu, \\\"Caller does not own any Susuwatari token\\\");\\r\\n    _;\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n    \\r\\n    \\r\\n\\r\\n    modifier mustCarrySusu(SusuwatariStorage storage sus, uint256 tokenId) {\\r\\n    Susu storage susuInstance = sus.tokenIdToSusu[tokenId];\\r\\n    require(susuInstance.carrier == msg.sender, \\\"Caller doesn't carry a Susuwatari Token!\\\");\\r\\n    _;\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\nmodifier isUserRegistered(SusuwatariStorage storage sus){\\r\\n      require(sus.maxSlotCount[msg.sender] > 0, \\\"User is not registered\\\"); \\r\\n          _;\\r\\n}\\r\\n\\r\\n    modifier mustNotCarrySusu(SusuwatariStorage storage sus, uint256 tokenId) { \\r\\n\\r\\n    bool isCarrying = false;\\r\\n    \\r\\n\\r\\n    for (uint256 i = 0; i < sus.susuOwners.length; i++) {\\r\\n        if (sus.tokenIdToSusu[i].carrier == msg.sender) {\\r\\n            isCarrying = true;\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n    require(!isCarrying, \\\"Caller is already carry a Susuwatari Token!\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n \\r\\n\\r\\nmodifier isNotBeingCarriedSusu(SusuwatariStorage storage sus, uint256 tokenId) {\\r\\n    Susu storage su = sus.tokenIdToSusu[tokenId];\\r\\n    require(su.carrier == address(0), \\\"Susu is already being carried!\\\");\\r\\n    _;\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n        modifier mustHaveBagSpace(SusuwatariStorage storage sus) {\\r\\n\\r\\n    bool isCarrying = false;\\r\\n    \\r\\n    for (uint256 i = 0; i < sus.susuOwners.length; i++) {\\r\\n        if (sus.tokenIdToSusu[i].carrier == msg.sender) {\\r\\n            isCarrying = true;\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n    require(isCarrying == false, \\\"Caller is already overburdened\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n  modifier susuMustNotHaveBeenAimed(SusuwatariStorage storage sus, uint256 tokenId) {\\r\\n\\r\\n        \\r\\n    require(sus.susuOwners[tokenId] == msg.sender && sus.tokenIdToSusu[tokenId].carrier == msg.sender, \\\"Caller is not owner\\\");\\r\\n    \\r\\n        _;\\r\\n    }\\r\\n\\r\\n    \\r\\n\\r\\n\\r\\n    struct UserState {\\r\\n        uint256[] ownedTokens;\\r\\n        Slot slot;\\r\\n    }\\r\\n\\r\\n\\r\\n    struct Slot {\\r\\n        uint256 susuTokenId;\\r\\n        uint256 dropCooldownTime;\\r\\n        address ownerAddress;\\r\\n    }\\r\\n\\r\\n\\r\\nfunction getCurrentState(SusuwatariStorage storage sus) public view returns (UserState memory) {\\r\\n\\r\\n    uint256 ownedTokenCount = 0;\\r\\n    for (uint256 i = 0; i < sus.susuOwners.length; i++) {\\r\\n        if (msg.sender == sus.susuOwners[i]) {\\r\\n            ownedTokenCount++;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    uint256[] memory ownedTokens = new uint256[](ownedTokenCount); //push geht nicht in memory arrays\\r\\n    uint256 index = 0;\\r\\n    for (uint256 i = 0; i < sus.susuOwners.length; i++) {\\r\\n        if (msg.sender == sus.susuOwners[i]) {\\r\\n            ownedTokens[index] = i;\\r\\n            index++;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    Slot memory slot;\\r\\n    for (uint256 i = 0; i < ownedTokens.length; i++) {\\r\\n        uint256 tokenId = ownedTokens[i];\\r\\n        if (sus.tokenIdToSusu[tokenId].carrier == msg.sender) {\\r\\n            slot.susuTokenId = tokenId;\\r\\n            slot.dropCooldownTime = sus.tokenIdToSusu[tokenId].dropCooldownTime;\\r\\n            slot.ownerAddress = sus.susuOwners[tokenId];\\r\\n            break; //one slot per user!\\r\\n        }\\r\\n    }\\r\\n\\r\\n    UserState memory state = UserState({\\r\\n        ownedTokens: ownedTokens,\\r\\n        slot: slot\\r\\n    });\\r\\n    \\r\\n    return state;\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n    function registerMe(SusuwatariStorage storage sus) internal { \\r\\n        require(sus.maxSlotCount[msg.sender] == 0, \\\"User already registered\\\");\\r\\n\\r\\n        Susu memory newSusu = Susu({\\r\\n            tokenId: sus.susuOwners.length + 1,\\r\\n            dropCooldownTime: 0,\\r\\n            originLocation: \\\"\\\",\\r\\n            currentLocation: \\\"\\\",\\r\\n            destination: \\\"\\\",\\r\\n            message: \\\"\\\",\\r\\n            carrier: msg.sender\\r\\n        });\\r\\n\\r\\n        sus.maxSlotCount[msg.sender] = 1;\\r\\n        sus.susuOwners.push(msg.sender);\\r\\n        sus.tokenIdToSusu[newSusu.tokenId] = newSusu;\\r\\n        sus.baggedSusus[newSusu.tokenId] = msg.sender;\\r\\n    \\r\\n    }\\r\\n\\r\\nfunction aimInitialSusu(SusuwatariStorage storage sus, uint256 tokenId, string memory location, string memory destination, string memory message) internal isUserRegistered(sus) mustExistSusu(sus, tokenId) susuMustNotHaveBeenAimed(sus,tokenId) returns (uint256, string memory, string memory, string memory) {\\r\\n    \\r\\n       \\r\\n    Susu storage susu = sus.tokenIdToSusu[tokenId];\\r\\n    \\r\\n   \\r\\n    susu.dropCooldownTime = 300 + (uint256(keccak256(abi.encodePacked(block.timestamp, msg.sender, tokenId))) % 301);\\r\\n    susu.originLocation = location;\\r\\n    susu.currentLocation = location;\\r\\n    susu.destination = destination;\\r\\n    susu.message = message;\\r\\n    susu.carrier = msg.sender;\\r\\n    sus.baggedSusus[tokenId] = msg.sender;\\r\\n    \\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\nfunction dropSusu(SusuwatariStorage storage sus, uint256 tokenId, string memory location, string memory destination, string memory message) internal isUserRegistered(sus) mustExistSusu(sus, tokenId) mustCarrySusu(sus, tokenId) returns (uint256, string memory, string memory, string memory) {\\r\\n  \\r\\n    \\r\\n    Susu storage susu = sus.tokenIdToSusu[tokenId];\\r\\n    \\r\\n   \\r\\n    susu.dropCooldownTime = 300 + (uint256(keccak256(abi.encodePacked(block.timestamp, msg.sender, tokenId))) % 301);\\r\\n    susu.currentLocation = location;\\r\\n    susu.carrier = address(0);\\r\\n    sus.baggedSusus[tokenId] = msg.sender;\\r\\n    \\r\\n}\\r\\n\\r\\n \\r\\n\\r\\nfunction tryPickupSusu(SusuwatariStorage storage sus, uint256 tokenId, string memory location, string memory destination, string memory message) internal isUserRegistered(sus) mustExistSusu(sus, tokenId) mustNotCarrySusu(sus, tokenId) isNotBeingCarriedSusu(sus,tokenId) returns (uint256, string memory, string memory, string memory) {\\r\\n     \\r\\n    Susu storage susu = sus.tokenIdToSusu[tokenId];\\r\\n    \\r\\n     require(\\r\\n        keccak256(abi.encodePacked(susu.currentLocation)) == keccak256(abi.encodePacked(location)), \\r\\n        \\\"Caller is not in the correct location\\\"\\r\\n    );\\r\\n   \\r\\n    susu.dropCooldownTime = 300 + (uint256(keccak256(abi.encodePacked(block.timestamp, msg.sender, tokenId))) % 301);\\r\\n    susu.carrier = msg.sender;\\r\\n    sus.baggedSusus[tokenId] = msg.sender;\\r\\n    \\r\\n}\\r\\n\\r\\n\\r\\n}\",\"keccak256\":\"0x2b5edf0ee35513a3cdb70664a917397aaf7bbf85d8a89db504da62dcf619d01d\",\"license\":\"MIT\"},\"contracts/SusuwatariFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport {SusuwatariStorage, StorageHandler} from \\\"./SusuwatariStorage.sol\\\";\\r\\nimport {LibSusuwatari} from \\\"./LibSusuwatari.sol\\\";\\r\\nimport {UsingDiamondOwner} from \\\"hardhat-deploy/solc_0.8/diamond/UsingDiamondOwner.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\r\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\r\\n * {ERC721Enumerable}.\\r\\n */\\r\\ncontract SusuwatariFacet is StorageHandler, UsingDiamondOwner {\\r\\n    using Address for address;\\r\\n    using Strings for uint256;\\r\\n\\r\\n    function registerMe() external {\\r\\n        LibSusuwatari.registerMe(susu());\\r\\n    }\\r\\n\\r\\n    function aimInitialSusu(uint256 tokenId, string memory location, string memory destination, string memory message) \\r\\n        external \\r\\n        returns (uint256, string memory, string memory, string memory) \\r\\n    {\\r\\n        return LibSusuwatari.aimInitialSusu(susu(), tokenId, location, destination, message);\\r\\n    }\\r\\n\\r\\n    function dropSusu(uint256 tokenId, string memory location, string memory destination, string memory message) \\r\\n        external \\r\\n        returns (uint256, string memory, string memory, string memory) \\r\\n    {\\r\\n        return LibSusuwatari.dropSusu(susu(), tokenId, location, destination, message);\\r\\n    }\\r\\n\\r\\n    function tryPickupSusu(uint256 tokenId, string memory location, string memory destination, string memory message) \\r\\n        external \\r\\n        returns (uint256, string memory, string memory, string memory) \\r\\n    {\\r\\n        return LibSusuwatari.tryPickupSusu(susu(), tokenId, location, destination, message);\\r\\n    }\\r\\n\\r\\n    function getCurrentState() \\r\\n        external \\r\\n        view \\r\\n        onlyOwner\\r\\n        returns (LibSusuwatari.UserState memory) \\r\\n    {\\r\\n        return LibSusuwatari.getCurrentState(susu());\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x6f77dfe4d1b7b2513a7e7d697607352fbd71b80d959f0e43511262ce82c3e83d\",\"license\":\"MIT\"},\"contracts/SusuwatariStorage.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport {LibDiamond} from \\\"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\\\";\\r\\n\\r\\nbytes32 constant SUSUWATARI_STORAGE_POSITION = keccak256(\\\"susuwatari.contract.storage\\\");\\r\\nbytes32 constant LEAFWALLET_STORAGE_POSITION = keccak256(\\\"leafwallet.contract.storage\\\");\\r\\n\\r\\nstruct OwnableStorage {\\r\\n\\r\\n    address _owner;\\r\\n}\\r\\n\\r\\n\\r\\nstruct LeafWalletStorage {\\r\\n    mapping(address => address) _deviceOwner;\\r\\n    mapping(address => address[]) _ownerDevices;\\r\\n    mapping(address => uint256) _deviceActivationCodes;\\r\\n}\\r\\n\\r\\n\\r\\n    struct Susu {\\r\\n        uint256 tokenId;\\r\\n        string originLocation;\\r\\n        string currentLocation;\\r\\n        string destination;\\r\\n        string message;\\r\\n        address carrier;\\r\\n        uint256 dropCooldownTime;\\r\\n    }\\r\\n    \\r\\n    //slotstate contains: 1. slot array, an element of slotarray has: [susutokenid, dropCooldownTime] 2. maxSlotCount(int) 3.  list of owned susus (nft)\\r\\n    struct SusuwatariStorage {\\r\\n        mapping(address => uint256) maxSlotCount;\\r\\n        address[] susuOwners;\\r\\n        mapping(uint256 => Susu) tokenIdToSusu;\\r\\n        bool isInitialized;\\r\\n        mapping(uint256 => address) baggedSusus; \\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n\\r\\ncontract StorageHandler {\\r\\n    \\r\\n    function susu() internal pure returns (SusuwatariStorage storage cs) {\\r\\n        bytes32 position = SUSUWATARI_STORAGE_POSITION;\\r\\n        assembly {\\r\\n           cs.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function os() internal pure returns (OwnableStorage storage cs) {\\r\\n        bytes32 position = keccak256(\\\"ownable.contract.storage\\\");\\r\\n        assembly {\\r\\n           cs.slot := position\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function ds() internal pure returns (LibDiamond.DiamondStorage storage) {\\r\\n        return LibDiamond.diamondStorage();\\r\\n    }\\r\\n\\r\\n    \\r\\n    function lw() internal pure returns (LeafWalletStorage storage cs) {\\r\\n        bytes32 position = keccak256(\\\"leafwallet.contract.storage\\\");\\r\\n        assembly {\\r\\n           cs.slot := position\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0x63d24fb7415d1311c310f32e8ef03a9d657e7fc8829afbbc342feed9b30b6c48\",\"license\":\"MIT\"},\"hardhat-deploy/solc_0.8/diamond/UsingDiamondOwner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./libraries/LibDiamond.sol\\\";\\n\\ncontract UsingDiamondOwner {\\n    modifier onlyOwner() {\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\n        require(msg.sender == ds.contractOwner, \\\"Only owner is allowed to perform this action\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x610145c6957708608f3d2c2626dbf3461f2886b0b304c2bdc0c332df981b82f8\",\"license\":\"MIT\"},\"hardhat-deploy/solc_0.8/diamond/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0xc00c16bfa30a3fa5f3dc684f7f8ba62c259962b25f647d9588739458989717fc\",\"license\":\"MIT\"},\"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);            \\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress != _facetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(_facetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n        enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }    \\n\\n\\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n        // an immutable function is a function defined directly in a diamond\\n        require(_facetAddress != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\");\\n        } else {\\n            require(_calldata.length > 0, \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\");\\n            if (_init != address(this)) {\\n                enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x2205345e83eb86f5281f159a9215a096cb6d404782619f9b8e9d7a4a46c32a37\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/SusuwatariLeafWalletFacet.sol":{"SusuwatariLeafWalletFacet":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"","type":"uint256"}],"name":"AssignActivatableAddressToSenderReturn","type":"event"},{"inputs":[{"internalType":"address","name":"assignee","type":"address"}],"name":"assignActivatableAddressToSender","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getActivationCodeOfSender","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getDeviceOwner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getRelatedDevices","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isSenderRegistered","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"6080806040523461001657610534908161001c8239f35b600080fdfe60806040908082526004918236101561001757600080fd5b600091823560e01c9081633aafa388146104a25750806358944eb8146103ea5780639b8ae375146103ac578063e0f64efc146102ae5763ec9492971461005c57600080fd5b346102aa57602090816003193601126102a65783356001600160a01b03808216908183036102a2578186526000805160206104df833981519152908186528085882054168015908115610298575b5015610255578287528186528487205416156101ae575b505081518381019042825244848201523360601b6060820152605481526080810181811067ffffffffffffffff82111761019b5784525190206064900694600a8610610172575b5090846101697f4194273a0171865880e1d7a0089dcb6cfe51ce239b09acde0bf6cc5e071210b095969360018060a01b03166000527f83ed3ba29c1d52058c877df3ebd264cf957c42ef7764387349be0ccf6df0b63d602052604060002090565b5551908152a180f35b94600a8101809111610188579450610169610108565b634e487b7160e01b855260118652602485fd5b634e487b7160e01b875260418852602487fd5b3360009081527f83ed3ba29c1d52058c877df3ebd264cf957c42ef7764387349be0ccf6df0b63c6020526040902080549068010000000000000000821015610242576001820180825582101561022f5787528587200180546001600160a01b03199081168417909155918652845282852080549091163317905538806100c1565b634e487b7160e01b885260328952602488fd5b634e487b7160e01b885260418952602488fd5b845162461bcd60e51b8152808901879052601960248201527f44657669636520616c72656164792072656769737465726564000000000000006044820152606490fd5b90503314386100aa565b8580fd5b8280fd5b5080fd5b50346102aa57816003193601126102aa573360009081527f83ed3ba29c1d52058c877df3ebd264cf957c42ef7764387349be0ccf6df0b63c6020526040902091815190819284548084526020809401908196845284842090845b8682821061038f5750505050849003601f01601f191684019567ffffffffffffffff87118588101761037c575085815282865292518583018190528594938501939290915b82811061035c57505050500390f35b83516001600160a01b03168552869550938101939281019260010161034d565b634e487b7160e01b835260419052602482fd5b83546001600160a01b031685529093019260019283019201610308565b50346102aa57816003193601126102aa573382526000805160206104df8339815191526020908152918190205490516001600160a01b039091168152f35b5091903461049f578060031936011261049f573381526000805160206104df833981519152602052829020546001600160a01b03161561045d573360009081527f83ed3ba29c1d52058c877df3ebd264cf957c42ef7764387349be0ccf6df0b63d60209081526040909120548351908152f35b6020606492519162461bcd60e51b8352820152601960248201527f446576696365206e6f74207965742072656769737465726564000000000000006044820152fd5b80fd5b919050346102a657826003193601126102a6573383526000805160206104df83398151915260209081529220546001600160a01b031615158152f3fe83ed3ba29c1d52058c877df3ebd264cf957c42ef7764387349be0ccf6df0b63ba26469706673582212205333c4ab9f5936f1a15fed567b818a1caf98257fe2124e6f585cdcfdd6108cff64736f6c63430008120033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH2 0x16 JUMPI PUSH2 0x534 SWAP1 DUP2 PUSH2 0x1C DUP3 CODECOPY RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 SWAP1 DUP1 DUP3 MSTORE PUSH1 0x4 SWAP2 DUP3 CALLDATASIZE LT ISZERO PUSH2 0x17 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x3AAFA388 EQ PUSH2 0x4A2 JUMPI POP DUP1 PUSH4 0x58944EB8 EQ PUSH2 0x3EA JUMPI DUP1 PUSH4 0x9B8AE375 EQ PUSH2 0x3AC JUMPI DUP1 PUSH4 0xE0F64EFC EQ PUSH2 0x2AE JUMPI PUSH4 0xEC949297 EQ PUSH2 0x5C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x2AA JUMPI PUSH1 0x20 SWAP1 DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x2A6 JUMPI DUP4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND SWAP1 DUP2 DUP4 SUB PUSH2 0x2A2 JUMPI DUP2 DUP7 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4DF DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 DUP2 DUP7 MSTORE DUP1 DUP6 DUP9 KECCAK256 SLOAD AND DUP1 ISZERO SWAP1 DUP2 ISZERO PUSH2 0x298 JUMPI JUMPDEST POP ISZERO PUSH2 0x255 JUMPI DUP3 DUP8 MSTORE DUP2 DUP7 MSTORE DUP5 DUP8 KECCAK256 SLOAD AND ISZERO PUSH2 0x1AE JUMPI JUMPDEST POP POP DUP2 MLOAD DUP4 DUP2 ADD SWAP1 TIMESTAMP DUP3 MSTORE PREVRANDAO DUP5 DUP3 ADD MSTORE CALLER PUSH1 0x60 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x54 DUP2 MSTORE PUSH1 0x80 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x19B JUMPI DUP5 MSTORE MLOAD SWAP1 KECCAK256 PUSH1 0x64 SWAP1 MOD SWAP5 PUSH1 0xA DUP7 LT PUSH2 0x172 JUMPI JUMPDEST POP SWAP1 DUP5 PUSH2 0x169 PUSH32 0x4194273A0171865880E1D7A0089DCB6CFE51CE239B09ACDE0BF6CC5E071210B0 SWAP6 SWAP7 SWAP4 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH32 0x83ED3BA29C1D52058C877DF3EBD264CF957C42EF7764387349BE0CCF6DF0B63D PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SSTORE MLOAD SWAP1 DUP2 MSTORE LOG1 DUP1 RETURN JUMPDEST SWAP5 PUSH1 0xA DUP2 ADD DUP1 SWAP2 GT PUSH2 0x188 JUMPI SWAP5 POP PUSH2 0x169 PUSH2 0x108 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP6 MSTORE PUSH1 0x11 DUP7 MSTORE PUSH1 0x24 DUP6 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP8 MSTORE PUSH1 0x41 DUP9 MSTORE PUSH1 0x24 DUP8 REVERT JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0x83ED3BA29C1D52058C877DF3EBD264CF957C42EF7764387349BE0CCF6DF0B63C PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD SWAP1 PUSH9 0x10000000000000000 DUP3 LT ISZERO PUSH2 0x242 JUMPI PUSH1 0x1 DUP3 ADD DUP1 DUP3 SSTORE DUP3 LT ISZERO PUSH2 0x22F JUMPI DUP8 MSTORE DUP6 DUP8 KECCAK256 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND DUP5 OR SWAP1 SWAP2 SSTORE SWAP2 DUP7 MSTORE DUP5 MSTORE DUP3 DUP6 KECCAK256 DUP1 SLOAD SWAP1 SWAP2 AND CALLER OR SWAP1 SSTORE CODESIZE DUP1 PUSH2 0xC1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP9 MSTORE PUSH1 0x32 DUP10 MSTORE PUSH1 0x24 DUP9 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP9 MSTORE PUSH1 0x41 DUP10 MSTORE PUSH1 0x24 DUP9 REVERT JUMPDEST DUP5 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 DUP10 ADD DUP8 SWAP1 MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x44657669636520616C7265616479207265676973746572656400000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP1 POP CALLER EQ CODESIZE PUSH2 0xAA JUMP JUMPDEST DUP6 DUP1 REVERT JUMPDEST DUP3 DUP1 REVERT JUMPDEST POP DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x2AA JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x2AA JUMPI CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0x83ED3BA29C1D52058C877DF3EBD264CF957C42EF7764387349BE0CCF6DF0B63C PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP2 DUP2 MLOAD SWAP1 DUP2 SWAP3 DUP5 SLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 SWAP5 ADD SWAP1 DUP2 SWAP7 DUP5 MSTORE DUP5 DUP5 KECCAK256 SWAP1 DUP5 JUMPDEST DUP7 DUP3 DUP3 LT PUSH2 0x38F JUMPI POP POP POP POP DUP5 SWAP1 SUB PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP5 ADD SWAP6 PUSH8 0xFFFFFFFFFFFFFFFF DUP8 GT DUP6 DUP9 LT OR PUSH2 0x37C JUMPI POP DUP6 DUP2 MSTORE DUP3 DUP7 MSTORE SWAP3 MLOAD DUP6 DUP4 ADD DUP2 SWAP1 MSTORE DUP6 SWAP5 SWAP4 DUP6 ADD SWAP4 SWAP3 SWAP1 SWAP2 JUMPDEST DUP3 DUP2 LT PUSH2 0x35C JUMPI POP POP POP POP SUB SWAP1 RETURN JUMPDEST DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 MSTORE DUP7 SWAP6 POP SWAP4 DUP2 ADD SWAP4 SWAP3 DUP2 ADD SWAP3 PUSH1 0x1 ADD PUSH2 0x34D JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x41 SWAP1 MSTORE PUSH1 0x24 DUP3 REVERT JUMPDEST DUP4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 MSTORE SWAP1 SWAP4 ADD SWAP3 PUSH1 0x1 SWAP3 DUP4 ADD SWAP3 ADD PUSH2 0x308 JUMP JUMPDEST POP CALLVALUE PUSH2 0x2AA JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x2AA JUMPI CALLER DUP3 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4DF DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x20 SWAP1 DUP2 MSTORE SWAP2 DUP2 SWAP1 KECCAK256 SLOAD SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE RETURN JUMPDEST POP SWAP2 SWAP1 CALLVALUE PUSH2 0x49F JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x49F JUMPI CALLER DUP2 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4DF DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x20 MSTORE DUP3 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x45D JUMPI CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0x83ED3BA29C1D52058C877DF3EBD264CF957C42EF7764387349BE0CCF6DF0B63D PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 SLOAD DUP4 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH1 0x20 PUSH1 0x64 SWAP3 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x446576696365206E6F7420796574207265676973746572656400000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP CALLVALUE PUSH2 0x2A6 JUMPI DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x2A6 JUMPI CALLER DUP4 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4DF DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x20 SWAP1 DUP2 MSTORE SWAP3 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO ISZERO DUP2 MSTORE RETURN INVALID DUP4 0xED EXTCODESIZE LOG2 SWAP13 SAR MSTORE SDIV DUP13 DUP8 PUSH30 0xF3EBD264CF957C42EF7764387349BE0CCF6DF0B63BA26469706673582212 KECCAK256 MSTORE8 CALLER 0xC4 0xAB SWAP16 MSIZE CALLDATASIZE CALL LOG1 0x5F 0xED JUMP PUSH28 0x818A1CAF98257FE2124E6F585CDCFDD6108CFF64736F6C6343000812 STOP CALLER ","sourceMap":"309:233:14:-:0;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"mapping_index_access_mapping_address_address_of_address":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"mapping_index_access_mapping_address_address_of_address_4698":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1}},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"60806040908082526004918236101561001757600080fd5b600091823560e01c9081633aafa388146104a25750806358944eb8146103ea5780639b8ae375146103ac578063e0f64efc146102ae5763ec9492971461005c57600080fd5b346102aa57602090816003193601126102a65783356001600160a01b03808216908183036102a2578186526000805160206104df833981519152908186528085882054168015908115610298575b5015610255578287528186528487205416156101ae575b505081518381019042825244848201523360601b6060820152605481526080810181811067ffffffffffffffff82111761019b5784525190206064900694600a8610610172575b5090846101697f4194273a0171865880e1d7a0089dcb6cfe51ce239b09acde0bf6cc5e071210b095969360018060a01b03166000527f83ed3ba29c1d52058c877df3ebd264cf957c42ef7764387349be0ccf6df0b63d602052604060002090565b5551908152a180f35b94600a8101809111610188579450610169610108565b634e487b7160e01b855260118652602485fd5b634e487b7160e01b875260418852602487fd5b3360009081527f83ed3ba29c1d52058c877df3ebd264cf957c42ef7764387349be0ccf6df0b63c6020526040902080549068010000000000000000821015610242576001820180825582101561022f5787528587200180546001600160a01b03199081168417909155918652845282852080549091163317905538806100c1565b634e487b7160e01b885260328952602488fd5b634e487b7160e01b885260418952602488fd5b845162461bcd60e51b8152808901879052601960248201527f44657669636520616c72656164792072656769737465726564000000000000006044820152606490fd5b90503314386100aa565b8580fd5b8280fd5b5080fd5b50346102aa57816003193601126102aa573360009081527f83ed3ba29c1d52058c877df3ebd264cf957c42ef7764387349be0ccf6df0b63c6020526040902091815190819284548084526020809401908196845284842090845b8682821061038f5750505050849003601f01601f191684019567ffffffffffffffff87118588101761037c575085815282865292518583018190528594938501939290915b82811061035c57505050500390f35b83516001600160a01b03168552869550938101939281019260010161034d565b634e487b7160e01b835260419052602482fd5b83546001600160a01b031685529093019260019283019201610308565b50346102aa57816003193601126102aa573382526000805160206104df8339815191526020908152918190205490516001600160a01b039091168152f35b5091903461049f578060031936011261049f573381526000805160206104df833981519152602052829020546001600160a01b03161561045d573360009081527f83ed3ba29c1d52058c877df3ebd264cf957c42ef7764387349be0ccf6df0b63d60209081526040909120548351908152f35b6020606492519162461bcd60e51b8352820152601960248201527f446576696365206e6f74207965742072656769737465726564000000000000006044820152fd5b80fd5b919050346102a657826003193601126102a6573383526000805160206104df83398151915260209081529220546001600160a01b031615158152f3fe83ed3ba29c1d52058c877df3ebd264cf957c42ef7764387349be0ccf6df0b63ba26469706673582212205333c4ab9f5936f1a15fed567b818a1caf98257fe2124e6f585cdcfdd6108cff64736f6c63430008120033","opcodes":"PUSH1 0x80 PUSH1 0x40 SWAP1 DUP1 DUP3 MSTORE PUSH1 0x4 SWAP2 DUP3 CALLDATASIZE LT ISZERO PUSH2 0x17 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x3AAFA388 EQ PUSH2 0x4A2 JUMPI POP DUP1 PUSH4 0x58944EB8 EQ PUSH2 0x3EA JUMPI DUP1 PUSH4 0x9B8AE375 EQ PUSH2 0x3AC JUMPI DUP1 PUSH4 0xE0F64EFC EQ PUSH2 0x2AE JUMPI PUSH4 0xEC949297 EQ PUSH2 0x5C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x2AA JUMPI PUSH1 0x20 SWAP1 DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x2A6 JUMPI DUP4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND SWAP1 DUP2 DUP4 SUB PUSH2 0x2A2 JUMPI DUP2 DUP7 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4DF DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 DUP2 DUP7 MSTORE DUP1 DUP6 DUP9 KECCAK256 SLOAD AND DUP1 ISZERO SWAP1 DUP2 ISZERO PUSH2 0x298 JUMPI JUMPDEST POP ISZERO PUSH2 0x255 JUMPI DUP3 DUP8 MSTORE DUP2 DUP7 MSTORE DUP5 DUP8 KECCAK256 SLOAD AND ISZERO PUSH2 0x1AE JUMPI JUMPDEST POP POP DUP2 MLOAD DUP4 DUP2 ADD SWAP1 TIMESTAMP DUP3 MSTORE PREVRANDAO DUP5 DUP3 ADD MSTORE CALLER PUSH1 0x60 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x54 DUP2 MSTORE PUSH1 0x80 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x19B JUMPI DUP5 MSTORE MLOAD SWAP1 KECCAK256 PUSH1 0x64 SWAP1 MOD SWAP5 PUSH1 0xA DUP7 LT PUSH2 0x172 JUMPI JUMPDEST POP SWAP1 DUP5 PUSH2 0x169 PUSH32 0x4194273A0171865880E1D7A0089DCB6CFE51CE239B09ACDE0BF6CC5E071210B0 SWAP6 SWAP7 SWAP4 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH32 0x83ED3BA29C1D52058C877DF3EBD264CF957C42EF7764387349BE0CCF6DF0B63D PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SSTORE MLOAD SWAP1 DUP2 MSTORE LOG1 DUP1 RETURN JUMPDEST SWAP5 PUSH1 0xA DUP2 ADD DUP1 SWAP2 GT PUSH2 0x188 JUMPI SWAP5 POP PUSH2 0x169 PUSH2 0x108 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP6 MSTORE PUSH1 0x11 DUP7 MSTORE PUSH1 0x24 DUP6 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP8 MSTORE PUSH1 0x41 DUP9 MSTORE PUSH1 0x24 DUP8 REVERT JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0x83ED3BA29C1D52058C877DF3EBD264CF957C42EF7764387349BE0CCF6DF0B63C PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD SWAP1 PUSH9 0x10000000000000000 DUP3 LT ISZERO PUSH2 0x242 JUMPI PUSH1 0x1 DUP3 ADD DUP1 DUP3 SSTORE DUP3 LT ISZERO PUSH2 0x22F JUMPI DUP8 MSTORE DUP6 DUP8 KECCAK256 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND DUP5 OR SWAP1 SWAP2 SSTORE SWAP2 DUP7 MSTORE DUP5 MSTORE DUP3 DUP6 KECCAK256 DUP1 SLOAD SWAP1 SWAP2 AND CALLER OR SWAP1 SSTORE CODESIZE DUP1 PUSH2 0xC1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP9 MSTORE PUSH1 0x32 DUP10 MSTORE PUSH1 0x24 DUP9 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP9 MSTORE PUSH1 0x41 DUP10 MSTORE PUSH1 0x24 DUP9 REVERT JUMPDEST DUP5 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 DUP10 ADD DUP8 SWAP1 MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x44657669636520616C7265616479207265676973746572656400000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP1 POP CALLER EQ CODESIZE PUSH2 0xAA JUMP JUMPDEST DUP6 DUP1 REVERT JUMPDEST DUP3 DUP1 REVERT JUMPDEST POP DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x2AA JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x2AA JUMPI CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0x83ED3BA29C1D52058C877DF3EBD264CF957C42EF7764387349BE0CCF6DF0B63C PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP2 DUP2 MLOAD SWAP1 DUP2 SWAP3 DUP5 SLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 SWAP5 ADD SWAP1 DUP2 SWAP7 DUP5 MSTORE DUP5 DUP5 KECCAK256 SWAP1 DUP5 JUMPDEST DUP7 DUP3 DUP3 LT PUSH2 0x38F JUMPI POP POP POP POP DUP5 SWAP1 SUB PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP5 ADD SWAP6 PUSH8 0xFFFFFFFFFFFFFFFF DUP8 GT DUP6 DUP9 LT OR PUSH2 0x37C JUMPI POP DUP6 DUP2 MSTORE DUP3 DUP7 MSTORE SWAP3 MLOAD DUP6 DUP4 ADD DUP2 SWAP1 MSTORE DUP6 SWAP5 SWAP4 DUP6 ADD SWAP4 SWAP3 SWAP1 SWAP2 JUMPDEST DUP3 DUP2 LT PUSH2 0x35C JUMPI POP POP POP POP SUB SWAP1 RETURN JUMPDEST DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 MSTORE DUP7 SWAP6 POP SWAP4 DUP2 ADD SWAP4 SWAP3 DUP2 ADD SWAP3 PUSH1 0x1 ADD PUSH2 0x34D JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x41 SWAP1 MSTORE PUSH1 0x24 DUP3 REVERT JUMPDEST DUP4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 MSTORE SWAP1 SWAP4 ADD SWAP3 PUSH1 0x1 SWAP3 DUP4 ADD SWAP3 ADD PUSH2 0x308 JUMP JUMPDEST POP CALLVALUE PUSH2 0x2AA JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x2AA JUMPI CALLER DUP3 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4DF DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x20 SWAP1 DUP2 MSTORE SWAP2 DUP2 SWAP1 KECCAK256 SLOAD SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE RETURN JUMPDEST POP SWAP2 SWAP1 CALLVALUE PUSH2 0x49F JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x49F JUMPI CALLER DUP2 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4DF DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x20 MSTORE DUP3 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x45D JUMPI CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0x83ED3BA29C1D52058C877DF3EBD264CF957C42EF7764387349BE0CCF6DF0B63D PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 SLOAD DUP4 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH1 0x20 PUSH1 0x64 SWAP3 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x446576696365206E6F7420796574207265676973746572656400000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP CALLVALUE PUSH2 0x2A6 JUMPI DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x2A6 JUMPI CALLER DUP4 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4DF DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x20 SWAP1 DUP2 MSTORE SWAP3 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO ISZERO DUP2 MSTORE RETURN INVALID DUP4 0xED EXTCODESIZE LOG2 SWAP13 SAR MSTORE SDIV DUP13 DUP8 PUSH30 0xF3EBD264CF957C42EF7764387349BE0CCF6DF0B63BA26469706673582212 KECCAK256 MSTORE8 CALLER 0xC4 0xAB SWAP16 MSIZE CALLDATASIZE CALL LOG1 0x5F 0xED JUMP PUSH28 0x818A1CAF98257FE2124E6F585CDCFDD6108CFF64736F6C6343000812 STOP CALLER ","sourceMap":"309:233:14:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;309:233:14;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;309:233:14;;;;;;;;;;395:39:11;;:82;;;;;309:233:14;;;;;;;;;;;;;;;;527:39:11;524:166;;309:233:14;;;;;622:63:9;;;639:15;;309:233:14;;656:16:9;309:233:14;;;;674:10:9;309:233:14;;;;;;622:63:9;;;309:233:14;;;;;;;;;;;;;;;612:74:9;;690:3;309:233:14;;;722:2:9;707:17;;704:82;;309:233:14;796:35:9;;;;868:54;796:35;;;309:233:14;;;;;;;;1166:25:9;309:233:14;;;;;;;796:35:9;309:233:14;;;;;868:54:9;309:233:14;;704:82:9;309:233:14;722:2:9;309:233:14;;;;;;;740:34:9;-1:-1:-1;796:35:9;704:82;;309:233:14;-1:-1:-1;;;309:233:14;;;;;;;;;-1:-1:-1;;;309:233:14;;;;;;;;524:166:11;599:10;309:233:14;;;;1207:16:11;309:233:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;309:233:14;;;;;;;;;;;;;;;;;;;;;599:10:11;309:233:14;;;524:166:11;;;;309:233:14;-1:-1:-1;;;309:233:14;;;;;;;;;-1:-1:-1;;;309:233:14;;;;;;;;;;;-1:-1:-1;;;309:233:14;;;;;;;;;;;;;;;;;;;;;395:82:11;467:10;;;438:39;395:82;;;309:233:14;;;;;;;;;;;;;;;;;;;;;;;;;1224:10:11;309:233:14;;;;1207:16:11;309:233:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;309:233:14;;;;;-1:-1:-1;;309:233:14;;;;;;;;;;;;;-1:-1:-1;309:233:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;309:233:14;;;;;-1:-1:-1;309:233:14;;;;;;;;1207:16:11;309:233:14;;;;-1:-1:-1;;;309:233:14;;;;;;;;;;;-1:-1:-1;;;;;309:233:14;;;;;;;1207:16:11;309:233:14;;;;;;;;;;;;;;;;;;;;1039:10:11;309:233:14;;-1:-1:-1;;;;;;;;;;;309:233:14;;;;;;;;;;;-1:-1:-1;;;;;309:233:14;;;;;;;;;;;;;;;;;;;;;1094:10:9;309:233:14;;-1:-1:-1;;;;;;;;;;;309:233:14;;;;;;-1:-1:-1;;;;;309:233:14;1078:41:9;309:233:14;;1094:10:9;309:233:14;;;;1166:25:9;309:233:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;853:10:11;309:233:14;;-1:-1:-1;;;;;;;;;;;309:233:14;;;;;;;-1:-1:-1;;;;;309:233:14;837:41:11;;309:233:14;;"},"gasEstimates":{"creation":{"codeDepositCost":"266400","executionCost":"313","totalCost":"266713"},"external":{"assignActivatableAddressToSender(address)":"infinite","getActivationCodeOfSender()":"infinite","getDeviceOwner()":"infinite","getRelatedDevices()":"infinite","isSenderRegistered()":"2392"}},"methodIdentifiers":{"assignActivatableAddressToSender(address)":"ec949297","getActivationCodeOfSender()":"58944eb8","getDeviceOwner()":"9b8ae375","getRelatedDevices()":"e0f64efc","isSenderRegistered()":"3aafa388"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"AssignActivatableAddressToSenderReturn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assignee\",\"type\":\"address\"}],\"name\":\"assignActivatableAddressToSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActivationCodeOfSender\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDeviceOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRelatedDevices\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSenderRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SusuwatariLeafWalletFacet.sol\":\"SusuwatariLeafWalletFacet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"contracts/ILeafWalletRegistryActivate.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport \\\"./ILeafWalletRegistryCore.sol\\\";\\r\\n\\r\\ninterface ILeafWalletRegistryActivate is ILeafWalletRegistryCore{\\r\\n    function assignActivatableAddressToSender(address assignee)  external;\\r\\n    function getActivationCodeOfSender() external view returns (uint256);\\r\\n}\",\"keccak256\":\"0x822f13bd8b0d72f4d88a6824ddc6114eb682e6b183aa0f2367ae4cc3a25edcf2\",\"license\":\"MIT\"},\"contracts/ILeafWalletRegistryCore.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\ninterface ILeafWalletRegistryCore {\\r\\n    function isSenderRegistered() external view returns (bool);\\r\\n    function getDeviceOwner() external view returns (address);\\r\\n    function getRelatedDevices() external view returns (address[] memory);\\r\\n}\",\"keccak256\":\"0x3c21ce0ba8cfdd89401a502d15673006dbd41aeee58211c53fc33c2e187adbec\",\"license\":\"MIT\"},\"contracts/LeafWalletRegistryActivate.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport \\\"./ILeafWalletRegistryActivate.sol\\\";\\r\\nimport \\\"./LeafWalletRegistryCore.sol\\\";\\r\\nimport {LeafWalletStorage,StorageHandler} from  \\\"./SusuwatariStorage.sol\\\";\\r\\n\\r\\ncontract LeafWalletRegistryActivate is ILeafWalletRegistryActivate, LeafWalletRegistryCore  {\\r\\n    event AssignActivatableAddressToSenderReturn(uint256);\\r\\n    \\r\\n\\r\\n    function assignActivatableAddressToSender(address assignee) public virtual override{\\r\\n        LeafWalletStorage storage lw = lw();\\r\\n        _assignAddressToSender(assignee);\\r\\n\\r\\n\\r\\n        uint256 activationCode = uint256(keccak256(abi.encodePacked(block.timestamp, block.prevrandao, msg.sender))) % 100;\\r\\n        if(activationCode<10){\\r\\n            activationCode = activationCode+10;\\r\\n        }\\r\\n        lw._deviceActivationCodes[assignee] = activationCode;\\r\\n\\r\\n\\r\\n        emit AssignActivatableAddressToSenderReturn(activationCode);\\r\\n    }\\r\\n\\r\\n    function getActivationCodeOfSender() public view override returns (uint256){\\r\\n        LeafWalletStorage storage lw = lw();\\r\\n        require(lw._deviceOwner[msg.sender] != address(0),\\\"Device not yet registered\\\");\\r\\n        return lw._deviceActivationCodes[msg.sender];\\r\\n    }\\r\\n\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n    \",\"keccak256\":\"0x9199e4fb9795851bfd7c748e5d4b8d4c33d87cf197223c3a554f7fc4ae2ce78b\",\"license\":\"MIT\"},\"contracts/LeafWalletRegistryCore.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport \\\"./ILeafWalletRegistryCore.sol\\\";\\r\\nimport {LeafWalletStorage,StorageHandler} from  \\\"./SusuwatariStorage.sol\\\";\\r\\n\\r\\ncontract LeafWalletRegistryCore is ILeafWalletRegistryCore,StorageHandler {\\r\\n\\r\\n    \\r\\n\\r\\n    function _assignAddressToSender(address assignee) internal{\\r\\n        LeafWalletStorage storage lw = lw();\\r\\n        require(lw._deviceOwner[assignee] == address(0) || lw._deviceOwner[assignee] == msg.sender,\\\"Device already registered\\\");\\r\\n     \\r\\n        if(lw._deviceOwner[assignee] == address(0)){\\r\\n            lw._ownerDevices[msg.sender].push(assignee);\\r\\n            lw._deviceOwner[assignee] = msg.sender;\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    function isSenderRegistered() public view override returns (bool) {\\r\\n        LeafWalletStorage storage lw = lw();\\r\\n        return lw._deviceOwner[msg.sender] != address(0);\\r\\n    }\\r\\n\\r\\n    function getDeviceOwner() public view override returns (address) {\\r\\n        LeafWalletStorage storage lw = lw();\\r\\n        return lw._deviceOwner[msg.sender];\\r\\n    }\\r\\n\\r\\n    function getRelatedDevices() public view override returns (address[] memory) {\\r\\n        LeafWalletStorage storage lw = lw();\\r\\n        return lw._ownerDevices[msg.sender];\\r\\n    }\\r\\n\\r\\n\\r\\n    \\r\\n\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n    \",\"keccak256\":\"0xff10bf2d25fd7de2410411975b7ac4a8bdb2c829a94b91fbed4426a44a65438b\",\"license\":\"MIT\"},\"contracts/SusuwatariLeafWalletFacet.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\nimport \\\"./LeafWalletRegistryActivate.sol\\\";\\r\\nimport {LibDiamond} from \\\"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\\\";\\r\\nimport {SusuwatariStorage} from \\\"./SusuwatariStorage.sol\\\";\\r\\n\\r\\n\\r\\ncontract SusuwatariLeafWalletFacet is LeafWalletRegistryActivate, Context  {\\r\\n    \\r\\n    function assignActivatableAddressToSender(address assignee) public override{\\r\\n        super.assignActivatableAddressToSender(assignee);\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n    \",\"keccak256\":\"0xaf2a804477b973f496e5c0753120bb43fd0847952619d5c0fc62edec86216836\",\"license\":\"MIT\"},\"contracts/SusuwatariStorage.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport {LibDiamond} from \\\"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\\\";\\r\\n\\r\\nbytes32 constant SUSUWATARI_STORAGE_POSITION = keccak256(\\\"susuwatari.contract.storage\\\");\\r\\nbytes32 constant LEAFWALLET_STORAGE_POSITION = keccak256(\\\"leafwallet.contract.storage\\\");\\r\\n\\r\\nstruct OwnableStorage {\\r\\n\\r\\n    address _owner;\\r\\n}\\r\\n\\r\\n\\r\\nstruct LeafWalletStorage {\\r\\n    mapping(address => address) _deviceOwner;\\r\\n    mapping(address => address[]) _ownerDevices;\\r\\n    mapping(address => uint256) _deviceActivationCodes;\\r\\n}\\r\\n\\r\\n\\r\\n    struct Susu {\\r\\n        uint256 tokenId;\\r\\n        string originLocation;\\r\\n        string currentLocation;\\r\\n        string destination;\\r\\n        string message;\\r\\n        address carrier;\\r\\n        uint256 dropCooldownTime;\\r\\n    }\\r\\n    \\r\\n    //slotstate contains: 1. slot array, an element of slotarray has: [susutokenid, dropCooldownTime] 2. maxSlotCount(int) 3.  list of owned susus (nft)\\r\\n    struct SusuwatariStorage {\\r\\n        mapping(address => uint256) maxSlotCount;\\r\\n        address[] susuOwners;\\r\\n        mapping(uint256 => Susu) tokenIdToSusu;\\r\\n        bool isInitialized;\\r\\n        mapping(uint256 => address) baggedSusus; \\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n\\r\\ncontract StorageHandler {\\r\\n    \\r\\n    function susu() internal pure returns (SusuwatariStorage storage cs) {\\r\\n        bytes32 position = SUSUWATARI_STORAGE_POSITION;\\r\\n        assembly {\\r\\n           cs.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function os() internal pure returns (OwnableStorage storage cs) {\\r\\n        bytes32 position = keccak256(\\\"ownable.contract.storage\\\");\\r\\n        assembly {\\r\\n           cs.slot := position\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function ds() internal pure returns (LibDiamond.DiamondStorage storage) {\\r\\n        return LibDiamond.diamondStorage();\\r\\n    }\\r\\n\\r\\n    \\r\\n    function lw() internal pure returns (LeafWalletStorage storage cs) {\\r\\n        bytes32 position = keccak256(\\\"leafwallet.contract.storage\\\");\\r\\n        assembly {\\r\\n           cs.slot := position\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0x63d24fb7415d1311c310f32e8ef03a9d657e7fc8829afbbc342feed9b30b6c48\",\"license\":\"MIT\"},\"hardhat-deploy/solc_0.8/diamond/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0xc00c16bfa30a3fa5f3dc684f7f8ba62c259962b25f647d9588739458989717fc\",\"license\":\"MIT\"},\"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);            \\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress != _facetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(_facetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n        enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }    \\n\\n\\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n        // an immutable function is a function defined directly in a diamond\\n        require(_facetAddress != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\");\\n        } else {\\n            require(_calldata.length > 0, \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\");\\n            if (_init != address(this)) {\\n                enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x2205345e83eb86f5281f159a9215a096cb6d404782619f9b8e9d7a4a46c32a37\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/SusuwatariStorage.sol":{"StorageHandler":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234601357603a908160198239f35b600080fdfe600080fdfea264697066735822122080e0ffbc39a6de7bb91628285e95b84ee4c33dad16a520d64ccd6c35e01f4b8364736f6c63430008120033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x13 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x19 DUP3 CODECOPY RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP1 0xE0 SELFDESTRUCT 0xBC CODECOPY 0xA6 0xDE PUSH28 0xB91628285E95B84EE4C33DAD16A520D64CCD6C35E01F4B8364736F6C PUSH4 0x43000812 STOP CALLER ","sourceMap":"1226:806:15:-:0;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"600080fdfea264697066735822122080e0ffbc39a6de7bb91628285e95b84ee4c33dad16a520d64ccd6c35e01f4b8364736f6c63430008120033","opcodes":"PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP1 0xE0 SELFDESTRUCT 0xBC CODECOPY 0xA6 0xDE PUSH28 0xB91628285E95B84EE4C33DAD16A520D64CCD6C35E01F4B8364736F6C PUSH4 0x43000812 STOP CALLER ","sourceMap":"1226:806:15:-:0;;"},"gasEstimates":{"creation":{"codeDepositCost":"11600","executionCost":"69","totalCost":"11669"},"internal":{"ds()":"infinite","lw()":"infinite","os()":"infinite","susu()":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SusuwatariStorage.sol\":\"StorageHandler\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/SusuwatariStorage.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport {LibDiamond} from \\\"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\\\";\\r\\n\\r\\nbytes32 constant SUSUWATARI_STORAGE_POSITION = keccak256(\\\"susuwatari.contract.storage\\\");\\r\\nbytes32 constant LEAFWALLET_STORAGE_POSITION = keccak256(\\\"leafwallet.contract.storage\\\");\\r\\n\\r\\nstruct OwnableStorage {\\r\\n\\r\\n    address _owner;\\r\\n}\\r\\n\\r\\n\\r\\nstruct LeafWalletStorage {\\r\\n    mapping(address => address) _deviceOwner;\\r\\n    mapping(address => address[]) _ownerDevices;\\r\\n    mapping(address => uint256) _deviceActivationCodes;\\r\\n}\\r\\n\\r\\n\\r\\n    struct Susu {\\r\\n        uint256 tokenId;\\r\\n        string originLocation;\\r\\n        string currentLocation;\\r\\n        string destination;\\r\\n        string message;\\r\\n        address carrier;\\r\\n        uint256 dropCooldownTime;\\r\\n    }\\r\\n    \\r\\n    //slotstate contains: 1. slot array, an element of slotarray has: [susutokenid, dropCooldownTime] 2. maxSlotCount(int) 3.  list of owned susus (nft)\\r\\n    struct SusuwatariStorage {\\r\\n        mapping(address => uint256) maxSlotCount;\\r\\n        address[] susuOwners;\\r\\n        mapping(uint256 => Susu) tokenIdToSusu;\\r\\n        bool isInitialized;\\r\\n        mapping(uint256 => address) baggedSusus; \\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n\\r\\ncontract StorageHandler {\\r\\n    \\r\\n    function susu() internal pure returns (SusuwatariStorage storage cs) {\\r\\n        bytes32 position = SUSUWATARI_STORAGE_POSITION;\\r\\n        assembly {\\r\\n           cs.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function os() internal pure returns (OwnableStorage storage cs) {\\r\\n        bytes32 position = keccak256(\\\"ownable.contract.storage\\\");\\r\\n        assembly {\\r\\n           cs.slot := position\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function ds() internal pure returns (LibDiamond.DiamondStorage storage) {\\r\\n        return LibDiamond.diamondStorage();\\r\\n    }\\r\\n\\r\\n    \\r\\n    function lw() internal pure returns (LeafWalletStorage storage cs) {\\r\\n        bytes32 position = keccak256(\\\"leafwallet.contract.storage\\\");\\r\\n        assembly {\\r\\n           cs.slot := position\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0x63d24fb7415d1311c310f32e8ef03a9d657e7fc8829afbbc342feed9b30b6c48\",\"license\":\"MIT\"},\"hardhat-deploy/solc_0.8/diamond/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0xc00c16bfa30a3fa5f3dc684f7f8ba62c259962b25f647d9588739458989717fc\",\"license\":\"MIT\"},\"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);            \\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress != _facetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(_facetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n        enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }    \\n\\n\\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n        // an immutable function is a function defined directly in a diamond\\n        require(_facetAddress != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\");\\n        } else {\\n            require(_calldata.length > 0, \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\");\\n            if (_init != address(this)) {\\n                enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x2205345e83eb86f5281f159a9215a096cb6d404782619f9b8e9d7a4a46c32a37\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"hardhat-deploy/solc_0.8/diamond/UsingDiamondOwner.sol":{"UsingDiamondOwner":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234601357603a908160198239f35b600080fdfe600080fdfea2646970667358221220aef5f83e3ec250cce4de144865bd662dd26aa6b4afe9c8c92b52bee40c06e61364736f6c63430008120033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x13 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x19 DUP3 CODECOPY RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAE CREATE2 0xF8 RETURNDATACOPY RETURNDATACOPY 0xC2 POP 0xCC 0xE4 0xDE EQ BASEFEE PUSH6 0xBD662DD26AA6 0xB4 0xAF 0xE9 0xC8 0xC9 0x2B MSTORE 0xBE 0xE4 0xC MOD 0xE6 SGT PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"95:247:16:-:0;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"600080fdfea2646970667358221220aef5f83e3ec250cce4de144865bd662dd26aa6b4afe9c8c92b52bee40c06e61364736f6c63430008120033","opcodes":"PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAE CREATE2 0xF8 RETURNDATACOPY RETURNDATACOPY 0xC2 POP 0xCC 0xE4 0xDE EQ BASEFEE PUSH6 0xBD662DD26AA6 0xB4 0xAF 0xE9 0xC8 0xC9 0x2B MSTORE 0xBE 0xE4 0xC MOD 0xE6 SGT PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"95:247:16:-:0;;"},"gasEstimates":{"creation":{"codeDepositCost":"11600","executionCost":"69","totalCost":"11669"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"hardhat-deploy/solc_0.8/diamond/UsingDiamondOwner.sol\":\"UsingDiamondOwner\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"hardhat-deploy/solc_0.8/diamond/UsingDiamondOwner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./libraries/LibDiamond.sol\\\";\\n\\ncontract UsingDiamondOwner {\\n    modifier onlyOwner() {\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\n        require(msg.sender == ds.contractOwner, \\\"Only owner is allowed to perform this action\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x610145c6957708608f3d2c2626dbf3461f2886b0b304c2bdc0c332df981b82f8\",\"license\":\"MIT\"},\"hardhat-deploy/solc_0.8/diamond/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0xc00c16bfa30a3fa5f3dc684f7f8ba62c259962b25f647d9588739458989717fc\",\"license\":\"MIT\"},\"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);            \\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress != _facetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(_facetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n        enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }    \\n\\n\\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n        // an immutable function is a function defined directly in a diamond\\n        require(_facetAddress != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\");\\n        } else {\\n            require(_calldata.length > 0, \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\");\\n            if (_init != address(this)) {\\n                enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x2205345e83eb86f5281f159a9215a096cb6d404782619f9b8e9d7a4a46c32a37\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"hardhat-deploy/solc_0.8/diamond/interfaces/IDiamondCut.sol":{"IDiamondCut":{"abi":[{"anonymous":false,"inputs":[{"components":[{"internalType":"address","name":"facetAddress","type":"address"},{"internalType":"enum IDiamondCut.FacetCutAction","name":"action","type":"uint8"},{"internalType":"bytes4[]","name":"functionSelectors","type":"bytes4[]"}],"indexed":false,"internalType":"struct IDiamondCut.FacetCut[]","name":"_diamondCut","type":"tuple[]"},{"indexed":false,"internalType":"address","name":"_init","type":"address"},{"indexed":false,"internalType":"bytes","name":"_calldata","type":"bytes"}],"name":"DiamondCut","type":"event"},{"inputs":[{"components":[{"internalType":"address","name":"facetAddress","type":"address"},{"internalType":"enum IDiamondCut.FacetCutAction","name":"action","type":"uint8"},{"internalType":"bytes4[]","name":"functionSelectors","type":"bytes4[]"}],"internalType":"struct IDiamondCut.FacetCut[]","name":"_diamondCut","type":"tuple[]"},{"internalType":"address","name":"_init","type":"address"},{"internalType":"bytes","name":"_calldata","type":"bytes"}],"name":"diamondCut","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"diamondCut((address,uint8,bytes4[])[],address,bytes)":{"params":{"_calldata":"A function call, including function selector and arguments                  _calldata is executed with delegatecall on _init","_diamondCut":"Contains the facet addresses and function selectors","_init":"The address of the contract or facet to execute _calldata"}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"diamondCut((address,uint8,bytes4[])[],address,bytes)":"1f931c1c"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondCut.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"indexed\":false,\"internalType\":\"struct IDiamondCut.FacetCut[]\",\"name\":\"_diamondCut\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_init\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"DiamondCut\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondCut.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IDiamondCut.FacetCut[]\",\"name\":\"_diamondCut\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"_init\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"diamondCut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"diamondCut((address,uint8,bytes4[])[],address,bytes)\":{\"params\":{\"_calldata\":\"A function call, including function selector and arguments                  _calldata is executed with delegatecall on _init\",\"_diamondCut\":\"Contains the facet addresses and function selectors\",\"_init\":\"The address of the contract or facet to execute _calldata\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"diamondCut((address,uint8,bytes4[])[],address,bytes)\":{\"notice\":\"Add/replace/remove any number of functions and optionally execute         a function with delegatecall\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"hardhat-deploy/solc_0.8/diamond/interfaces/IDiamondCut.sol\":\"IDiamondCut\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"hardhat-deploy/solc_0.8/diamond/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0xc00c16bfa30a3fa5f3dc684f7f8ba62c259962b25f647d9588739458989717fc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"diamondCut((address,uint8,bytes4[])[],address,bytes)":{"notice":"Add/replace/remove any number of functions and optionally execute         a function with delegatecall"}},"version":1}}},"hardhat-deploy/solc_0.8/diamond/interfaces/IDiamondLoupe.sol":{"IDiamondLoupe":{"abi":[{"inputs":[{"internalType":"bytes4","name":"_functionSelector","type":"bytes4"}],"name":"facetAddress","outputs":[{"internalType":"address","name":"facetAddress_","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"facetAddresses","outputs":[{"internalType":"address[]","name":"facetAddresses_","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_facet","type":"address"}],"name":"facetFunctionSelectors","outputs":[{"internalType":"bytes4[]","name":"facetFunctionSelectors_","type":"bytes4[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"facets","outputs":[{"components":[{"internalType":"address","name":"facetAddress","type":"address"},{"internalType":"bytes4[]","name":"functionSelectors","type":"bytes4[]"}],"internalType":"struct IDiamondLoupe.Facet[]","name":"facets_","type":"tuple[]"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"facetAddress(bytes4)":{"details":"If facet is not found return address(0).","params":{"_functionSelector":"The function selector."},"returns":{"facetAddress_":"The facet address."}},"facetAddresses()":{"returns":{"facetAddresses_":"facetAddresses_"}},"facetFunctionSelectors(address)":{"params":{"_facet":"The facet address."},"returns":{"facetFunctionSelectors_":"facetFunctionSelectors_"}},"facets()":{"returns":{"facets_":"Facet"}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"facetAddress(bytes4)":"cdffacc6","facetAddresses()":"52ef6b2c","facetFunctionSelectors(address)":"adfca15e","facets()":"7a0ed627"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_functionSelector\",\"type\":\"bytes4\"}],\"name\":\"facetAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"facetAddress_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"facetAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"facetAddresses_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_facet\",\"type\":\"address\"}],\"name\":\"facetFunctionSelectors\",\"outputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"facetFunctionSelectors_\",\"type\":\"bytes4[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"facets\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IDiamondLoupe.Facet[]\",\"name\":\"facets_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"facetAddress(bytes4)\":{\"details\":\"If facet is not found return address(0).\",\"params\":{\"_functionSelector\":\"The function selector.\"},\"returns\":{\"facetAddress_\":\"The facet address.\"}},\"facetAddresses()\":{\"returns\":{\"facetAddresses_\":\"facetAddresses_\"}},\"facetFunctionSelectors(address)\":{\"params\":{\"_facet\":\"The facet address.\"},\"returns\":{\"facetFunctionSelectors_\":\"facetFunctionSelectors_\"}},\"facets()\":{\"returns\":{\"facets_\":\"Facet\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"facetAddress(bytes4)\":{\"notice\":\"Gets the facet that supports the given selector.\"},\"facetAddresses()\":{\"notice\":\"Get all the facet addresses used by a diamond.\"},\"facetFunctionSelectors(address)\":{\"notice\":\"Gets all the function selectors supported by a specific facet.\"},\"facets()\":{\"notice\":\"Gets all facet addresses and their four byte function selectors.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"hardhat-deploy/solc_0.8/diamond/interfaces/IDiamondLoupe.sol\":\"IDiamondLoupe\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"hardhat-deploy/solc_0.8/diamond/interfaces/IDiamondLoupe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\n// A loupe is a small magnifying glass used to look at diamonds.\\n// These functions look at diamonds\\ninterface IDiamondLoupe {\\n    /// These functions are expected to be called frequently\\n    /// by tools.\\n\\n    struct Facet {\\n        address facetAddress;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Gets all facet addresses and their four byte function selectors.\\n    /// @return facets_ Facet\\n    function facets() external view returns (Facet[] memory facets_);\\n\\n    /// @notice Gets all the function selectors supported by a specific facet.\\n    /// @param _facet The facet address.\\n    /// @return facetFunctionSelectors_\\n    function facetFunctionSelectors(address _facet) external view returns (bytes4[] memory facetFunctionSelectors_);\\n\\n    /// @notice Get all the facet addresses used by a diamond.\\n    /// @return facetAddresses_\\n    function facetAddresses() external view returns (address[] memory facetAddresses_);\\n\\n    /// @notice Gets the facet that supports the given selector.\\n    /// @dev If facet is not found return address(0).\\n    /// @param _functionSelector The function selector.\\n    /// @return facetAddress_ The facet address.\\n    function facetAddress(bytes4 _functionSelector) external view returns (address facetAddress_);\\n}\\n\",\"keccak256\":\"0x10884024af2c0f7deca0fac4ddf84e76da5dba35b6e02fabeac8ea54c1a5c6f7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"facetAddress(bytes4)":{"notice":"Gets the facet that supports the given selector."},"facetAddresses()":{"notice":"Get all the facet addresses used by a diamond."},"facetFunctionSelectors(address)":{"notice":"Gets all the function selectors supported by a specific facet."},"facets()":{"notice":"Gets all facet addresses and their four byte function selectors."}},"version":1}}},"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol":{"LibDiamond":{"abi":[{"anonymous":false,"inputs":[{"components":[{"internalType":"address","name":"facetAddress","type":"address"},{"internalType":"enum IDiamondCut.FacetCutAction","name":"action","type":"uint8"},{"internalType":"bytes4[]","name":"functionSelectors","type":"bytes4[]"}],"indexed":false,"internalType":"struct IDiamondCut.FacetCut[]","name":"_diamondCut","type":"tuple[]"},{"indexed":false,"internalType":"address","name":"_init","type":"address"},{"indexed":false,"internalType":"bytes","name":"_calldata","type":"bytes"}],"name":"DiamondCut","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea2646970667358221220d907a75c39c496108a6007db2f02a15ef24617a43a6b33eff0a2c079844aed6564736f6c63430008120033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD9 SMOD 0xA7 0x5C CODECOPY 0xC4 SWAP7 LT DUP11 PUSH1 0x7 0xDB 0x2F MUL LOG1 0x5E CALLCODE CHAINID OR LOG4 GASPRICE PUSH12 0x33EFF0A2C079844AED656473 PUSH16 0x6C634300081200330000000000000000 ","sourceMap":"423:10258:19:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"600080fdfea2646970667358221220d907a75c39c496108a6007db2f02a15ef24617a43a6b33eff0a2c079844aed6564736f6c63430008120033","opcodes":"PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD9 SMOD 0xA7 0x5C CODECOPY 0xC4 SWAP7 LT DUP11 PUSH1 0x7 0xDB 0x2F MUL LOG1 0x5E CALLCODE CHAINID OR LOG4 GASPRICE PUSH12 0x33EFF0A2C079844AED656473 PUSH16 0x6C634300081200330000000000000000 ","sourceMap":"423:10258:19:-:0;;"},"gasEstimates":{"creation":{"codeDepositCost":"11600","executionCost":"infinite","totalCost":"infinite"},"internal":{"addFacet(struct LibDiamond.DiamondStorage storage pointer,address)":"infinite","addFunction(struct LibDiamond.DiamondStorage storage pointer,bytes4,uint96,address)":"infinite","addFunctions(address,bytes4[] memory)":"infinite","contractOwner()":"infinite","diamondCut(struct IDiamondCut.FacetCut memory[] memory,address,bytes memory)":"infinite","diamondStorage()":"infinite","enforceHasContractCode(address,string memory)":"infinite","enforceIsContractOwner()":"infinite","initializeDiamondCut(address,bytes memory)":"infinite","removeFunction(struct LibDiamond.DiamondStorage storage pointer,address,bytes4)":"infinite","removeFunctions(address,bytes4[] memory)":"infinite","replaceFunctions(address,bytes4[] memory)":"infinite","setContractOwner(address)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondCut.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"indexed\":false,\"internalType\":\"struct IDiamondCut.FacetCut[]\",\"name\":\"_diamondCut\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_init\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"DiamondCut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\":\"LibDiamond\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"hardhat-deploy/solc_0.8/diamond/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0xc00c16bfa30a3fa5f3dc684f7f8ba62c259962b25f647d9588739458989717fc\",\"license\":\"MIT\"},\"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);            \\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress != _facetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(_facetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n        enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }    \\n\\n\\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n        // an immutable function is a function defined directly in a diamond\\n        require(_facetAddress != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\");\\n        } else {\\n            require(_calldata.length > 0, \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\");\\n            if (_init != address(this)) {\\n                enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x2205345e83eb86f5281f159a9215a096cb6d404782619f9b8e9d7a4a46c32a37\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}